{
	"person": {
		"name": "Jonas Marcello",
		"githubUsername": "anergictcell",
		"imageURL": "https://avatars.githubusercontent.com/u/875703?v=4",
		"bio": "",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Music/sonosBar.py",
					"filename": "sonosBar.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nControl you Sonos system from you Mac Menu Bar\n\"\"\"\n\n# \u003cbitbar.title\u003eSonosBar\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJonas Marcello\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eanergictcell\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eControl you Sonos system from you Mac Menu Bar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/anergictcell/SonosBar/master/resources/SonosBar.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython,SoCo\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/anergictcell/SonosBar/\u003c/bitbar.abouturl\u003e\n\nimport argparse\nimport socket\nimport os\nimport sys\nimport warnings\n\ntry:\n    import soco\n    from soco.music_services import MusicService\n    from soco.data_structures import DidlItem, to_didl_string\nexcept ImportError:\n    print(\"Error\")\n    print(\"---\")\n    print(\"You need to install \u003e\u003esoco\u003c\u003c | href=https://github.com/SoCo/SoCo\")\n    sys.exit(0)\n\ndef parse_ip(ip_string):\n    \"\"\"Parsing the user supplied IP address to use on the local subnet\"\"\"\n    host_ip = socket.gethostbyname(socket.gethostname())\n    subnets = host_ip.split(\".\")\n    sonos_subnets = ip_string.split(\".\")\n    new_ip = subnets[0:(4-len(sonos_subnets))] + sonos_subnets\n    return \".\".join(new_ip)\n\n\ndef parse_cli_arguments():\n    \"\"\"Main function that parses command line arguments\"\"\"\n    parser = argparse.ArgumentParser(description='Control your Sonos')\n\n    player_args = parser.add_mutually_exclusive_group()\n    player_args.add_argument(\n        \"-p\", \"--player\",\n        metavar=\"SPEAKER_NAME\",\n        type=str,\n        # default=\"Living Room\",\n        help=\"The name of the player/zone\")\n\n    player_args.add_argument(\n        \"-i\", \"--ip\",\n        metavar=\"IP_ADDRESS\",\n        type=str,\n        help=\"The IP address of the player/zone\")\n\n    control_args = parser.add_mutually_exclusive_group()\n    control_args.add_argument(\n        \"-l\", \"--playlist\",\n        metavar=\"PLAYLIST_NAME\",\n        type=str,\n        help=\"The name of the playlist to play\")\n\n    control_args.add_argument(\n        \"-r\", \"--radio\",\n        metavar=\"RADIO_STATION\",\n        type=str,\n        help=\"The name of the radio station to play\")\n\n    control_args.add_argument(\n        \"-v\", \"--vol\",\n        metavar=\"VOLUME\",\n        type=int,\n        choices=range(0, 101),\n        help=\"0-100\")\n\n    control_args.add_argument(\n        \"-j\", \"--join\",\n        metavar=\"SPEAKER_NAME\",\n        type=str,\n        help=\"Name of the speaker to join\")\n\n    control_args.add_argument(\n        \"-k\", \"--ipjoin\",\n        metavar=\"SPEAKER_IP\",\n        type=str,\n        help=\"IP of the speaker to join\")\n\n    control_args.add_argument(\n        \"-u\", \"--unjoin\",\n        action='store_const',\n        const=True,\n        help=\"Unjoin the player from all groups\")\n\n    control_args.add_argument(\n        'action',\n        metavar='action',\n        nargs=\"?\",\n        choices=[\"play\", \"pause\", \"next\", \"previous\", \"shuffle\", \"normal\"],\n        help=\"\"\"Action to take if non is set via flags.\n          Can be either: play, pause, next, previous, shuffle, normal\"\"\")\n\n    parser.add_argument(\n        \"-g\", \"--group\",\n        action='store_const',\n        const=True,\n        help=\"Apply the action to the whole group\")\n\n    output = parser.add_mutually_exclusive_group()\n    output.add_argument(\n        \"-o\", \"--verbose\",\n        action='store_const',\n        const=True,\n        help=\"Display feedback about current actions\")\n\n    output.add_argument(\n        \"-b\", \"--bitbar\",\n        action='store_const',\n        const=True,\n        help=\"Display bitbar controls\")\n\n    args = parser.parse_args()\n\n    if args.ip:\n        args.ip = parse_ip(args.ip)\n\n    if args.ipjoin:\n        args.ipjoin = parse_ip(args.ipjoin)\n\n    return args\n\ndef output_for_bitbar(zones):\n    \"\"\"Prints the topology display\"\"\"\n    print(\"ðŸ”ŠSonos\")\n    print(\"---\")\n    for zone in zones:\n        print_zone(zone)\n\ndef print_zone(zone):\n    \"\"\"Prints basic info about the zone and calls functions to\n    print more detailed info\"\"\"\n    print(\"---\")\n    print(\"Zone:\")\n    print(\"{0}: {1}\".format(zone[\"kind\"], zone[\"master\"].player_name))\n    if zone[\"kind\"] == \"P\":\n        print_single_player(zone[\"master\"])\n    else:\n        print_group(zone[\"master\"])\n\ndef print_single_player(player):\n    \"\"\"Controls printing of control elements for a single-player zone\"\"\"\n    print_music_controls(player, \"--\")\n    print_player_controls(player, \"--\")\n    print_top_level_controls(player, \"\")\n\ndef print_group(master):\n    \"\"\"Controls printing of control elements for a multi-player zone\"\"\"\n    print_music_controls(master, \"--\")\n    print_top_level_controls(master, \"\")\n    for player in master.group.members:\n        print(\"âž¤ {0}\".format(player.player_name))\n        print_player_controls(player, \"--\")\n        print(\"--Volume\")\n        print_volume_controls(player, \"--\")\n\ndef create_command(player, *params):\n    \"\"\"Creates the Bitbar specific command\"\"\"\n    string = \"bash={0} param1=-i param2={1}\"\n    i = 3\n    for param in params:\n        string += \" param{0}={1}\".format(i, param)\n        i += 1\n    string += \" terminal=false refresh=true\"\n    return string.format(PATH_TO_SCRIPT, player.ip_address)\n\ndef print_player_controls(player, indent):\n    \"\"\"Prints Player controls for Bitbar\"\"\"\n\n    print(\"{0}Join\".format(indent))\n    for single_player in player.all_zones:\n        if single_player != player:\n            print(\"{0}--{1} | \".format(indent, single_player.player_name) +\n                  create_command(player, \"--ipjoin\", single_player.ip_address)\n                 )\n    print(\"{0}Unjoin | \".format(indent) +\n          create_command(player, \"--unjoin\")\n         )\n\ndef print_music_controls(player, indent):\n    \"\"\"Prints Music controls for Bitbar\"\"\"\n    print(\"{0}Playlists\".format(indent))\n    for playlist in player.get_sonos_playlists():\n        print(\"{0}--{1} | \".format(indent, playlist.title) +\n              create_command(player, \"-gl\", '\"' + playlist.title + '\"')\n             )\n\n    print(\"{0}Radios\".format(indent))\n    for station in player.get_favorite_radio_stations()[\"favorites\"]:\n        print(\"{0}--{1} | \".format(indent, station[\"title\"]) +\n              create_command(player, \"-gr\", '\"' + station[\"uri\"] + '\"')\n            )\n\ndef print_top_level_controls(player, indent):\n    \"\"\"Prints the controls that are displayed on the base level for each\n    player / group\"\"\"\n    playing = player.get_current_transport_info()[\"current_transport_state\"]\n    if playing == \"PLAYING\":\n        print(\"{0}â”œ Pause | \".format(indent) +\n              create_command(player, \"pause\", \"-g\"))\n        print(\"{0}â”œ Next | \".format(indent) +\n              create_command(player, \"next\", \"-g\"))\n    else:\n        print(\"{0}â”œ Play | \".format(indent) +\n              create_command(player, \"play\", \"-g\"))\n\n    print(\"{0}â”” Volume | \".format(indent))\n    print_volume_controls(player, indent)\n\ndef print_volume_controls(player, indent):\n    \"\"\"Prints controls to adjust the volume\"\"\"\n    for vol in range(0, 11):\n        if (vol-1) * 10 \u003c player.volume and vol*10 \u003e= player.volume:\n            # print checkmark\n            print((\"{0}--{1}{2}\").format(indent, u'\\u2713'.encode(\"utf-8\"), vol))\n        else:\n            print(\"{0}--{1} | \".format(indent, vol) +\n                  create_command(player, \"--vol\", vol*10)\n                 )\n\n# soco prints some usage warnings about functions where the output\n# will change in the future\n# Those warnings don't work well with the output for Bitbar\nwarnings.filterwarnings(\"ignore\")\n\nPATH_TO_SCRIPT = os.path.realpath(__file__)\nARGUMENTS = parse_cli_arguments()\nGROUP = ARGUMENTS.group\n\ndef get_player_by_name(name):\n    \"\"\"Returns a SoCo object for the given name (if it exists)\"\"\"\n    for device in soco.discover():\n        if device.player_name == name:\n            return device\n\ndef define_player(ip_address, name):\n    \"\"\"Returning a SoCo object of the chosen player\"\"\"\n    player = None\n    if ip_address:\n        player = soco.SoCo(ip_address)\n    if name:\n        player = get_player_by_name(name)\n\n    if player and GROUP:\n        # Change player to be the coordinator of the group\n        player = player.group.coordinator\n\n    return player\n\ndef find_random_player():\n    \"\"\"Searches the network for Sonos zones and picks one randomly\"\"\"\n    zones = soco.discover()\n\n    if zones:\n        # picking a random player\n        player = next(iter(zones))\n        return player\n\n    return None\n\ndef parse_zone_groups(player):\n    \"\"\"Creates a list of all Zones with attrbute\n    whether they are a group or a single player\"\"\"\n    all_zones = []\n    for group in player.all_groups:\n        if len(group.members) \u003e 1:\n            all_zones.append({\"kind\":\"G\", \"master\":group.coordinator})\n        else:\n            all_zones.append({\"kind\":\"P\", \"master\":group.coordinator})\n    return all_zones\n\n\n\ndef verbose_output(string):\n    \"\"\"Printing the passed commands to stdout\"\"\"\n    if ARGUMENTS.verbose:\n        print(\"{0}: {1}\".format(\n            (\"Group \" if GROUP else \"Player \"), string))\n\ndef group_coordinate(function):\n    \"\"\"Wrapper function to ensure unjoining for single players\"\"\"\n    def inner_function(*arguments):\n        \"\"\"Inner function\"\"\"\n        if GROUP:\n            function(*arguments)\n        else:\n            # First argument always has to be the player SoCo object\n            arguments[0].unjoin()\n            function(*arguments)\n    return inner_function\n\ndef get_songs_from_playlist(player, playlist_name):\n    \"\"\"Returns a list of songs from the given playlist\"\"\"\n    lists = player.get_sonos_playlists()\n    for playlist in lists:\n        if playlist.title == playlist_name:\n            return player.music_library.browse(playlist)\n\n@group_coordinate\ndef play_playlist(player, playlist_name):\n    \"\"\"Replaces the queue with the selected playlist\"\"\"\n    verbose_output(\"Play playlist {0}\".format(playlist_name))\n    songs = get_songs_from_playlist(player, playlist_name)\n    player.clear_queue()\n    for song in songs:\n        player.add_to_queue(song)\n    player.play_from_queue(0)\n\n@group_coordinate\ndef play_radio_station(player, uri):\n    \"\"\"Plays the selected radio station. The URI must be in the\n    format as it is currently returned from soco:\n        x-sonosapi-stream:s25111?sid=254\u0026flags=32\n    \"\"\"\n    verbose_output(\"Switching to radio station {0}\".format(uri))\n    service = MusicService('TuneIn')\n    didl = DidlItem(\n        title=\"DUMMY\", parent_id=\"DUMMY\", item_id=\"DUMMY\", desc=service.desc)\n    meta = to_didl_string(didl)\n    player.avTransport.SetAVTransportURI(\n        [('InstanceID', 0), ('CurrentURI', uri), ('CurrentURIMetaData', meta)])\n    player.play()\n\n@group_coordinate\ndef play(player):\n    \"\"\"Play the selected song\"\"\"\n    verbose_output(\"Play\")\n    player.play()\n\n@group_coordinate\ndef pause(player):\n    \"\"\"Pause the current playback\"\"\"\n    verbose_output(\"Pause\")\n    player.pause()\n\n@group_coordinate\ndef next_track(player):\n    \"\"\"Play the next track\"\"\"\n    verbose_output(\"Next track\")\n    player.next()\n\n@group_coordinate\ndef previous_track(player):\n    \"\"\"Play the previous track\"\"\"\n    verbose_output(\"Previous track\")\n    player.previous()\n\n@group_coordinate\ndef turn_on_shuffle(player):\n    \"\"\"Turn on shuffle\"\"\"\n    verbose_output(\"Shuffle ON\")\n    player.play_mode = \"SHUFFLE_NOREPEAT\"\n\n@group_coordinate\ndef turn_off_shuffle(player):\n    \"\"\"Turn off shuffle\"\"\"\n    verbose_output(\"Shuffle OFF\")\n    player.play_mode = \"NORMAL\"\n\ndef set_volume(player, volume):\n    \"\"\"Sets the volume\"\"\"\n    verbose_output(\"Setting the volume to {0}\".format(volume))\n    player.volume = volume\n\ndef join(source, target):\n    \"\"\"Joining another group\"\"\"\n    if target is None:\n        return invalid_command(\"Target to join is not known\")\n    if GROUP:\n        for single_player in source.group.members:\n            single_player.join(target.group.coordinator)\n    else:\n        source.join(target.group.coordinator)\n\ndef invalid_command(err):\n    \"\"\"Handles errors and prints error messages\"\"\"\n    print(\"ERROR: {0}\".format(err))\n    return\n\ndef main(args):\n    \"\"\"Main function\"\"\"\n    player = define_player(args.ip, args.player)\n\n    if player is None or args.bitbar:\n        player = player or find_random_player()\n        print_bitbar_controls(player)\n        return\n\n    if GROUP:\n        # Change player to the coordinator of the group\n        player = player.group.coordinator\n\n    if args.playlist:\n        return play_playlist(player, args.playlist)\n\n    if args.radio:\n        return play_radio_station(player, args.radio)\n\n    if args.vol is not None:\n        return set_volume(player, args.vol)\n\n    if args.join:\n        verbose_output(\"Joining {0}\".format(args.join))\n        to_join = define_player(None, args.join)\n        return join(player, to_join)\n\n    if args.ipjoin:\n        verbose_output(\"Joining {0}\".format(args.ipjoin))\n        to_join = define_player(args.ipjoin, None)\n        return join(player, to_join)\n\n    if args.unjoin:\n        verbose_output(\"Unjoin\")\n        player.unjoin()\n        return\n\n    if args.action is None:\n        return\n\n    if args.action.lower() == \"play\":\n        play(player)\n        return\n\n    if args.action.lower() == \"pause\":\n        pause(player)\n        return\n\n    if args.action.lower() == \"next\":\n        next_track(player)\n        return\n\n    if args.action.lower() == \"previous\":\n        previous_track(player)\n        return\n\n    if args.action.lower() == \"shuffle\":\n        turn_on_shuffle(player)\n        return\n\n    if args.action.lower() == \"normal\":\n        turn_off_shuffle(player)\n        return\n\ndef print_bitbar_controls(player):\n    \"\"\"Prints the lines used for Bitbar to stdout\"\"\"\n    if player is None:\n        print(\"ðŸ”‡ Sonos\")\n        print(\"---\")\n        print(\"No Sonos Zone present\")\n    else:\n        output_for_bitbar(parse_zone_groups(player))\n\nif __name__ == \"__main__\":\n    main(ARGUMENTS)\n"
				}
			],
			"path": "Music/sonosBar.py",
			"filename": "sonosBar.py",
			"dir": "Music",
			"docsPlugin": "Music/sonosBar.py.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "SonosBar",
			"version": "v1.0",
			"author": "Jonas Marcello",
			"authors": [
				{
					"name": "Jonas Marcello",
					"githubUsername": "anergictcell",
					"imageURL": "https://avatars.githubusercontent.com/u/875703?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Control you Sonos system from you Mac Menu Bar.",
			"imageURL": "https://raw.githubusercontent.com/anergictcell/SonosBar/master/resources/SonosBar.png",
			"dependencies": [
				"python",
				"SoCo"
			],
			"aboutURL": "https://github.com/anergictcell/SonosBar/",
			"lastUpdated": "2021-03-08T15:21:57.646057Z",
			"vars": null
		}
	]
}