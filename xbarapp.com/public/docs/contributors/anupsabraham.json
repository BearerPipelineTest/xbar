{
	"person": {
		"name": "Anup Sam Abraham",
		"githubUsername": "anupsabraham",
		"imageURL": "https://avatars.githubusercontent.com/u/2144142?v=4",
		"bio": "",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Sports/live_cricket.2m.py",
					"filename": "live_cricket.2m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eLive Cricket Scores\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.3\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAnup Sam Abraham\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eanupsabraham\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow live scores of cricket matches happening around the world using Cricinfo api. \u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/xiQTWZ4.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\nimport os\nimport sys\nimport getopt\nimport re\nimport urllib2\nimport json\nfrom datetime import datetime\nfrom time import tzname\n\n\nFAVORITE_TEAMS_FILE = \"/var/tmp/bitbar_cricket.data\"\n\nif len(sys.argv) \u003e 1:\n    opts, args = getopt.getopt(sys.argv[1:], \"i:d:\", [])\n    for opt, arg in opts:\n        if opt == \"-i\":\n            # this is for inserting the team name into our file\n            with open(FAVORITE_TEAMS_FILE, \"a\") as f:\n                f.write(arg+\"\\n\")\n\n        elif opt == \"-d\":\n            # this option is for deleting a team name from the file\n            if os.path.exists(FAVORITE_TEAMS_FILE):\n                with open(FAVORITE_TEAMS_FILE, \"r\") as f:\n                    current_teamnames = [x.strip() for x in f.readlines()]\n                    if arg in current_teamnames:\n                        current_teamnames.remove(arg)\n                with open(FAVORITE_TEAMS_FILE, \"w\") as f:\n                    f.writelines([x+\"\\n\" for x in current_teamnames])\n    exit()\n\nif os.path.exists(FAVORITE_TEAMS_FILE):\n    with open(FAVORITE_TEAMS_FILE, \"r\") as f:\n        favorite_teams = [x.strip() for x in f.readlines()]\nelse:\n    # create an empty file if it doesn't exist\n    open(FAVORITE_TEAMS_FILE, \"a\").close()\n    favorite_teams = []\n\nuntracked_teams = []\nif \"*\" in favorite_teams:\n    track_all_teams = True\nelse:\n    track_all_teams = False\n\nTIME_DELTA = datetime.utcnow() - datetime.now()  # for converting gmt to local time\n\n# fetch the json feed listing all the matches\ncricinfo_base_url = \"http://api.espncricinfo.com\"\nsummary_url = cricinfo_base_url + '/netstorage/summary.json'\nsummary_response = urllib2.urlopen(summary_url)\nsummary_data = json.load(summary_response)\n\n# fetch the url for matches that needs to be shown in the plugin\nmatches = 0\nlive_matches = 0\nlist_links = []\nfor match_number, match in summary_data['matches'].iteritems():\n    if match['team1_name'] not in favorite_teams:\n        untracked_teams.append(match['team1_name'])\n    if match['team2_name'] not in favorite_teams:\n        untracked_teams.append(match['team2_name'])\n    team_names = [match['team1_name'], match['team2_name']]\n    if track_all_teams or (set(favorite_teams) \u0026 set(team_names)):\n        # At least one team in the favorite team list is playing\n        matches += 1\n        if match['live_match'] == \"Y\":\n            live_matches += 1\n        list_links.append(cricinfo_base_url + match['url'])\n\nif matches:\n    print 'üèè' + str(matches) + ' | dropdown=false'\n    print '---'\n    print \"%s/%s matches live\" % (live_matches, matches)\n    print \"---\"\n    for match_html_url in list_links:\n        match_url = match_html_url.split('.html')[0] + '.json'\n        match_data_response = urllib2.urlopen(match_url)\n        match_data = json.load(match_data_response)\n\n        # get team_data\n        teams = {}\n        for loop_counter, team_info in enumerate(match_data['team']):\n            if 'team_id' in team_info:\n                team_id = team_info['team_id']\n            else:\n                team_id = \"TBA\" + str(loop_counter)\n\n            if 'team_short_name' in team_info:\n                team_short_name = team_info['team_short_name']\n            else:\n                team_short_name = \"TBA\"\n            teams[team_id] = {\n                'name': team_short_name,\n                'score': ''\n            }\n\n        if match_data['match']['international_class_card'] == \"Test\":\n            test_match = True\n        elif match_data['match']['general_class_card'] == \"First-class\":\n            test_match = True\n        else:\n            test_match = False\n\n        # get innings data\n        remaining_balls = None\n        required_runrate = None\n        if match_data['innings']:\n            match_started = True\n            for innings in match_data['innings']:\n                if teams[innings['batting_team_id']]['score']:\n                    # if its a test match and this is the second innings\n                    # of the team add '\u0026'' before adding the score\n                    teams[innings['batting_team_id']]['score'] += ' \u0026 '\n                innings_score = innings['runs'] + '/' + innings['wickets'] + ' (' + \\\n                                    innings['overs'] + ' ov)'\n                if innings['live_current'] == '1':\n                    innings_score += '*'\n                teams[innings['batting_team_id']]['score'] += innings_score\n                if innings['live_current'] == '1':\n                    batting_team = teams[innings['batting_team_id']]['name']\n                    lead = innings['lead']\n                    # my guess is that the below two lines should throw error\n                    # for test matches. Lets see\n                    if not test_match:\n                        remaining_balls = match_data['live']['innings']['remaining_balls']\n                        required_runrate = match_data['live']['innings']['required_run_rate']\n                    break\n        else:\n            match_started = False\n\n        # get the scores of batsmen at crease\n        batsmen = []\n        for batsman in match_data['live']['batting']:\n            # get batsman name from team info\n            # That's right. The live batsman name is not in this\n            # dictionary. Have to go through each players of each team\n            # in the match_data to fetch the batsman's name\n            batsman_name = ''\n            for team in match_data['team']:\n                if team['team_id'] == batsman['team_id']:\n                    if 'player' in team:\n                        for player in team['player']:\n                            if player['player_id'] == batsman['player_id']:\n                                batsman_name = player['card_long']\n                                break\n                    elif 'squad' in team:\n                        for player in team['squad']:\n                            if player['player_id'] == batsman['player_id']:\n                                batsman_name = player['card_long']\n                                break\n                    break\n            batsman_score = batsman['runs'] + '(' + batsman['balls_faced'] + ')'\n            if batsman['live_current_name'] == 'striker':\n                batsman_score += '*'\n            batsmen.append(batsman_name + ': ' + batsman_score)\n\n        # get the match status.\n        match_status = match_data['live']['status']\n        if test_match:\n            if 'actual_days' in match_data['match']:\n                status_text = 'Day ' + match_data['match']['actual_days'] + ': '\n            else:\n                status_text = 'Day 0: '\n        else:\n            status_text = ''\n        if 'scheduled' in match_status.lower():\n            # match hasn't started yet. Show the start time of the match in local time\n            gmt = match_data['match']['start_datetime_gmt']\n            local_datetime = datetime.strptime(gmt, '%Y-%m-%d %H:%M:%S') - TIME_DELTA\n            local_time_string = local_datetime.strftime('%I:%M %p')\n            status_text +=  'Starting at: ' + local_time_string + \" (\" + tzname[0] + \")\"\n        elif 'elected to' in match_status.lower():\n            # first innings started. show who won the toss\n            if match_data['match']['toss_choice_team_id'] != \"0\":\n                toss_winner = match_data['match']['toss_choice_team_id']\n            else:\n                toss_winner = match_data['match']['toss_winner_team_id']\n            status_text += teams[toss_winner]['name'] + ' elected to ' + match_data['match']['toss_decision_name'] + ' first'\n        elif 'trail by' in match_status.lower() or 'lead by' in match_status.lower():\n            # batting team is either trailing or leading which means it is\n            # either 2nd or 3rd innings of a test match\n            if int(lead) \u003e= 0:\n                status_text += batting_team + \" lead by \" + lead + \" runs\"\n            else:\n                status_text += batting_team + \" trail by \" + str(abs(int(lead))) + \" runs\"\n        elif 'require another' in match_status.lower():\n            # last innings of the match\n            status_text += batting_team + \" need \" + str(abs(int(lead)) + 1) + \" runs to win\"\n            if remaining_balls and required_runrate:\n                status_text += \" from \" + remaining_balls + \" balls(RRR: \" + required_runrate + \")\"\n        elif 'won by' in match_status.lower():\n            # match is over. show who won the match\n            winner = teams[match_data['match']['winner_team_id']]['name']\n            win_status = re.match(\"^.*(won by (an innings and )?\\d* (runs?|wickets?))( \\(.*\\))?\", match_status)\n            status_text += winner + \" \" + win_status.group(1)\n            if match_data['match']['rain_rule'] == '1':\n                # It can be confusing if the score doesn't look complete\n                # and the match result is decided using something like D/L method\n                status_text += ' (D/L)'\n            # I also wanted to show the Man of the Match info. But can't find it anywhere in the json\n        else:\n            status_text += match_status\n\n        # print teams and score\n        print_params = {\n            'team_name': \" size=14 \",\n            'status_text': \" color=blue \",\n            'batsman_score': \" size=12 \"\n        }\n        if match_started:\n            for team_id, each_team in teams.iteritems():\n                if each_team['score']:\n                    print each_team['name'] + ': ' + each_team['score'] + ' |' + print_params['team_name']\n                else:\n                    print each_team['name'] + ': Yet to bat |' + print_params['team_name']\n        else:\n            match_desc = \"\"\n            for team_data in match_data['team']:\n                if match_desc:\n                    match_desc += \" vs \"\n                if 'team_name' in team_data:\n                    match_desc += team_data['team_name']\n                else:\n                    match_desc += \"TBA\"\n            print match_desc + ' | ' +print_params['team_name']\n\n        print status_text + ' | href=' + match_html_url + print_params['status_text']\n        for batsman in batsmen:\n            print batsman + ' |' + print_params['batsman_score']\n        print '---'\nelse:\n    # no matches are live\n    print 'üèè'\n    print '---'\n    print 'No matches live'\n    print \"---\"\n\nprint \"Favorite Teams | color=green\"\nprint \"--Click on any to remove from favorites\"\nprint \"-----\"\nif favorite_teams:\n    for each_team in favorite_teams:\n        print \"--%s | terminal=false bash=\\\"%s\\\" param1=\\\"-d\\\" param2=\\\"%s\\\" refresh=true\" % (\n            each_team if each_team != \"*\" else \"TRACK ALL TEAMS\",\n            sys.argv[0],\n            each_team\n        )\nelse:\n    print \"--You don't have any favorite teams set\"\n\nprint \"Other Teams | color=red\"\nprint \"--Click on any to add to favorites\"\nprint \"-----\"\nfor each_team in untracked_teams:\n    print \"--%s | terminal=false bash=\\\"%s\\\" param1=\\\"-i\\\" param2=\\\"%s\\\" refresh=true\" % (each_team, sys.argv[0], each_team)\nif not track_all_teams:\n    print \"--TRACK ALL TEAMS | terminal=false bash=\\\"%s\\\" param1=\\\"-i\\\" param2=\\\"*\\\" refresh=true\" % sys.argv[0]\n"
				}
			],
			"path": "Sports/live_cricket.2m.py",
			"filename": "live_cricket.2m.py",
			"dir": "Sports",
			"docsPlugin": "Sports/live_cricket.2m.py.html",
			"docsCategory": "Sports.html",
			"pathSegments": [
				"Sports"
			],
			"categoryPathSegments": [
				{
					"path": "Sports",
					"text": "Sports",
					"isLast": true
				}
			],
			"title": "Live Cricket Scores",
			"version": "v1.3",
			"author": "Anup Sam Abraham",
			"authors": [
				{
					"name": "Anup Sam Abraham",
					"githubUsername": "anupsabraham",
					"imageURL": "https://avatars.githubusercontent.com/u/2144142?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show live scores of cricket matches happening around the world using Cricinfo api. ",
			"imageURL": "http://i.imgur.com/xiQTWZ4.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.270667Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Sports/live_tennis.1m.py",
					"filename": "live_tennis.1m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eLive Tennis Scores\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAnup Sam Abraham\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eanupsabraham\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow live scores for tennis matches using ATP World Tour api\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/5kOPKVv.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\nimport urllib2\nimport json\n\natpworldtour_base_url = \"http://www.atpworldtour.com\"\ninital_scores_url = atpworldtour_base_url + \"/en/-/ajax/Scores/GetInitialScores\"\n\nnbsp = \"\u0026nbsp;\"  # for stripping \u0026nbsp; from data\nteam_keys = ['TeamOne', 'TeamTwo']\nset_key_names = ['SetOne', 'SetTwo', 'SetThree', 'SetFour', 'SetFive']\n\ninital_scores_response = urllib2.urlopen(inital_scores_url)\ninitial_scores_data = json.load(inital_scores_response)\n\ntournaments = initial_scores_data['liveScores']['Tournaments']\n\nfinal_matches_list = []\nfor each_tournament in tournaments:\n    matches = each_tournament['Matches']\n    for match in matches:\n        match_data = {}\n        teams = []\n        for team_name in team_keys:\n            team_data = {}\n            \n            # get the player(s) name for each team\n            player_name = match[team_name]['PlayerOneName']\n            if match[team_name]['PlayerTwoName'].strip():    \n                player_name += \" / \" + match[team_name]['PlayerTwoName']\n            if match[team_name]['TeamStatus'] == \"now-serving\":\n                player_name += \"*\"\n            team_data['player_name'] = player_name\n\n            # get the scores\n            score_string = \"\"\n            set_score_list = []\n            for set_name in set_key_names:\n                if set_name in match[team_name]['Scores'] and match[team_name]['Scores'][set_name] != nbsp:\n                    score_string += match[team_name]['Scores'][set_name]\n                    if match[team_name]['Scores'][set_name]:\n                        set_score_list.append(int(match[team_name]['Scores'][set_name]))\n                    else:\n                        set_score_list.append(0)\n\n                score_string += \" \"\n\n            if \"CurrentScore\" in match[team_name]['Scores'] and match[team_name]['Scores']['CurrentScore'] != nbsp:\n                score_string += match[team_name]['Scores'][\"CurrentScore\"]\n\n            team_data['score'] = score_string\n            team_data['set_score_list'] = set_score_list\n\n            teams.append(team_data)\n        \n        set_lead = [0,0]\n        if not match['MatchInfo'].strip():\n            # if matchinfo is not present in the json response, generate a match info\n            # Calculate the total number of sets won by each team/player\n            for x in xrange(5):\n                if len(teams[0]['set_score_list']) \u003e x:\n                    team1_games = teams[0]['set_score_list'][x]\n                    team2_games = teams[1]['set_score_list'][x]\n                    if x == 4:\n                        # if 5th set, there should be a 2 game difference to be the winner\n                        if team1_games \u003e= 6 and team2_games \u003c 5:\n                            set_lead[0] += 1\n                        elif team2_games \u003e= 6 and team1_games \u003c 5:\n                            set_lead[1] += 1\n                    else:\n                        if (team1_games \u003e= 6 and team2_games \u003c 5) or team1_games \u003e= 7:\n                            set_lead[0] += 1\n                        elif (team2_games \u003e= 6 and team1_games \u003c 5) or team2_games \u003e= 7:\n                            set_lead[1] += 1\n\n            if set_lead[0] \u003e set_lead[1]:\n                match_data['info'] = \"%s leads by %s set%s to %s\" %(teams[0]['player_name'], set_lead[0], \"s\" if set_lead[0] \u003e 1 else \"\", set_lead[1])\n            elif set_lead[1] \u003e set_lead[0]:\n                match_data['info'] = \"%s leads by %s set%s to %s\" %(teams[1]['player_name'], set_lead[1], \"s\" if set_lead[1] \u003e 1 else \"\", set_lead[0])\n            elif not (set_lead[0] \u0026 set_lead[1]):\n                match_data['info'] = \"First set in progress\"\n            else:\n                match_data['info'] = \"Both won %s set%s each\" %(set_lead[0], \"s\" if set_lead[0] \u003e 1 else \"\")\n        else:\n            match_data['info'] = match['MatchInfo']\n            \n        match_data['url'] = atpworldtour_base_url + match['StatsLink']\n        match_data['team_data'] = teams\n        final_matches_list.append(match_data)\n\nif final_matches_list:\n    print \"üéæ%s\" % len(final_matches_list)\n    print \"---\"\n    for match in final_matches_list:\n        print match['info'] + \" | size=15 color=blue href=\" + match['url']\n        for team in match['team_data']:\n            print team['score'] + \" \" + team['player_name'] + \" | size=13\"\n        print \"---\"\n\nelse:\n    print \"üéæ\"\n"
				}
			],
			"path": "Sports/live_tennis.1m.py",
			"filename": "live_tennis.1m.py",
			"dir": "Sports",
			"docsPlugin": "Sports/live_tennis.1m.py.html",
			"docsCategory": "Sports.html",
			"pathSegments": [
				"Sports"
			],
			"categoryPathSegments": [
				{
					"path": "Sports",
					"text": "Sports",
					"isLast": true
				}
			],
			"title": "Live Tennis Scores",
			"version": "v1.0",
			"author": "Anup Sam Abraham",
			"authors": [
				{
					"name": "Anup Sam Abraham",
					"githubUsername": "anupsabraham",
					"imageURL": "https://avatars.githubusercontent.com/u/2144142?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show live scores for tennis matches using ATP World Tour api",
			"imageURL": "http://i.imgur.com/5kOPKVv.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.415529Z",
			"vars": null
		}
	]
}