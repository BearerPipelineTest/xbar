{
	"person": {
		"name": "Axel",
		"githubUsername": "axeloz",
		"imageURL": "https://avatars.githubusercontent.com/u/1597611?v=4",
		"bio": "",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Dev/Vagrant/vagrant.2m.pl",
					"filename": "vagrant.2m.pl",
					"content": "#!/usr/bin/perl\n# \u003cbitbar.title\u003eVagrant\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author.github\u003eaxeloz\u003c/bitbar.author.github\u003e\n# \u003cbitbar.author\u003eAxel\u003c/bitbar.author\u003e\n# \u003cbitbar.desc\u003eVagrant status checker.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eperl,vagrant\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/Yzrcz9k.png\u003c/bitbar.image\u003e\n\nuse strict;\nuse Cwd 'abs_path';\n\nmy @output;\nmy @found;\nmy $machinePath;\nmy $readablePath;\nmy $me = abs_path($0);\nmy $content;\nmy $vagrant;\nmy $running = 0;\nmy $total = 0;\n\n# HACK as $PATH is incorrect when Bitbar run the script\n# Must add /usr/local/bin manually\nmy $path = $ENV{PATH}.':/usr/local/bin';\n\n# This function allows me to run Apple Scripts\nsub osascript($) { system 'osascript', map { ('-e', $_) } split(/\\n/, $_[0]); }\n\n# Locating the Vagrant binary\nforeach $a (split(/:/, $path)) {\n\tif (-x $a.\"/vagrant\") {\n\t\t$vagrant = $a.\"/vagrant\";\n\t\tlast;\n\t}\n}\n\n# If Vagrant could not be found\nif (! defined $vagrant) {\n\tprint \"‚ö†Ô∏è\\n\";\n\tprint \"---\\n\";\n\tprint \"Vagrant binary could not be found in paths. Is it installed?\";\n\texit 1;\n}\n\n# When script is called with arguments\n# $ARGV[0] : the action (up, halt, suspend, resume, ssh)\n# $ARGV[1] : the path of the Vagrant environment\n# $ARGV[2] : the ID of the VM\nif ( ($#ARGV + 1) == 3) {\n\n\tmy $title = \"Vagrant machine #$ARGV[2]\";\n\tmy $description = \"\";\n\tmy $newstatus = \"unknown\";\n\n\t# Running the SSH action\n\tif ($ARGV[0] eq 'ssh') {\n\t\t$ARGV[1] =~ s/\\\\/\\\\\\\\/g; # extra escape; escape from osascript and do script\n\t\t\u0026osascript ('\n\t\t\ttell application \"Terminal\"\n\t\t\t\tif (count of windows) is 0 then reopen\n\t\t\t  activate\n\t\t\t  do script \"cd '.$ARGV[1].' \u0026\u0026 vagrant ssh\"\n\t\t\tend tell\n\t\t');\n\t\t$description = \"You are now connected to your Vagrant machine\";\n\t}\n\telse {\n\t\tif ($ARGV[0] eq \"up\" || $ARGV[0] eq \"resume\") {\n\t\t\t$newstatus = \"running\";\n\t\t}\n\t\telsif  ($ARGV[0] eq \"halt\" || $ARGV[0] eq \"suspend\") {\n\t\t\t$newstatus = \"stopped\";\n\t\t}\n\t\telsif ($ARGV[0] eq \"reload\") {\n\t\t\t$newstatus = \"reloaded\";\n\t\t}\n\n\t\tsystem(\"export PATH=$path \u0026\u0026 cd $ARGV[1] \u0026\u0026 $vagrant $ARGV[0]\");\n\t\t$description = \"Vagrant virtual machine status is now \".$newstatus;\n\t}\n\t\n\t# Checking the result of the action\n\tif ($? eq 0) {\n\t\t\u0026osascript (\n\t\t 'display notification \"'.$description.'\" with title \"'.$title.'\"'\n\t\t);\n\t\texit 0;\n\t}\n\telse {\n\t\t\u0026osascript (\n\t\t 'display notification \"Could not execute operation\" with title \"'.$title.'\"'\n\t\t);\n\t\texit 1;\n\t}\n\t# Not needed, just safer...\n\texit 0\n}\n\n# Getting the list of all Vagrant VMs\n@output = `$vagrant global-status |tail -n +3`;\n\n# Checking whether there is at least one VM\n# TODO: clean this\nforeach $a (@output) {\n\tif ($a =~ \"There are no active\") {\n\t\tprint \"‚ö†Ô∏è\\n\";\n\t\tprint \"---\\n\";\n\t\tprint \"There is no Vagrant VM yet.\";\n\t\texit 1;\t\t\n\t}\n}\n\n\n# Looping in the list\nforeach $a (@output) {\n\t# Triming spaces\n\t$a =~ s/^\\s+|\\s+$//g;\n\t# Removing excessive spaces\n\t$a =~ s/ {1,}/ /g;\n\n\t# Cutting output on first empty line as Vagrant is too verbose\n\tlast if ($a eq '');\n\t\n\t# Counting total\n\t$total ++;\n\n\t# Exploding row on spaces\n\t@found = split / /, $a;\n\n\t$machinePath  = join(\"\\\\ \", @found[4..$#found]);\n\t$readablePath = join(\" \", @found[4..$#found]);\n\n\t# This VM is currently running\n\tif ($found[3] eq 'running') {\n\t\t# Counting the running VMs\n\t\t$running ++;\n\n\t\t$content .= \"‚úÖ Machine #$found[0] is running | size=14 color=green\\n\";\n\t\t$content .= \" $readablePath | size=11 \\n\";\n\t\t$content .= \"  | size=14 color=black \\n\";\n\n\t\t$content .= \"#Ô∏è‚É£ SSH $found[0] | size=12 bash=\\\"$me\\\" param1=ssh param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=false \\n\";\n\t\t$content .= \"üîÑ Reload $found[0] | size=12 bash=\\\"$me\\\" param1=reload param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t\t$content .= \"üîΩ Suspend $found[0] | size=12 bash=\\\"$me\\\" param1=suspend param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t\t$content .= \"‚è¨ Stop $found[0] | size=12 bash=\\\"$me\\\" param1=halt param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t}\n\t# This VM is currently saved\n\telsif ($found[3] eq 'saved' || $found[3] eq 'suspended') {\n\t\t$content .= \"üì¥ Machine #$found[0] is suspended | size=14 color=orange\\n\";\n\t\t$content .= \" $readablePath | size=11 \\n\";\n\t\t$content .= \"  | size=14 color=black \\n\";\n\t\t$content .= \"‚ñ∂Ô∏è Resume $found[0] | size=12 bash=\\\"$me\\\" param1=resume param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t\t$content .= \"‚è¨ Stop $found[0] | size=12 bash=\\\"$me\\\" param1=halt param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t}\n\t# This VM is currently powered off\n\telsif ($found[3] eq 'poweroff' || $found[3] eq 'aborted' || ($found[3] eq 'not' \u0026\u0026 $found[4] eq \"running\")) {\n\t\tif ($found[3] eq 'not' \u0026\u0026 $found[4] eq \"running\") {\n\t\t\t$machinePath  = join(\"\\\\ \", @found[5..$#found]);\n\t\t\t$readablePath = join(\" \", @found[5..$#found]);\n\t\t}\n\t\t$content .= \"üö´ Machine #$found[0] is stopped | size=14 color=red\\n\";\n\t\t$content .= \" $readablePath | size=11 \\n\";\n\t\t$content .= \"  | size=14 color=black \\n\";\n\t\t$content .= \"‚ñ∂Ô∏è Start $found[0] | size=12 bash=\\\"$me\\\" param1=up param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t}\n\t# This VM is in an unknown state\n\telse {\n\t\t$content .= \"‚ùì Machine #$found[0] is \".$found[3].\" | size=14 color=red\\n\";\n\t\t$content .= \" $machinePath | size=11 \\n\";\n\t\t$content .= \"  | size=14 color=black \\n\";\n\t\t$content .= \"This is an unknown state\\n\";\n\t}\n\n\t# Adding the terminal separator\n\t$content .= \"---\\n\";\n}\n\n# Adding the menu title with the number of running VMs\nprint \"V [$running/$total]\\n\";\nprint \"---\\n\";\nprint $content unless !defined $content;\nexit 0;\n"
				}
			],
			"path": "Dev/Vagrant/vagrant.2m.pl",
			"filename": "vagrant.2m.pl",
			"dir": "Dev/Vagrant",
			"docsPlugin": "Dev/Vagrant/vagrant.2m.pl.html",
			"docsCategory": "Dev/Vagrant.html",
			"pathSegments": [
				"Dev",
				"Vagrant"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Vagrant",
					"text": "Vagrant",
					"isLast": true
				}
			],
			"title": "Vagrant",
			"version": "v1.0",
			"author": "Axel",
			"authors": [
				{
					"name": "Axel",
					"githubUsername": "axeloz",
					"imageURL": "https://avatars.githubusercontent.com/u/1597611?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Vagrant status checker.",
			"imageURL": "https://i.imgur.com/Yzrcz9k.png",
			"dependencies": [
				"perl",
				"vagrant"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.632207Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Email/gmail-checker-improved.1m.pl",
					"filename": "gmail-checker-improved.1m.pl",
					"content": "#!/usr/bin/perl -w\n# \u003cbitbar.title\u003eGmail Checker Improved\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author.github\u003eaxeloz\u003c/bitbar.author.github\u003e\n# \u003cbitbar.author\u003eAxel\u003c/bitbar.author\u003e\n# \u003cbitbar.desc\u003eGmail unread emails checker.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eperl,gmail\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/gYYJB7U.png\u003c/bitbar.image\u003e\n\nuse strict;\nuse LWP::Simple;\nuse LWP::UserAgent;\nuse Mozilla::CA;\nuse XML::Simple;\nuse Encode;\nuse POSIX;\n\nmy $url = 'https://mail.google.com/mail/feed/atom';\nmy $user = '\u003cusername\u003e';\nmy $password = '\u003cpassword\u003e';\nmy $output;\n\nmy $ua = LWP::UserAgent-\u003enew;\n$ua-\u003ecredentials('mail.google.com:443', 'mail.google.com', $user, $password);\n\nmy $content = $ua-\u003eget($url);\ndie \"Couldn't get $url\" unless defined $content;\n\nsub clevercut {\n\tmy ($txt, $max) = @_;\n\t\n\tif (length($txt) \u003e $max) {\n\t\treturn (substr $txt, 0, $max ).' [...]';\n\t}\n\treturn $txt;\n}\n\n\nif ($content-\u003estatus_line eq '200 OK') {\n\tmy $xs = XML::Simple-\u003enew();\n\tmy $ref = XMLin($content-\u003econtent, ForceArray=\u003e'entry');\n\n\tif ($ref-\u003e{fullcount}-\u003e[0] \u003e 0) {\n\t\t$output .= \"üì¨ \".$ref-\u003e{fullcount}-\u003e[0].\"\\n\";\n\t\t$output .= \"---\\n\";\n\t\t\n\t\tif ($ref-\u003e{fullcount}-\u003e[0] == 1) {\n\t\t\t$output .= \"You have 1 new message | size=16 \\n\";\n\t\t}\n\t\telse {\n\t\t\t$output .= \"You have \".$ref-\u003e{fullcount}-\u003e[0].\" new messages | size=16 \\n\";\n\t\t}\n\t\t$output .= \"  | size=14 color=black \\n\";\n\t\t\n\t\tforeach my $email (@{ $ref-\u003e{entry} }) {\n\t\t\t$output .= \"¬ª \".clevercut(encode(\"utf8\", $email-\u003e{title}-\u003e[0]), 30).\" | href=\".$email-\u003e{link}-\u003e[0]-\u003e{href}.\"\\n\";\n\t\t}\n\t\t\n\t}\n\telse {\n\t\t$output .= \"üì™\\n\";\n\t\t$output .= \"---\\n\";\n\t\t$output .= \"No new message | size=16 \\n\";\n\t}\n}\n$output .= \"---\\n\";\n$output .= \"‚û§ Open Mailbox |href=https://www.gmail.com\\n\";\nprint $output.\"\\n\";\n"
				}
			],
			"path": "Email/gmail-checker-improved.1m.pl",
			"filename": "gmail-checker-improved.1m.pl",
			"dir": "Email",
			"docsPlugin": "Email/gmail-checker-improved.1m.pl.html",
			"docsCategory": "Email.html",
			"pathSegments": [
				"Email"
			],
			"categoryPathSegments": [
				{
					"path": "Email",
					"text": "Email",
					"isLast": true
				}
			],
			"title": "Gmail Checker Improved",
			"version": "v1.0",
			"author": "Axel",
			"authors": [
				{
					"name": "Axel",
					"githubUsername": "axeloz",
					"imageURL": "https://avatars.githubusercontent.com/u/1597611?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Gmail unread emails checker.",
			"imageURL": "https://i.imgur.com/gYYJB7U.png",
			"dependencies": [
				"perl",
				"gmail"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:52.824909Z",
			"vars": null
		}
	]
}