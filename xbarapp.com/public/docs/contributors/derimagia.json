{
	"person": {
		"name": "Dave Wikoff",
		"githubUsername": "derimagia",
		"imageURL": "https://avatars.githubusercontent.com/u/999489?v=4",
		"bio": "",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Dev/pantheon-list-sites.1h.php",
					"filename": "pantheon-list-sites.1h.php",
					"content": "#!/usr/bin/php\n\u003c?php\n\n// \u003cbitbar.title\u003ePantheon - List Sites\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eDave Wikoff\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003ederimagia\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eList and manage all of your sites you are on in Pantheon.\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003ephp, terminus\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.image\u003ehttps://i.imgur.com/VYBizXY.png\u003c/bitbar.image\u003e\n// \u003cbitbar.abouturl\u003ehttps://github.com/derimagia/pantheon-bitbar\u003c/bitbar.abouturl\u003e\n\ndefine('TERMINUS_PATH', '/usr/local/bin/terminus');\ndefine('CONFIG_PATH', '/tmp/pantheon-list-sites-config.json');\ndefine('DEBUG_MODE', false);\n\n$php = PHP_BINARY;\n$script = escapeshellarg($argv[0]);\n$directory = dirname(__FILE__);\n$html_filename = pathinfo(__FILE__, PATHINFO_FILENAME) . '.dynamic.html';\n$html_filepath = $directory . '/' . $html_filename;\n$config = get_config();\n$env_id = $config-\u003eenv_id ? $config-\u003eenv_id : 'dev';\n\nif (!empty($argv[1]) \u0026\u0026 function_exists($argv[1])) {\n  $args = $argv;\n  // Shift the first 2 arguments\n  array_shift($args);\n  array_shift($args);\n  call_user_func_array($argv[1], $args);\n  exit(0);\n}\n\n$sites = terminus(\"sites list --cached\");\n\nif (!is_array($sites)) {\n  echo 'Could not get site list. Did you auth using Terminus?';\n  exit();\n}\n\n$symbolMap = [\n  'dev' =\u003e 'ðŸ”µ',\n  'test' =\u003e 'âš«',\n  'live' =\u003e 'ðŸ”´',\n];\n\n$symbol = isset($symbolMap[$env_id]) ? $symbolMap[$env_id] : '';\n\n$items = array(\n  ['title'  =\u003e \"Environment: $env_id -- $symbol\", 'bash' =\u003e $php, 'param1' =\u003e $script, 'param2' =\u003e 'pantheon_switch_environment', 'param3' =\u003e $env_id, 'terminal' =\u003e 'false', 'refresh' =\u003e 'true'],\n  '---',\n);\n\nforeach ($sites as $site) {\n  $items[] = ['title' =\u003e $site-\u003ename, 'bash' =\u003e $php, 'param1' =\u003e $script, 'param2' =\u003e 'pantheon_open_site', 'param3' =\u003e $site-\u003ename, 'param4' =\u003e $env_id, 'terminal' =\u003e 'false'];\n  if ($site-\u003eframework === 'drupal') {\n    $items[] = ['title' =\u003e \"$site-\u003ename -- ðŸ”’\", 'alternate' =\u003e 'true', 'bash' =\u003e $php, 'param1' =\u003e $script, 'param2' =\u003e 'drush_user_login', 'param3' =\u003e $site-\u003ename, 'param4' =\u003e $env_id, 'terminal' =\u003e 'true'];\n  }\n  $items[] = ['title' =\u003e 'â”” Pantheon Dashboard -- âš¡', 'bash' =\u003e $php, 'param1' =\u003e $script, 'param2' =\u003e 'pantheon_open_dashboard', 'param3' =\u003e $site-\u003ename, 'param4' =\u003e $env_id, 'terminal' =\u003e 'true'];\n  $items[] = '---';\n}\n\necho \"âš¡\\n\";\necho \"---\\n\";\n\nforeach ($items as $item) {\n  if (is_array($item)) {\n    $parts = [];\n    foreach ($item as $param =\u003e $value) {\n      $parts[] = $param . '=\"' . $value . '\"';\n    }\n    $item = $item['title'] . ' | ' . implode(' ', $parts);\n  }\n\n  echo $item . \"\\n\";\n}\nexit(0);\n\n/**\n * Open the dashboard for a site\n */\nfunction pantheon_open_dashboard($site_id) {\n  return browser_open(terminus(\"site dashboard --print\", $site_id));\n}\n\n/**\n * Login to the site as User 1 for Drupal\n */\nfunction drush_user_login($site_id, $env_id) {\n  $login_url = drush($site_id, $env_id, \"user-login 1\");\n  return browser_open($login_url);\n}\n\n/**\n * Switch the environment\n */\nfunction pantheon_switch_environment($current_env_id) {\n  global $script, $env_id, $config;\n\n  $environments = ['dev', 'test', 'live'];\n\n  foreach ($environments as $env) {\n    if ($env == $current_env_id) {\n      break;\n    }\n  }\n\n  $next_env = current($environments) ? current($environments) : 'dev';\n\n  $config-\u003eenv_id = $next_env;\n  save_config($config);\n}\n\n/**\n * Returns the domain for a pantheon site.\n */\nfunction pantheon_open_site($site_id, $env_id) {\n  $alias = drush_get_alias($site_id, $env_id);\n\n  $url = sprintf('%s://%s', 'https', $alias['uri']);\n\n  return browser_open($url);\n}\n\n/**\n * Gets a Drush Alias for a Site ID / Env ID\n *\n * @return bool|array\n */\nfunction drush_get_alias($site_id, $env_id) {\n  $phpcode = terminus('sites aliases --print', NULL, NULL, FALSE);\n  /* @var $aliases array[] */\n  eval($phpcode);\n\n  if (empty($aliases[$site_id . '.' . $env_id])) {\n    echo 'Invalid Alias';\n    exit(1);\n  }\n\n  return $aliases[$site_id . '.' . $env_id];\n}\n\n/**\n * Get a list of Pantheon Environments\n */\nfunction pantheon_get_envs($site_id) {\n  return terminus('site environments', $site_id);\n}\n\n/**\n * Opens a URL in the browser\n */\nfunction browser_open($url) {\n  passthru(\"open $url\", $return_var);\n  return $return_var;\n}\n\n/**\n * Run a terminus command\n * @return object\n */\nfunction terminus($command, $site_id = null, $env_id = null, $json = TRUE) {\n  $extras = ' --yes';\n  if (!empty($json)) $extras .= ' --format=json';\n  if (!empty($site_id)) $extras .= ' --site=' . $site_id;\n  if (!empty($env_id)) $extras .= ' --env=' . $env_id;\n\n  $command = TERMINUS_PATH . \" {$command}{$extras}\";\n\n  $output = passthrough_return($command);\n  return $json ? json_decode($output) : $output;\n}\n\n/**\n * We need to manually call drush because we need to add custom SSH options that terminus doesn't support.\n *\n * @return bool\n */\nfunction drush($site_id, $env_id, $drush_command) {\n  $alias = drush_get_alias($site_id, $env_id);\n  $remote_host = $alias['remote-host'];\n  $remote_user = $alias['remote-user'];\n  $ssh_options = $alias['ssh-options'] . ' -o \"StrictHostKeyChecking=no\" -o \"UserKnownHostsFile=/dev/null\"';\n\n  $command = escapeshellarg('drush ' . $drush_command);\n  $command = 'ssh -T ' . $remote_user . '@' . $remote_host . ' ' . $ssh_options . ' ' . $command;\n\n  return passthrough_return($command);\n}\n\n/**\n * Pass's the command through and returns it\n */\nfunction passthrough_return($command) {\n  ob_start();\n\n  if (!DEBUG_MODE) {\n    $command = $command . ' 2\u003e/dev/null';\n  }\n\n  passthru($command);\n  $output = ob_get_clean();\n\n  if (DEBUG_MODE) {\n    echo \"----- DEBUG [$command] -----\\n\";\n    echo \"OUTPUT:\\n\";\n    var_dump($output);\n    echo \"\\n\";\n  }\n\n  return $output;\n}\n\n/**\n * Gets the config for this plugin\n */\nfunction get_config() {\n  if (file_exists(CONFIG_PATH)) {\n    $config = json_decode(file_get_contents(CONFIG_PATH));\n  }\n  return !empty($config) ? $config : new stdClass();\n}\n\n/**\n * Saves the config for this plugin\n */\nfunction save_config($config) {\n  return file_put_contents(CONFIG_PATH, json_encode($config));\n}\n"
				}
			],
			"path": "Dev/pantheon-list-sites.1h.php",
			"filename": "pantheon-list-sites.1h.php",
			"dir": "Dev",
			"docsPlugin": "Dev/pantheon-list-sites.1h.php.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Pantheon - List Sites",
			"version": "v1.0",
			"author": "Dave Wikoff",
			"authors": [
				{
					"name": "Dave Wikoff",
					"githubUsername": "derimagia",
					"imageURL": "https://avatars.githubusercontent.com/u/999489?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "List and manage all of your sites you are on in Pantheon.",
			"imageURL": "https://i.imgur.com/VYBizXY.png",
			"dependencies": [
				"php",
				"terminus"
			],
			"aboutURL": "https://github.com/derimagia/pantheon-bitbar",
			"lastUpdated": "2021-03-08T15:21:51.89923Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Tutorial/is_darkmode.sh",
					"filename": "is_darkmode.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eIs Dark Mode?\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDave Wikoff\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ederimagia\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eExample script showing how to let your scripts determine whether OSX is in Dark Mode so you can adjust appearance. Must restart Bitbar after changing setting.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/2ark3Bq.png\u003c/bitbar.image\u003e\nBitBarDarkMode=${BitBarDarkMode}\n\nif [ \"$BitBarDarkMode\" ]; then\n  # OSX has Dark Mode enabled.\n  echo \"Dark | color=white\"\nelse\n  # OSX does not have Dark Mode\n  echo \"Light | color=black\"\nfi\n"
				}
			],
			"path": "Dev/Tutorial/is_darkmode.sh",
			"filename": "is_darkmode.sh",
			"dir": "Dev/Tutorial",
			"docsPlugin": "Dev/Tutorial/is_darkmode.sh.html",
			"docsCategory": "Dev/Tutorial.html",
			"pathSegments": [
				"Dev",
				"Tutorial"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Tutorial",
					"text": "Tutorial",
					"isLast": true
				}
			],
			"title": "Is Dark Mode?",
			"version": "v1.0",
			"author": "Dave Wikoff",
			"authors": [
				{
					"name": "Dave Wikoff",
					"githubUsername": "derimagia",
					"imageURL": "https://avatars.githubusercontent.com/u/999489?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Example script showing how to let your scripts determine whether OSX is in Dark Mode so you can adjust appearance. Must restart Bitbar after changing setting.",
			"imageURL": "http://i.imgur.com/2ark3Bq.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.499365Z",
			"vars": null
		}
	]
}