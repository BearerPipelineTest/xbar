{
	"person": {
		"name": "Eric Ripa",
		"githubUsername": "eripa",
		"imageURL": "https://avatars.githubusercontent.com/u/1429673?v=4",
		"bio": "",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "System/Battery/battery-status.20s.py",
					"filename": "battery-status.20s.py",
					"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 /usr/local/bin/python3\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eBattery remaining (Python)\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Ripa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeripa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow battery charge percentage and time remaining\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/P6aNey5.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nfrom __future__ import print_function\nimport re\nimport sys\nimport subprocess\n\ndef parse_pmset():\n    output = subprocess.check_output([\"/usr/bin/pmset\", \"-g\", \"batt\"])\n    output = output.decode(\"utf-8\").split('\\n')\n    regex = re.compile(r'^.*\\s(?P\u003ccharge\u003e\\d+%);\\s((?P\u003cstatus\u003edischarging|'\n                       r'charging|finishing charge|charged);\\s(?P\u003cremain\u003e\\(no estimate\\)|\\d+:\\d+) '\n                       r'(remaining )?present|AC attached; not charging present): true$')\n\n    battery = {\n        \"charge\": \"unknown\",\n        \"status\": \"unknown\",\n        \"remaining\": \"unknown\",\n    }\n\n    battery_match = regex.match(output[1])\n    if not battery_match:\n        return battery\n\n    battery[\"charge\"] = battery_match.group(\"charge\")\n    battery[\"status\"] = battery_match.group(\"status\")\n    battery[\"remaining\"] = battery_match.group(\"remain\")\n    if battery[\"remaining\"] == \"(no estimate)\":\n        battery[\"remaining\"] = \"calculating..\"\n    if battery[\"remaining\"] == \"0:00\" and battery[\"status\"] == \"charged\":\n        battery[\"remaining\"] = \"âˆž\"\n    return battery\n\ndef main():\n    battery = parse_pmset()\n    refresh_interval = sys.argv[0].split('.')[1]\n    print(\"{}| size=12\".format(battery[\"charge\"]))\n    print(\"---\")\n    print(\"Status: {}\".format(battery[\"status\"]))\n    print(\"Remaining: {}\".format(battery[\"remaining\"]))\n    print(\"Refresh (current interval: {}) | refresh=true\".format(refresh_interval))\n\nif __name__ == '__main__':\n    main()\n"
				}
			],
			"path": "System/Battery/battery-status.20s.py",
			"filename": "battery-status.20s.py",
			"dir": "System/Battery",
			"docsPlugin": "System/Battery/battery-status.20s.py.html",
			"docsCategory": "System/Battery.html",
			"pathSegments": [
				"System",
				"Battery"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": false
				},
				{
					"path": "System/Battery",
					"text": "Battery",
					"isLast": true
				}
			],
			"title": "Battery remaining (Python)",
			"version": "v1.0.0",
			"author": "Eric Ripa",
			"authors": [
				{
					"name": "Eric Ripa",
					"githubUsername": "eripa",
					"imageURL": "https://avatars.githubusercontent.com/u/1429673?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show battery charge percentage and time remaining",
			"imageURL": "http://i.imgur.com/P6aNey5.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.707844Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Battery/watt-meter.20s.py",
					"filename": "watt-meter.20s.py",
					"content": "#!/usr/local/bin/python3\n\n# \u003cbitbar.title\u003eWatt Meter\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Ripa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeripa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow current watt drain, tries to be smart and highlight high power usage\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/blj2KCP.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython3\u003c/bitbar.dependencies\u003e\n\nfrom plistlib import loads\nimport sys\nimport subprocess\n\n# Currently only rough guestimates. Only somewhat tested number on MacBook Air.abs\n# Feel free to update/tweak etc..\nIMPACT = {\n    2: {\n        \"MacBook Air\": {\n            \"high\": 20,\n            \"low\": 10\n        },\n        \"MacBook Pro\": {\n            \"high\": 50,\n            \"low\": 20\n        }\n    },\n    4: {\n        \"MacBook Pro\": {\n            \"high\": 70,\n            \"low\": 30\n        }\n    },\n    6: {\n        \"MacBook Pro\": {\n            \"high\": 80,\n            \"low\": 30\n        }\n    }\n}\n\ndef parse_system_profiler():\n    output = subprocess.check_output([\"/usr/sbin/system_profiler\", \\\n                                     \"-xml\", \"SPPowerDataType\", \"SPHardwareDataType\"])\n    plist = loads(output)\n    spbattery_info = plist[0]['_items'][0]\n\n    machine = {\n        \"current_amperage\": int(spbattery_info['sppower_current_amperage']),\n        \"current_voltage\": int(spbattery_info['sppower_current_voltage']),\n        \"current_watt\": abs(int(spbattery_info['sppower_current_voltage']) * \\\n            int(spbattery_info['sppower_current_amperage'])/1000/1000),\n        \"model\": plist[1]['_items'][0]['machine_name'],\n        \"cores\": plist[1]['_items'][0]['number_processors'],\n    }\n    return machine\n\ndef get_impact(machine):\n    model = machine['model']\n    cores = machine['cores']\n    watt = machine['current_watt']\n    low = IMPACT[cores][model]['low']\n    high = IMPACT[cores][model]['high']\n    if watt \u003c= low:\n        return \"low\"\n    if watt \u003e= high:\n        return \"high\"\n    return \"mid\"\n\ndef main():\n    machine = parse_system_profiler()\n    impact = get_impact(machine)\n    color = \"gray\"\n    if impact == \"low\":\n        color = \"green\"\n    if impact == \"high\":\n        color = \"red\"\n    refresh_interval = sys.argv[0].split('.')[2]\n    print(\"%.1fW | color=%s\" % (machine['current_watt'], color))\n    print(\"---\")\n    print(\"Refresh (current interval: %s) | refresh=true\" % refresh_interval)\n\nif __name__ == '__main__':\n    main()\n"
				}
			],
			"path": "System/Battery/watt-meter.20s.py",
			"filename": "watt-meter.20s.py",
			"dir": "System/Battery",
			"docsPlugin": "System/Battery/watt-meter.20s.py.html",
			"docsCategory": "System/Battery.html",
			"pathSegments": [
				"System",
				"Battery"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": false
				},
				{
					"path": "System/Battery",
					"text": "Battery",
					"isLast": true
				}
			],
			"title": "Watt Meter",
			"version": "v1.0.0",
			"author": "Eric Ripa",
			"authors": [
				{
					"name": "Eric Ripa",
					"githubUsername": "eripa",
					"imageURL": "https://avatars.githubusercontent.com/u/1429673?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show current watt drain, tries to be smart and highlight high power usage",
			"imageURL": "http://i.imgur.com/blj2KCP.png",
			"dependencies": [
				"python3"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.069559Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/active_gpu.1m.py",
					"filename": "active_gpu.1m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eActive GPU\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Ripa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeripa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays an image based on the active GPU in multi-GPU machines, such as the MacBook Pro\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/v2MuPOi.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\nfrom __future__ import print_function\nimport subprocess\nimport plistlib\n\n# Base64 encoded icon for displaying the built-in GPU\nBUILTIN_GPU_ICON = ('iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJ'\n                    'QAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD'\n                    '0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1'\n                    'sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAg'\n                    'ICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0ia'\n                    'HR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj'\n                    '4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkR'\n                    'GPgo8L3g6eG1wbWV0YT4KTMInWQAAA3JJREFUWAntlsmKFEEQhtt9X8cVlZHxKvgQend5HG+efAof'\n                    'QRS9ztw9DvgAIigqMrjv6/dV1+9kTVdXV40gDPjD3xkVGRkZERlZXaPRf3RXYFP3dOfsrLW/Oldvl'\n                    'MlZWXblsZfJn1MMNqN/P2WuU72egLbi8Tu8CV9Anz0efTka5FF4HcYWsR9cMBRJ4hgLv8Ft0CCi/4'\n                    'HsnIhu/NTjdz0BpVmf4v85bAsoRxnbHqGMTYZmoL10o9NjF5Vci9UQn094im3vwLK4dNhH3ofRHXg'\n                    'CfoXx48bb4TN4FQ5u7DhibS/sxMoj8hYtwC3QIOJH2Tl76xH06JQ/w16Ioy5jN9CxVVmC89DMrYwB'\n                    'tEG/VspXw2N4Eb6D8YU4DDa7lXDUiTgCDcQghtA1c1Doq/RdKcsfJ9vgeyYw2xyNWe6BizAvRucN0'\n                    'DFQ/gCtzNtaqQ8rXfqup1aHZK8mDt3Il94teAMuwHvwJLQfhFnvgG5iUmGePS6DFwbg2vvwHNSnvt'\n                    '3D5ET2rhyNVau/ZuEb2M29LQZ9FrppEriC/ADaV74IdZgqKVsdbYTPrp2vZX2qW4Hu1YCGbVBvD0k'\n                    '38pZkQ8QKVsmKtAXkXJBgv9SK+HV0roFk3FDy4ObSDFyUhW4uluAp6LFZ9l31uLuWPSJtRAKOj/h2'\n                    'nMC0CiWIOFm70P74CD1WbXRejiaaHkJsIL4byjzMqpB2yUjZIxL2h81qD1kVL4Kj1VJ2TXrINaWPU'\n                    'maqiWkV8qgsdcqd89ZZYAVMKDbOJfuyOtFnr/h1nECMygk38XvGT4i8M14hG2RuxSLyGeiRaZ9eQ6'\n                    'ywn19tLsGse13NjEbHGe0xK2cCDUwoGrPjBxcegm68DHV2Fx6Aa6uDqoJ+rdJl6DW/AK2UibVWBn0'\n                    'nrJzH5GggYg6+gToeQitzGAp9lb4rZfnjZBtyVM4lIHUvoVfc90yCQpxAesmmd03pr5RbF04oOxT2'\n                    'lu8ecRAm2EpR/Ng3Vkb4QjSoXujTQ22OvOK34bQPND9tr8FPcBCGBpSKOJ6Hjh5d/ES2Qg/rOYY/t'\n                    '1O5E9N6aNoiN3KNfZAbZPOrT1DeIq/2MowtYj8MDUiv2Xge2fVtAflqELEdP/X4XU9AHovwE8VPCH'\n                    '2srVCONraY9MPgDAq3/mcZSBv06zfRxsffVGjW2sHHtfHL+S8y+A3HDtV7aIFb0gAAAABJRU5ErkJ'\n                    'ggg==')\nPCIE_GPU_ICON = ('iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAA'\n                 'FiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRv'\n                 'YmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRm'\n                 'PSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpE'\n                 'ZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFk'\n                 'b2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVu'\n                 'dGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K'\n                 'TMInWQAABPxJREFUWAnt1GtoV2UcwPE5l9Oc5nJemmxG1MrKsqvpXEUFSVcJiwgTDCqpV5l0I2OYRYYS'\n                 'kpoZNLB3hb3wRXQxIyJdKqhRWJGsbKTlyktecu7S93v+5zfOjpu92iDyB5//ec5znvM8v+dy/kVFp+M/'\n                 'tgIDcvmWcG9dZ1rflnveb7f5xPpt4PxAJhIrMozysxiOdjRjOY4h2lDs2yjOde+Wmcw41KMMRr+vYH7A'\n                 'UpLYgbFmQ+QTL9T2wa8rYsQhHkS5FaPhs0j0DMquXETUx328H/fZ66na+sx3uz6eSCg6iAcxeEf64Hg0'\n                 '6OtrPqFIwKwte4buRw1+hwkPgQd/IGxn8n/Bw29dzNr6fFv7PISjcNUr0IzXYd2ASCg6KadyNtbDAc7G'\n                 'c/gKjyHifQrfwQQm4C70FrbdCRNwYjMQsY6C472DJKE4rLHPI3iwAGfB1XAFWuDqWH4DzmoZmmCiL8Ov'\n                 '0r8II7Z3BeUxsO1PaMRiVGIVXC37tX/L3SIS8jDPwyXYgknYDZNZCLfKJA5iJqbhWjTAgV6AbZ2U/2ub'\n                 'cAD3oBbR1gksgm1/g+MasUCFu8yvn/t2TISDO7tR2A87WYIbcB9M2romVMPEL8AfsP411MG2l8K6n1EG'\n                 'J+fRGAkjSShWZygVr8LML8JWXIZDmIUZiFltpHwm3FoTcRCthvEo6mHdl4i2u9I661/E3fBodCVUwk1v'\n                 '4UuD4Gz2oArPYxsOw+3yoD6AEbCtidTAd+vxNY7Ctj6fBScxBHOwDrvhsyRMyJeNI3gqKRX+of2C5Cft'\n                 '1cGnYzDW4gu040a4HS1wALfFetu6Mn5ltnWc6+HZ+xMfweQsdy1MsmdUxLZVUHaW5WiDHTt7t+1WnEAz'\n                 'rsIrWISb4YptgO/4id+JVmTbLuT+Fjhx2/pOB0zK95IoSa8m5Aw8R09iB0zGTsfDQ/4D1sPYhWtggh/j'\n                 'SsyHq2lCHuhPYdj2akRbJ/M0vkclquE43SJWysFteB0acTkOYDOG4ReYuPUzMQ3LYJ2fr1+XK1EFz571'\n                 'V8C2dVgK6/ahAo7R7SuLRGxkuJxLcBAD4cq5Xa7GMzDRt1GKPXDlZsMvyWQexALMwRQ0wLO3F2PwEDbi'\n                 'fMzHZNi/Y50yHGgb3IpvsBru9yrYsR0564cxFc52JZyYX5XXFTgHtr0Xtq3FSLyFdryJH+F4RrErIDvw'\n                 '/NTDvV6TepzrB/AP7HZEfEhhJ/7GRNyB3iLamsDFuC3T0Gdu+4X4FcVxqCkn4Sp4wEzQpd6Pl3AensAx'\n                 'lMHP2f8Ov8Am2MZnh9EGt8B+bGd77+1zCz6Bzzwuo/EZPCJGp6tjxCoV7gpLuIGbm+D+G3MxFiY5HM1o'\n                 'QDYe4aYSngtX3AQHw200Oa9+HHF1Vdw+I59DUumsDTv9FuO8ISbgCN6Dg/hntw/xnGLRuTDZtbCNbeMd'\n                 'E3gXrqL13sdzV99wxU6KqIyEvBo18Mz45TSiFlvhikVUU9gOn22CZ8O2cbV+c3rv1b7sczyMZOzYskJV'\n                 'odJzZCIeuOlwWavgXnuuPHe2cd/r4KoYo/A5PDO2cxWGwlXKX92+1pR97IUJdeQPNXVJ+LA8LXvxP2cy'\n                 'HMhD6/U4/NOMaKHgapTiBOzbL8sDnb/ah89tFxNykidFrJgHby6cbb9GJJAd1LrObEVajvOVfZSfVU9t'\n                 'su17Kuf76KlNUvevf+e9vnn6wf9pBf4BZd5O0exv758AAAAASUVORK5CYII=')\n\ndef main():\n    ''' Main function '''\n    output = subprocess.check_output([\"system_profiler\", \"-xml\", \"SPDisplaysDataType\"])\n    plist = plistlib.readPlistFromString(output)\n    cards = [g for g in plist[0]['_items']]\n\n    gpu_in_use = [x for x in cards if 'spdisplays_ndrvs' in x][0]\n    if gpu_in_use['sppci_bus'] == 'spdisplays_builtin':\n        template_image_icon = BUILTIN_GPU_ICON\n    if gpu_in_use['sppci_bus'] == 'spdisplays_pcie_device':\n        template_image_icon = PCIE_GPU_ICON\n    print('| templateImage={}'.format(template_image_icon))\n    print('---')\n    print(gpu_in_use['sppci_model'])\n\nif __name__ == '__main__':\n    main()\n"
				}
			],
			"path": "System/active_gpu.1m.py",
			"filename": "active_gpu.1m.py",
			"dir": "System",
			"docsPlugin": "System/active_gpu.1m.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Active GPU",
			"version": "v1.0",
			"author": "Eric Ripa",
			"authors": [
				{
					"name": "Eric Ripa",
					"githubUsername": "eripa",
					"imageURL": "https://avatars.githubusercontent.com/u/1429673?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays an image based on the active GPU in multi-GPU machines, such as the MacBook Pro",
			"imageURL": "http://i.imgur.com/v2MuPOi.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.364649Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/cpu-temperature.5s.sh",
					"filename": "cpu-temperature.5s.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eCPU Temperature\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Ripa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeripa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays the current CPU temperature (requires external 'smc' binary)\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003esmc\u003c/bitbar.dependencies\u003e\n#\n# 'smc' can be downloaded from: http://www.eidac.de/smcfancontrol/smcfancontrol_2_4.zip\n# One-liner:\n# curl -LO http://www.eidac.de/smcfancontrol/smcfancontrol_2_4.zip \u0026\u0026 unzip -d temp_dir_smc smcfancontrol_2_4.zip \u0026\u0026 cp temp_dir_smc/smcFanControl.app/Contents/Resources/smc /usr/local/bin/smc ; rm -rf temp_dir_smc smcfancontrol_2_4.zip\n\nFAHRENHEIT=false\nTEMPERATURE_WARNING_LIMIT=80\nTEMPERATURE=$(/usr/local/bin/smc -k TC0P -r | sed 's/.*bytes \\(.*\\))/\\1/' |sed 's/\\([0-9a-fA-F]*\\)/0x\\1/g' | perl -ne 'chomp; ($low,$high) = split(/ /); print (((hex($low)*256)+hex($high))/4/64); print \"\\n\";')\nTEMP_INTEGER=${TEMPERATURE%.*}\n\nif $FAHRENHEIT ; then\n  TEMP_INTEGER=$((TEMP_INTEGER*9/5+32))\n  LABEL=\"Â°f\"\nelse\n  LABEL=\"Â°c\"\nfi\n\nif [ \"$TEMP_INTEGER\" -gt \"$TEMPERATURE_WARNING_LIMIT\" ] ; then\n  ICON=\"ðŸ”¥\"\nelse\n  ICON=\"\"\nfi\necho \"$ICON${TEMP_INTEGER}$LABEL| size=12\"\n"
				}
			],
			"path": "System/cpu-temperature.5s.sh",
			"filename": "cpu-temperature.5s.sh",
			"dir": "System",
			"docsPlugin": "System/cpu-temperature.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "CPU Temperature",
			"version": "v1.0",
			"author": "Eric Ripa",
			"authors": [
				{
					"name": "Eric Ripa",
					"githubUsername": "eripa",
					"imageURL": "https://avatars.githubusercontent.com/u/1429673?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin displays the current CPU temperature (requires external 'smc' binary)",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"smc"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.021858Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/fan-speed.5s.sh",
					"filename": "fan-speed.5s.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eFan Speed\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Ripa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeripa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays the current fan speed from SMC readings (requires external 'smc' binary)\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003esmc\u003c/bitbar.dependencies\u003e\n#\n# 'smc' can be downloaded from: http://www.eidac.de/smcfancontrol/smcfancontrol_2_4.zip\n# One-liner:\n# curl -LO http://www.eidac.de/smcfancontrol/smcfancontrol_2_4.zip \u0026\u0026 unzip -d temp_dir_smc smcfancontrol_2_4.zip \u0026\u0026 cp temp_dir_smc/smcFanControl.app/Contents/Resources/smc /usr/local/bin/smc ; rm -rf temp_dir_smc smcfancontrol_2_4.zip\n\ndeclare -i FANS # number of fans with smc -k FNum -r\ndeclare -a FAN_LABEL # list available fans with smc -f\nFANS=$(/usr/local/bin/smc -k FNum -r | awk '{ printf \"%d\\n\", $4}')\n# FAN_LABEL=(\"CPU\" \"ODD\" \"HDD\") # Uncomment to add label, must 1-to-1 map the above array\nFAN_SPEEDS=\"â™¨ï¸Ž \" # Set your own prefix\n\nfor ((i = 0; i \u003c FANS; i++)) ; do\n  FAN_SPEED=$(/usr/local/bin/smc -k F${i}Ac -r | awk '{ printf \"%s\\n\", $3}' | grep '^[0-9]*[.][0-9]*$' | awk '{ printf \"%d\\n\", $1}')\n  if [ \"$FAN_SPEED\" != \"\" ] ; then\n    if [ -n \"${FAN_LABEL+x}\" ]; then\n       # Add labels if FAN_LABEL is declared\n       FAN_SPEEDS=\"$FAN_SPEEDS${FAN_LABEL[$i]}: \"\n    fi\n    FAN_SPEEDS=\"$FAN_SPEEDS$FAN_SPEED rpm \"\n  fi\ndone\necho \"$FAN_SPEEDS| size=12\"\n"
				}
			],
			"path": "System/fan-speed.5s.sh",
			"filename": "fan-speed.5s.sh",
			"dir": "System",
			"docsPlugin": "System/fan-speed.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Fan Speed",
			"version": "v1.0",
			"author": "Eric Ripa",
			"authors": [
				{
					"name": "Eric Ripa",
					"githubUsername": "eripa",
					"imageURL": "https://avatars.githubusercontent.com/u/1429673?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin displays the current fan speed from SMC readings (requires external 'smc' binary)",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"smc"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.46394Z",
			"vars": null
		}
	]
}