{
	"person": {
		"name": "Finn LeSueur",
		"githubUsername": "finnito",
		"imageURL": "https://avatars.githubusercontent.com/u/6530078?v=4",
		"bio": "I am Finn, a science educator and hobbyist programmer from New Zealand.",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Web/bitbar-uptime_robot.py",
					"filename": "bitbar-uptime_robot.py",
					"content": "#!/usr/local/bin/python3\n\n# \u003cbitbar.title\u003eUptimeRobot Monitor\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eFinn LeSueur\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003efinnito\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGet UptimeRobot statistics for an account.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://uptimerobot.com/assets/img/logo_plain.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://gitlab.com/Finnito/bitbar-uptime_robot\u003c/bitbar.abouturl\u003e\n\nimport http.client\nimport json\n\n# Insert your Read-Only API Key.\nAPI_KEY = \"ur381063-288bfb3885e923a80db0f3c5\"\n\ndef main():\n    \"\"\" The main call for the script.\"\"\"\n    response = getMonitors()\n    numMonitors = len(response[\"monitors\"])\n    upMonitors = countUpMonitors(response)\n    outputArray = parseMonitors(response)\n    output = makeOutput(\n        numMonitors,\n        upMonitors,\n        outputArray\n    )\n    print(output)\n\n\ndef getMonitors():\n    \"\"\" Sets up and makes the request\n    to UptimeRobot to get all monitors\n    for an account.\n    \"\"\"\n    conn = http.client.HTTPSConnection(\"api.uptimerobot.com\")\n\n    payload = \"api_key={0}\u0026format=json\u0026logs=0\u0026response_times_average=30\u0026response_times=1\".format(API_KEY)\n\n    headers = {\n        'content-type': \"application/x-www-form-urlencoded\",\n        'cache-control': \"no-cache\"\n        }\n     \n    conn.request(\"POST\", \"/v2/getMonitors\", payload, headers)\n     \n    res = conn.getresponse()\n    data = res.read()\n    resp = data.decode(\"utf-8\")\n    resp = json.loads(resp)\n    return resp\n\n\ndef countUpMonitors(resp):\n    \"\"\" Iterates over the response\n    from getMonitors() to count the number\n    of monitors with response code 2.\n    \"\"\"\n    upMonitors = 0\n    for monitor in resp[\"monitors\"]:\n        if monitor[\"status\"] == 2:\n            upMonitors += 1\n    return upMonitors\n\n\ndef parseMonitors(resp):\n    \"\"\" Iterates over the repsonse\n    from getMonitors to create a string\n    with the name of the monitor and\n    its status using emoji.\n    \"\"\"\n    output = []\n    fmtString = \"{1}  {0} ({3}ms)|href={2}\"\n\n    for monitor in resp[\"monitors\"]:\n        status = monitor[\"status\"]\n        name = monitor[\"friendly_name\"]\n        url = monitor[\"url\"]\n        responseTime = int(float(monitor[\"average_response_time\"]))\n        if (status == 0):\n            output.append(fmtString.format(name, \"‚è∏\", url, responseTime))\n        elif (status == 1):\n            output.append(fmtString.format(name, \"‚ùî\", url, responseTime))\n        elif (status == 2):\n            output.append(fmtString.format(name, \"üü¢\", url, responseTime))\n        elif (status == 8):\n            output.append(fmtString.format(name, \"üü†\", url, responseTime))\n        elif (status == 9):\n            output.append(fmtString.format(name, \"üî¥\", url, responseTime))\n        else:\n            output.append(fmtString.format(name, \"‚ÅâÔ∏è\", url, responseTime))\n    return output\n\n\ndef makeOutput(numMonitors, upMonitors, outputArray):\n    \"\"\" Does string formatting to\n    output the result in the format\n    required by BitBar.\n    \"\"\"\n    outputString = \"\"\"{0}/{1} üÜô\n---\n{2}\nIcon Definitions\n--‚è∏: Paused\n--‚ùî: Not Yet Checked\n--üü¢: Up\n--üü†: Seems Down\n--üî¥: Down\n--‚ÅâÔ∏è: Unknown\n\"\"\".format(\n        upMonitors,\n        numMonitors,\n        \"\\n\".join(outputArray)\n    )\n    return outputString\n\n\nif __name__== \"__main__\":\n  main()\n"
				}
			],
			"path": "Web/bitbar-uptime_robot.py",
			"filename": "bitbar-uptime_robot.py",
			"dir": "Web",
			"docsPlugin": "Web/bitbar-uptime_robot.py.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "UptimeRobot Monitor",
			"version": "v0.1",
			"author": "Finn LeSueur",
			"authors": [
				{
					"name": "Finn LeSueur",
					"githubUsername": "finnito",
					"imageURL": "https://avatars.githubusercontent.com/u/6530078?v=4",
					"bio": "I am Finn, a science educator and hobbyist programmer from New Zealand.",
					"primary": true
				}
			],
			"desc": "Get UptimeRobot statistics for an account.",
			"imageURL": "https://uptimerobot.com/assets/img/logo_plain.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://gitlab.com/Finnito/bitbar-uptime_robot",
			"lastUpdated": "2021-03-08T15:22:09.45281Z",
			"vars": null
		}
	]
}