{
	"person": {
		"name": "Sergey Shlyapugin",
		"githubUsername": "inbalboa",
		"imageURL": "https://avatars.githubusercontent.com/u/2811912?v=4",
		"bio": "",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Web/pocket.10m.py",
					"filename": "pocket.10m.py",
					"content": "#!/usr/bin/env -S PATH=\"${PATH}:/usr/local/bin\" python3\n\n# \u003cbitbar.title\u003ePocket Bar\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.6.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSergey Shlyapugin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003einbalboa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eBasic Pocket client.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/XQnh7US.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython3,pocket-api,keyring\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/inbalboa/pocketbar\u003c/bitbar.abouturl\u003e\n\nfrom argparse import ArgumentParser\nfrom dataclasses import dataclass\nimport json\nfrom pathlib import Path\nimport subprocess\nimport sys\n\nAPPNAME = 'pocketbar'\nCMD = sys.argv[0]\nCACHE_PATH = f'~/Library/Caches/{APPNAME}/articles.json'\n\n\n@dataclass(frozen=True)\nclass Article:\n    id: str\n    link: str\n    title: str\n    cmd: str\n\n    def __str__(self):\n        title_ = self.title.replace('|', '—').strip() if self.title else self.link\n        return f'''{title_}|href={self.link} length=60\\n➖ {title_}|alternate=true length=60 bash={self.cmd} param1=--delete param2={self.id} terminal=false refresh=true'''\n\n\ndef get_secrets():\n    consumer_key = keyring.get_password(APPNAME, 'consumer_key')\n    access_token = keyring.get_password(APPNAME, 'access_token')\n    return consumer_key, access_token\n\n\ndef update_secrets():\n    consumer_key = get_input('\\\"Enter your consumer key from\\\\n\\\\\"https://getpocket.com/developer/apps/\\\\\"\\\"', hidden=True)\n    if not consumer_key:\n        return None, None\n    keyring.set_password(APPNAME, 'consumer_key', consumer_key)\n\n    pocket = Pocket(consumer_key=consumer_key)\n    redirect_uri = 'https://getpocket.com/connected_applications'\n    request_token = pocket.get_request_token(redirect_uri)\n    auth_url = f'https://getpocket.com/auth/authorize?request_token={request_token}\u0026redirect_uri={redirect_uri}'\n    subprocess.Popen(['open', auth_url])\n    get_ok('\\\"Press the Authorize button in the opened browser tab, then close this dialog.\\\"')\n    access_token = pocket.get_access_token(request_token)\n    keyring.set_password(APPNAME, 'access_token', access_token)\n\n\ndef parse_args():\n    parser = ArgumentParser(description='Pocket Bar')\n    parser.add_argument('-a', '--add', action='store_true', help='add item')\n    parser.add_argument('-d', '--delete', type=str, help='delete item')\n    parser.add_argument('-f', '--full', action='store_true', help='full retrieve')\n    parser.add_argument('-s', '--secrets', action='store_true', help='update secrets')\n    args = parser.parse_args()\n    return args\n\n\ndef pocket_icon():\n    return 'iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAQAAABuvaSwAAABIElEQVR4Xs3OvS9DYRQH4KdKfaViRWq2SUpCzKJithKrpISko6E6WJBg8L8ws0g6dJMIg6nNbZcmEkLEcG96qduZ31nec/LknJd/lVkVF84T6kLF7HeaU/Xoxm1C3XhUlYvxisCyQSMJNWhZYCXGa+ryeiWvYe03HjdjoDNNmzSCvHoSPlJX1A/6bHhw0BvvedO2o1/KpqbPCP/4xqqGeQwpe9W2Y0vTh3NZzGtYjfFipw35i7b3iIarFmI84V45eof83VlEKbs3EeOUSzVTUTds276xqJtScynlW+Y8O5HRnYxTz+a6x0Uth519YcZUtBS7KRklgWvrcrKypq27Figl3ENawZXAkzt3ngSuFKSTaJhRS3YdO7ZryWhv+If5AkpGXVSbf9oEAAAAAElFTkSuQmCC'\n\n\ndef get_ok(caption):\n    osa_bin = 'osascript'\n    osa_params = f\"-e 'Tell application \\\"System Events\\\" to display alert \\\"Pocket Bar\\\" message {caption} buttons \\\"Close\\\" default button \\\"Close\\\"'\"\n    task = subprocess.Popen(f'{osa_bin} {osa_params} \u003e /dev/null', shell=True)\n    task.wait()\n\n\ndef get_input(caption, hidden=False):\n    osa_bin = 'osascript'\n    hidden_text = ' with hidden answer' if hidden else ''\n    osa_params = f\"-e 'Tell application \\\"System Events\\\" to display dialog {caption} default answer \\\"\\\" with title \\\"Pocket Bar\\\" with icon 1 {hidden_text}' -e 'text returned of result'\"\n    task = subprocess.Popen(f'{osa_bin} {osa_params}', shell=True, stdout=subprocess.PIPE)\n    answer_text = task.stdout.read()\n    task.wait()\n\n    return answer_text.decode().replace('\\n', '').replace('\\r', '').strip()\n\n\ndef print_error(error):\n    print('!|color=#ECB935')\n    print('---')\n    print(f'Exception: {error}')\n\n\ndef print_refresh():\n    print('---')\n    print('Refresh|refresh=yes')\n    print(f'Full refresh|alternate=true bash={CMD} param1=--full terminal=false refresh=yes')\n    print('---')\n    print('Open Pocket|href=\"https://getpocket.com/\" refresh=no')\n    print(f'Re-authorize...|alternate=true bash={CMD} param1=--secrets terminal=false refresh=true')\n\n\ndef print_secrets_error():\n    print('!|color=#ECB935')\n    print('---')\n    print('Need authorization')\n    print('---')\n    print(f'Authorize...|bash={CMD} param1=--secrets terminal=false refresh=true')\n\n\ndef print_import_error():\n    print('!|color=#ECB935')\n    print('---')\n    print('Need to install pocket-api or/and keyring packages')\n    print('---')\n    print('Install (with PIP)...|bash=pip3 param1=install param2=-U param3=pocket-api param4=keyring terminal=true refresh=true')\n\n\ndef get_cache(cache_path):\n    try:\n        with open(Path(cache_path).expanduser()) as json_file:\n            return json.load(json_file)\n    except:\n        return {}\n\n\ndef set_cache(cache_path, json_data):\n    expanded_cache_path = Path(cache_path).expanduser()\n    expanded_cache_path.parent.mkdir(exist_ok=True)\n    with open(expanded_cache_path, 'w+') as json_file:\n        json.dump(json_data, json_file)\n\n\ndef update_from_cache(main_dict, update_dict):\n    if update_dict['status'] == 2:\n        return main_dict\n    res = dict(main_dict)\n    res_list = res.get('list', {})\n    res_list.update(update_dict.get('list', {}))\n    res.update(update_dict)\n    res['list'] = res_list\n    return res\n\n\ndef main():\n    parsed_args = parse_args()\n\n    try:\n        global keyring, Pocket, PocketException\n        import keyring\n        from pocket import Pocket, PocketException\n    except ImportError:\n        print_import_error()\n        print_refresh()\n        return\n\n    consumer_key, access_token = get_secrets()\n    pocket = Pocket(consumer_key=consumer_key, access_token=access_token)\n\n    if parsed_args.add:\n        new_url = get_input('\\\"Save an item to Pocket:\\\"')\n        if new_url:\n            pocket.add(url=new_url)\n        return\n    elif parsed_args.delete:\n        pocket.delete(parsed_args.delete).commit()\n        return\n    elif parsed_args.secrets:\n        update_secrets()\n        return\n\n    raw_articles = {} if parsed_args.full else get_cache(CACHE_PATH)\n    try:\n        raw_answer = pocket.retrieve(detailType='simple', since=raw_articles.get('since'))\n    except PocketException as e:\n        if e.http_code in (400, 401):\n            print_secrets_error()\n        else:\n            print_error(e)\n        print_refresh()\n        return\n    except Exception as e:\n        print_error(e)\n        print_refresh()\n        return\n\n    raw_articles = update_from_cache(raw_articles, raw_answer)\n    set_cache(CACHE_PATH, raw_articles)\n\n    adapted_articles = [Article(\n                            id=i.get('item_id'),\n                            link=i.get('resolved_url', i.get('given_url')),\n                            title=i.get('resolved_title', i.get('given_title')),\n                            cmd=CMD\n                        )\n                        for i in sorted(raw_articles['list'].values(), key=lambda x: x.get('time_added', ''), reverse=True) if i['status'] == '0']\n    print(f'{len(adapted_articles)}|font=Verdana size=14 templateImage={pocket_icon()}')\n    print('---')\n    print(*adapted_articles, sep='\\n')\n    print('---')\n    print(f'➕ Save a URL|bash={CMD} param1=--add terminal=false refresh=true')\n    print_refresh()\n\n\nif __name__ == '__main__':\n    main()\n"
				}
			],
			"path": "Web/pocket.10m.py",
			"filename": "pocket.10m.py",
			"dir": "Web",
			"docsPlugin": "Web/pocket.10m.py.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Pocket Bar",
			"version": "v1.6.1",
			"author": "Sergey Shlyapugin",
			"authors": [
				{
					"name": "Sergey Shlyapugin",
					"githubUsername": "inbalboa",
					"imageURL": "https://avatars.githubusercontent.com/u/2811912?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Basic Pocket client.",
			"imageURL": "https://i.imgur.com/XQnh7US.png",
			"dependencies": [
				"python3",
				"pocket-api",
				"keyring"
			],
			"aboutURL": "https://github.com/inbalboa/pocketbar",
			"lastUpdated": "2021-03-08T15:22:10.157915Z",
			"vars": null
		}
	]
}