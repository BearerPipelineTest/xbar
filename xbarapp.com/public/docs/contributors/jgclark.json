{
	"person": {
		"name": "Jonathan Clark",
		"githubUsername": "jgclark",
		"imageURL": "https://avatars.githubusercontent.com/u/1671754?v=4",
		"bio": "Christian, husband, geek, church leader, coffee lover and ex-systems engineer.",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Lifestyle/ToDo/NotePlan3.15m.rb",
					"filename": "NotePlan3.15m.rb",
					"content": "#!/usr/bin/env ruby\n# coding: utf-8\n\n# \u003cbitbar.title\u003eTodo Today for NotePlan v3\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJonathan Clark\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejgclark\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eA todo list taken from NotePlan v3 and displayed with customizable color-code. Mark tasks \"done\" simply by clicking on them in the menubar drop-down list. This was based on \"Todo.NotePlan\" by Richard Guay which in turn was based on \"Todo Colour\" plugin by Srdgh.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://noteplan.co/static/icon-aef6fdb335c829b1363315ef21c3146d.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://noteplan.co/\u003c/bitbar.abouturl\u003e\n#\n# Modifications by Jonathan Clark\n#   v2.2, 2021/01/29:\n#     - tweak default 'priority_label' to suit planned change in NP3\n#   v2.1, 2020/11/29:\n#     - auto-detect storage type (CloudKit \u003e iCloud Drive \u003e Drobpox if there are multiple)\n#     - add option to specify the file extension in use (default to md, but can be txt)\n#   v2.0, 2020/10/30:\n#     - Update NP data storage filepaths for NotePlan 3 beta\n#       (including CloudKit change at v3.0.15 beta)\n#     - Make CloudKit location the default\n#     - tweak colours and falgs to suit my needs\n#     - ignore tasks with dates scheduled into the future\n#     - improve some non-tasks it was including\n#     - code clean up\n#\n# Modifications by Guillaume Barrette\n#   2017/07/01:\n#     - Added option to show subtasks\n#   2017/06/15:\n#     - Changed TRUE/FALSE constant to true/false since uppercase are deprecated in ruby 2.4\n#     - Changed labels to start with '#' to follow NotePlan way of tagging\n#     - Allow to change Fonts by the user\n#     - Added a new parameter for users to specify if want the task to be archived\n#       at the end of the file or not\n#     - Added alternate action to mark as cancelled instead of done (using the\n#       Option modifier key)\n#     - Allow indentation at beginning of task\n#   2017/06/03:\n#     - Added 'divide_with_header' to allow to show sections separated by headers\n#     - Updated the algorithm to skip all items that are not a task (Skip anything that\n#       doesn't starts with '- ' or '* ' and if followed by [x], [\u003e], [-])\n#   2017/05/28:\n#     - Fixed the line number of item to mark as done by getting the id before stripping\n#       the lines that are not a task\n#     - Scheduled task (to another day - [\u003e]) are now skipped also\n#   2017/05/20:\n#     - Added Black and White NotePlan menubar icon\n#     - Repaired a bug when there was no newline on the last line the done task would\n#       get appended to the last line instead of a new line at the end\n#     - Added the time in the @done(YYYY-MM-DD HH:MM) so it's like NotePlan preference\n#     - Added User Parameters so it's easy to determine if we want to append the\n#       @done(...) string at the end of the done task and if we want the black or white\n#       menubar icon\n#     - Changed the menubar icon to a templateImage so the color changes automatically\n#       when using a dark menubar (removed the white icon)\n#     - Removed 'use_black_icon' parameters since now it's automatic\n#     - Changed encoding method and removed the use of 'force_encoding(\"utf-8\")'\n#     - Repaired a bug if there was no file already created for that day in NotePlan\n#\n# Modifications by Richard Guay\n#   2017/05/20:\n#       - Added using emoji option\n#       - fixed character encoding on removing an item\n#       - Proper parsing of [ ] in the todo.\n#       - cleanup\nrequire 'date'\n\n#################################\n# User Parameters:\ninsert_date_on_done_task = true  # If true, the date would be inserted with the @done tag\nuse_emoji_as_icon = false        # If true, will show emoji, otherwise it will use the black or white icon.\nuse_star = true                  # if true, will look for and use '*' instead of '-'\nshow_alt_task = true             # If true, tasks marked with the alternate character ('* ' if use_star is FALSE or '- ' if use_star is TRUE) would be shown in the task list. For example, this could be useful to use them as bullet list.\nshow_subtasks = true             # If true, subtasks would be shown in the list\ndivide_with_header = true        # If true, headers would be listed and a separator is put between lists\narchive_task_at_end = false      # If true, the task would get archived to the end of the note\nfile_extension = '.md'           # Defaults to file extension type 'md' -- can change to '.txt'\npriority_labels = ['@urgent', '#high', '#‚≠êÔ∏è']\npriority_marker = '‚≠ê'\nstandard_font = ''               # Font used for tasks\nheader_font   = 'Helvetica-Bold' # Font used for headers if listed with 'divide_with_header'\n#################################\n\nEncoding.default_internal = Encoding::UTF_8\nEncoding.default_external = Encoding::UTF_8\n\nUSERNAME = ENV['LOGNAME'] # pull username from environment\nUSER_DIR = ENV['HOME'] # pull home directory from environment\nDROPBOX_DIR = \"#{USER_DIR}/Dropbox/Apps/NotePlan/Documents\".freeze\nICLOUDDRIVE_DIR = \"#{USER_DIR}/Library/Mobile Documents/iCloud~co~noteplan~NotePlan/Documents\".freeze\nCLOUDKIT_DIR = \"#{USER_DIR}/Library/Containers/co.noteplan.NotePlan3/Data/Library/Application Support/co.noteplan.NotePlan3\".freeze\ndata_root_filepath = DROPBOX_DIR if Dir.exist?(DROPBOX_DIR) \u0026\u0026 Dir[File.join(DROPBOX_DIR, '**', '*')].count { |file| File.file?(file) } \u003e 1\ndata_root_filepath = ICLOUDDRIVE_DIR if Dir.exist?(ICLOUDDRIVE_DIR) \u0026\u0026 Dir[File.join(ICLOUDDRIVE_DIR, '**', '*')].count { |file| File.file?(file) } \u003e 1\ndata_root_filepath = CLOUDKIT_DIR if Dir.exist?(CLOUDKIT_DIR) \u0026\u0026 Dir[File.join(CLOUDKIT_DIR, '**', '*')].count { |file| File.file?(file) } \u003e 1\n\ntodo_file_loc = File.expand_path(data_root_filepath + '/Calendar/' + Date.today.strftime('%Y%m%d') + file_extension)\n\nif ARGV.empty?\n  # Customise label color-code here:\n  labels = {\n    '@admin' =\u003e 'orange',\n    '@liz' =\u003e 'yellow',\n    '@home' =\u003e 'green',\n    '@martha' =\u003e 'purple', # pink is too light\n    '@Health' =\u003e 'cadetblue',\n    '@church' =\u003e 'blue', # lightblue is too light\n    '@tutorials' =\u003e 'violet',\n    '@Envato' =\u003e 'darkorange',\n    '@workflow' =\u003e 'purple',\n    '@tutorial' =\u003e 'cobaltblue'\n  }\n\n  lines_in_file = File.exist?(todo_file_loc.to_s) ? IO.readlines(todo_file_loc.to_s) : []\n  lines = []\n\n  # Remove all lines that are not a todo. Stop at the first empty line.\n  line_number = []\n  line_number_id = 0\n  task_style_to_search = show_alt_task ? ['- ', '* '] : use_star ? ['* '] : ['- ']\n  lines_in_file.each_index do |key|\n    # Clean out leading and trailing white spaces (space, tabs, etc)\n    line = lines_in_file[key].gsub(/\\s+$/, '')\n    task_line = show_subtasks ? line.gsub(/^\\s+/, '') : line\n    if task_line.start_with?(*task_style_to_search) \u0026\u0026 !task_line[2..4].start_with?('[x]', '[\u003e]', '[-]')  # Get only active Task items\n      # Now check if doesn't have a \u003eYYYY-MM-DD that schedules it into the future\n      break if task_line =~ /\\s\u003e\\d{4}\\-\\d{2}\\-\\d{2}/\n\n      # It's a todo line to display. Remove the leading task marker and add to the list.\n      if use_star\n        lines.push(line.gsub(/^(\\s*)\\*\\s*(\\[ \\]\\s*)*/, '\\1'))\n      else\n        lines.push(line.gsub(/^(\\s*)\\-\\s*(\\[ \\]\\s*)*/, '\\1'))\n      end\n      line_number.push(line_number_id)\n    elsif divide_with_header \u0026\u0026 line =~ /^#+\\s+/ # i.e. this is a header line\n      lines.push(line)\n      line_number.push(line_number_id)\n    end\n    line_number_id += 1\n  end\n\n  # Give the header. It's the NotePlan icon or an emoji briefcase with the number of items todo\n  icon_base64 = 'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAQAAAACj/OVAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAJcEhZcwAAFiUAABYlAUlSJPAAAAAHdElNRQfkChwAHRNqrC5wAAABSElEQVRYw2NgGAWjYBRQCXAy8AIxnYAxw384NKKHhf9R4KiFoxYOpIXGDPxkWsjFYEKqZQ5Q476QYSFMRpfcYJtDgoU3yQvuZ2iG/mfwIsLCBgxdl8hLFhD4h0EMj4VKWPX8p8RCEHzPwILVwv84IZGgHY8RG9H4t/GodSU+FmPwGEMsVCI1axygwLIF5Gb+V2RY9oGy8oaV4R9J1rFQo5BLIdIyR2qWrBcJWLaL2nXELwIWnqCmZROJDNIsalgmT1KS+cMgTIllzCSmUAh8A0zZZIEXFGT8Y6Ra1kCFoq2IeOt24DEG3Skb8Khtprx6wlYfMjJ8pbR6wq8Zm6gwZRZextCoRUQTwx1D113yGlGrSWhEbSG3zapOQTPxO1RGhdSsIUd2y5uNQWa0bzFq4ciyMAjJOnF6jdXYMrgwmI6Oj42CUUAVAABntNYrW391eQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMC0xMC0yOFQwMDoyOToxOSswMDowMDOfhXoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjAtMTAtMjhUMDA6Mjg6MjMrMDA6MDCH/w5VAAAAAElFTkSuQmCC'\n\n  line_count = 0\n  lines.each { |line|  line_count += 1 unless line.start_with?('#') }\n  if use_emoji_as_icon\n    puts \"üíº#{line_count}\"\n  else\n    puts \"#{line_count} |templateImage=#{icon_base64}\"\n  end\n\n  puts '---'\n\n  cfn = File.expand_path(__FILE__)\n\n  # Create the list of items to do in the menu.\n  item_number = 0\n  lines.each do |item|\n    line_color = ''\n    line = item.chomp\n    if priority_labels.any? { |s| line.include? s }\n      # If line contains priority label, display in priority color\n      # line_color = priority_color\n      # If line contains priority label, prefix item with priority_marker\n      line = priority_marker + ' ' + line\n    else\n      # If line contains no priority label, cycle through labels hash,\n      # and if line contains a label display in corresponding color\n      labels.each { |label, label_color| line_color = label_color if line.include?(label) }\n    end\n    # If the line contains no label, display in default color. Otherwise, in\n    # chosen color. Clicking line launches this script with line number as\n    # the parameter.\n    line_font = standard_font\n    if line.start_with?('#')\n      puts('---') unless line.start_with?('##')\n      line_font = header_font\n    end\n    line_params = \"#{line_color.empty? ? '' : 'color=' + line_color} #{line_font.empty? ? '' : 'font=' + line_font} bash='#{cfn}' param1=#{line_number[item_number]}\"\n    puts(\"#{line} | \" + line_params + \" param2=x terminal=false trim=false refresh=\\n\")\n    puts(\"#{line} | alternate=true \" + line_params + \" param2=- terminal=false trim=false refresh=\\n\")\n    item_number += 1\n  end\n  puts '---'\n  puts \"Click an item to mark as 'done'\"\n  puts \"Click an item to mark as 'cancelled' | alternate=true\"\n  puts 'Refresh now (normally every 15m) | refresh='\nelse\n  # This is what to do when clicking on an item. We want to move\n  # the item to the Archive section and set it as done. If there\n  # isn't an Archive area, create it and add the task to it.\n\n  # Get the task number to archive.\n  do_num = ARGV[0].to_i\n  mark = ARGV[1]\n\n  # Get the list of todos and setup variables\n  todo_file = File.open(todo_file_loc.to_s)\n  lines_in_file = IO.readlines(todo_file)\n\n  unless lines_in_file[do_num].start_with?('#') # Do nothing if the item is a header\n    task = ''\n    lines = []\n    line_number = 0\n\n    lines_in_file[-1] = lines_in_file[-1] + \"\\n\" unless lines_in_file[-1].include? \"\\n\"\n\n    # Process the todo list lines\n    lines_in_file.each do |line|\n      if line_number != do_num\n        # It is one of the other lines. Just push it into the stack\n        lines.push(line)\n      else\n        # Get the line to be moved to the archive area\n        task = if insert_date_on_done_task\n                 line.chomp + (mark == 'x' ? \" @done(#{Time.new.strftime('%Y-%m-%d %H:%M')})\\n\" : \"\\n\")\n               else\n                 task = line.chomp + \"\\n\"\n               end\n        task = task.gsub(/^(\\s*)([\\-\\*]+)\\s*(\\[ \\]\\s*)*/, '\\1\\2 [' + mark + '] ') # Works with both task style, useful if mix with 'show_alt_task', also it keeps the indentation at beginning of the line\n        lines.push(task) if archive_task_at_end\n      end\n      line_number += 1\n    end\n\n    # Add the task to the bottom\n    lines.push(task) if archive_task_at_end\n\n    # Save the file\n    IO.write(todo_file, lines.join)\n  end\nend\n"
				}
			],
			"path": "Lifestyle/ToDo/NotePlan3.15m.rb",
			"filename": "NotePlan3.15m.rb",
			"dir": "Lifestyle/ToDo",
			"docsPlugin": "Lifestyle/ToDo/NotePlan3.15m.rb.html",
			"docsCategory": "Lifestyle/ToDo.html",
			"pathSegments": [
				"Lifestyle",
				"ToDo"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/ToDo",
					"text": "ToDo",
					"isLast": true
				}
			],
			"title": "Todo Today for NotePlan v3",
			"version": "v2.2",
			"author": "Jonathan Clark",
			"authors": [
				{
					"name": "Jonathan Clark",
					"githubUsername": "jgclark",
					"imageURL": "https://avatars.githubusercontent.com/u/1671754?v=4",
					"bio": "Christian, husband, geek, church leader, coffee lover and ex-systems engineer.",
					"primary": true
				}
			],
			"desc": "A todo list taken from NotePlan v3 and displayed with customizable color-code. Mark tasks \"done\" simply by clicking on them in the menubar drop-down list. This was based on \"Todo.NotePlan\" by Richard Guay which in turn was based on \"Todo Colour\" plugin by Srdgh.",
			"imageURL": "https://noteplan.co/static/icon-aef6fdb335c829b1363315ef21c3146d.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://noteplan.co/",
			"lastUpdated": "2021-03-08T15:21:54.639873Z",
			"vars": null
		}
	]
}