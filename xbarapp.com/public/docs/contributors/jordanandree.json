{
	"person": {
		"name": "Jordan Andree",
		"githubUsername": "jordanandree",
		"imageURL": "https://avatars.githubusercontent.com/u/235503?v=4",
		"bio": "",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Dev/GitHub/github-ci.1m.php",
					"filename": "github-ci.1m.php",
					"content": "#!/usr/bin/env php\n\u003c?php\n/**\n * \u003cbitbar.title\u003eGithub CI Status\u003c/bitbar.title\u003e\n * \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n * \u003cbitbar.author\u003eJordan Andree\u003c/bitbar.author\u003e\n * \u003cbitbar.author.github\u003ejordanandree\u003c/bitbar.author.github\u003e\n * \u003cbitbar.desc\u003eDisplays Github Pull Request CI Check statuses\u003c/bitbar.desc\u003e\n * \u003cbitbar.dependencies\u003ephp\u003c/bitbar.dependencies\u003e\n * \u003cbitbar.abouturl\u003ehttps://github.com/jordanandree/bitbar-github-ci\u003c/bitbar.abouturl\u003e\n *\n * Icon sourced from feather icons: https://feathericons.com/\n *\n * To setup, create or edit your ~/.bitbarrc file with a new section:\n *\n * [github_ci]\n * access_token=xxx # Personal Access Token\n * username=jordanandree\n * repos[]=jordanandree/bitbar-github-ci\n * repos[]=jordanandree/dotfiles\n */\n\nclass GithubCIStatus\n{\n    /**\n     * Default config values\n     *\n     * @var array\n     */\n    protected $default_config = [\n        \"hostname\" =\u003e \"github.com\",\n    ];\n\n    /**\n     * Config options sourced from ~/.bitbarrc\n     *\n     * @var stdClass\n     */\n    protected $config;\n\n    /**\n     * Status line template for each check\n     *\n     * @var string\n     */\n    protected $status_line = \"%s %s | href=%s\";\n\n    /**\n     * State of CI checks\n     *\n     * @var string\n     */\n    protected $state = \"success\";\n\n    /**\n     * Lock param for mutating state\n     *\n     * @var bool\n     */\n    protected $state_lock = false;\n\n    /**\n     * Menu bar icon\n     *\n     * @var string\n     */\n    protected $icon = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAABDtpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgICAgICAgICAgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIj4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoTWFjaW50b3NoKTwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8eG1wTU06RG9jdW1lbnRJRD54bXAuZGlkOjVEMzE5OTBGREQzRTExRTdCNjU1Q0M4MUYwMENBMTNDPC94bXBNTTpEb2N1bWVudElEPgogICAgICAgICA8eG1wTU06RGVyaXZlZEZyb20gcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICA8c3RSZWY6aW5zdGFuY2VJRD5hZG9iZTpkb2NpZDpwaG90b3Nob3A6ODMzYTI0NjgtMjVhOC0xMTdiLTkxNzEtZjU1MDA2YWFhMDcyPC9zdFJlZjppbnN0YW5jZUlEPgogICAgICAgICAgICA8c3RSZWY6ZG9jdW1lbnRJRD5hZG9iZTpkb2NpZDpwaG90b3Nob3A6ODMzYTI0NjgtMjVhOC0xMTdiLTkxNzEtZjU1MDA2YWFhMDcyPC9zdFJlZjpkb2N1bWVudElEPgogICAgICAgICA8L3htcE1NOkRlcml2ZWRGcm9tPgogICAgICAgICA8eG1wTU06SW5zdGFuY2VJRD54bXAuaWlkOjVEMzE5OTBFREQzRTExRTdCNjU1Q0M4MUYwMENBMTNDPC94bXBNTTpJbnN0YW5jZUlEPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K4XbDnwAAAxFJREFUWAnNl1uITlEUxweTonG/y2UYIsUUUSIP84zwIELNk9LwwpsXmhEvk8sTKZq8eBJJXqQUuV+SUJPmySXjEpM7g9//m73OrDnO/r75Lg9W/WatvfZa6+y9z977fFNVlS0NuD/BH+iAw1AHxUgNwdvhBnSDarVCHxnQp9XbOI+5qreZs1TgOLTBfJgNI2EUfIH38BwegAZ7AMaAlx80xsNH78yyVVAP7AJbCbVL4Td5r1zuSuxEBiZWrzEWc0hoXkRPhF3wIfj6qzTYNpgDO8BkqhnS1b4RbD8oFdEKHIRTsBO05Frmh9AJGthQGA1zYVGwT6BvgWRBj8r9jb32JEQB9graE295Rgvp9vr67C0/W3vEYozBoTHDnGVqbViTpWbE9BU6bLTNsaAi/ZrU91BXJ2FaLL8+BGkAes+DYoEl+HeTYxPbH8v3QY2xoBL9I8jT7DWI+7EaJ0OAgqbHgsrw3w71P1uN9CbUUTIpeFtZYBHa7hId25ykB6BbyyR9jZq/HO0nmKuTHsBLV32Ssytl2u5/bQXTA3hiHegVzq6EqbtgXCj01AqmB3DZOtBrnF0Jc60r4p/j3D3mdZSd1/X/9JbmmEDam1D3F7oWotJAjw1A34TV0cj+deg43wGreaw/aYdcghIvgL7jyfHBzie6QXX96ivqf09ojw2DgqK9cQRs1KZ1k90FzWIyeFHOXrgGXWA5pnW1T4FM2YxXH4t7sNxFrMNuByvitQboZRkN32+2BrMP7EeOz0ns01iWoFlqH5hoZlp+f00rdqMFBK1fUp1gdbQS22A4FJR5RFwFS36HPTOVtdD1a09kySacVqM1KyCfTxvnrCvwDHuWS9jg+rY6vzc1WxvAGd8Rs6tdRzf2FtDS1UMdPIZLoDMsn4leU5bofZtoQiWJrstHYDPJ0o15Klv8uTwxSZc2WFo02yWwB16kOyvdzhqAnvEVmkHnVue9Fpqg4uL3QKy4/quR6FquuMRWIOtBfoN5Ox37Mzi0igWlmJ3aQbUauAlHQacmSxT3DVrgbVbAf+X7C2311IYwO5eYAAAAAElFTkSuQmCC\";\n\n    /**\n     * Output the Pull Request checks\n     *\n     * @return string\n     */\n    public function run()\n    {\n        $lines = [];\n\n        try {\n            $pull_requests = $this-\u003esearchPullRequests();\n\n            if (empty($pull_requests)) {\n                $this-\u003esendOutput(\"No Pull Requests. Get to work!\");\n                exit;\n            }\n\n            foreach ($pull_requests as $pr) {\n                $repo_name = substr($pr-\u003erepository_url, strlen($this-\u003egetConfig()-\u003ebase_uri . \"repos/\"));\n\n                $pr_info = $this-\u003egetPullRequest($repo_name, $pr-\u003enumber);\n                $status  = $this-\u003egetCommitStatus($repo_name, $pr_info-\u003ehead-\u003esha);\n                $lines[] = $this-\u003eformatLine($status-\u003estate, $pr_info-\u003etitle, $pr_info-\u003ehtml_url);\n\n                if ($status-\u003estate !== $this-\u003estate \u0026\u0026 !$this-\u003estate_lock) {\n                    $this-\u003estate = $status-\u003estate;\n                    $this-\u003estate_lock = true;\n                }\n\n                foreach ($status-\u003estatuses as $check) {\n                    $lines[] = \"--\" . $this-\u003eformatLine($check-\u003estate, $check-\u003econtext, $check-\u003etarget_url);\n                }\n            }\n        } catch (RuntimeException $e) {\n            $this-\u003estate = \"failure\";\n            $this-\u003esendOutput($e-\u003egetMessage());\n            exit;\n        }\n\n        $this-\u003esendOutput($lines);\n    }\n\n    /**\n     * echo back output to bitbar\n     *\n     * @param string[]|string\n     *\n     * @return void\n     */\n    public function sendOutput($lines)\n    {\n        echo $this-\u003estatusIcon($this-\u003estate) . \" | templateImage=\" . $this-\u003eicon;\n        echo \"\\n---\\n\";\n\n        if (is_array($lines)) {\n            echo implode($lines, \"\\n\");\n        } else {\n            echo $lines . \"\\n\";\n        }\n    }\n\n    /**\n     * Format a line for output\n     *\n     * @param mixed ...$text\n     *\n     * @return string\n     */\n    public function formatLine(...$args)\n    {\n        $icon = $this-\u003estatusIcon($args[0]);\n        $args[0] = $icon;\n\n        return sprintf($this-\u003estatus_line, ...$args);\n    }\n\n    /**\n     * Get the memoized configuration struct or set it\n     *\n     * @return stdClass\n     *\n     * @throws RuntimeException\n     */\n    protected function getConfig()\n    {\n        if (is_null($this-\u003econfig)) {\n            $bitbarrc = getenv('HOME') . \"/.bitbarrc\";\n\n            if (!file_exists($bitbarrc)) {\n                throw new RuntimeException(\"~/.bitbarrc is missing\");\n            }\n\n            $config = parse_ini_file($bitbarrc, true);\n\n            if (!array_key_exists(\"github_ci\", $config)) {\n                throw new RuntimeException(\"[github_ci] section is missing in ~/.bitbarrc\");\n            }\n\n            $config = array_merge($this-\u003edefault_config, $config[\"github_ci\"]);\n            $config[\"base_uri\"] = \"https://\" . $config[\"hostname\"] . \"/api/v3/\";\n            $this-\u003econfig = (object) $config;\n        }\n\n        return $this-\u003econfig;\n    }\n\n    /**\n     * Send a Request to the Github API\n     *\n     * @param string $endpoint\n     * @param array $options\n     *\n     * @return stdClass\n     *\n     * @throws RuntimeException\n     */\n    protected function sendRequest($endpoint, $params = [])\n    {\n        $url = $this-\u003egetConfig()-\u003ebase_uri . $endpoint;\n        $params[\"access_token\"] = $this-\u003egetConfig()-\u003eaccess_token;\n        $url .= \"?\" . http_build_query($params);\n\n        $headers = null;\n        $body = null;\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        $response = curl_exec($ch);\n\n        if (!empty($response)) {\n            list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        }\n\n        curl_close($ch);\n\n        if (is_null($body)) {\n            throw new RuntimeException(\"Error making request to the Github API. Check your configuration.\");\n        } else {\n            return json_decode($body);\n        }\n    }\n\n    /**\n     * Get a single Pull Request\n     *\n     * @param string $repo\n     * @param int $id\n     *\n     * @return stdClass\n     */\n    protected function getPullRequest($repo, $id)\n    {\n        return $this-\u003esendRequest(\"repos/$repo/pulls/$id\");\n    }\n\n    /**\n     * Get the status of a single Commit\n     *\n     * @param string $repo\n     * @param string $sha\n     *\n     * @return stdClass\n     */\n    protected function getCommitStatus($repo, $sha)\n    {\n        return $this-\u003esendRequest(\"repos/$repo/commits/$sha/status\");\n    }\n\n    /**\n     * Perform search for open issues by the author in the repos\n     *\n     * @return stdClass\n     */\n    protected function searchPullRequests()\n    {\n        $q = \"state:open author:\" . $this-\u003egetConfig()-\u003eusername;\n        foreach ($this-\u003egetConfig()-\u003erepos as $repo) {\n          $q .= \" repo:$repo\";\n        }\n\n        return $this-\u003esendRequest(\"search/issues\", [\n            \"q\" =\u003e $q,\n        ])-\u003eitems;\n    }\n\n    /**\n     * Get the icon for the status\n     *\n     * @param string $status\n     *\n     * @return string\n     */\n    protected function statusIcon($status)\n    {\n        $map = [\n            \"success\" =\u003e \"\\033[0;32m●\\033[0m\",\n            \"failure\" =\u003e \"\\033[0;31m●\\033[0m\",\n            \"pending\" =\u003e \"\\033[0;34m●\\033[0m\",\n            \"warning\" =\u003e \"\\033[0;33m●\\033[0m\",\n        ];\n\n        return $map[$status];\n    }\n}\n\necho (new GithubCIStatus())-\u003erun();\n"
				}
			],
			"path": "Dev/GitHub/github-ci.1m.php",
			"filename": "github-ci.1m.php",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github-ci.1m.php.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github CI Status",
			"version": "v1.0",
			"author": "Jordan Andree",
			"authors": [
				{
					"name": "Jordan Andree",
					"githubUsername": "jordanandree",
					"imageURL": "https://avatars.githubusercontent.com/u/235503?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays Github Pull Request CI Check statuses",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"php"
			],
			"aboutURL": "https://github.com/jordanandree/bitbar-github-ci",
			"lastUpdated": "2021-03-08T15:21:48.293876Z",
			"vars": null
		}
	]
}