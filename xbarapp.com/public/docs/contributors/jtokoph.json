{
	"person": {
		"name": "Jason Tokoph",
		"githubUsername": "jtokoph",
		"imageURL": "https://avatars.githubusercontent.com/u/346225?v=4",
		"bio": "wigglezipheartpeach",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "System/clipboard-history.3s.sh",
					"filename": "clipboard-history.3s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eClipboard History\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eJason Tokoph (jason@tokoph.net)\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejtokoph\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTracks up to 10 clipboard items.\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# Clicking on a previous item will copy it back to the clipboard.\n# Clicking \"Clear history\" will remove history files from the filesystem.\u003c/bitbar.desc\u003e\n\n# Hack for language not being set properly and unicode support\nexport LANG=\"${LANG:-en_US.UTF-8}\"\n\ntmp_dir=\"/tmp/bitbar-clipboard-history_$USER\"\n\n# Make sure temporary directory exists\nmkdir -p \"$tmp_dir\" \u0026\u003e /dev/null\n\n# If user clicked on a history item, copy it back to the clipboard\nif [[ \"$1\" = \"copy\" ]]; then\n  if [[ -e \"$tmp_dir/item-$2.pb\" ]]; then\n    pbcopy \u003c \"$tmp_dir/item-$2.pb\"\n    osascript -e \"display notification \\\"Copied to Clipboard\\\" with title \\\"BitBar Clipboard History\\\"\" \u0026\u003e /dev/null\n  fi\n  exit\nfi\n\n# If user clicked clear, remove history items\nif [[ \"$1\" = \"clear\" ]]; then\n  rm -f \"$tmp_dir\"/item-*.pb\n  osascript -e \"display notification \\\"Cleared clipboard history\\\" with title \\\"BitBar Clipboard History\\\"\" \u0026\u003e /dev/null\n  exit\nfi\n\nCLIPBOARD=$(pbpaste)\n# Check to see if we have text on the clipboard\nif [ \"$CLIPBOARD\" != \"\" ]; then\n\n  # Check if the current clipboard content is differnt from the previous\n  echo \"$CLIPBOARD\" | diff \"$tmp_dir/item-current.pb\" - \u0026\u003e /dev/null\n\n  # If so, the diff command will exit wit a non-zero status\n  # shellcheck disable=SC2181\n  if [ \"$?\" != \"0\" ]; then\n\n    # Move the history backwards\n    for i in {9..1}\n    do\n      j=$((i+1))\n\n      if [ -e \"$tmp_dir/item-$i.pb\" ]; then\n        cp \"$tmp_dir/item-$i.pb\" \"$tmp_dir/item-$j.pb\" \u0026\u003e /dev/null\n      fi\n    done\n\n    # Move the previous value into the history\n    cp \"$tmp_dir/item-current.pb\" \"$tmp_dir/item-1.pb\" \u0026\u003e /dev/null\n\n    # Save current value\n    echo \"$CLIPBOARD\" \u003e \"$tmp_dir/item-current.pb\"\n  fi\nfi\n\n# Print icon\necho '✄'\necho \"---\"\n\n# Print up to 36 characters of the current clipboard\necho \"Current\"\n\ncontent=\"$(pbpaste | head -c 36)\"\nif (( $(pbpaste | wc -c) \u003e 36 )); then\n  content=\"$content...\"\nfi\necho \"${content//|/ }\"\n\n# Show history section if historical files exist\nif [[ -e \"$tmp_dir/item-1.pb\" ]]; then\n\n  echo \"---\"\n\n  echo 'History (Click to copy)'\n\n  # Print up to 36 characters of each historical item\n  for i in {1..10}\n  do\n    if [ -e \"$tmp_dir/item-$i.pb\" ]; then\n      content=\"$(head -c 36 \"$tmp_dir/item-$i.pb\")\"\n      if (( $(wc -c \"$tmp_dir/item-$i.pb\" | awk '{print $1}') \u003e 36 )); then\n        content=\"$content...\"\n      fi\n      echo \"${content//|/ }|bash='$0' param1=copy param2=$i refresh=true terminal=false\"\n    fi\n  done\n\n  echo \"---\"\n\n  echo \"Clear History |bash='$0' param1=clear refresh=true terminal=false \"\nfi\n"
				}
			],
			"path": "System/clipboard-history.3s.sh",
			"filename": "clipboard-history.3s.sh",
			"dir": "System",
			"docsPlugin": "System/clipboard-history.3s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Clipboard History",
			"version": "1.0",
			"author": "Jason Tokoph (jason@tokoph.net)",
			"authors": [
				{
					"name": "Jason Tokoph",
					"githubUsername": "jtokoph",
					"imageURL": "https://avatars.githubusercontent.com/u/346225?v=4",
					"bio": "wigglezipheartpeach",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.811851Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/spotify.10s.sh",
					"filename": "spotify.10s.sh",
					"content": "#!/bin/bash\n\n# Get current Spotify status with play/pause button\n#\n# by Jason Tokoph (jason@tokoph.net)\n#    Marcin Swieczkowski (scatman@bu.edu)\n#\n# Shows current track information for Spotify\n\n# metadata\n# \u003cbitbar.title\u003eSpotify Now Playing\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMarcin S., Jason Tokoph\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejtokoph\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay currently playing Spotify song. Play/pause, skip forward, skip backward.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/y1SZwfq.png\u003c/bitbar.image\u003e\n\n# Comment the following line to disable showing times.\nSHOW_TIME=1\n\n# By default we remove anything after \" - \", as it usually is stuff like\n# \"Remastered\", \"Single Version\", or other garbage that Spotify likes to\n# include.\n#\n# Comment out this line if you want the full track names.\nCLEAN_TRACK_NAMES=1\n# Comment out this line if you want the full album names.\nCLEAN_ALBUM_NAMES=1\n\n# The length of a track/artist name after which to truncate.\nTRUNC_LEN=18\n# String used when replacing truncated text.\nTRUNC_SUFFIX=\"...\"\n\n# Send a series of semicolon-delimited commands to Spotify\nfunction tellspotify() {\n  commands=\"$(echo \"$1\" | tr \";\" \"\\\\n\")\"\n\n  osascript -e \"\n            tell application \\\"Spotify\\\"\n                $commands\n            end tell\";\n}\n\n## Handle early-return cases\n\nif [ \"$1\" = 'launch' ]; then\n  tellspotify 'activate'\n  exit\nfi\n\nfirst=\"$(echo \"$1\" | head -n 1 | awk '{print $1;}')\"\ncase \"$first\" in\n  'playpause' | 'previous' | 'next' | 'set')\n    tellspotify \"$1\"\n    exit\nesac\n\nif [ \"$(osascript -e 'application \"Spotify\" is running')\" = \"false\" ]; then\n  echo \"♫\"\n  echo \"---\"\n  echo \"Spotify is not running\"\n  echo \"Launch Spotify | bash='$0' param1=launch terminal=false\"\n  exit\nfi\n\n## Get Spotify info\n\nstate=$(tellspotify 'player state as string');\ntrack=$(tellspotify 'name of current track as string');\nartist=$(tellspotify 'artist of current track as string');\nalbum=$(tellspotify 'album of current track as string');\n\n# Handle last early-return case (needed $track and $artist to look up lyrics).\nif [ \"$1\" = 'lyrics' ]; then\n  open \"https://www.musixmatch.com/search/$track $artist\"\n  exit\nfi\n\nif [ \"$state\" = \"playing\" ]; then\n  state_icon=\"▶\"\nelse\n  state_icon=\"❚❚\"\nfi\n\n# Clean up track and/or album names\nif [[ $CLEAN_TRACK_NAMES ]]; then\n  track=\"$(echo -e \"${track/ - /\\\\n}\" | head -n 1)\"\n  track=\"$(echo -e \"${track/ (Remastered/\\\\n}\" | head -n 1)\"\nfi\nif [[ $CLEAN_ALBUM_NAMES ]]; then\n  album=\"$(echo -e \"${album/ - /\\\\n}\" | head -n 1)\"\n  album=\"$(echo -e \"${album/ (Remastered/\\\\n}\" | head -n 1)\"\nfi\n\n## Truncate track and artist\ntrunc_track=$track\nif [ ${#trunc_track} -gt $TRUNC_LEN ];then\n  trunc_track=${trunc_track:0:$TRUNC_LEN-${#TRUNC_SUFFIX}}$TRUNC_SUFFIX\nfi\n\ntrunc_artist=$artist\nif [ ${#trunc_artist} -gt $TRUNC_LEN ];then\n  trunc_artist=${trunc_artist:0:$TRUNC_LEN-${#TRUNC_SUFFIX}}$TRUNC_SUFFIX\nfi\n\n# Get position and duration of track\nif [[ $SHOW_TIME ]]; then\n  position=$(osascript -e \\\n                       \"tell application \\\"Spotify\\\"\n                            set pos_sec to player position\n                            set time_min to (pos_sec / 60 div 1) as text\n                            set raw_sec to (pos_sec mod 60 div 1) as text\n                            if length of raw_sec is greater than 1 then\n                                set time_sec to raw_sec\n                            else\n                                set time_sec to \\\"0\\\" \u0026 raw_sec\n                            end if\n                            return time_min as text \u0026 \\\":\\\" \u0026 time_sec as text\n                        end tell\");\n  duration=$(osascript -e \\\n                       \"tell application \\\"Spotify\\\"\n                            set total_sec to (duration of current track / 1000) as text\n                            set time_min to (total_sec / 60 div 1) as text\n                            set raw_sec to (total_sec mod 60 div 1) as text\n                            if length of raw_sec is greater than 1 then\n                                set time_sec to raw_sec\n                            else\n                                set time_sec to \\\"0\\\" \u0026 raw_sec\n                            end if\n                            return time_min as text \u0026 \\\":\\\" \u0026 time_sec as text\n                        end tell\");\nfi\n\n## Print the display\n\necho \"$state_icon $trunc_track - $trunc_artist\"\necho \"---\"\n\necho -e \"Track:\\\\t$track\"\necho -e \"Artist:\\\\t$artist\"\necho -e \"Album:\\\\t$album\"\necho \"---\"\n\nif [[ $SHOW_TIME ]]; then\n  echo \"${position} / ${duration}\"\n  echo '---'\nfi\n\nif [ \"$state\" = \"playing\" ]; then\n  echo -e \"❚❚\\\\tPause | bash='$0' param1=playpause terminal=false refresh=true\"\n  echo -e \"↩\\\\tPrevious | bash='$0' param1='set player position to 0;previous track' terminal=false refresh=true\"\n  echo -e \"↪\\\\tNext | bash='$0' param1='next track' terminal=false refresh=true\"\n  echo -e \"↻\\\\tReplay | bash = '$0' param1='set player position to 0' terminal=false\"\nelse\n  echo -e \"▶\\\\tPlay | bash='$0' param1=playpause terminal=false refresh=true\"\n  echo -e \"↩\\\\tPrevious | bash='$0' param1='set player position to 0;previous track;play' terminal=false refresh=true\"\n  echo -e \"↪\\\\tNext | bash='$0' param1='next track;play' terminal=false refresh=true\"\n  echo -e \"↻\\\\tReplay | bash = '$0' param1='set player position to 0;play' terminal=false refresh=true\"\nfi\n\necho '---'\necho -e \"♫\\\\tLyrics | bash='$0' param1='lyrics' terminal=false\"\necho '---'\n\necho '---'\necho \"Open Spotify | bash='$0' param1=launch terminal=false\"\n"
				}
			],
			"path": "Music/spotify.10s.sh",
			"filename": "spotify.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/spotify.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Spotify Now Playing",
			"version": "v1.2",
			"author": "Marcin S.,  Jason Tokoph",
			"authors": [
				{
					"name": "Jason Tokoph",
					"githubUsername": "jtokoph",
					"imageURL": "https://avatars.githubusercontent.com/u/346225?v=4",
					"bio": "wigglezipheartpeach",
					"primary": true
				},
				{
					"name": "Jason Tokoph",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				}
			],
			"desc": "Display currently playing Spotify song. Play/pause, skip forward, skip backward.",
			"imageURL": "http://i.imgur.com/y1SZwfq.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.007801Z",
			"vars": null
		}
	]
}