{
	"person": {
		"name": "Kevin Deldycke",
		"githubUsername": "kdeldycke",
		"imageURL": "https://avatars.githubusercontent.com/u/159718?v=4",
		"bio": "VP, Engineering Manager, Founding Engineer - Billing, Payments \u0026 IAM.\r\n",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Dev/meta_package_manager.7h.py",
					"filename": "meta_package_manager.7h.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eMeta Package Manager\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.5.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKevin Deldycke\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekdeldycke\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eList outdated packages and manage upgrades.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython,mpm\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/CiQpQ42.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/kdeldycke/meta-package-manager\u003c/bitbar.abouturl\u003e\n\n\"\"\"\nBitbar plugin for Meta Package Manager (a.k.a. the :command:`mpm` CLI).\n\nDefault update cycle is set to 7 hours so we have a chance to get user's\nattention once a day. Higher frequency might ruin the system as all checks are\nquite resource intensive, and Homebrew might hit GitHub's API calls quota.\n\"\"\"\n\nfrom __future__ import print_function, unicode_literals\n\nimport json\nimport os\nimport sys\nfrom operator import itemgetter\nfrom subprocess import PIPE, Popen\n\nPY2 = sys.version_info[0] == 2\n\n\nFLAT_LAYOUT = True\n\"\"\" Define the rendering mode of outdated packages list.\n\nSet this constant to ``False`` to replace the default flat layout with an\nalternative structure where all upgrade actions are put into submenus, one for\neach manager.\n\"\"\"\n\n\n# Make it easier to change font, sizes and colors of the output\n# See https://github.com/matryer/bitbar#writing-plugins for details\n# An alternate \"good looking\" font is \"font=NotoMono size=13\" (not installed\n# on MacOS by default though) that matches the system font quite well.\nFONTS = {\n    'normal':  '',                              # Use default system font\n    'summary': '',                              # Package summary\n    'package': '',                              # Indiviual packages\n    'error':   'color=red font=Menlo size=12',  # Errors\n}\n# Use a monospaced font when using submenus\nif not FLAT_LAYOUT:\n    FONTS['summary'] = 'font=Menlo size=12'\n\n\ndef fix_environment():\n    \"\"\"Tweak environment variable to find non-default system-wide binaries.\n\n    macOS does not put ``/usr/local/bin`` or ``/opt/local/bin`` in the ``PATH``\n    for GUI apps. For some package managers this is a problem. Additioanlly\n    Homebrew and Macports are using different pathes. So, to make sure we can\n    always get to the necessary binaries, we overload the path. Current\n    preference order would equate to Homebrew, Macports, then system.\n    \"\"\"\n    os.environ['PATH'] = ':'.join([\n        '/usr/local/bin',\n        '/usr/local/sbin',\n        '/opt/local/bin',\n        '/opt/local/sbin',\n        os.environ.get('PATH', '')])\n\n    # Python 3 Surrogate Handling. See:\n    # https://click.pocoo.org/6/python3/#python-3-surrogate-handling\n    os.environ['LC_ALL'] = os.environ['LANG'] = 'en_US.UTF-8'\n\n\ndef run(*args):\n    \"\"\"Run a shell command, return error code, output and error message.\"\"\"\n    assert isinstance(args, tuple)\n    try:\n        process = Popen(args, stdout=PIPE, stderr=PIPE)\n    except OSError:\n        return None, None, \"`{}` executable not found.\".format(args[0])\n    output, error = process.communicate()\n    return (\n        process.returncode,\n        output.decode('utf-8') if output else None,\n        error.decode('utf-8') if error else None)\n\n\ndef echo(message):\n    \"\"\"Print message to the output.\n\n    Not unlike ``click.echo()``, this method is required to support\n    discrepencies in the way strings are handled in different Python versions\n    and platforms.\n    \"\"\"\n    if PY2:\n        message = message.encode('utf-8')\n    print(message)\n\n\ndef print_error_header():\n    \"\"\"Generic header for blockng error.\"\"\"\n    echo(\"❌ | dropdown=false\")\n    echo(\"---\")\n\n\ndef print_error(message, submenu=\"\"):\n    \"\"\"Print a formatted error line by line.\n\n    A red, fixed-width font is used to preserve traceback and exception layout.\n    \"\"\"\n    for line in message.strip().split(\"\\n\"):\n        echo(\n            \"{}{} | {f_error} trim=false emojize=false\"\n            \"\".format(submenu, line, f_error=FONTS['error']))\n\n\ndef print_package_items(packages, submenu=\"\"):\n    \"\"\"Print a menu entry for each outdated packages available for upgrade.\"\"\"\n    for pkg_info in packages:\n        echo(\n            \"{}{name} {installed_version} → {latest_version} | {upgrade_cli}\"\n            \" terminal=false refresh=true {f_package} emojize=false\".format(\n                submenu, f_package=FONTS['package'], **pkg_info))\n\n\ndef print_upgrade_all_item(manager, submenu=\"\"):\n    \"\"\"Print the menu entry to upgrade all outdated package of a manager.\"\"\"\n    if manager.get('upgrade_all_cli'):\n        if not FLAT_LAYOUT:\n            echo(\"-----\")\n        echo(\n            \"{}Upgrade all | {} terminal=false refresh=true {f_normal}\".format(\n                submenu, manager['upgrade_all_cli'], f_normal=FONTS['normal']))\n\n\ndef print_menu():\n    \"\"\"Print menu structure using BitBar's plugin API.\n\n    See: https://github.com/matryer/bitbar#plugin-api\n\n    .. todo\n\n        Add minimal requirement on ``meta-package-manager`` module in the\n        invoked ``pip`` command.\n    \"\"\"\n    # Search for generic mpm CLI on system.\n    code, _, error = run('mpm')\n    # mpm CLI hasn't been found on the system. Propose to the user to install\n    # or upgrade it.\n    if code or error:\n        print_error_header()\n        print_error(error)\n        echo(\"---\")\n        echo(\n            \"Install / upgrade `mpm` CLI. | bash=pip param1=install \"\n            \"param2=--upgrade param3=meta-package-manager terminal=true \"\n            \"refresh=true {f_error}\".format(f_error=FONTS['error']))\n        return\n\n    # Fetch list of all outdated packages from all package manager available on\n    # the system.\n    _, output, error = run(\n        'mpm', '--output-format', 'json', 'outdated', '--cli-format', 'bitbar')\n\n    # Bail-out immediately on errors related to mpm self-execution or if mpm is\n    # not able to produce any output.\n    if error or not output:\n        print_error_header()\n        print_error(error)\n        return\n\n    # Sort outdated packages by manager's name.\n    managers = sorted(json.loads(output).values(), key=itemgetter('name'))\n\n    # Print menu bar icon with number of available upgrades.\n    total_outdated = sum([len(m['packages']) for m in managers])\n    total_errors = sum([len(m.get('errors', [])) for m in managers])\n    echo(\"↑{}{} | dropdown=false\".format(\n        total_outdated,\n        \" ⚠️{}\".format(total_errors) if total_errors else \"\"))\n\n    # Print a full detailed section for each manager.\n    submenu = \"--\" if not FLAT_LAYOUT else \"\"\n\n    if not FLAT_LAYOUT:\n        # Compute maximal manager's name length.\n        label_max_length = max([len(m['name']) for m in managers])\n        max_outdated = max([len(m['packages']) for m in managers])\n\n    if not FLAT_LAYOUT:\n        echo(\"---\")\n\n    for manager in managers:\n        if FLAT_LAYOUT:\n            echo(\"---\")\n\n        package_label = \"package{}\".format(\n            's' if len(manager['packages']) != 1 else '')\n\n        if FLAT_LAYOUT:\n            echo(\"{0} outdated {1} {2} | {f_summary} emojize=false\".format(\n                len(manager['packages']),\n                manager['name'],\n                package_label,\n                f_summary=FONTS['summary']))\n\n        else:\n            # Non-flat layout use a compact table-like rendering of manager\n            # summary.\n            echo(\n                \"{error}{0:\u003c{max_length}} {1:\u003e{max_outdated}} {2:\u003c8} | \"\n                \"{f_summary} emojize=false\".format(\n                    manager['name'] + ':',\n                    len(manager['packages']),\n                    package_label,\n                    error=\"⚠️ \" if manager.get('errors', None) else '',\n                    max_length=label_max_length + 1,\n                    max_outdated=len(str(max_outdated)),\n                    f_summary=FONTS['summary']))\n\n        print_package_items(manager['packages'], submenu)\n\n        print_upgrade_all_item(manager, submenu)\n\n        for error_msg in manager.get('errors', []):\n            echo(\"---\" if FLAT_LAYOUT else \"-----\")\n            print_error(error_msg, submenu)\n\n\nif __name__ == '__main__':\n    fix_environment()\n    print_menu()\n"
				}
			],
			"path": "Dev/meta_package_manager.7h.py",
			"filename": "meta_package_manager.7h.py",
			"dir": "Dev",
			"docsPlugin": "Dev/meta_package_manager.7h.py.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Meta Package Manager",
			"version": "v2.5.0",
			"author": "Kevin Deldycke",
			"authors": [
				{
					"name": "Kevin Deldycke",
					"githubUsername": "kdeldycke",
					"imageURL": "https://avatars.githubusercontent.com/u/159718?v=4",
					"bio": "VP, Engineering Manager, Founding Engineer - Billing, Payments \u0026 IAM.\r\n",
					"primary": true
				}
			],
			"desc": "List outdated packages and manage upgrades.",
			"imageURL": "https://i.imgur.com/CiQpQ42.png",
			"dependencies": [
				"python",
				"mpm"
			],
			"aboutURL": "https://github.com/kdeldycke/meta-package-manager",
			"lastUpdated": "2021-03-08T15:21:51.843708Z",
			"vars": null
		}
	]
}