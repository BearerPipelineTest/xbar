{
	"person": {
		"name": "Tyllis Xu",
		"githubUsername": "livelycarpet87",
		"imageURL": "https://avatars.githubusercontent.com/u/46377494?v=4",
		"bio": "",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Games/riggedCoinFlip.1h.sh",
					"filename": "riggedCoinFlip.1h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eRigged Coin Flip\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTyllis Xu\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003elivelycarpet87\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://i.ibb.co/YjYbHms/Rigged-Coin-Flip.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eA elaborately rigged coin flip. It can be set to varying degrees of unfairness and results (and its fairness) can be modified by the option key. \u003c/bitbar.desc\u003e\n\n#Configuration START\n\n#Fairness\n# 2: extreme realism\n# 1: fair\n# 0: Unfair\nfair=0\n#Probability for favored outcome\n#This does not influence fair flips\n# 50 to 100\nprob=90\n#favored\n# {H=favor heads|T=favor tails}\nfavored=T\n#Option Key Effect\n# 1: Reverse Favored Outcome\n# 2: Reverse Fairness\n# 3: Print Config (NOT RECOMMENDED)\nopt=2\n\n#Configuration END\n\n#Start Functions\n\nfairFlip(){\n  ((i=RANDOM % 100 + 1))\n  if [[ $i -le 50 ]]\n  then\n    echo \"H\"\n  else\n    echo \"T\"\n  fi\n}\nunfairFlip(){\n  ((i=RANDOM % 100 + 1))\n  if [[ $i -le $prob ]]\n  then\n    echo \"$favored\"\n  elif [[ $i -le 100 ]]\n then\n    echo \"$favored\"\n  else\n    echo \"Invalid Configuration!\"\n  fi\n}\nrealFlip(){\n  ((i=RANDOM % 6000 + 1))\n  if [[ $i == 1 ]]\n  then\n    echo \"The coin lands on its side and is perfectly still...\"\n  elif [[ $i -le 2940 ]]\n  then\n    echo \"$unfavored\"\n  else\n    echo \"$favored\"\n  fi\n}\n\nalternative(){\nif [[ $opt == 1 ]]\nthen\n  ((i=RANDOM % 100 + 1))\n  if [[ $i -le $prob ]]\n  then\n    echo \"$unfavored\"\n  elif [[ $i -le 100 ]]\n then\n    echo \"$favored\"\n  else\n    echo \"Invalid Configuration!\"\n  fi\nelif [[ $opt == 2 ]]\nthen\n  if [[ $fair == 1 || $fair == 2 ]]\n  then\n    unfairFlip\n  elif [[ $fair == 0 ]]\n  then\n    fairFlip\n  else\n    echo \"Invalid Configuration!\"\n  fi\nelif [[ $opt == 3 ]]\nthen\n  echo \"Fairness is $fair. Probability of favored outcome is $prob. Favored outcome is $favored. Option key setting is NO. $opt. Enjoy. \"\nelse\n    echo \"Invalid Configuration!\"\nfi\n}\n\n#End Functions\n\n#Initialize variables\nif [[ $favored == H ]]\nthen\n  unfavored=T\nelif [[ $favored == T ]]\nthen\n  unfavored=H\nelse\n  echo \"Invalid Configuration!\"\n  exit\nfi\n\n\necho \" :question: |dropdown=false\"\necho \" :grey_question: |dropdown=false\"\necho \"---\"\necho Result\nif [[ $fair == 0 ]]\nthen\n  echo \"-- $(unfairFlip)\"\n  echo \"-- $(alternative) | alternate=true\"\n\nelif [[ $fair == 1 ]]\nthen\n  echo \"-- $(fairFlip)\"\n  echo \"-- $(alternative) | alternate=true\"\nelif [[ $fair == 2 ]]\nthen\n  echo \"-- $(realFlip)\"\n  echo \"-- $(alternative) | alternate=true\"\nelse\n  echo \"Invalid Configuration!\"\nfi\n\necho \"Flip another coin. | refresh=true\"\n"
				}
			],
			"path": "Games/riggedCoinFlip.1h.sh",
			"filename": "riggedCoinFlip.1h.sh",
			"dir": "Games",
			"docsPlugin": "Games/riggedCoinFlip.1h.sh.html",
			"docsCategory": "Games.html",
			"pathSegments": [
				"Games"
			],
			"categoryPathSegments": [
				{
					"path": "Games",
					"text": "Games",
					"isLast": true
				}
			],
			"title": "Rigged Coin Flip",
			"version": "v1.0",
			"author": "Tyllis Xu",
			"authors": [
				{
					"name": "Tyllis Xu",
					"githubUsername": "livelycarpet87",
					"imageURL": "https://avatars.githubusercontent.com/u/46377494?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "A elaborately rigged coin flip. It can be set to varying degrees of unfairness and results (and its fairness) can be modified by the option key. ",
			"imageURL": "https://i.ibb.co/YjYbHms/Rigged-Coin-Flip.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:54.263982Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Pastebin/pastebin.1m.sh",
					"filename": "pastebin.1m.sh",
					"content": "#!/bin/bash\n\n#\n# \u003cbitbar.title\u003eCheck Pastebin\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTyllis Xu\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003elivelycarpet87\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eUses a set of Pastebin API keys to check for pastes created by the user. It will provide links to all the pastes it finds by the user. \u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.ibb.co/cym797V/Pastebin2.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/LivelyCarpet87/BitBar-Pastebin#bitbar-pastebin\u003c/bitbar.abouturl\u003e\n#\n\n#Requires Configuration Here\n\n#Pastebin developer key\ndev_key=\"\"\n\n#Pastebin user key\nusr_key=\"\"\n\n#Save-To Directory\n#Saved pastes will be saved to this directory\nsaveDir=\"\"\n\n#Enable Deletion of pastes\n# 0=disabled | 1=enabled\ndeleteEnabled=1\n\n#End Configuration\n\n#Constants\n#Pastebin API List Paste URL\nlist_paste_url=\"https://pastebin.com/api/api_post.php\"\n#Pastebin API Get Paste URL\nget_paste_url=\"https://pastebin.com/api/api_raw.php\"\n\n\n#empty pastes arrays\npasteNameArr=()\npasteKeyArr=()\n\n#Initialize the temp directory if it does not exist\nif [ ! -d /tmp/pastebinReader ]\nthen\nmkdir /tmp/pastebinReader\nfi\n\n#clear the temp directory\nrm -f /tmp/pastebinReader/*\n\n\n#get a list of all the pastes\n\nqueryResults=$(curl --silent --connect-timeout 15 --speed-time 15 --speed-limit 500  -X POST -d \"api_option=list\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\" $list_paste_url)\n\n#parse the paste titles and keys\n\ntitles=$(echo \"$queryResults\" | grep -E \"\u003cpaste_title\u003e([^\\r]*)\" --context=0 | sed s+'\u003cpaste_title\u003e\u003c/paste_title\u003e'+Untitled+g | sed s+\\\u003cpaste_title\\\u003e++g | sed s+'\u003c/paste_title\u003e'++g |tr '\\r' ' ')\n\npasteURLs=$(echo \"$queryResults\" | grep -E \"\u003cpaste_key\u003e(\\S*)\u003c/paste_key\u003e\" --context=0 | sed s+\\\u003cpaste_key\\\u003e++g | sed s+'\u003c/paste_key\u003e'++g |tr '\\r' ' ')\n\nSAVEIFS=$IFS\nIFS=$'\\n\\r'\n#shellcheck disable=SC2206\npasteNameArr=($titles)\n#shellcheck disable=SC2206\npasteKeyArr=($pasteURLs)\nIFS=$SAVEIFS\n\ntotalPastes=$((${#pasteNameArr[@]}))\n\n\n\n# test if the request response was valid\nif [[ $(echo \"$queryResults\" | grep \"paste\" -c) -gt 0 || $(echo \"$queryResults\" | grep \"No pastes found\" -c) == 1 ]]\nthen\n\necho Pastes Found: $totalPastes\n\ni=0\nwhile [[ $i \u003c $totalPastes ]]\ndo\nprintf '%s\\n' \"$((i + 1)): ${pasteNameArr[$i]} | length=15 dropdown=false\"\ni=$((i + 1))\ndone\n\necho \"---\"\ni=0\nwhile [[ $i \u003c $totalPastes ]]\ndo\n#print paste title\nprintf '%s\\n' \"$((i + 1)): ${pasteNameArr[$i]} |href=https://pastebin.com/${pasteKeyArr[$i]}\"\n\n#get and display paste content with slight modifications to prevent breaking Bitbar display\npasteContent=\"$(curl --silent -X POST --connect-timeout 15 --speed-time 15 --speed-limit 500 -d \"api_option=show_paste\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\u0026api_paste_key=${pasteKeyArr[$i]}\"  $get_paste_url)\"\n\necho \"-- $(echo \"$pasteContent\" | tr '\\n' '$' |  tr '\\r' '$' | sed 's/\\$\\$/; /g' | sed 's/;;/; /g')\"\n\n#save paste contents temporarily until next refresh\n\nfname=$(echo \"${pasteNameArr[$i]}_${pasteKeyArr[$i]}\"|tr ' ' '_'|tr '\t' '_')\ntempname=\"/tmp/pastebinReader/${fname}.txt\"\necho \"$pasteContent\" \u003e \"$tempname\"\n\n#display the paste in terminal\necho \"---- Read :book: | bash='cat \\\"$tempname\\\" |less'\"\n\n\n#if a save directory is given, offer to save the paste\nif [[ $saveDir != \"\" \u0026\u0026 -d $saveDir ]]\nthen\necho \"---- Save :arrow_down: | bash='cat \\\"$tempname\\\" \u003e \\\"$saveDir/${fname}.txt\\\"' terminal=false\"\nelse\necho \"---- Save Disabled | color=yellow\"\necho \"------ Go to config section to enable\"\nfi\n\n#if delete is enabled, give user a choice to delete paste\n\nif [[ $deleteEnabled == 1 ]]\nthen\necho \"---- Delete\"\necho \"api_option=delete\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\u0026api_paste_key=${pasteKeyArr[$i]}\" \u003e \"/tmp/pastebinReader/${fname}_delete_request.txt\"\necho \"------ Confirm | color = red bash='curl --silent --connect-timeout 15 --speed-time 15 --speed-limit 500  -X POST --data \\\"@/tmp/pastebinReader/${fname}_delete_request.txt\\\" $list_paste_url' terminal=false\"\nelse\necho Delete Disabled\nfi\n\ni=$((i + 1))\n\n\n\ndone\n\n# test if it is a connectivity issue\nelif [[ $(curl https://pastebin.com/api/api_post.php --silent --connect-timeout 15 --speed-time 15 --speed-limit 500| grep \"Bad API request\" -c) == 0  ]]\nthen\n\necho \":warning: Disconnected | color=yellow\"\necho \"---\"\necho \"Refresh Now | refresh=true color=blue\"\n\nelse\n\necho \":warning: Bad API Request | color=red\"\necho :warning: Please check keys for errors\necho \"---\"\necho \"Refresh Now | refresh=true color=blue\"\n\nfi\n"
				}
			],
			"path": "Dev/Pastebin/pastebin.1m.sh",
			"filename": "pastebin.1m.sh",
			"dir": "Dev/Pastebin",
			"docsPlugin": "Dev/Pastebin/pastebin.1m.sh.html",
			"docsCategory": "Dev/Pastebin.html",
			"pathSegments": [
				"Dev",
				"Pastebin"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Pastebin",
					"text": "Pastebin",
					"isLast": true
				}
			],
			"title": "Check Pastebin",
			"version": "v1.2",
			"author": "Tyllis Xu",
			"authors": [
				{
					"name": "Tyllis Xu",
					"githubUsername": "livelycarpet87",
					"imageURL": "https://avatars.githubusercontent.com/u/46377494?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Uses a set of Pastebin API keys to check for pastes created by the user. It will provide links to all the pastes it finds by the user. ",
			"imageURL": "https://i.ibb.co/cym797V/Pastebin2.png",
			"dependencies": null,
			"aboutURL": "https://github.com/LivelyCarpet87/BitBar-Pastebin#bitbar-pastebin",
			"lastUpdated": "2021-03-08T15:21:49.873114Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Pastebin/pastebin.3m.sh",
					"filename": "pastebin.3m.sh",
					"content": "#!/bin/bash\n\n#\n# \u003cbitbar.title\u003eCheck Pastebin\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTyllis Xu\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003elivelycarpet87\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eUses a set of Pastebin API keys to check for pastes created by the user. It will provide links to all the pastes it finds by the user. \u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.ibb.co/cym797V/Pastebin2.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/LivelyCarpet87/BitBar-Pastebin#bitbar-pastebin\u003c/bitbar.abouturl\u003e\n#\n\n#Requires Configuration Here\n\n#Pastebin developer key\ndev_key=\"\"\n\n#Pastebin user key\nusr_key=\"\"\n\n#Save-To Directory\n#Saved pastes will be saved to this directory\nsaveDir=\"\"\n\n#Enable Deletion of pastes\n# 0=disabled | 1=enabled\ndeleteEnabled=1\n\n#End Configuration\n\n#Constants\n#Pastebin API List Paste URL\nlist_paste_url=\"https://pastebin.com/api/api_post.php\"\n#Pastebin API Get Paste URL\nget_paste_url=\"https://pastebin.com/api/api_raw.php\"\n\n\n#empty pastes arrays\npasteNameArr=()\npasteKeyArr=()\n\n#Initialize the temp directory if it does not exist\nif [ ! -d /tmp/pastebinReader ]\nthen\nmkdir /tmp/pastebinReader\nfi\n\n#clear the temp directory\nrm -f /tmp/pastebinReader/*\n\n\n#get a list of all the pastes\n\nqueryResults=$(curl --silent --connect-timeout 15 --speed-time 15 --speed-limit 500  -X POST -d \"api_option=list\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\" $list_paste_url)\n\n#parse the paste titles and keys\n\ntitles=$(echo \"$queryResults\" | grep -E \"\u003cpaste_title\u003e([^\\r]*)\" --context=0 | sed s+'\u003cpaste_title\u003e\u003c/paste_title\u003e'+Untitled+g | sed s+\\\u003cpaste_title\\\u003e++g | sed s+'\u003c/paste_title\u003e'++g |tr '\\r' ' ')\n\npasteURLs=$(echo \"$queryResults\" | grep -E \"\u003cpaste_key\u003e(\\S*)\u003c/paste_key\u003e\" --context=0 | sed s+\\\u003cpaste_key\\\u003e++g | sed s+'\u003c/paste_key\u003e'++g |tr '\\r' ' ')\n\nSAVEIFS=$IFS\nIFS=$'\\n\\r'\n#shellcheck disable=SC2206\npasteNameArr=($titles)\n#shellcheck disable=SC2206\npasteKeyArr=($pasteURLs)\nIFS=$SAVEIFS\n\ntotalPastes=$((${#pasteNameArr[@]}))\n\n\n\n# test if the request response was valid\nif [[ $(echo \"$queryResults\" | grep \"paste\" -c) -gt 0 || $(echo \"$queryResults\" | grep \"No pastes found\" -c) == 1 ]]\nthen\n\necho \"Found: $totalPastes\"\n\ni=0\nwhile [[ $i \u003c $totalPastes ]]\ndo\nprintf '%s\\n' \"$((i + 1)): ${pasteNameArr[$i]} | length=7 dropdown=false\"\ni=$((i + 1))\ndone\n\necho \"---\"\ni=0\nwhile [[ $i \u003c $totalPastes ]]\ndo\n#print paste title\nprintf '%s\\n' \"$((i + 1)): ${pasteNameArr[$i]} |href=https://pastebin.com/${pasteKeyArr[$i]}\"\n\n#get and display paste content with slight modifications to prevent breaking Bitbar display\npasteContent=\"$(curl --silent -X POST --connect-timeout 15 --speed-time 15 --speed-limit 500 -d \"api_option=show_paste\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\u0026api_paste_key=${pasteKeyArr[$i]}\"  $get_paste_url)\"\n\necho \"-- $(echo \"$pasteContent\" | tr '\\n' '$' |  tr '\\r' '$' | sed 's/\\$\\$/; /g' | sed 's/;;/; /g')\"\n\n#save paste contents temporarily until next refresh\n\nfname=$(echo \"${pasteNameArr[$i]}_${pasteKeyArr[$i]}\"| tr ' ' '_'| tr '' '_'| tr '#' 'H'|tr '$' 'S'| tr '\u0026' '+'| tr -d '\u003e'| tr -d '\u003c'| tr -d '[' | tr -d ']'| tr -d '(' | tr -d ')' | tr -d '`' | tr -d '\"' | tr -d \\'| tr -d \\\\ | tr -d '|' | tr -d ';' |tr -d '*' | tr -d '?'| tr -d '~' | tr -d '/')\ntempname=\"/tmp/pastebinReader/${fname}.txt\"\necho \"$pasteContent\" \u003e \"$tempname\"\n\n#display the paste in terminal\n#quotes around tempname has been removed. Bitbar seems to fail to parse the rest of the command when there are quotes. This should be fine as the spaces and tabs have been replaced with underscores in tempname variable.\necho \"---- Read :book: | bash='cat $tempname |less'\"\n\n#if a save directory is given, offer to save the paste\nif [[ $saveDir != \"\" \u0026\u0026 -d $saveDir ]]\nthen\necho \"---- Save :arrow_down: | bash='cat $tempname \u003e $saveDir/${fname}.txt' terminal=false\"\nelse\necho \"---- Save Disabled | color=yellow\"\necho \"------ Go to config section to enable\"\nfi\n\n#if delete is enabled, give user a choice to delete paste\n\nif [[ $deleteEnabled == 1 ]]\nthen\necho \"---- Delete\"\necho \"api_option=delete\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\u0026api_paste_key=${pasteKeyArr[$i]}\" \u003e \"/tmp/pastebinReader/${fname}_delete_request.txt\"\necho \"------ Confirm | color = red bash='curl --silent --connect-timeout 15 --speed-time 15 --speed-limit 500  -X POST --data @/tmp/pastebinReader/${fname}_delete_request.txt $list_paste_url' terminal=true\"\nelse\necho Delete Disabled\nfi\n\ni=$((i + 1))\n\n\n\ndone\n\n# test if it is a connectivity issue\nelif [[ $(curl https://pastebin.com/api/api_post.php --silent --connect-timeout 15 --speed-time 15 --speed-limit 500| grep \"Bad API request\" -c) == 0  ]]\nthen\n\necho \":warning: Disconnected | color=#DAA520\"\necho \"---\"\necho \"Refresh Now | refresh=true color=blue\"\n\nelse\n\necho \":warning: Bad API Request | color=#800000\"\necho :warning: Please check keys for errors\necho \"---\"\necho \"Refresh Now | refresh=true color=blue\"\n\nfi\n"
				}
			],
			"path": "Dev/Pastebin/pastebin.3m.sh",
			"filename": "pastebin.3m.sh",
			"dir": "Dev/Pastebin",
			"docsPlugin": "Dev/Pastebin/pastebin.3m.sh.html",
			"docsCategory": "Dev/Pastebin.html",
			"pathSegments": [
				"Dev",
				"Pastebin"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Pastebin",
					"text": "Pastebin",
					"isLast": true
				}
			],
			"title": "Check Pastebin",
			"version": "v1.2",
			"author": "Tyllis Xu",
			"authors": [
				{
					"name": "Tyllis Xu",
					"githubUsername": "livelycarpet87",
					"imageURL": "https://avatars.githubusercontent.com/u/46377494?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Uses a set of Pastebin API keys to check for pastes created by the user. It will provide links to all the pastes it finds by the user. ",
			"imageURL": "https://i.ibb.co/cym797V/Pastebin2.png",
			"dependencies": null,
			"aboutURL": "https://github.com/LivelyCarpet87/BitBar-Pastebin#bitbar-pastebin",
			"lastUpdated": "2021-03-08T15:21:49.873136Z",
			"vars": null
		}
	]
}