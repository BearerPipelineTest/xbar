{
	"person": {
		"name": "Joseph",
		"githubUsername": "mgjo5899",
		"imageURL": "https://avatars.githubusercontent.com/u/17048946?v=4",
		"bio": "Listening to Yiruma songs helps me to focus when coding :)",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Weather/yahoo-weather.5m.py",
					"filename": "yahoo-weather.5m.py",
					"content": "#!/usr/bin/env LC_ALL=en_US.UTF-8 /usr/local/bin/python3\n#\n# \u003cbitbar.title\u003eYahoo Weather\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev3.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emgjo5899\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emgjo5899\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eIt tells you the current weather condition of the location where your computer is located at.  It knows the location of the computer by using its public IP.  You can also manually set the city and region through modifying the file. \u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/YNypf0P.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n# by mgjo5899\n\nimport json, uuid, time, hmac, hashlib\n\nfrom base64 import b64encode\nfrom urllib.request import urlopen, Request\nfrom urllib.parse import urlencode, quote\n\n# Change unit to 'c' for celsius and 'f' for fahrenheit\nunit = 'c'\n\n# General Placeholders\nurl = 'https://weather-ydn-yql.media.yahoo.com/forecastrss'\nmethod = 'GET'\nconcat = '\u0026'\n\n# Credentials\napp_id = 'f776QQ32'\nconsumer_key = 'dj0yJmk9RlJhbUVpUEpsSUxEJmQ9WVdrOVpqYzNObEZSTXpJbWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmc3Y9MCZ4PTk0'\nconsumer_secret = '75c592717d22c5cce623d2c2a1d5a5b36786d865'\n\n# Query and authentication related\nquery = {'location': 'seoul,korea', 'format': 'json', 'u': unit}\noauth = {\n    'oauth_consumer_key': consumer_key,\n    'oauth_nonce': uuid.uuid4().hex,\n    'oauth_signature_method': 'HMAC-SHA1',\n    'oauth_timestamp': str(int(time.time())),\n    'oauth_version': '1.0'\n}\n\n\n# Error handling decorator\ndef exception_handler(msg=\"Something is wrong\"):\n    def decorator(func):\n        def new_func(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n            except:\n                print(f\"Error: {msg}\")\n                exit(1)\n        return new_func\n    return decorator\n\n\n@exception_handler(msg=\"Location service\")\ndef get_location_using_ip():\n    service_endpoint = 'http://ip-api.com/json'\n    r = urlopen(service_endpoint).read()\n    j = json.loads(r)\n    city = j['city']\n    region = j['region']\n\n    return f\"{city},{region}\"\n\n\ndef get_auth_header():\n    global oauth\n    merged_params = query.copy()\n    merged_params.update(oauth)\n    sorted_params = [k + '=' + quote(merged_params[k], safe='') for k in sorted(merged_params.keys())]\n    signature_base_str =  method + concat + quote(url, safe='') + concat + quote(concat.join(sorted_params))\n    composite_key = quote(consumer_secret, safe='') + concat\n    oauth_signature = b64encode(hmac.new(composite_key.encode(), msg=signature_base_str.encode(), digestmod=hashlib.sha1).digest()).decode()\n    oauth['oauth_signature'] = oauth_signature\n    auth_header = 'OAuth ' + ', '.join(['{}=\"{}\"'.format(k,v) for k,v in oauth.items()])\n\n    return auth_header\n\n\n@exception_handler(msg=\"Yahoo Weather API\")\ndef get_weather(auth_header):\n    request_url = url + '?' + urlencode(query)\n    request = Request(request_url)\n    request.add_header('Authorization', auth_header)\n    request.add_header('X-Yahoo-App-Id', app_id)\n    r = urlopen(request).read()\n    j = json.loads(r)\n    condition_data = j['current_observation']['condition']\n    condition = condition_data['text']\n    temperature = condition_data['temperature']\n\n    return (condition, temperature)\n\nlocation = get_location_using_ip()\nquery['location'] = location\nauth_header = get_auth_header()\ncondition, temperature = get_weather(auth_header)\n\nif unit == 'c':\n  print(str(condition) + ' : ' + str(int(temperature)) + '°C')\nelif unit == 'f':\n  print(str(condition) + ' : ' + str(int(temperature)) + '°F')\n"
				}
			],
			"path": "Weather/yahoo-weather.5m.py",
			"filename": "yahoo-weather.5m.py",
			"dir": "Weather",
			"docsPlugin": "Weather/yahoo-weather.5m.py.html",
			"docsCategory": "Weather.html",
			"pathSegments": [
				"Weather"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": true
				}
			],
			"title": "Yahoo Weather",
			"version": "v3.0",
			"author": "mgjo5899",
			"authors": [
				{
					"name": "Joseph",
					"githubUsername": "mgjo5899",
					"imageURL": "https://avatars.githubusercontent.com/u/17048946?v=4",
					"bio": "Listening to Yiruma songs helps me to focus when coding :)",
					"primary": true
				}
			],
			"desc": "It tells you the current weather condition of the location where your computer is located at.  It knows the location of the computer by using its public IP.  You can also manually set the city and region through modifying the file. ",
			"imageURL": "https://i.imgur.com/YNypf0P.jpg",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:08.917558Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Cryptocurrency/Litecoin/ltc-usd.1s.py",
					"filename": "ltc-usd.1s.py",
					"content": "#!/usr/bin/env python\n# coding=utf-8\n#\n# \u003cbitbar.title\u003eLitecoin USD Tracker\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emgjo5899\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emgjo5899\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eIt tracks Litecoin price in USD\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/OI9eD75.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n# by mgjo5899\n\ntry:\n\timport requests\nexcept ImportError:\n  print(\"Need to install requests module\")\n  print(\"Type the following:\")\n  print(\"pip install requests\")\n\nimport json\n\nurl = 'https://www.worldcoinindex.com/apiservice/json?key=zQ5ePYHCeRw211NEeQ8DrZMbI'\nr = requests.get(url)\nj = json.loads(r.text)\n\nfor market in j['Markets']:\n  if 'litecoin' == market['Name'].lower():\n    price = market['Price_usd']\n\nprice = \"%.2f\" % price\n\nprint(str(price) + \" | image=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\")\n"
				}
			],
			"path": "Cryptocurrency/Litecoin/ltc-usd.1s.py",
			"filename": "ltc-usd.1s.py",
			"dir": "Cryptocurrency/Litecoin",
			"docsPlugin": "Cryptocurrency/Litecoin/ltc-usd.1s.py.html",
			"docsCategory": "Cryptocurrency/Litecoin.html",
			"pathSegments": [
				"Cryptocurrency",
				"Litecoin"
			],
			"categoryPathSegments": [
				{
					"path": "Cryptocurrency",
					"text": "Cryptocurrency",
					"isLast": false
				},
				{
					"path": "Cryptocurrency/Litecoin",
					"text": "Litecoin",
					"isLast": true
				}
			],
			"title": "Litecoin USD Tracker",
			"version": "v2.0",
			"author": "mgjo5899",
			"authors": [
				{
					"name": "Joseph",
					"githubUsername": "mgjo5899",
					"imageURL": "https://avatars.githubusercontent.com/u/17048946?v=4",
					"bio": "Listening to Yiruma songs helps me to focus when coding :)",
					"primary": true
				}
			],
			"desc": "It tracks Litecoin price in USD",
			"imageURL": "https://i.imgur.com/OI9eD75.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:46.611833Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Cryptocurrency/Ethereum/eth-usd.1s.py",
					"filename": "eth-usd.1s.py",
					"content": "#!/usr/bin/env python\n# coding=utf-8\n#\n# \u003cbitbar.title\u003eEthereum USD Tracker\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emgjo5899\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emgjo5899\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eIt tracks Ethereum price in USD\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/YEn5Cnk.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n# by mgjo5899\n\ntry:\n  import requests\nexcept ImportError:\n  print(\"Need to install requests module\")\n  print(\"Type the following:\")\n  print(\"pip install requests\")\n\nimport json\n\nurl = 'https://www.worldcoinindex.com/apiservice/json?key=zQ5ePYHCeRw211NEeQ8DrZMbI'\nr = requests.get(url)\nj = json.loads(r.text)\n\nfor market in j['Markets']:\n  if 'ethereum' == market['Name'].lower():\n    price = market['Price_usd']\n\nprice = \"%.2f\" % price\n\nprint(str(price) + \" | image=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\")\n"
				}
			],
			"path": "Cryptocurrency/Ethereum/eth-usd.1s.py",
			"filename": "eth-usd.1s.py",
			"dir": "Cryptocurrency/Ethereum",
			"docsPlugin": "Cryptocurrency/Ethereum/eth-usd.1s.py.html",
			"docsCategory": "Cryptocurrency/Ethereum.html",
			"pathSegments": [
				"Cryptocurrency",
				"Ethereum"
			],
			"categoryPathSegments": [
				{
					"path": "Cryptocurrency",
					"text": "Cryptocurrency",
					"isLast": false
				},
				{
					"path": "Cryptocurrency/Ethereum",
					"text": "Ethereum",
					"isLast": true
				}
			],
			"title": "Ethereum USD Tracker",
			"version": "v2.0",
			"author": "mgjo5899",
			"authors": [
				{
					"name": "Joseph",
					"githubUsername": "mgjo5899",
					"imageURL": "https://avatars.githubusercontent.com/u/17048946?v=4",
					"bio": "Listening to Yiruma songs helps me to focus when coding :)",
					"primary": true
				}
			],
			"desc": "It tracks Ethereum price in USD",
			"imageURL": "https://i.imgur.com/YEn5Cnk.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:46.079314Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/Slack/slack-unread.1s.py",
					"filename": "slack-unread.1s.py",
					"content": "#!/usr/bin/env python\n# coding=utf-8\n#\n# \u003cbitbar.title\u003eSlack Notification\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emgjo5899\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emgjo5899\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays number of unread Slack messages\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/I3MdNmU.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n# by mgjo5899\n\ntry:\n\timport requests\nexcept ImportError:\n\tprint('You need to `pip install requests`')\n\nimport json\nfrom time import sleep\nfrom threading import Thread\n\n#\n# USER TOKEN\n# You need to modify this part by generating your own tokens\n# https://api.slack.com/custom-integrations/legacy-tokens#legacy_token_generator\n#\ntokens = [\n\t# Replace this line\n\t'xoxp-slack-token-place-holder',\n]\n\nif tokens == ['xoxp-slack-token-place-holder']:\n\timport sys\n\n\tsys.exit('You need to generate a Slack user token and specify it in the \"slack-unread.1s.py\" script. \\nVisit api.slack.com | color=#09f href=https://api.slack.com/custom-integrations/legacy-tokens#legacy_token_generator')\n\ndark_mode = False\n# Build script in terminal\ndebug_mode = False\n\nblank_icon = ' image=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'\ncolor_icon = ' image=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'\nslack_call_command = ' href=slack:'\n\nchannels_list_url = 'https://slack.com/api/channels.list'\nchannels_info_url = 'https://slack.com/api/channels.info'\n\ngroups_list_url = 'https://slack.com/api/groups.list'\ngroups_info_url = 'https://slack.com/api/groups.info'\n\nconversations_list_url = 'https://slack.com/api/conversations.list'\nconversations_info_url = 'https://slack.com/api/im.history'\n\nunread_count = 0\n\n\n# When there are many channels under one Slack group, due to request rate limit per group,\n# some come out with \"ratelimit exceeded error\" returned.\n# So I had to run channel info request as fast as possible for each group\n# ONE TOKEN REPRESENT ONE SLACK GROUP\ndef get_unread_count(url, token, channel_id):\n\tr = requests.get(url + '?token=' + token + '\u0026channel=' + channel_id + '\u0026unreads=true')\n\treturn r\n\ndef get_list(url, scope, scope_type = None):\n\tif debug_mode:\n\t\tprint('get_list: ' + url)\n\n\ttry:\n\t\tr = requests.get(url)\n\n\texcept Exception as e:\n\t\tif debug_mode:\n\t\t\tprint('get_list error')\n\t\t\tprint(e)\n\n\t\treturn\n\n\tresult = json.loads(r.text)[scope]\n\tids = []\n\n\tfor channel in result:\n\t\t# Filter\n\t\tif (\n\t\t\t# Ignore slack user\n\t\t\t'user' in channel and channel['user'] == 'USLACKBOT' or\n\t\t\t# Ignore deleted users\n\t\t\t'is_user_deleted' in channel and channel['is_user_deleted'] == True or\n\t\t\t# Ignore channels that don't have me\n\t\t\t'is_member' in channel and channel['is_member'] != True\n\t\t):\n\t\t\tcontinue\n\n\t\t# Ignore channels for private messages\n\t\tif scope_type == 'user' and not 'user' in channel:\n\t\t\tcontinue\n\n\t\tids.append(channel['id'])\n\n\treturn ids\n\ndef get_channel_unreads(url, token, id, scope = None):\n\tglobal unread_count\n\n\tr = get_unread_count(url, token, id)\n\n\ttry:\n\t\tif scope != None:\n\t\t\tchannel = json.loads(r.text)[scope]\n\t\telse:\n\t\t\tchannel = json.loads(r.text)\n\n\t\t# Only for channels\n\t\tif 'is_member' in channel and channel['is_member'] == False:\n\t\t\treturn\n\n\t\tif 'unread_count_display' in channel.keys():\n\t\t\tunread_count += channel['unread_count_display']\n\n\t\telif 'unread_count' in channel.keys():\n\t\t\tunread_count += channel['unread_count']\n\n\texcept Exception as e:\n\t\tif debug_mode:\n\t\t\tprint('Error: ')\n\t\t\tprint(e)\n\n\t\tsleep(2)\n\t\t\n\t\t\ndef groups(token):\n\tall_threads = []\n\tfor id in get_list(groups_list_url + '?token=' + token + '\u0026exclude_archived=true', 'groups'):\n\t\tif debug_mode:\n\t\t\tprint('Loading groups unreads: %s, id: %s' % (token, id))\n\n\t\tt = Thread(target=get_channel_unreads, args=(groups_info_url, token, id, 'group'))\n\t\tt.start()\n\t\tall_threads.append(t)\n\n\tfor t in all_threads:\n\t\tt.join()\n\n\ndef channels(token):\n\tall_threads = []\n\tfor id in get_list(channels_list_url + '?token=' + token + '\u0026exclude_archived=true', 'channels'):\n\t\tif debug_mode:\n\t\t\tprint('Loading channel unreads: %s, id: %s' % (token, id))\n\n\t\tt = Thread(target=get_channel_unreads, args=(channels_info_url, token, id, 'channel'))\n\t\tt.start()\n\t\tall_threads.append(t)\n\n\tfor t in all_threads:\n\t\tt.join()\n\n\ndef privates(token):\n\tall_threads = []\n\tfor id in get_list(conversations_list_url + '?token=' + token + '\u0026types=public_channel,private_channel,mpim,im', 'channels', 'user'):\n\t\tif debug_mode:\n\t\t\tprint('Loading private channel unreads: %s, id: %s' % (token, id))\n\n\t\tt = Thread(target=get_channel_unreads, args=(conversations_info_url, token, id))\n\t\tt.start()\n\t\tall_threads.append(t)\n\n\tfor t in all_threads:\n\t\tt.join()\n\t\t\n\t\t\nfor token in tokens:\n\tif debug_mode:\n\t\tprint('Processing token: %s' % (token))\n\tg = Thread(target=groups, args=(token,))\n\tc = Thread(target=channels, args=(token,))\n\tp = Thread(target=privates, args=(token,))\n\tg.start()\n\tc.start()\n\tp.start()\n\n\tg.join()\n\tc.join()\n\tp.join()\n\n# THIS IS A SPECIAL FEATURE FOR USERS WITH DARK MENU BAR ENABLED\n# REMOVE COMMENTING OUT TO USE\nif unread_count == 0:\n\tif dark_mode:\n\n\t\tif debug_mode:\n\t\t\tprint('0 - blank_icon')\n\t\telse:\n\t\t\t# Empty white icon\n\t\t\tprint(\" | \" + blank_icon + slack_call_command)\n\n\telse:\n\t\tif debug_mode:\n\t\t\tprint('0 - color_icon')\n\t\telse:\n\t\t\tprint(\" | \" + color_icon + slack_call_command)\n\nelse:\n\tif debug_mode:\n\t\tprint(str(unread_count) + ' - color icon')\n\telse:\n\t\tprint(str(unread_count) + \" | \" + color_icon + slack_call_command)\n"
				}
			],
			"path": "Tools/Slack/slack-unread.1s.py",
			"filename": "slack-unread.1s.py",
			"dir": "Tools/Slack",
			"docsPlugin": "Tools/Slack/slack-unread.1s.py.html",
			"docsCategory": "Tools/Slack.html",
			"pathSegments": [
				"Tools",
				"Slack"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/Slack",
					"text": "Slack",
					"isLast": true
				}
			],
			"title": "Slack Notification",
			"version": "v1.2",
			"author": "mgjo5899",
			"authors": [
				{
					"name": "Joseph",
					"githubUsername": "mgjo5899",
					"imageURL": "https://avatars.githubusercontent.com/u/17048946?v=4",
					"bio": "Listening to Yiruma songs helps me to focus when coding :)",
					"primary": true
				}
			],
			"desc": "Displays number of unread Slack messages",
			"imageURL": "https://i.imgur.com/I3MdNmU.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.318547Z",
			"vars": null
		}
	]
}