{
	"person": {
		"name": "Martin Kluska",
		"githubUsername": "pionl",
		"imageURL": "https://avatars.githubusercontent.com/u/1878831?v=4",
		"bio": "I make stuff (web, mobile, apps and ‚òïÔ∏è )",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Dev/Gitlab/gitlab_ci.1m.py",
					"filename": "gitlab_ci.1m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eGitlab CI\u003c/bitbar.title\u003e\n# \u003cbitbar.desc\u003eShows currently running pipelines from your GitLab in your bar. Interested in more advanced GitLab bar integration? Let me know (martin@kluska.cz). This implementation is just quick solution.\u003c/bitbar.desc\u003e\n# \u003cbitbar.version\u003ev0.21\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMartin Kluska\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003epionl\u003c/bitbar.author.github\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/pionl/bitbar-gitlab-ci/master/gitlab_ci.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/pionl/bitbar-gitlab-ci\u003c/bitbar.abouturl\u003e\n#\n\nimport json\n\ntry:\n    # For Python 3.0 and later\n    from urllib.request import urlopen\nexcept ImportError:\n    # Fall back to Python 2's urllib2\n    from urllib2 import urlopen\n\n# Your private key for accessing gitlab: User -\u003e Settings -\u003e Access tokens -\u003e add personal access token with api scope\nPRIVATE_TOKEN = 'token'\n# Gitlab URL\nURL = 'https://gitlab.example.com'\n# Define your server and projects (name: id)\n# To get id go to project -\u003e Settings -\u003e General -\u003e General project settings\nPROJECTS ={\"React\": 3}\n\npipelines = []\n\n# Converts the gitlab status to emoji\ndef stateIcon(status):\n    return {\n        \"created\": \"üí§\",\n        \"pending\": \"üí§\",\n        \"running\": \"üöÄ\",\n        \"failed\": \"‚ùó\",\n        \"success\": \"‚úîÔ∏è\",\n        \"skipped\": \"üöÄ\",\n        \"manual\": \"üí§\"\n    }[status]\n\n# Calls gitlab API endpoint with private_token\ndef api (method):\n    url = URL + \"/api/v4/\" + method\n    param = 'private_token=' + PRIVATE_TOKEN\n    # Detect if method has query string (we need to append private token)\n    url = url + (('\u0026') if \"?\" in url else ('?')) + param\n    body = urlopen(url).read()\n    return json.loads(body.decode('utf-8'))\n\n# Project details\nclass Project:\n    def __init__ (self, name, id):\n        self.name = name\n        self.id = id\n\n# Pipile job\nclass Job:\n    def __init__ (self, json):\n        self.name = json[\"stage\"] + (\": \" + json[\"name\"] if json[\"name\"] != json[\"stage\"] else \"\" )\n        self.status = json[\"status\"]\n        self.duration = 0 if json[\"duration\"] is None or self.status == 'running' else int(json[\"duration\"])\n        self.commit = json['commit']['title']\n\n    # Jobs name with duration\n    def displayName(self):\n        return self.name + (' ' + str(self.duration) + 's' if self.duration \u003e 0 else '')\n    \n# Pipile\nclass Pipeline:\n    def __init__ (self, projectName, projectId, json):\n        self.project = Project(projectName, projectId)\n        self.id = json[\"id\"]\n        self.jobs = []\n        self.runningJobs = []\n        self.ref = str(json[\"ref\"])\n        self.commit = None\n\n    # Display name with current running jobs\n    def displayName(self):\n        jobsString = 'üí§'\n\n        # Get running jobs and append the name\n        if len(self.runningJobs) \u003e 0:\n            strings = []\n            for job in self.runningJobs:\n                strings.append(job.displayName()) \n\n            jobsString = ', '.join(strings)\n\n        return self.project.name + ' - ' + self.ref + ' (' + jobsString + ')'\n\n    # Add jobs array json\n    def addJobs(self, jobsArray):\n        for jobJson in jobsArray:\n            # Parse the job\n            job = Job(jobJson)\n            # Add the jobs array\n            self.jobs.append(job)\n\n            # Get the commit from the first job\n            if self.commit is None:\n                self.commit = job.commit\n\n            # Check if the job is running for running jobs array\n            if job.status == 'running':\n                self.runningJobs.append(job)\n\n\n# Loop the projects and get thy jobs\nfor name, project in PROJECTS.iteritems():\n    runningPipelines = api(\"projects/\"+str(project)+\"/pipelines?scope=running\")\n\n    for pipelineJson in runningPipelines:\n        pipeline = Pipeline(name, project, pipelineJson)\n        jobsArray = api(\"projects/\"+str(project)+\"/pipelines/\"+str(pipeline.id)+\"/jobs\")\n        if jobsArray.count \u003e 0:\n            pipeline.addJobs(jobsArray)\n            pipelines.append(pipeline)\n\npipelineCount = len(pipelines)\nif pipelineCount == 0:\n    print \"üí§\"\n    exit\n\n\n## Render the pipelines names (bitbar will loop)\nfor index, pipeline in enumerate(pipelines):\n    print 'üöÄ ',\n\n    if pipelineCount \u003e 1:\n        print str(index + 1) + '/' + str(pipelineCount) + ' ',\n\n    print pipeline.displayName()\n\n\n## Start menu\nprint \"---\"\n\nfor pipeline in pipelines:\n    print 'üöÄ ' + pipeline.project.name + ' - ' + pipeline.ref + '| color=black'\n    print '-- commit: ' + pipeline.commit + '| color=black'\n    print '---'\n    for job in pipeline.jobs:\n        print stateIcon(job.status) + \" \",\n\n        style = ''\n        if job.status == 'success':\n            style = '| color=green'\n        elif job.status == 'running':\n            style = '| color=blue'\n\n        print job.displayName() + style\n\n        "
				}
			],
			"path": "Dev/Gitlab/gitlab_ci.1m.py",
			"filename": "gitlab_ci.1m.py",
			"dir": "Dev/Gitlab",
			"docsPlugin": "Dev/Gitlab/gitlab_ci.1m.py.html",
			"docsCategory": "Dev/Gitlab.html",
			"pathSegments": [
				"Dev",
				"Gitlab"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Gitlab",
					"text": "Gitlab",
					"isLast": true
				}
			],
			"title": "Gitlab CI",
			"version": "v0.21",
			"author": "Martin Kluska",
			"authors": [
				{
					"name": "Martin Kluska",
					"githubUsername": "pionl",
					"imageURL": "https://avatars.githubusercontent.com/u/1878831?v=4",
					"bio": "I make stuff (web, mobile, apps and ‚òïÔ∏è )",
					"primary": true
				}
			],
			"desc": "Shows currently running pipelines from your GitLab in your bar. Interested in more advanced GitLab bar integration? Let me know (martin@kluska.cz). This implementation is just quick solution.",
			"imageURL": "https://raw.githubusercontent.com/pionl/bitbar-gitlab-ci/master/gitlab_ci.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/pionl/bitbar-gitlab-ci",
			"lastUpdated": "2021-03-08T15:21:48.698363Z",
			"vars": null
		}
	]
}