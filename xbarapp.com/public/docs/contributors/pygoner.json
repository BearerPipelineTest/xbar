{
	"person": {
		"name": "Martin Jobke",
		"githubUsername": "pygoner",
		"imageURL": "https://avatars.githubusercontent.com/u/22852467?v=4",
		"bio": "",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Environment/CO2-Signal.10m.py",
					"filename": "CO2-Signal.10m.py",
					"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 /usr/local/bin/python3\n\n# \u003cbitbar.title\u003eCO2Signal API\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMartin Jobke\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003epygoner\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays the current carbon (gC02equivalent) emmissions per kWh of produced electric energy in the requested country/region \u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython, CO2 Signal\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://docs.co2signal.com/\u003c/bitbar.abouturl\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/pygoner/Plugin-Bitbar/main/Bitbar%20C02%20Signal%20Plugin%20Image.png\u003c/bitbar.image\u003e\n\nimport requests\nimport sys\n\n# user settings \n# get your C02Signal API token at https://www.co2signal.com/\n# insert your specific country code from this list http://api.electricitymap.org/v3/zones\n# have fun ^^\n\nmyapitoken = ''\nmyCountrycode = ''\n\nclass CO2Signal:\n\n    def __init__(self, authToken, countryCode):\n        self.authToken = authToken\n        self.countryCode = countryCode\n\n    def requestC02Signal(self):\n        url = 'http://api.co2signal.com/v1/latest?countryCode=' + self.countryCode\n        headers = {'auth-token': self.authToken}\n        self.resDict = requests.get(url, params=headers).json()\n\n    def displayResponse(self):\n        try:\n            print(self.resDict['error'])\n            self.dropdownMenu('', 'error')\n            return\n        except KeyError:\n            stringToDisplay = self.countryFlag(self.countryCode)\n            try:\n                self.resDict['message']\n                # if the API key is used more than 30 times an hour or wrong\n                # the CO2 Signal return just a json containing 'message'\n                self.dropdownMenu(stringToDisplay, 'APILimit')\n                return\n            except KeyError:\n                # if the country live data is currently unavialable the\n                # fossilFuelPercentage is null/none\n                if (self.resDict['data']['fossilFuelPercentage']):\n                    stringToDisplay += str(round(self.resDict['data']['carbonIntensity'], 1))\n                    stringToDisplay += ' | color=' + self.color(self.resDict['data']['carbonIntensity'])\n                    self.dropdownMenu(stringToDisplay, 'normal')\n                else:\n                    stringToDisplay += ':-( | color=#e62e00'     # red sad smiley\n                    self.dropdownMenu(stringToDisplay, 'noLiveData')\n\n    def dropdownMenu(self, stringToDisplay, mode):\n        print(stringToDisplay)\n        if (mode == 'normal'):\n            print('---')\n            ffp = round(self.resDict['data']['fossilFuelPercentage'], 1)\n            # creating a smiley face which reflects the mood of\n            # an environmental caring person ^^\n            if (ffp \u003c 20):\n                ffp = str(ffp) + ' :heart_eyes:'\n            else:\n                if(ffp \u003c 30):\n                    ffp = ffp = str(ffp) + ' :grinning:'\n                else:\n                    if(ffp \u003c 50):\n                        ffp = ffp = str(ffp) + ' :neutral_face:'\n                    else:\n                        ffp = ffp = str(ffp) + ' :poop:'\n            print('fossil fuel percentage: ' + ffp)\n            print('-- percentage of electricity')\n            print('-- generated by coal, gas or oil')\n        \n        if (mode == 'APILimit'):\n            print('---')\n            print(self.resDict['message'])\n            if ('Invalid' in self.resDict['message']):\n                print('Get a API key at https://www.co2signal.com/')\n\n        if (mode == 'noLiveData'):\n            print('---')\n            print('No data currently avialable!')\n\n        if (mode == 'error'):\n            print('---')\n\n        print('API Website (CO2 Signal)| href=https://www.co2signal.com/')\n        print('electricityMap Website | href=https://electricitymap.org') \n\n    def countryFlag(self, countryCode='WhiteFlag'):\n        # https://www.unicode.org/charts/PDF/U1F100.pdf\n        # see regional indicator symbols\n        if (countryCode == 'WhiteFlag'):\n            return 'üè≥ '\n        start = 0x1F1E6\n        # unicode start for letter 'A' in regional Symbols\n        letterOffset1 = ord(countryCode[0]) - ord('A')\n        letterOffset2 = ord(countryCode[1]) - ord('A')\n        # calculation of number which is added\n        # e.g. 'D' as regional letter = 'A' as regional letter + 3\n        letter1 = start + letterOffset1\n        letter2 = start + letterOffset2\n        return (chr(letter1) + chr(letter2))\n\n    def rgb_to_hex(self, rgb):\n        # https://www.codespeedy.com/convert-rgb-to-hex-color-code-in-python/\n        return '%02x%02x%02x' % rgb\n\n    def linearGradient(self, col1, col2, splitFactor):\n        # this function returns the color which is in between those two colors and\n        # is splits those two colors according to the split factor\n        # e.g. col1 = (0, 0, 0); col2 = (40, 60, 80); SF = 0.4\n        # linearGradient(col1, col2, SF) -\u003e 0.4*((40, 60, 80) - (0, 0, 0))\n        # similar to finding a point on straight between two points\n        dif = (col1[0] - col2[0], col1[1] - col2[1], col1[2] - col2[2])\n        dif = (dif[0]*splitFactor, dif[1]*splitFactor, dif[2]*splitFactor)\n        result = (col1[0] - dif[0], col1[1] - dif[1], col1[2] - dif[2])\n        result = (int(result[0]), int(result[1]), int(result[2]))\n        return result\n     \n    def color(self, carbonIntensity):\n        # this function should determine a color given the carbon intensity\n        # low intensity -\u003e more green\n        # middle intensity -\u003e yellow\n        # high intensity -\u003e brown\n        # similar to the color scale at: electricitymap.org\n\n        maximum = 800\n        ratio = carbonIntensity / maximum\n\n        colors = ((42, 163, 100), (162, 206, 86), (240, 225, 75),\n                (222, 191, 68), (205, 158, 61), (188, 124, 53),\n                (171, 91, 46), (143, 61, 35), (82, 39, 12), (56, 29, 2))\n        splitLenght = 1 / 9\n\n        # the color scale is split up nine times\n        # each time there is a linear gradient betwenn the colors of the colors tuple\n\n        k = int(ratio // splitLenght)\n        splitFactor = (ratio % splitLenght) / splitLenght\n        if (ratio \u003e= 0.999999):\n            return('#' + self.rgb_to_hex(colors[10]))\n        else:\n            carbonColor = self.linearGradient(colors[k], colors[k+1], splitFactor)\n            carbonColor = self.rgb_to_hex(carbonColor)\n            return('#' + carbonColor)\n\n\nmyCO2Signal = CO2Signal(myapitoken, myCountrycode)\nmyCO2Signal.requestC02Signal()\nmyCO2Signal.displayResponse()"
				}
			],
			"path": "Environment/CO2-Signal.10m.py",
			"filename": "CO2-Signal.10m.py",
			"dir": "Environment",
			"docsPlugin": "Environment/CO2-Signal.10m.py.html",
			"docsCategory": "Environment.html",
			"pathSegments": [
				"Environment"
			],
			"categoryPathSegments": [
				{
					"path": "Environment",
					"text": "Environment",
					"isLast": true
				}
			],
			"title": "CO2Signal API",
			"version": "v1.0",
			"author": "Martin Jobke",
			"authors": [
				{
					"name": "Martin Jobke",
					"githubUsername": "pygoner",
					"imageURL": "https://avatars.githubusercontent.com/u/22852467?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin displays the current carbon (gC02equivalent) emmissions per kWh of produced electric energy in the requested country/region ",
			"imageURL": "https://raw.githubusercontent.com/pygoner/Plugin-Bitbar/main/Bitbar%20C02%20Signal%20Plugin%20Image.png",
			"dependencies": [
				"python",
				"CO2 Signal"
			],
			"aboutURL": "https://docs.co2signal.com/",
			"lastUpdated": "2021-03-08T15:21:53.069041Z",
			"vars": null
		}
	]
}