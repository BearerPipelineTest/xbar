{
	"person": {
		"name": "Sebastian Rodriguez",
		"githubUsername": "sebasrp",
		"imageURL": "https://avatars.githubusercontent.com/u/331558?v=4",
		"bio": "engineering leader passionate about solving technical challenges!",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "AWS/cloudwatch-alarms.30s.py",
					"filename": "cloudwatch-alarms.30s.py",
					"content": "#!/usr/local/bin/python3\n# -*- coding: UTF-8 -*-\n\n# \u003cbitbar.title\u003eCloudWatch Alarms Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastian Rodriguez\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebasrp\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eMonitor the status of your CloudWatch Alarms\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython, boto3\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/qiqHX32.png\u003c/bitbar.image\u003e\n\nimport boto3\n\n\nclass CWA_status:\n\n    def __init__(self):\n        self.cw_client = boto3.client('cloudwatch')\n        self.cwa_OK = self.get_alarms(state='OK')\n        self.cwa_NOK = self.get_alarms(state='ALARM')\n        self.cwa_ID = self.get_alarms(state='INSUFFICIENT_DATA')\n\n    def get_alarms(self, state):\n        alarms = []\n        paginator = self.cw_client.get_paginator('describe_alarms')\n        for response in paginator.paginate(StateValue=state):\n            alarms += response['MetricAlarms']\n        alarms = sorted(alarms, key=lambda i: i['StateUpdatedTimestamp'])\n        return alarms\n\n    def display_alarms(self):\n        status_string = 'CWA '\n        cwa_nok = f\"{':fire: ' + str(len(self.cwa_NOK)) if self.cwa_NOK else ''}\"\n        cwa_id = f\"{':warning: ' + str(len(self.cwa_ID)) if self.cwa_ID else ''}\"\n        cwa_ok = f\"{':thumbsup:' if not self.cwa_NOK and not self.cwa_ID else ''}\"\n        print(f\"{status_string}{cwa_nok}{' - ' if (cwa_nok and cwa_id) else ''}{cwa_id}{cwa_ok}\")\n\n    def display_detailed_alarms(self):\n        self.display_alarm_list(self.cwa_NOK, 'ALARM')\n        self.display_alarm_list(self.cwa_ID, 'INSUFFICIENT_DATA')\n        self.display_alarm_list(self.cwa_OK, 'OK')\n\n    def display_alarm_list(self, alarm_dict, state_string):\n        print(f\"{state_string} - ({len(alarm_dict)})\")\n        if alarm_dict:\n            for monitor in alarm_dict:\n                print(f\"-- {monitor['AlarmName']}\")\n        else:\n            print(f\"-- No monitors in {state_string}!\")\n\n\nif __name__ == '__main__':\n    try:\n        cwa_status = CWA_status()\n        cwa_status.display_alarms()\n        print('---')\n        cwa_status.display_detailed_alarms()\n    except Exception as ex:\n        print(f\":warning: Exception executing script. Exception: {ex}\")\n        raise ex\n"
				}
			],
			"path": "AWS/cloudwatch-alarms.30s.py",
			"filename": "cloudwatch-alarms.30s.py",
			"dir": "AWS",
			"docsPlugin": "AWS/cloudwatch-alarms.30s.py.html",
			"docsCategory": "AWS.html",
			"pathSegments": [
				"AWS"
			],
			"categoryPathSegments": [
				{
					"path": "AWS",
					"text": "AWS",
					"isLast": true
				}
			],
			"title": "CloudWatch Alarms Status",
			"version": "v1.0",
			"author": "Sebastian Rodriguez",
			"authors": [
				{
					"name": "Sebastian Rodriguez",
					"githubUsername": "sebasrp",
					"imageURL": "https://avatars.githubusercontent.com/u/331558?v=4",
					"bio": "engineering leader passionate about solving technical challenges!",
					"primary": true
				}
			],
			"desc": "Monitor the status of your CloudWatch Alarms",
			"imageURL": "https://i.imgur.com/qiqHX32.png",
			"dependencies": [
				"python",
				"boto3"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:44.36512Z",
			"vars": null
		}
	]
}