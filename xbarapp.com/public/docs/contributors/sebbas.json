{
	"person": {
		"name": "Sebastián Barschkis",
		"githubUsername": "sebbas",
		"imageURL": "https://avatars.githubusercontent.com/u/1890600?v=4",
		"bio": "Physics Developer @blender",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Music/music-controls-info.10s.sh",
					"filename": "music-controls-info.10s.sh",
					"content": "#!/bin/bash\n\n# Shows infos on artist, album, track and more in cmus or pianobar.\n#\n# Special thanks to Google for providing the open-source icons: https://github.com/google/material-design-icons\n# and to mcchrish and alekseysotnikov for their helpful existing BitBar scripts\n#\n# metadata\n# \u003cbitbar.title\u003eMusic Controls - Next Track Button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastián Barschkis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebbas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePlays the next track in cmus, iTunes, Music, Spotify or pianobar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eperl\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://github.com/sebbas/music-controls-bitbar\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\nexport LC_CTYPE=\"UTF-8\"\n\npianobar_ctlfile=\"$HOME/.config/pianobar/ctl\"\npianobar_stationsfile=\"$HOME/.config/pianobar/stations\"\npianobar_playingfile=\"$HOME/.config/pianobar/playing\"\ncmus_cachefile=\"$HOME/.config/cmus/cache\"\n\ndisplay_length=40\n\n# Enables features that are still under development\nEXPERIMENTAL_MODE=0\n\nNONE=\"none\"\nCMUS=\"cmus\"\nITUNES=\"iTunes\"\nMUSIC=\"Music\"\nSPOTIFY=\"Spotify\"\nPIANOBAR=\"pianobar\"\n\nlist_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAONJREFUaAXtlkEKAjEMRUdBvEZv48o7eSddeBrnGC41XRQkpFBsMzT6CqE07fxJXsNkloUBAQhAAAIQgAAE/pfAriH1V8OZniMtMVT199WdIBskEOSiCBMCP0ug5RtMH/C8fvqAJ120IQCBMQRyH+gxHcVNHEk7Pdc9wVtNMPueYhexo5j78EigaK4S/ck7g/Kyb2cdn6VzlUNJH5x1bSWQfZuWVQ+cWgLFv4p4c1nN+i906CHk/WwhrefQJXQXasmb3Cj9T/IPET2PEt5KJycQplwsKKHKxUoAHwQgAAEIzEPgDVrLdHaFYNcHAAAAAElFTkSuQmCC\"\nlist_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAO5JREFUaAXtlsENwjAMRVskxBrZhhM7sRMcmIaOwbH8SOnlKyWA4ypRv6UotRM79qvVdBgkIiACIiACIiACIrBfAmOp9BlS2mNZHyEW/4PFuQVfFdDCW1AOIrBnAsVvsO4B5/bQPeAMWOFFQASsBOI9YBE+H7HuGIHtbrol+ejLiaV4L8xXjBOvV9fTgX9PnBAFmqCfeU9VnQ78WeVkVgLcYA+8t0l9pYBo3q6tLGQ+FLAsTXj4uq1a/Rc6WiC5+i6YM3PXLfRAQcGVXK3gRP4J/VIr9iZxUgF9tEuOCArop11yBcgmAiIgAiLQFIE3waT5BVt6JEkAAAAASUVORK5CYII=\"\n\nnote_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAJNJREFUSA1jYBgFBEKAkYA8Nun/2ASBYljNYsKhmGrCQ98CFgrCAmuYo5s39INo1AfocYrBJxREEkAdm4H4DRCDcvBxIKYaEAWa9AyIQQZjwxRbtACHwTDLKLbgNTUswBcHv/A4ERR0RAF8FuzGY8IePHJES4kBVWKLZJAYKAFQBUgCTdkKxG+heBOQBomNAuqFAACH8ifJWZDB1wAAAABJRU5ErkJggg==\"\nnote_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAALFJREFUSA1jYBgFBEKAkYA8hvR/IMAQBAowAgE2cSZsgtQUG/oWsJAbHLjCHN28oR9Eoz5Aj1MMPt4gAmZaCSDeDMRvgBgEjmOYQK4A0DBRIH4GMhUbINdcuD6goQuwGQwTgyskwMBaQIH0AA16DaREcOmnRkb7hctwoPgzPHIoUvgieTeKSlTOHlQuGTxgEIkBMbZIBomJkmEkphagQZJAvBWI30LxJpAYpspREQpCAACt5Y+AqibnJQAAAABJRU5ErkJggg==\"\n\nperson_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAANFJREFUSA1jYBgFQyUEJIAO3QzEb6AYxAaJUQWIAk15BsT/0fBzIF8QiCkGC4AmoBsO4y+k2HSgAa/xWACSwwuY8MpCJH/hUYNPDqyNGAt247FgDx45oqXEgCqxRTJIDJQAqAIkgaZsBeK3ULwJSIPERgBgJOBHQ6B8KBCbATGILQTEIPAOiM8D8SkgXg1lAynigT1QKcgAWIYiRIPUOgAxUSAcqOoPEBMyFF0epAeklyB4ClSBrplYPkgvCsAWByDDKAEoZhKTkymxbFTvIAgBAOvwVavvg1ziAAAAAElFTkSuQmCC\"\nperson_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAOBJREFUSA3tk0EOwUAUhjtuQFIpTmFjyyWk12NtR6w4gU1PoRbFAUQyvpEuxmhmXqMLpC/5ktd5//x/+0QUtfUTG9BaJ7CBc4npk0ZeHqMYcnDrxEH34xBMFq6z9bxsIqCwDN22CAV0QgLmN4/GN3tekwTsPAF7z0w2Yid9qPqRzVkscwmoMBrAFi4la3MWuPYnY+X7DtYwZj6HCZi+B6aukMEBVkop08sL4ylkIC2jnYkSEKZwlzpbOnMndUPeVoToiGjoCoXPOesa2dqqAG0L6vYEvHhK/sl1M1r9l23gARRQLiEZXQo0AAAAAElFTkSuQmCC\"\n\nalbum_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAW1JREFUSA3Vlc0uBUEQhYdIxDu4icWNBQsPwRWxsmLjSRCPI5ZWVvcF7PxGsBmJJWuRCL5Dd+vbXWN6sOAkJ1VTdaqqZ7pnpqr+O8ZabmCS/BpchQuwD5/hLTyGh/AAPsHOWKGihq8tlEbaTthG3dY4zr+gV00RujaPB7UOGbAErSYu6uKrVj0C4k2eInoNp0N21BlyeeFC89il0XS4usObhY8h4pxNrLXaB+KLqdjF7htq1CvDPhFrwHqm/AxsNNSoV4YrIumA00yVB6RJ69TrHePewVrP/ijKyz2Hfh98KtUoHnpNeBVWJyCFVhajRCO9pausR3QWd2/wpWl8RHHNniFU4VebrFzaXNfqleE7x1RH2BoQjmn8ounLeQN72eiPwBBz6XJzWOvdUFovWh+aX9hf/1RoYootAtZtl8RUW4QdVCUNvUbHcreocyRaxq+hb9JkpZHWRLzJliD9Zc44UY09gT/6Zbpef9y8Aedy0zAzcRrpAAAAAElFTkSuQmCC\"\nalbum_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAYRJREFUSA3VlbFKA0EQhu9EEN/BgEWw0IAPoQnBykqbPEkUnyelVaq8gIUQE0WizQmWWosgOb/B3ctmd25zOSx04WdmZ/5/Zvf2bi9J/vtIYxvI83yL/Ck4AYegCb7ACxiDIbhO0/QTu96geBdkYNUQTnet6gguVlX18nPRVGpSo7jbK94EZhvIauoO0bbdnRSHTGKbxBPYcQmOP8J/MPMD7LGTc91XJnsc/IcbTGjQK1n2O/GjJTITiYG3Ek3P54tgUEI+C8gmAP+8RDMINBBnCnkSEL0Amomim1nahnWw2rO/cfKyy3tgz8GmljgmWNTatCzs3PGtm1vH2CocoYY8VqY9oqnXIJiimwJ/qI/oNlAnSQtl7JAl11J0YS0K1XlN5RXWRvGauh+a3JzPoKGsSEIj8Ghy+9jg2zA5+dCa6g3LUn79qjBNF4YmfW3PFWP9RaWIR7HLigUtTS65q0jJMIWgAzJbIWKF0wkr/ESKQ9YICP1f5q7hZdg7UP+XaQr9ffMNJgYZyQXHjjUAAAAASUVORK5CYII=\"\n\nstation_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAARxJREFUSA1jYBikgA/orlwgvgrEItR0oy7QsBlA/AWI/0NxDJCmCLABdUcC8WEghhn6FsjuB2J1ICYbyAJ1tgDxayAGGfwPiPcCMcgykKVkAUagLlcg3gDEf4EYZPBzIG4HYnkgpgjYA3XfAmKQoZTga0D9/kCMAR4CRSgxGFnvYwzTkQzHJkeKGMwisB4mUnSSo5YaFqC4GN0R1LAA3UwUPihZwgDIJdQEYLNp7gNcFtQDvSIJxU3U8hYssiqxGFgBFIPJE0tjGAPTKIEhw8AAEoPJE0uDjcEWRMgRD7MLmxhMDi+NzYIkLDoSsYiRLITs9WagbmkoBrGR5YhlYzjgCZkGYbPwEYbpQAFQEXudCpaAzMBaXAPFhyAAABRSlmFQeETmAAAAAElFTkSuQmCC\"\nstation_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAATBJREFUSA3NlL9qAkEQh28tLFNZKGJSWvkMVtapAzbaBvukCiQBy7R5jLyAVZ7BIHaiYBHSpU0u38rNsQ4reDsGHPjY+XPzm91b7rLsHC3P8wuYwBwaJ9sjYj14hW8QG5oGoFKHG3gXRdYveIFusjjNHXiGT/D2CzPww+pJwjQ6GMAb/IC3LUzhKklUmhDowxKs9oHAteg6cUiu8C8lNq4b51xnT0O2vZdMCLROLUGjUot5gN6xnm4eoAV1HF5yrouWmEveaf/7CQ4NeGD3rYJHy0nKXrks1vsyWTjk7oL6Ua7WyIKupi5Sawb1o1zRiL2i8uLlIdZYLigfdmMDxpHHR5FctZQ69xNxu8D7lU2ml0dHYUOyLQXjuuYz2P04w1d0i+jCKOzbvcbkBDpnIvEHdSy7CinTWbUAAAAASUVORK5CYII=\"\n\nstar_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAATJJREFUSA3tlMFKQkEUhq0WkUIhbaSNhLsWbsKde6GXEAIfwbVPkDsTV7XMB+kJIiFcFQiStYxyIfb9cEcmY65nJFd24GOOc/45Z2bOeDOZbbMKBxYbs1sy32wq+zGJvxIOrUV2rUJ0l7Cf0IhYZ5LuoHqBecIzo+b+zC7I5JK7sWbJvhcQaXdHcAIlaMEp+FbgxwAOQEWnkGpNok8wgRm4nVpHrXmDISjXL1PDr8CaMKRrkyO1P3oh657A/LrUwM+I03ygNTUd3cLO8dSP0FW4+TGa8mJVpNM3FLiLzPlDPjIUkGYt07t317BqLIYqpH2LqkuL9LL0jIV835a1fizo94i4nd/jn3lK+Zpz8a4XM7uPKF+hHlihP5Ni7/AQ0ASns0Q6YPnu59FdQw7+Lf4GvgGCKIb8c6+V/AAAAABJRU5ErkJggg==\"\nstar_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAT9JREFUSA3tlLFqQjEUho0UCgqFtg8gXR1cpFt3oS8hCD6B+hi6WXHSUR/EJygdxKkFQVqtOIhd5PqlTeRqc825Fqd64CPJyf+f5CaXJBL/KoIguNec7KMp3oXOSRag8C18Ga6kiySlQnQluDSUY/j8Unat4A1svNJRfqdQQbFHWznUFiT2C5fI7E6f842h4tBV0U3Jz+ETFkqpwKH7SSGuwRA+YA1xQ3umMILar4VIJqEOf40GBaLvh8kyHPsFsr+LBQqwAmksEYoufXt0GPKg78MXEwS5rTFOB2PfV535XpyaO1rMY8EC4x2TdEDhO0FxK8lE1T30Fj3smdaM6wbdD8e+Njzn7rO1tt0e7QCyVqn7JkfzHS07J26xvcA7FF0m8voBLMIMnl2ayByGFDTB++6juYYnSEcWPE8cOoENzGJkOFk6QRwAAAAASUVORK5CYII=\"\n\n# Trigger next action in library section (e.g. play track in cmus)\nif [[ \"$1\" = 'cmus_song' ]]; then\n  f=$(echo -e \"player-play $2\")\n  cmus-remote -C \"$f\"\n  exit\nfi\nif [[ \"$1\" = 'itunes_next' ]]; then\n  osascript -e 'tell application \"iTunes\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'music_next' ]]; then\n  osascript -e 'tell application \"Music\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'spotify_next' ]]; then\n  osascript -e 'tell application \"Spotify\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'pianobar_station' ]]; then\n  echo -ne \"\\ns$2\\n\" \u003e \"$pianobar_ctlfile\"\n  exit\nfi\n\n# Ensure that pianobar fifo config file exists\nif [ ! -e \"$pianobar_ctlfile\" ]; then\n  mkfifo \"$pianobar_ctlfile\"\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\ncurrent_source=\"$NONE\"\n\n# Get pid of music apps to see if they are currently running\ncmus_pid=$(pgrep -x \"$CMUS\")\nitunes_pid=$(pgrep -x \"$ITUNES\")\nmusic_pid=$(pgrep -x \"$MUSIC\")\nspotify_pid=$(pgrep -x \"$SPOTIFY\")\npianobar_pid=$(pgrep -x \"$PIANOBAR\")\n\n# Keep track of music source\n# Reorder items in for -loop to your liking to change order of precendece\n# (i.e. if available, left-most audio source will be used first)\nfor s in \"$CMUS\" \"$ITUNES\" \"$MUSIC\" \"$SPOTIFY\" \"$PIANOBAR\"; do\n  if [[ $s = \"$CMUS\" \u0026\u0026 $cmus_pid ]]; then\n    current_source=\"$CMUS\"\n    break\n  elif [[ $s = \"$ITUNES\" \u0026\u0026 $itunes_pid ]]; then\n    current_source=\"$ITUNES\"\n    break\n  elif [[ $s = \"$MUSIC\" \u0026\u0026 $music_pid ]]; then\n    current_source=\"$MUSIC\"\n    break\n  elif [[ $s = \"$SPOTIFY\" \u0026\u0026 $spotify_pid ]]; then\n    current_source=\"$SPOTIFY\"\n    break\n  elif [[ $s = \"$PIANOBAR\" \u0026\u0026 $pianobar_pid ]]; then\n    current_source=\"$PIANOBAR\"\n    break\n  fi\ndone\n\n# Do not display menu icon if no audio source is active\nif [[ $current_source = \"$NONE\" ]]; then\n  exit\nfi\n\nfunction playing_info\n{\n  if [[ $current_source = \"$CMUS\" ]]; then\n    track=$(cmus-remote -C \"format_print %{title}\")\n    artist=$(cmus-remote -C \"format_print %{artist}\")\n    album=$(cmus-remote -C \"format_print %{album}\")\n  elif [[ $current_source = \"$ITUNES\" ]]; then\n    track=$(osascript -e 'try' -e 'tell application \"iTunes\" to name of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n    artist=$(osascript -e 'try' -e 'tell application \"iTunes\" to artist of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n    album=$(osascript -e 'try' -e 'tell application \"iTunes\" to album of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n  elif [[ $current_source = \"$MUSIC\" ]]; then\n    track=$(osascript -e 'try' -e 'tell application \"Music\" to name of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n    artist=$(osascript -e 'try' -e 'tell application \"Music\" to artist of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n    album=$(osascript -e 'try' -e 'tell application \"Music\" to album of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n  elif [[ $current_source = \"$PIANOBAR\" ]]; then\n    # First check if 'playing' file exists\n    if [ -f \"$pianobar_playingfile\" ]; then\n      IFS=$'\\n' read -d '' -r -a lines \u003c \"$pianobar_playingfile\"\n      artist=\"${lines[0]}\"\n      track=\"${lines[1]}\"\n      album=\"${lines[2]}\"\n      station=\"${lines[3]}\"\n      rating=\"${lines[4]}\"\n    fi\n  fi\n\n  if [[ $track = \"\" || $artist = \"\" || $album = \"\" ]]; then\n    echo \"Nothing playing in $current_source\"\n    return 1\n  else\n    echo \"Now playing in $current_source\"\n  fi\n\n  # Get icon for current track, artist, album based on dark / light mode\n  if [[ \"$BitBarDarkMode\" ]]; then\n    track_icon=$note_icon_dark\n    artist_icon=$person_icon_dark\n    album_icon=$album_icon_dark\n    station_icon=$station_icon_dark\n    star_icon=$star_icon_dark\n  else\n    track_icon=$note_icon_light\n    artist_icon=$person_icon_light\n    album_icon=$album_icon_light\n    station_icon=$station_icon_light\n    star_icon=$star_icon_light\n  fi\n\n  echo \"$track | image=$track_icon length=$display_length\"\n  echo \"$artist | image=$artist_icon length=$display_length\"\n  echo \"$album | image=$album_icon length=$display_length\"\n\n  if [[ $current_source = \"$PIANOBAR\" ]]; then\n    echo \"$station | image=$station_icon\"\n\n    # Experimental mode: TODO (sebbas): Cover art\n    cover_url=\"${lines[5]}\"\n    if [[ $EXPERIMENTAL_MODE = 1 \u0026\u0026 $cover_url != \"\" ]]; then\n      echo \"---\"\n      cover_url=\"${lines[5]}\"\n      highres_pattern=\"500W_500H\"\n      lowres_pattern=\"130W_130H\"\n      thumb_url=${cover_url/$highres_pattern/$lowres_pattern}\n      base64=$(curl -s \"$thumb_url\" | openssl base64 | tr -d '\\n')\n      echo \" | image=$base64 length=$display_length trim=false\"\n    fi\n\n    if [[ \"$rating\" = 1 ]]; then\n      echo \"Favorite Pandora song | image=$star_icon length=$display_length\"\n    fi\n  fi\n  return 0\n}\n\nfunction library_info\n{\n  if [[ $current_source = \"$CMUS\" ]]; then\n    echo \"My cmus library\"\n\n    exif=$(xxd -p \"$cmus_cachefile\" | tr -d '\\n' | awk '{print $1\"0\"}' | perl -ne '$_.=\"0000\";@exif=$_=~/(?\u003c=f{112})(.*?)(?=0000)/g;print join\"\\n\",@exif' | awk '{print \"0066696c6500\"$1}')\n\n    # Experimental mode: TODO (sebbas): Album tag\n    if [[ $EXPERIMENTAL_MODE = 1 ]]; then\n      data=$(echo \"$exif\" | perl -ne '$_=~s/\\n/00\\n/g;@a=$_=~/(?\u003c=0066696c6500)(.*?)(?=00)|(?\u003c=0061727469737400)(.*?)(?=00)|(?\u003c=00616c62756d00)(.*?)(?=00)|(?\u003c=007469746c6500)(.*?)(?=00)/g; print \"@a\\n\"; ')\n      sorted=$(echo \"$data\" | sort -f -k 2)\n      echo -e \"$sorted\" | perl -ne '$display_length=40; @a=split(/\\s+/,$_); $a[0]=~s/\\G..\\K(?=.)/\\\\x/sg; $file=\"\\\\x\".$a[0]; $artist=$a[1]; $album=$a[2]; $track=$a[3]; $file.=\"0\" if(length($file) % 2 == 1); $artist.=\"0\" if(length($artist) % 2 == 1); $album.=\"0\" if(length($album) % 2 == 1); $track.=\"0\" if(length($track) % 2 == 1); use Encode; binmode STDOUT, \":utf8\"; $artist=Encode::decode(\"UTF-8\", pack(q{H*}, $artist)); $album=Encode::decode(\"UTF-8\", pack(q{H*}, $album)); $track=Encode::decode(\"UTF-8\", pack(q{H*}, $track)); next if ($file eq \"\" || $artist eq \"\" || $album eq \"\" || $track eq \"\"); print \"$artist | length=$display_length\\n\" if(\"$old_artist\" ne \"$artist\"); print \"--$album\\n\" if (\"$old_album\" ne \"$album\"); print \"--$track | bash='\"'$0'\"' param1=\\\"cmus_song\\\" param2=\\\"$file\\\" terminal=false refresh=false length=$display_length\\n\"; $old_artist=$artist; $old_album=$album;'\n\n    else\n      data=$(echo \"$exif\" | perl -ne '$_=~s/\\n/00\\n/g;@a=$_=~/(?\u003c=0066696c6500)(.*?)(?=00)|(?\u003c=0061727469737400)(.*?)(?=00)|(?\u003c=007469746c6500)(.*?)(?=00)/g; print \"@a\\n\"; ')\n      sorted=$(echo \"$data\" | sort -f -k 2)\n      echo -e \"$sorted\" | perl -ne '$display_length=30; @a=split(/\\s+/,$_); $a[0]=~s/\\G..\\K(?=.)/\\\\x/sg; $file=\"\\\\x\".$a[0]; $artist=$a[1]; $track=$a[2]; $file.=\"0\" if(length($file) % 2 == 1); $artist.=\"0\" if(length($artist) % 2 == 1); $track.=\"0\" if(length($track) % 2 == 1); use Encode; binmode STDOUT, \":utf8\"; $artist=Encode::decode(\"UTF-8\", pack(q{H*}, $artist)); $track=Encode::decode(\"UTF-8\", pack(q{H*}, $track)); next if ($file eq \"\" || $artist eq \"\" || $track eq \"\"); print \"$artist | length=$display_length\\n\" if(\"$oa\" ne \"$artist\"); print \"--$track | bash='\"'$0'\"' param1=\\\"cmus_song\\\" param2=\\\"$file\\\" terminal=false refresh=false length=$display_length\\n\"; $oa=$artist;'\n    fi\n\n  elif [[ $current_source = \"$PIANOBAR\" ]]; then\n    echo \"My Pandora stations\"\n    while read -r line; do\n\n      # Split station number and name from each other, closing bracket is delimiter\n      # shellcheck disable=SC2001\n      station_num=\"$(sed 's/).*//' \u003c\u003c\u003c \"$line\")\"\n      # shellcheck disable=SC2001\n      station_name=\"$(sed 's/^[^)]*)//' \u003c\u003c\u003c \"$line\")\"\n\n      # Remove leading and trailing white space\n      station_num=$(echo \"$station_num\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\n      station_name=$(echo \"$station_name\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\n\n      # Checked items are still beta, leaving this in anyways\n      if [[ \"$station_name\" = \"$station\" ]]; then\n        echo -e \"$station_name | bash='$0' param1='pianobar_station' param2='$station_num' terminal=false refresh=false checked=true length=$display_length\"\n      else\n        echo -e \"$station_name | bash='$0' param1='pianobar_station' param2='$station_num' terminal=false refresh=false length=$display_length\"\n      fi\n    done \u003c \"$pianobar_stationsfile\"\n  fi\n}\n\n# Set menu icon based on dark mode setup and display info sections\nif [[ \"$BitBarDarkMode\" ]]; then\n  echo \"| image=$list_icon_dark\"\n  echo \"---\"\nelse\n  echo \"| image=$list_icon_light\"\n  echo \"---\"\nfi\n\nif playing_info; then\n  echo \"---\"\n  library_info\nfi\n"
				}
			],
			"path": "Music/music-controls-info.10s.sh",
			"filename": "music-controls-info.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/music-controls-info.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Controls - Next Track Button",
			"version": "v1.0",
			"author": "Sebastián Barschkis",
			"authors": [
				{
					"name": "Sebastián Barschkis",
					"githubUsername": "sebbas",
					"imageURL": "https://avatars.githubusercontent.com/u/1890600?v=4",
					"bio": "Physics Developer @blender",
					"primary": true
				}
			],
			"desc": "Plays the next track in cmus, iTunes, Music, Spotify or pianobar.",
			"imageURL": "https://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png",
			"dependencies": [
				"perl"
			],
			"aboutURL": "http://github.com/sebbas/music-controls-bitbar",
			"lastUpdated": "2021-03-08T15:21:57.203372Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/music-controls-next.10s.sh",
					"filename": "music-controls-next.10s.sh",
					"content": "#!/bin/bash\n\n# Plays the next track in cmus, iTunes, Music, Spotify or pianobar.\n#\n# Special thanks to Google for providing the open-source icons: https://github.com/google/material-design-icons\n# and to mcchrish and alekseysotnikov for their helpful existing BitBar scripts\n#\n# metadata\n# \u003cbitbar.title\u003eMusic Controls - Next Track Button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastián Barschkis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebbas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePlays the next track in cmus, iTunes, Music, Spotify or pianobar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://github.com/sebbas/music-controls-bitbar\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\nexport LC_CTYPE=\"UTF-8\"\n\npianobar_ctlfile=\"$HOME/.config/pianobar/ctl\"\n\nNONE=\"none\"\nCMUS=\"cmus\"\nITUNES=\"iTunes\"\nMUSIC=\"Music\"\nSPOTIFY=\"Spotify\"\nPIANOBAR=\"pianobar\"\n\nnext_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAXtJREFUaAXtWDtOA0EMjRAgKppIaVKnpKDNCahzC25AbsAJOEOa1JyAloIydSpEkyZFJBSekSyNrMx6Bu8qjPRGGs069vOzn/PZzWjERQWoABWgAlSAClABKlCjwArBtzUAJ/YIf7qd8LhbyLbY83iq3wxp8XI9+FLCbzA9Y18GGTWfnsF0PlyJ9HwHZObDshGaR89sYF8OJUrPPZI//pEgzSPXgy9LmNqvYB9XVpDiz96AFPCJ/VDRxL9rQAt6QRM3BY1ovJ4FkFiIEpWcG1DdOXQ2jxMed1tCzz6A8gn7IkNt8Zmw/l62hKX2G0qYnijD4k+E9PuSJayxdyhlYcqxeOPuNnNj7UbFvNcxeBxtFSu1m30LyYd4iZ2bthUgLrGTwRJ22fI1el+ZzwmPu7sKTn3N/pB9QaNmbyXkZm5SOeR0anI9+LKEYjd9O/2BBpp8oNFHyqvgzO1Eg+l8uBA2/VC/RgNN/63iz4gRVIAKUAEqQAWoABVoQ4Efj0sWuAZStX4AAAAASUVORK5CYII=\"\nnext_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAYVJREFUaAXtWDFOAzEQPCGCUtEgpaGmpEjLC6j5BT+AH+QFvIGGmhfQUlBSUyGaNCmQ0DEX2ZIzOnnXXoNkaSNZ9mZnduzZXHKXYfCXO+AOuAPugDvgDrgD7oDagXEcHzFO1QQBiFoHLwFuTwe1D8xX9mrDcLB7BC1qZmskgj9YbzCOswQhmdTbLwW4Pc2CiF8xLmorc73aOmoeC4Z4h/lWXSQBcr0k9TdLFqT4GfFZiTLx//UaYO0Yf2JxrT1EJMVZy6vGRSHF/ADMUhLiOhLenGdBIX5H/jInyvwctkmOBRXxNzB3GEdzG2D+HKbpeyxYEL8Ae86bYT7nm8csWBhvgb9JN8X8NKdZz7ZVQzRgTgxcO5UdK4i7/QhNF/E9xmy32QC7xUIFFhTi6Wt0nSvJ/By2SY4FM3G3P2RfOFS3txLTzdyqpNXcwRJuFZYFQ9z17fQbDtHlA018pFxUtTKQuKOWWipuEOz6of4Jh+j3bxVVmxzkDrgD7oA74A64A+5AHw78AkOdplKAcgGEAAAAAElFTkSuQmCC\"\n\n# Trigger next track in music application\nif [[ \"$1\" = 'cmus_next' ]]; then\n  cmus-remote --next\n  exit\nfi\nif [[ \"$1\" = 'itunes_next' ]]; then\n  osascript -e 'tell application \"iTunes\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'music_next' ]]; then\n  osascript -e 'tell application \"Music\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'spotify_next' ]]; then\n  osascript -e 'tell application \"Spotify\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'pianobar_next' ]]; then\n  echo -ne \"\\nn\" \u003e \"$pianobar_ctlfile\"\n  exit\nfi\n\n# Ensure that pianobar fifo config file exists\nif [ ! -e \"$pianobar_ctlfile\" ]; then\n  mkfifo \"$pianobar_ctlfile\"\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\ncurrent_source=\"$NONE\"\n\n# Get pid of music apps to see if they are currently running\ncmus_pid=$(pgrep -x \"$CMUS\")\nitunes_pid=$(pgrep -x \"$ITUNES\")\nmusic_pid=$(pgrep -x \"$MUSIC\")\nspotify_pid=$(pgrep -x \"$SPOTIFY\")\npianobar_pid=$(pgrep -x \"$PIANOBAR\")\n\n# Keep track of music source\n# Reorder items in for-loop to your liking to change order of precendece\n# (i.e. if available, left-most audio source will be used first)\nfor s in \"$CMUS\" \"$ITUNES\" \"$MUSIC\" \"$SPOTIFY\" \"$PIANOBAR\"; do\n  if [[ $s = \"$CMUS\" \u0026\u0026 $cmus_pid ]]; then\n    current_source=\"$CMUS\"\n    break\n  elif [[ $s = \"$ITUNES\" \u0026\u0026 $itunes_pid ]]; then\n    current_source=\"$ITUNES\"\n    break\n  elif [[ $s = \"$MUSIC\" \u0026\u0026 $music_pid ]]; then\n    current_source=\"$MUSIC\"\n    break\n  elif [[ $s = \"$SPOTIFY\" \u0026\u0026 $spotify_pid ]]; then\n    current_source=\"$SPOTIFY\"\n    break\n  elif [[ $s = \"$PIANOBAR\" \u0026\u0026 $pianobar_pid ]]; then\n    current_source=\"$PIANOBAR\"\n    break\n  fi\ndone\n\n# Do not display menu icon if no audio source is active\nif [[ $current_source = \"$NONE\" ]]; then\n  exit\nfi\n\n# Set next track icon based on dark mode setup\nif [[ \"$BitBarDarkMode\" ]]; then\n  icon=$next_icon_dark\nelse\n  icon=$next_icon_light\nfi\n\n# Trigger next track in correct music app\nif [[ $current_source = \"$CMUS\" ]]; then\n  echo \" | image=$icon bash='$0' param1='cmus_next' terminal=false refresh=false\"\nelif [[ $current_source = \"$ITUNES\" ]]; then\n  echo \" | image=$icon bash='$0' param1='itunes_next' terminal=false refresh=false\"\nelif [[ $current_source = \"$MUSIC\" ]]; then\n  echo \" | image=$icon bash='$0' param1='music_next' terminal=false refresh=false\"\nelif [[ $current_source = \"$SPOTIFY\" ]]; then\n  echo \" | image=$icon bash='$0' param1='spotify_next' terminal=false refresh=false\"\nelif [[ $current_source = \"$PIANOBAR\" ]]; then\n  echo \" | image=$icon bash='$0' param1='pianobar_next' terminal=false refresh=false\"\nfi\n"
				}
			],
			"path": "Music/music-controls-next.10s.sh",
			"filename": "music-controls-next.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/music-controls-next.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Controls - Next Track Button",
			"version": "v1.0",
			"author": "Sebastián Barschkis",
			"authors": [
				{
					"name": "Sebastián Barschkis",
					"githubUsername": "sebbas",
					"imageURL": "https://avatars.githubusercontent.com/u/1890600?v=4",
					"bio": "Physics Developer @blender",
					"primary": true
				}
			],
			"desc": "Plays the next track in cmus, iTunes, Music, Spotify or pianobar.",
			"imageURL": "https://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png",
			"dependencies": null,
			"aboutURL": "http://github.com/sebbas/music-controls-bitbar",
			"lastUpdated": "2021-03-08T15:21:57.348401Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/music-controls-playpause.10s.sh",
					"filename": "music-controls-playpause.10s.sh",
					"content": "#!/bin/bash\n\n# Plays / pauses the current track in cmus, iTunes, Music, Spotify or pianobar.\n#\n# Special thanks to Google for providing the open-source icons: https://github.com/google/material-design-icons\n# and to mcchrish and alekseysotnikov for their helpful existing BitBar scripts\n#\n# metadata\n# \u003cbitbar.title\u003eMusic Controls - Play / Pause Button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastián Barschkis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebbas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePlays / pauses the current track in cmus, iTunes, Music, Spotify or pianobar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://github.com/sebbas/music-controls-bitbar\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\nexport LC_CTYPE=\"UTF-8\"\n\npianobar_ctlfile=\"$HOME/.config/pianobar/ctl\"\n\nNONE=\"none\"\nCMUS=\"cmus\"\nITUNES=\"iTunes\"\nMUSIC=\"Music\"\nSPOTIFY=\"Spotify\"\nPIANOBAR=\"pianobar\"\n\nplaypause_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAABYlAAAWJQFJUiTwAAAA5klEQVRo3u3YIU5DQRSF4Q9SGhSmCQaNrMCygmp2wQ5gB6yANWDQXQEWgaxGkZqaiiZkUGOeQLzhdbjJ/ZOj5/wzk7y5jyRJkiRJkqSFMsiQF1z0LtkiUPCJ295FWwQKvvGEWe/CYwVq3nHdu3SLQMEe972LtwjUrLGILFDwhVVkgZpnnEcWKNhgGVmg4IAHnEYVqHnDVWSBgh3uflv8aMfUwHzqBfIKDXLAoz+8HSdHFNjgZtLtnlAg7IdsK/BTYo3LnuXHCoR+Tn8IOtDUkfKsd+ExAqGH+lf//LdKkiRJkiRJVH4AdugWuakjkxMAAAAASUVORK5CYII=\"\nplaypause_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAABYlAAAWJQFJUiTwAAAA8UlEQVRo3u3YMUoDQRSA4SgqgqCFYGNtaZE2J7D2FrmB3sATeAYb65zA1sIytZWkSWMRkM9qCIhKyM7u5MH72sC++ZdNZiejUUoppZRS2poffvn8CacV550NHQDvmFSad9IiAL7wgIOO8/ZbBRSvuKq6iIED4BPT1mvvElDMcB45AD5wEzmgeMTxBvP2djUA5riOHAAr3Pnj5zJCQPGCy8gBsMTtf/Pr7mr9OOr16kM/QhECVrgX9Es8x7j3u95TwEYb2S4GLAR+lZjhotniOwSEfp1+E/RAU46Uh63XvE1AtUN9i4BnFf9WSSmllFJKa98ifb5bWzSaAAAAAABJRU5ErkJggg==\"\n\n# Play / pause music application\nif [[ \"$1\" = 'cmus_playpause' ]]; then\n  cmus-remote --pause\n  exit\nfi\nif [[ \"$1\" = 'itunes_playpause' ]]; then\n  osascript -e 'tell application \"iTunes\" to playpause'\n  exit\nfi\nif [[ \"$1\" = 'music_playpause' ]]; then\n  osascript -e 'tell application \"Music\" to playpause'\n  exit\nfi\nif [[ \"$1\" = 'spotify_playpause' ]]; then\n  osascript -e 'tell application \"Spotify\" to playpause'\n  exit\nfi\nif [[ \"$1\" = 'pianobar_playpause' ]]; then\n  echo -ne \"\\np\" \u003e \"$pianobar_ctlfile\"\n  exit\nfi\n\n# Ensure that pianobar fifo config file exists\nif [ ! -e \"$pianobar_ctlfile\" ]; then\n  mkfifo \"$pianobar_ctlfile\"\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\ncurrent_source=\"$NONE\"\n\n# Get pid of music apps to see if they are currently running\ncmus_pid=$(pgrep -x \"$CMUS\")\nitunes_pid=$(pgrep -x \"$ITUNES\")\nmusic_pid=$(pgrep -x \"$MUSIC\")\nspotify_pid=$(pgrep -x \"$SPOTIFY\")\npianobar_pid=$(pgrep -x \"$PIANOBAR\")\n\n# Keep track of music source\n# Reorder items in for -loop to your liking to change order of precendece\n# (i.e. if available, left-most audio source will be used first)\nfor s in \"$CMUS\" \"$ITUNES\" \"$MUSIC\" \"$SPOTIFY\" \"$PIANOBAR\"; do\n  if [[ $s = \"$CMUS\" \u0026\u0026 $cmus_pid ]]; then\n    current_source=\"$CMUS\"\n    break\n  elif [[ $s = \"$ITUNES\" \u0026\u0026 $itunes_pid ]]; then\n    current_source=\"$ITUNES\"\n    break\n  elif [[ $s = \"$MUSIC\" \u0026\u0026 $music_pid ]]; then\n    current_source=\"$MUSIC\"\n    break\n  elif [[ $s = \"$SPOTIFY\" \u0026\u0026 $spotify_pid ]]; then\n    current_source=\"$SPOTIFY\"\n    break\n  elif [[ $s = \"$PIANOBAR\" \u0026\u0026 $pianobar_pid ]]; then\n    current_source=\"$PIANOBAR\"\n    break\n  fi\ndone\n\n# Do not display menu icon if no audio source is active\nif [[ $current_source = \"$NONE\" ]]; then\n  exit\nfi\n\n# Set play / pause icon based on dark mode setup\nif [[ \"$BitBarDarkMode\" ]]; then\n  icon=$playpause_icon_dark\nelse\n  icon=$playpause_icon_light\nfi\n\n# Play / pause track in correct music app\nif [[ $current_source = \"$CMUS\" ]]; then\n  echo \" | image=$icon bash='$0' param1='cmus_playpause' terminal=false refresh=false\"\nelif [[ $current_source = \"$ITUNES\" ]]; then\n  echo \" | image=$icon bash='$0' param1='itunes_playpause' terminal=false refresh=false\"\nelif [[ $current_source = \"$MUSIC\" ]]; then\n  echo \" | image=$icon bash='$0' param1='music_playpause' terminal=false refresh=false\"\nelif [[ $current_source = \"$SPOTIFY\" ]]; then\n  echo \" | image=$icon bash='$0' param1='spotify_playpause' terminal=false refresh=false\"\nelif [[ $current_source = \"$PIANOBAR\" ]]; then\n  echo \" | image=$icon bash='$0' param1='pianobar_playpause' terminal=false refresh=false\"\nfi\n"
				}
			],
			"path": "Music/music-controls-playpause.10s.sh",
			"filename": "music-controls-playpause.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/music-controls-playpause.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Controls - Play / Pause Button",
			"version": "v1.0",
			"author": "Sebastián Barschkis",
			"authors": [
				{
					"name": "Sebastián Barschkis",
					"githubUsername": "sebbas",
					"imageURL": "https://avatars.githubusercontent.com/u/1890600?v=4",
					"bio": "Physics Developer @blender",
					"primary": true
				}
			],
			"desc": "Plays / pauses the current track in cmus, iTunes, Music, Spotify or pianobar.",
			"imageURL": "https://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png",
			"dependencies": null,
			"aboutURL": "http://github.com/sebbas/music-controls-bitbar",
			"lastUpdated": "2021-03-08T15:21:57.353083Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/music-controls-previous.10s.sh",
					"filename": "music-controls-previous.10s.sh",
					"content": "#!/bin/bash\n\n# Plays the previous track in cmus, iTunes Music, or Spotify.\n#\n# Special thanks to Google for providing the open-source icons: https://github.com/google/material-design-icons\n# and to mcchrish and alekseysotnikov for their helpful existing BitBar scripts\n#\n# metadata\n# \u003cbitbar.title\u003eMusic Controls - Previous Track Button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastián Barschkis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebbas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePlays the previous track in cmus, iTunes, Music or Spotify.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://github.com/sebbas/music-controls-bitbar\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\nexport LC_CTYPE=\"UTF-8\"\n\nNONE=\"none\"\nCMUS=\"cmus\"\nITUNES=\"iTunes\"\nMUSIC=\"Music\"\nSPOTIFY=\"Spotify\"\nPIANOBAR=\"pianobar\"\n\nprev_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAYBJREFUaAXtWDFKBEEQPASFS0yES4wNLzD1Bcb+whfcD/QHvsHk4nuBqYGhsZGYGB0oojVgQ9Ess9t7PcFADTQzPdNd1V17eju3WGhIASkgBaSAFJACUkAKRBT4RTBbJLcWe4rDx1pA1hkXX9YZ4wogb7AsvGpNmQ0cg+kO9vNffFcNXKDoZyrchMFW22FENs9hu0XSHmYYPM/BC+UwWVlHxhmCdzCPwX4Eb1Ysk0UauAbb+0jxEbxZxZekaANL5DwM5Hkc8wtH02FENtfI1jh8hVnslLmGl3LmixgCPcLmBvYF8/Fj/hBe6p4vwIOfY+MJ5uOm+h4v3feFMMENnE+Yj4n4jDe6Lo86c5xkgrXC8mp6nq4/QtaM/RF/Y8M3POYbRrPZF1AjusRhl/9Guamuv8i4kfIq8QHzT9D7nNNkfQjhChV1+zLHanb7Os1NlAvNC+yQJ8p4k9eZhOVKeQ/r8krJinV7qecmys8qW97QWgpIASkgBaSAFJACUqCuwB/4tRa49HkbAgAAAABJRU5ErkJggg==\"\nprev_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAZhJREFUaAXtmDtKhEEQhH8EBRMTwcTY0MDUExh7C0/gDfQGnsHE2BOYGhgaG4mJkaDI+k3Q0FvszuN/IAM9UMz0TnX1dLGPf3YYYoQD4UA4EA6EA+FAOBAOVDuwklGdWCAiewDuC7Tp23L+1XTFYUDzHLwl7Tn0shqpiB9ZcmETnV1wA35Ns5AyfdsK2TxWkfwT8Gw6No/Vq86zQjZXJzoiuVfgyzT87GjLLH2xtG6pAv0QPKa8baNFbxRXC9eKkHcB3jVf41q90bzWgvD3wZ3mbYtHH6w2UQvn8uCeglfNycU5vVn2tPgmUTg74Bp8K78Ub9Kb9TU9gIqzfwyelFcbq97ssR7EF2DvEnwqpyX2ejXrnRpSA2evgfs/VHVTT8F+v28ha4Ym7EP8ow2XYtNYbNYD5ArBPQP9fY36pmig3x8yaSQ9SnyA7PA5i6y1eksRco9Anw9zvlGa6PNxWppIF5oXsDY8Z5H1WjWCKUVIT1fKW9DfldI3TgN9XuqlifS3yoN/LdbhQDgQDoQD4UA4EA6EA3kH/gDrwKZSdCEqDwAAAABJRU5ErkJggg==\"\n\n# Trigger previous track in music application\nif [[ \"$1\" = 'cmus_prev' ]]; then\n  cmus-remote --prev\n  exit\nfi\nif [[ \"$1\" = 'itunes_prev' ]]; then\n  osascript -e 'tell application \"iTunes\" to previous track'\n  exit\nfi\nif [[ \"$1\" = 'music_prev' ]]; then\n  osascript -e 'tell application \"Music\" to previous track'\n  exit\nfi\nif [[ \"$1\" = 'spotify_prev' ]]; then\n  osascript -e 'tell application \"Spotify\" to previous track'\n  exit\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\ncurrent_source=\"$NONE\"\n\n# Get pid of music apps to see if they are currently running\ncmus_pid=$(pgrep -x \"$CMUS\")\nitunes_pid=$(pgrep -x \"$ITUNES\")\nmusic_pid=$(pgrep -x \"$MUSIC\")\nspotify_pid=$(pgrep -x \"$SPOTIFY\")\npianobar_pid=$(pgrep -x \"$PIANOBAR\")\n\n# Keep track of music source\n# Reorder items in for -loop to your liking to change order of precendece\n# (i.e. if available, left-most audio source will be used first)\nfor s in \"$CMUS\" \"$ITUNES\" \"$MUSIC\" \"$SPOTIFY\" \"$PIANOBAR\"; do\n  if [[ $s = \"$CMUS\" \u0026\u0026 $cmus_pid ]]; then\n    current_source=\"$CMUS\"\n    break\n  elif [[ $s = \"$ITUNES\" \u0026\u0026 $itunes_pid ]]; then\n    current_source=\"$ITUNES\"\n    break\n  elif [[ $s = \"$MUSIC\" \u0026\u0026 $music_pid ]]; then\n    current_source=\"$MUSIC\"\n    break\n  elif [[ $s = \"$SPOTIFY\" \u0026\u0026 $spotify_pid ]]; then\n    current_source=\"$SPOTIFY\"\n    break\n  elif [[ $s = \"$PIANOBAR\" \u0026\u0026 $pianobar_pid ]]; then\n    # pianobar does not support previous song trigger\n    exit\n  fi\ndone\n\n# Do not display menu icon if no audio source is active\nif [[ $current_source = \"$NONE\" ]]; then\n  exit\nfi\n\n# Set previous track icon based on dark mode setup\nif [[ \"$BitBarDarkMode\" ]]; then\n  icon=$prev_icon_dark\nelse\n  icon=$prev_icon_light\nfi\n\n# Trigger previous track in correct music app\nif [[ $current_source = \"$CMUS\" ]]; then\n  echo \" | image=$icon bash='$0' param1='cmus_prev' terminal=false refresh=false\"\nelif [[ $current_source = \"$ITUNES\" ]]; then\n  echo \" | image=$icon bash='$0' param1='itunes_prev' terminal=false refresh=false\"\nelif [[ $current_source = \"$MUSIC\" ]]; then\n  echo \" | image=$icon bash='$0' param1='music_prev' terminal=false refresh=false\"\nelif [[ $current_source = \"$SPOTIFY\" ]]; then\n  echo \" | image=$icon bash='$0' param1='spotify_prev' terminal=false refresh=false\"\nfi\n"
				}
			],
			"path": "Music/music-controls-previous.10s.sh",
			"filename": "music-controls-previous.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/music-controls-previous.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Controls - Previous Track Button",
			"version": "v1.0",
			"author": "Sebastián Barschkis",
			"authors": [
				{
					"name": "Sebastián Barschkis",
					"githubUsername": "sebbas",
					"imageURL": "https://avatars.githubusercontent.com/u/1890600?v=4",
					"bio": "Physics Developer @blender",
					"primary": true
				}
			],
			"desc": "Plays the previous track in cmus, iTunes, Music or Spotify.",
			"imageURL": "https://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png",
			"dependencies": null,
			"aboutURL": "http://github.com/sebbas/music-controls-bitbar",
			"lastUpdated": "2021-03-08T15:21:57.373492Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/music-controls-like.10s.sh",
					"filename": "music-controls-like.10s.sh",
					"content": "#!/bin/bash\n\n# Like the current track in iTunes, Music or pianobar.\n#\n# Special thanks to Google for providing the open-source icons: https://github.com/google/material-design-icons\n# and to mcchrish and alekseysotnikov for their helpful existing BitBar scripts\n#\n# metadata\n# \u003cbitbar.title\u003eMusic Controls - Like Track Button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastián Barschkis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebbas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eLikes the current track in iTunes, Music or pianobar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://github.com/sebbas/music-controls-bitbar\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\nexport LC_CTYPE=\"UTF-8\"\n\npianobar_ctlfile=\"$HOME/.config/pianobar/ctl\"\n\nNONE=\"none\"\nCMUS=\"cmus\"\nITUNES=\"iTunes\"\nMUSIC=\"Music\"\nSPOTIFY=\"Spotify\"\nPIANOBAR=\"pianobar\"\n\nlike_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAcFJREFUWAntV00rRUEYvr4iZYFQPlY2smYntnaShYWdkj1LUn6BIksLZcVPkI2thb2kG1vcLEQhnqfOq9vcOeO8M3Nup5y3nmbO+/G8z8yZzp1bqZT2T3dgGusmCmPHUEIUwvqg4j1Bf6ii1lAC1K8DnQnWIvAFUXBB98B3As5jLBI0fraIMhEj44IfVZyqC4ug8zjUepZxixjZJcaabofoKALMcb/ZarrR8NUhiDHmqK3FqJjF8wjAb0s9eo1nfm/aAZd9IFgDnutGzgUSe4DvErDaFLxPgPkK8npmL/Z0Gg9kFchLhPCyR+bDP4Dk6xxFkZs9VMZDyW+KrCjWSE6vA0/1bcAJEEvMUcKJIcx2UR4qaidMQmP1KlxfHsI+UbPSSBfH8+ghiDW52CRYfV/bRFZFmrvLTFZSS17m2sIJsiwm1XWHiO8ru01l9QwMO8RUEZtPwHma6OA/AOD+tWXMzEa8YmwDvOCLcb4FvAFm/pIkxRgPjAZneB51EI8hdmrU7Dny1SH5ob1B5Zyimrms4W5dKeqcqT2I1oAN4K9LmY2oA85N4AXosiVofUMoGNQWWfLJob5yWHhKV7kDzh34ASdLIkzm2nPzAAAAAElFTkSuQmCC\"\nlike_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAeVJREFUWAntlj9LA0EQxXNRUQIWJkbBP1UasY6daGsnYmFhJ4ilEEtF8BNYWFsIVvoRgo2thb2VaGsMFqKgEn+jWTj3cre7d5cQ8AYeu7cz8+bdZHO7uVxm/7EDrVZrQdA3746YM0FfCEJIEby3UUoqKp+UgPwdMNzGdgp88SnoSh48AGUyT+Ml44mi+JpS4htX47GlkIWIK58QNa2nQO1OQfWKUtBhrLgz/mYk+b1rEUV3I3zpu+hIAbx26IxaEl8hTmXPnwTJEs/ToKhhTHuW780giLIPnE3w7BtlrqB8j57nXbMeNARVQQP0yqRWNajEt0KAbNb7HiiSGnabn8AyuO2iKOEu+/pgnpIgG7feBVHCGWvD50gcAOcpijoVTnM7DBGQHKUg6tBQxs2NoC3wFUPYJzmbttX+fIdMSRA/EeN652nwnRk3cSu/9dGBmPkYYqROidw5VdA0WguCaNFEFuG3zs0ERXTR3sUemAJhJkfAShtRR47rnyFcIMU2OqiRK8YBkAv+j8kc7IM3oNu6iks8wnyisV/yPBNGjG8WXGg5x2HxzusQq4P2jvmyLYHEAskRu7HNi4yDaBQ0QQ2YLmUBLnKGwB54ASOBANcFSCbBhGueHi8cwO3KoZNkz1kHLDrwDQpoMjh/irN5AAAAAElFTkSuQmCC\"\n\n# Trigger like track in music application\nif [[ \"$1\" = 'itunes_like' ]]; then\n  osascript -e 'tell application \"iTunes\"' -e 'if loved of current track is true then' -e 'set loved of current track to false' -e 'else' -e 'set loved of current track to true' -e 'end if' -e 'end tell'\n  exit\nfi\nif [[ \"$1\" = 'music_like' ]]; then\n  osascript -e 'tell application \"Music\"' -e 'if loved of current track is true then' -e 'set loved of current track to false' -e 'else' -e 'set loved of current track to true' -e 'end if' -e 'end tell'\n  exit\nfi\nif [[ \"$1\" = 'pianobar_like' ]]; then\n  echo -ne \"\\n+\" \u003e \"$pianobar_ctlfile\"\n  exit\nfi\n\n# Ensure that pianobar fifo config file exists\nif [ ! -e \"$pianobar_ctlfile\" ]; then\n  mkfifo \"$pianobar_ctlfile\"\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\ncurrent_source=\"$NONE\"\n\n# Get pid of music apps to see if they are currently running\ncmus_pid=$(pgrep -x \"$CMUS\")\nitunes_pid=$(pgrep -x \"$ITUNES\")\nmusic_pid=$(pgrep -x \"$MUSIC\")\nspotify_pid=$(pgrep -x \"$SPOTIFY\")\npianobar_pid=$(pgrep -x \"$PIANOBAR\")\n\n# Keep track of music source\n# Reorder items in for-loop to your liking to change order of precendece\n# (i.e. if available, left-most audio source will be used first)\nfor s in \"$CMUS\" \"$ITUNES\" \"$MUSIC\" \"$SPOTIFY\" \"$PIANOBAR\"; do\n  if [[ $s = \"$CMUS\" \u0026\u0026 $cmus_pid ]]; then\n    # cmus does not support likes\n    exit\n  elif [[ $s = \"$ITUNES\" \u0026\u0026 $itunes_pid ]]; then\n    current_source=\"$ITUNES\"\n    break\n  elif [[ $s = \"$MUSIC\" \u0026\u0026 $music_pid ]]; then\n    current_source=\"$MUSIC\"\n    break\n  elif [[ $s = \"$SPOTIFY\" \u0026\u0026 $spotify_pid ]]; then\n    # spotify (applescript) api does not support likes\n    exit\n  elif [[ $s = \"$PIANOBAR\" \u0026\u0026 $pianobar_pid ]]; then\n    current_source=\"$PIANOBAR\"\n    break\n  fi\ndone\n\n# Do not display menu icon if no audio source is active\nif [[ $current_source = \"$NONE\" ]]; then\n  exit\nfi\n\n# Set like track icon based on dark mode setup\nif [[ \"$BitBarDarkMode\" ]]; then\n  icon=$like_icon_dark\nelse\n  icon=$like_icon_light\nfi\n\n# Trigger like track in correct music app\nif [[ $current_source = \"$ITUNES\" ]]; then\n  echo \" | image=$icon bash='$0' param1='itunes_like' terminal=false refresh=false\"\nelif [[ $current_source = \"$MUSIC\" ]]; then\n  echo \" | image=$icon bash='$0' param1='music_like' terminal=false refresh=false\"\nelif [[ $current_source = \"$PIANOBAR\" ]]; then\n  echo \" | image=$icon bash='$0' param1='pianobar_like' terminal=false refresh=false\"\nfi\n"
				}
			],
			"path": "Music/music-controls-like.10s.sh",
			"filename": "music-controls-like.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/music-controls-like.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Controls - Like Track Button",
			"version": "v1.0",
			"author": "Sebastián Barschkis",
			"authors": [
				{
					"name": "Sebastián Barschkis",
					"githubUsername": "sebbas",
					"imageURL": "https://avatars.githubusercontent.com/u/1890600?v=4",
					"bio": "Physics Developer @blender",
					"primary": true
				}
			],
			"desc": "Likes the current track in iTunes, Music or pianobar.",
			"imageURL": "https://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png",
			"dependencies": null,
			"aboutURL": "http://github.com/sebbas/music-controls-bitbar",
			"lastUpdated": "2021-03-08T15:21:57.230615Z",
			"vars": null
		}
	]
}