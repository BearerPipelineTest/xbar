{
	"person": {
		"name": "Varun Malhotra",
		"githubUsername": "softvar",
		"imageURL": "https://avatars.githubusercontent.com/u/4180800?v=4",
		"bio": "Lead Software Engineer | Science \u0026 Cosmos Fanatic | Being Psychologist to enhance AI skills\r\n",
		"primary": true
	},
	"plugins": [
		{
			"files": [
				{
					"path": "Web/ProductHunt/producthunt-posts-votes.1h.js",
					"filename": "producthunt-posts-votes.1h.js",
					"content": "#!/usr/local/bin/node\n/*\n* \u003cbitbar.title\u003eProductHunt Posts Votes Count\u003c/bitbar.title\u003e\n* \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n* \u003cbitbar.author\u003eVarun Malhotra\u003c/bitbar.author\u003e\n* \u003cbitbar.author.github\u003esoftvar\u003c/bitbar.author.github\u003e\n* \u003cbitbar.image\u003e\u003c/bitbar.image\u003e\n* \u003cbitbar.desc\u003eProductHunt Posts Votes count and Emoji notification ðŸ””  on change in votes count\u003c/bitbar.desc\u003e\n* \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n* \u003cbitbar.abouturl\u003ehttp://varunmalhotra.xyz/blog/2016/02/bitbar-plugins-for-github-and-producthunt.html\u003c/bitbar.abouturl\u003e\n*/\n\nvar https = require('https');\nvar fs = require('fs');\n\n// Configurable params\n// Either of userId or username should be provided\n// Providing userId will save one extra call for getting userId from username since PH API works on userId\nvar config = {\n    accessToken: '',\n    username: null,\n    userId: 294870,\n    filename: '/tmp/product-hunt-bitbar-votes-data.txt'\n};\n\n\nvar userId;\nvar displayInMenuBar = 'PH| color=#da552f dropdown=false';\ndisplayInMenuBar += '\\n---\\n';\n\nfunction checkIfFileExists() {\n    fs.exists(config.filename, function (exists) {\n        if (exists) {\n            return;\n        } else {\n            fs.writeFile(config.filename, {flag: 'wx'}, 0, function (err, data) {\n                if (err) { throw err; }\n            });\n        }\n    });\n}\n\nfunction sortOn(arr, key, orderBy) {\n    arr.sort(function (a, b) {\n        return orderBy ? b[key] - a[key] : a[key] - b[key];\n    });\n}\n\nfunction fetchPostVotes() {\n    // Fetch votes on each posts\n    var options = {\n        hostname: 'api.producthunt.com',\n        path: '/v1/users/' + userId + '/posts',\n        method: 'GET',\n        headers: {\n         'Authorization': 'Bearer ' + config.accessToken\n        }\n    };\n    var output = '';\n    var req = https.request(options, function(res) {\n        var body = '';\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n            var name;\n            var votes = [];\n            var response = JSON.parse(body);\n            var posts = response.posts;\n\n            // sort response on votes_count to show posts having higher votes on top\n            sortOn(posts, 'votes_count', true);\n\n            for (var i = 0; i \u003c posts.length; i++) {\n                name = posts[i].name;\n                output +=  '(' + posts[i].votes_count + ')' + name + ' | length=15 href=' + posts[i].discussion_url;\n                output += '\\n---\\n';\n                votes.push(posts[i].votes_count);\n            }\n\n            var oldData;\n            fs.readFile(config.filename, 'utf8', function (err, data) {\n                if (err) { throw err; }\n                oldData = data;\n\n                // SHow notification bell in OS X menu bar if current and previous data dont match\n                // Voilla! someone upvoted your post on ProductHunt\n                if (oldData.toString() !== votes.toString()) {\n                    displayInMenuBar = 'PHðŸ””| color=#da552f dropdown=false';\n                    displayInMenuBar += '\\n---\\n';\n                }\n\n                // Write all the votes count in the file\n                fs.writeFile(config.filename, votes.toString(), function (err) {\n                    if (err) { throw err; }\n                });\n\n                // Finally log the entire output\n                console.log(displayInMenuBar + output);\n            });\n        });\n    });\n    req.end();\n\n    req.on('error', function(e) {\n        console.error(e);\n    });\n}\n\nfunction getUserId(options) {\n    var req = https.request(options, function(res) {\n        var body = '';\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n            var response = JSON.parse(body);\n            if (response.error) {\n                console.log('No such PH User Found');\n                return;\n            }\n            // Update userId\n            userId = response.user.id;\n            console.log(userId);\n            fetchPostVotes();\n        });\n    });\n\n    req.end();\n\n    req.on('error', function(e) {\n        console.error(e);\n    });\n}\n\ncheckIfFileExists();\n\nif (config.userId) {\n    userId = config.userId;\n    fetchPostVotes();\n} else if (config.username) {\n    // Since we need ProductHunt userId for fetching user related data, get userId\n    // API call options\n    var options = {\n        hostname: 'api.producthunt.com',\n        path: '/v1/users/' + config.username,\n        method: 'GET',\n        headers: {\n            'Authorization': 'Bearer ' + config.accessToken\n        }\n    };\n    getUserId(options);\n} else {\n    console.log('!PH| color=#da552f dropdown=false\\n---\\n Provide PH userId/username.');\n}\n"
				}
			],
			"path": "Web/ProductHunt/producthunt-posts-votes.1h.js",
			"filename": "producthunt-posts-votes.1h.js",
			"dir": "Web/ProductHunt",
			"docsPlugin": "Web/ProductHunt/producthunt-posts-votes.1h.js.html",
			"docsCategory": "Web/ProductHunt.html",
			"pathSegments": [
				"Web",
				"ProductHunt"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/ProductHunt",
					"text": "ProductHunt",
					"isLast": true
				}
			],
			"title": "ProductHunt Posts Votes Count",
			"version": "v1.0",
			"author": "Varun Malhotra",
			"authors": [
				{
					"name": "Varun Malhotra",
					"githubUsername": "softvar",
					"imageURL": "https://avatars.githubusercontent.com/u/4180800?v=4",
					"bio": "Lead Software Engineer | Science \u0026 Cosmos Fanatic | Being Psychologist to enhance AI skills\r\n",
					"primary": true
				}
			],
			"desc": "ProductHunt Posts Votes count and Emoji notification ðŸ””  on change in votes count",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "http://varunmalhotra.xyz/blog/2016/02/bitbar-plugins-for-github-and-producthunt.html",
			"lastUpdated": "2021-03-08T15:22:08.985727Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/git-repo-stars.1h.js",
					"filename": "git-repo-stars.1h.js",
					"content": "#!/usr/local/bin/node\n/*\n* \u003cbitbar.title\u003eGithub Repo Stars\u003c/bitbar.title\u003e\n* \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n* \u003cbitbar.author\u003eVarun Malhotra\u003c/bitbar.author\u003e\n* \u003cbitbar.author.github\u003esoftvar\u003c/bitbar.author.github\u003e\n* \u003cbitbar.image\u003ehttp://varunmalhotra.xyz/media/images/bitbar-plugin-github-repos-stars.png\u003c/bitbar.image\u003e\n* \u003cbitbar.desc\u003eGithub repos stars and Emoji notification ðŸ”” on change in stars count\u003c/bitbar.desc\u003e\n* \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n* \u003cbitbar.abouturl\u003ehttp://varunmalhotra.xyz/blog/2016/02/bitbar-plugins-for-github-and-producthunt.html\u003c/bitbar.abouturl\u003e\n*/\n\n\n// Configurable params\nvar config = {\n    accessToken: '',\n    username: 'softvar',\n    hideZeroStarsRepo: false,\n    filename: '/tmp/github-repo-stars.txt'\n};\n\nvar https = require('https');\nvar fs = require('fs');\n\nvar displayInMenuBar = 'Git| color=green dropdown=false';\ndisplayInMenuBar += '\\n---\\n';\n\nfunction checkIfFileExists() {\n    fs.exists(config.filename, function (exists) {\n        if (exists) {\n            return;\n        } else {\n            fs.writeFile(config.filename, {flag: 'wx'}, 0, function (err, data) {\n                if (err) { throw err; }\n            });\n        }\n    });\n}\n\nfunction sortOn(arr, key, orderBy) {\n    arr.sort(function (a, b) {\n        return orderBy ? b[key] - a[key] : a[key] - b[key];\n    });\n}\n\nfunction getRepoStars(options) {\n    var output = '';\n    var req = https.request(options, function(res) {\n        var body = '';\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n            var name;\n            var stars = [];\n            var response = JSON.parse(body);\n\n            // sort on stargazers_count to show repos having more stars on top\n            sortOn(response, 'stargazers_count', true);\n\n            for (var i = 0; i \u003c response.length; i++) {\n                // show only `your` repos, not the forked ones\n                if (response[i].fork) { continue; }\n\n                if (response[i].stargazers_count === 0 \u0026\u0026 config.hideZeroStarsRepo) { continue; }\n\n                name = response[i].name;\n                output += '(' + response[i].stargazers_count + ')' + name + ' | length=15 href=' + response[i].html_url;\n                output += '\\n---\\n';\n                stars.push(response[i].stargazers_count);\n            }\n\n            var oldData;\n            fs.readFile(config.filename, 'utf8', function (err, data) {\n                if (err) { throw err; }\n                oldData = data;\n\n                // SHow notification bell in OS X menu bar if current and revious data doesnt match\n                // Voilla, someone starred your repo on Github\n                if (oldData.toString() !== stars.toString()) {\n                    displayInMenuBar = 'GitðŸ””| color=green dropdown=false';\n                    displayInMenuBar += '\\n---\\n';\n                }\n\n                // Write all the stars count in the file\n                fs.writeFile(config.filename, stars.toString(), {flag: 'w'}, function (err) {\n                    if (err) { throw err; }\n                });\n\n                // Finally log the entire output\n                console.log(displayInMenuBar + output);\n            });\n        });\n    });\n    req.end();\n\n    req.on('error', function(e) {\n        console.error(e);\n    });\n}\n\ncheckIfFileExists();\n\n// API call options\nvar options = {\n    hostname: 'api.github.com',\n    path: '/users/' + config.username + '/repos',\n    method: 'GET',\n    headers: {\n        'Authorization': 'token ' + config.accessToken,\n        'User-Agent': 'Awesome-Octocat-App'\n    }\n};\n\ngetRepoStars(options);\n"
				}
			],
			"path": "Web/git-repo-stars.1h.js",
			"filename": "git-repo-stars.1h.js",
			"dir": "Web",
			"docsPlugin": "Web/git-repo-stars.1h.js.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Github Repo Stars",
			"version": "v1.0",
			"author": "Varun Malhotra",
			"authors": [
				{
					"name": "Varun Malhotra",
					"githubUsername": "softvar",
					"imageURL": "https://avatars.githubusercontent.com/u/4180800?v=4",
					"bio": "Lead Software Engineer | Science \u0026 Cosmos Fanatic | Being Psychologist to enhance AI skills\r\n",
					"primary": true
				}
			],
			"desc": "Github repos stars and Emoji notification ðŸ”” on change in stars count",
			"imageURL": "http://varunmalhotra.xyz/media/images/bitbar-plugin-github-repos-stars.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "http://varunmalhotra.xyz/blog/2016/02/bitbar-plugins-for-github-and-producthunt.html",
			"lastUpdated": "2021-03-08T15:22:09.835548Z",
			"vars": null
		}
	]
}