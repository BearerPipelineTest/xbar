{
	"plugins": [
		{
			"files": [
				{
					"path": "Dev/Codeship/codeship.1m.js",
					"filename": "codeship.1m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n/* jshint esversion:9 */\nconst https = require('https');\n\n/* EDIT HERE */\nconst USER = '';\nconst PASSWORD = '';\nconst ORGANIZATION_NAME = '';\nconst PROJECT_ID = '';\n/* DON'T EDIT BELOW */\n// \u003cbitbar.title\u003eCodeship\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eGil Barbara\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003egilbarbara\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eList recent builds.\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.abouturl\u003ehttps://github.com/gilbarbara/bitbar-plugins\u003c/bitbar.abouturl\u003e\nconst BASE_URL = 'api.codeship.com';\nconst PROJECT_URL = `https://app.codeship.com/projects/${PROJECT_ID}`;\nconst AUTH = Buffer.from(`${USER}:${PASSWORD}`).toString('base64');\nconst COLORS = {\n  success: '#42A86F',\n  testing: '#607192',\n  error: '#D12C3F',\n  infrastructure_failure: '#9E212F',\n  stopped: '#C4CDCE',\n  waiting: '#3FCBDA',\n};\n\nlet ACCESS_TOKEN;\nlet ORGANIZATION_UUID;\nlet PROJECT_UUID;\n\nconst ICON = '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MCAwIDE2IDE2XSAvQ291bnQgMSAvS2lkcyBbIDIgMCBSIF0gPj4KZW5kb2JqCjE2IDAgb2JqCjw8IC9UeXBlIC9DYXRhbG9nIC9QYWdlcyAzIDAgUiAvVmVyc2lvbiAvMS40ID4+CmVuZG9iagoxNyAwIG9iagooTWFjIE9TIFggMTAuMTMuNiBRdWFydHogUERGQ29udGV4dCkKZW5kb2JqCjE4IDAgb2JqCihEOjIwMTgwODExMjIzMTI3WjAwJzAwJykKZW5kb2JqCjEgMCBvYmoKPDwgL1Byb2R1Y2VyIDE3IDAgUiAvQ3JlYXRpb25EYXRlIDE4IDAgUiAvTW9kRGF0ZSAxOCAwIFIgPj4KZW5kb2JqCnhyZWYKMCAxOQowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDY1MDUgMDAwMDAgbiAKMDAwMDAwMTQyNSAwMDAwMCBuIAowMDAwMDA2MjY1IDAwMDAwIG4gCjAwMDAwMDAwMjIgMDAwMDAgbiAKMDAwMDAwMTQwNSAwMDAwMCBuIAowMDAwMDAxNTA1IDAwMDAwIG4gCjAwMDAwMDE2MDAgMDAwMDAgbiAKMDAwMDAwMjE2NCAwMDAwMCBuIAowMDAwMDAyMTgzIDAwMDAwIG4gCjAwMDAwMDYyMjggMDAwMDAgbiAKMDAwMDAwMzQ1NSAwMDAwMCBuIAowMDAwMDAyMjUyIDAwMDAwIG4gCjAwMDAwMDM0MzQgMDAwMDAgbiAKMDAwMDAwMzQ5MiAwMDAwMCBuIAowMDAwMDA2MjA3IDAwMDAwIG4gCjAwMDAwMDYzNDYgMDAwMDAgbiAKMDAwMDAwNjQxMCAwMDAwMCBuIAowMDAwMDA2NDYzIDAwMDAwIG4gCnRyYWlsZXIKPDwgL1NpemUgMTkgL1Jvb3QgMTYgMCBSIC9JbmZvIDEgMCBSIC9JRCBbIDwwNGFjNGYxY2IwYjc0MzFmZGI2OTAxYzg3MDJjMWNjZD4KPDA0YWM0ZjFjYjBiNzQzMWZkYjY5MDFjODcwMmMxY2NkPiBdID4+CnN0YXJ0eHJlZgo2NTgwCiUlRU9GCg==';\nconst RELOAD_ICON = 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAmElEQVR4AY3SJdYCYRhA4V+BRGY5rAF3ZwvkiSyANLugYgUtOJsg4s7LxV3uOU8a+fTrom9EUMEAfZQRwDEFuwxIQ9CEetCBIIk4BF/fSKMPL26LYgHZoQgEXjxKgQCgCpqfvQwaQMVtOhhv3X7wURU08apvxGB5v2giFwTmT7bVigly+H11cAnUIChAD3p+NbrIwotv7NoAffg2NR6lsPIAAAAASUVORK5CYII=';\n\nfunction request(options = {}) {\n  const OPTIONS = {\n    hostname: BASE_URL,\n    path: `/v2${options.path || '/auth'}`,\n    port: 443,\n    method: options.method || 'GET',\n    headers: {\n      ...options.headers,\n    },\n  };\n\n  return new Promise((resolve, reject) =\u003e {\n    const req = https.request(OPTIONS, (response) =\u003e {\n      const { headers, statusCode } = response;\n\n      if (statusCode \u003c 200 || statusCode \u003e 299) {\n        reject(new Error(`Request failed - status code: ${response.statusCode}`));\n      }\n\n      const isJSON = headers['content-type'].includes('application/json');\n\n      // temporary data holder\n      const body = [];\n      // on every content chunk, push it to the data array\n      response.on('data', chunk =\u003e body.push(chunk));\n      // we are done, resolve promise with those joined chunks\n      response.on('end', () =\u003e {\n        const content = body.join('');\n        resolve(isJSON ? JSON.parse(content) : content);\n      });\n    });\n\n    // handle connection errors of the request\n    req.on('error', err =\u003e reject(err));\n    req.end();\n  });\n}\n\nfunction timeSince(dateString) {\n  const date = new Date(dateString);\n  const seconds = Math.floor((new Date() - date) / 1000);\n  let intervalType;\n\n  let interval = Math.floor(seconds / 31536000);\n  if (interval \u003e= 1) {\n    intervalType = 'year';\n  }\n  else {\n    interval = Math.floor(seconds / 2592000);\n    if (interval \u003e= 1) {\n      intervalType = 'month';\n    }\n    else {\n      interval = Math.floor(seconds / 86400);\n      if (interval \u003e= 1) {\n        intervalType = 'day';\n      }\n      else {\n        interval = Math.floor(seconds / 3600);\n        if (interval \u003e= 1) {\n          intervalType = 'hour';\n        }\n        else {\n          interval = Math.floor(seconds / 60);\n          if (interval \u003e= 1) {\n            intervalType = 'minute';\n          }\n          else {\n            interval = seconds;\n            intervalType = 'second';\n          }\n        }\n      }\n    }\n  }\n\n  if (interval \u003e 1 || interval === 0) {\n    intervalType += 's';\n  }\n\n  return `${interval} ${intervalType}`;\n}\n\nfunction formatTitle(build) {\n  return `${build.branch} | href=${PROJECT_URL} color=${COLORS[build.status]}`;\n}\n\nfunction formatDate(build) {\n  return `${timeSince(build.finished_at)} ago - (${build.username}) | size=12`;\n}\n\nfunction formatBuild(build) {\n  return [\n    formatTitle(build),\n    formatDate(build),\n  ].join('\\n');\n}\n\nfunction handleResponse(body) {\n  const content = body.map(formatBuild).join('\\n---\\n');\n  const output = [\n    `|image=${ICON}`,\n    content,\n    `RELOAD | image=${RELOAD_ICON} refresh=true`,\n  ];\n  console.log(output.join('\\n---\\n'));\n}\n\nconst login = () =\u003e request({ method: 'POST', headers: { Authorization: `Basic ${AUTH}` } })\n  .then((d) =\u003e {\n    if (d.access_token) {\n      ACCESS_TOKEN = d.access_token;\n\n      const organization = d.organizations.find(o =\u003e o.name === ORGANIZATION_NAME);\n\n      if (!organization) {\n        throw new Error(`Organization \"${ORGANIZATION_NAME}\" not found`);\n      }\n\n      ORGANIZATION_UUID = organization.uuid;\n    }\n  })\n  .catch((error) =\u003e {\n    throw new Error(`[Login] ${error.message}`);\n  });\n\nconst getProjects = () =\u003e request({\n  path: `/organizations/${ORGANIZATION_UUID}/projects`,\n  headers: { Authorization: `Bearer ${ACCESS_TOKEN}` },\n});\n\nconst getBuilds = () =\u003e request({\n  path: `/organizations/${ORGANIZATION_UUID}/projects/${PROJECT_UUID}/builds`,\n  headers: { Authorization: `Bearer ${ACCESS_TOKEN}` },\n});\n\nlogin()\n  .then(() =\u003e {\n    getProjects()\n      .then((d) =\u003e {\n        const project = d.projects.find(p =\u003e p.id === PROJECT_ID);\n\n        if (!project) {\n          throw new Error(`Project \"${PROJECT_ID}\" not found`);\n        }\n\n        PROJECT_UUID = project.uuid;\n      })\n      .then(() =\u003e getBuilds())\n      .then(d =\u003e handleResponse(d.builds.filter((b, i) =\u003e i \u003c 15)))\n      .catch(err =\u003e console.log(err.toString()));\n  })\n  .catch(err =\u003e console.log(err.toString()));\n"
				}
			],
			"path": "Dev/Codeship/codeship.1m.js",
			"filename": "codeship.1m.js",
			"dir": "Dev/Codeship",
			"docsPlugin": "Dev/Codeship/codeship.1m.js.html",
			"docsCategory": "Dev/Codeship.html",
			"pathSegments": [
				"Dev",
				"Codeship"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Codeship",
					"text": "Codeship",
					"isLast": true
				}
			],
			"title": "Codeship",
			"version": "v1.0",
			"author": "Gil Barbara",
			"authors": [
				{
					"name": "Gil Barbara",
					"githubUsername": "gilbarbara",
					"imageURL": "https://avatars.githubusercontent.com/u/31954?v=4",
					"bio": "Coder",
					"primary": true
				}
			],
			"desc": "List recent builds.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "https://github.com/gilbarbara/bitbar-plugins",
			"lastUpdated": "2021-03-08T15:21:47.891315Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Codeship/codeship.1m.py",
					"filename": "codeship.1m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eCodeship\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDaniel Seripap\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eseripap\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eLatest build status for all projects in Codeship\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/683200/16809335/fadc3746-48ed-11e6-8c86-517dd94412ff.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nimport json\nimport urllib2\n\n# Get it here: https://codeship.com/user/edit\nAPI_KEY = ''\n\nBASE_URL = 'https://codeship.com/api/v1/projects.json?api_key=' + API_KEY\nCOLORS = {\n  'success': '#42A86F',\n  'testing': '#607192',\n  'error': '#D12C3F',\n  'stopped': '#C4CDCE'\n}\n\ndef getData():\n  try:\n    return json.load(urllib2.urlopen(BASE_URL))\n  except urllib2.URLError:\n    return False\n\ndef generateMenu(data):\n  if data is False:\n    print 'Build data unavailable'\n    return False\n\n  for project in data['projects']:\n    print project['repository_name'] + ' | href=' + 'https://codeship.com/projects/' + str(project['id'])\n    print '---'\n    for build in project['builds']:\n      print '- ' + build['branch'] + ': ' + build['status']  + ' | color=' + COLORS[build['status']] + ' href=' + 'https://codeship.com/projects/' + str(build['project_id']) + '/builds/' + str(build['id'])\n    print '---'\n\nprint 'Codeship'\nprint '---'\ngenerateMenu(getData());\n"
				}
			],
			"path": "Dev/Codeship/codeship.1m.py",
			"filename": "codeship.1m.py",
			"dir": "Dev/Codeship",
			"docsPlugin": "Dev/Codeship/codeship.1m.py.html",
			"docsCategory": "Dev/Codeship.html",
			"pathSegments": [
				"Dev",
				"Codeship"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Codeship",
					"text": "Codeship",
					"isLast": true
				}
			],
			"title": "Codeship",
			"version": "v1.0.0",
			"author": "Daniel Seripap",
			"authors": [
				{
					"name": "Daniel Seripap",
					"githubUsername": "seripap",
					"imageURL": "https://avatars.githubusercontent.com/u/683200?v=4",
					"bio": "untitled_document.html",
					"primary": true
				}
			],
			"desc": "Latest build status for all projects in Codeship",
			"imageURL": "https://cloud.githubusercontent.com/assets/683200/16809335/fadc3746-48ed-11e6-8c86-517dd94412ff.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:47.890822Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Codeship/codeship-single.30s.py",
					"filename": "codeship-single.30s.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eCodeship Single Project\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDaniel Seripap\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eseripap\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eLatest build status for individual Codeship project\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/683200/16809236/8fffa28c-48ed-11e6-9060-e42992612f50.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nimport json\nimport urllib2\n\n# Get it here: https://codeship.com/user/edit\nAPI_KEY = ''\n# Modify accordingly\nPROJECT_ID = 0\n\nBASE_URL = 'https://codeship.com/api/v1/projects.json?api_key=' + API_KEY\nHREF_URL = 'https://codeship.com/projects/' + str(PROJECT_ID) + '/builds/'\nCOLORS = {\n  'success': '#42A86F',\n  'testing': '#607192',\n  'error': '#D12C3F',  \n  'stopped': '#C4CDCE'\n}\n\ndef getData():\n  try:\n    return json.load(urllib2.urlopen(BASE_URL))\n  except urllib2.URLError:\n    return False\n\ndef generate(data):\n  header = []\n  menu = []\n  if data is False:\n    print 'Build data unavailable'\n    return False\n\n  for project in data['projects']:\n    if PROJECT_ID == project['id']:\n      index = 0;\n      latest = False;\n      for build in project['builds']:\n        menu.append('- ' + build['branch'] + ': ' + build['status'] + ' | color=' + COLORS[build['status']] + ' href=' + HREF_URL + str(build['id']))\n        if index == 0:\n          index = 1\n          latest = COLORS[build['status']]\n\n      header.append(project['repository_name'] + ' | color=' + latest)\n      header.append('---')\n\n  for line in header:\n      print line.encode('utf-8')\n  for line in menu:\n      print line.encode('utf-8')\n\ngenerate(getData());\n"
				}
			],
			"path": "Dev/Codeship/codeship-single.30s.py",
			"filename": "codeship-single.30s.py",
			"dir": "Dev/Codeship",
			"docsPlugin": "Dev/Codeship/codeship-single.30s.py.html",
			"docsCategory": "Dev/Codeship.html",
			"pathSegments": [
				"Dev",
				"Codeship"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Codeship",
					"text": "Codeship",
					"isLast": true
				}
			],
			"title": "Codeship Single Project",
			"version": "v1.0.0",
			"author": "Daniel Seripap",
			"authors": [
				{
					"name": "Daniel Seripap",
					"githubUsername": "seripap",
					"imageURL": "https://avatars.githubusercontent.com/u/683200?v=4",
					"bio": "untitled_document.html",
					"primary": true
				}
			],
			"desc": "Latest build status for individual Codeship project",
			"imageURL": "https://cloud.githubusercontent.com/assets/683200/16809236/8fffa28c-48ed-11e6-9060-e42992612f50.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:47.83619Z",
			"vars": null
		}
	]
}