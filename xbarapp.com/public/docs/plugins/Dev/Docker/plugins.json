{
	"plugins": [
		{
			"files": [
				{
					"path": "Dev/Docker/docker-status.1m.sh",
					"filename": "docker-status.1m.sh",
					"content": "#!/usr/bin/env bash\n#\n# \u003cbitbar.title\u003eDocker Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eManoj Mahalingam\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emanojlds\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/191378/12255368/1e671b32-b919-11e5-8166-6d975396f408.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eDisplays the status of docker machines and running containers\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eshell,docker\u003c/bitbar.dependencies\u003e\n#\n# Docker status plugin\n# by Manoj Mahalingam (@manojlds)\n#\n# Displays the status of docker machines and running containers\n\nexport PATH=\"/usr/local/bin:/usr/bin:$PATH\"\necho \"‚öìÔ∏è | dropdown=false\"\necho \"---\"\n\nfunction containers() {\n  CONTAINERS=\"$(docker ps -a --format \"{{.Names}} ({{.Image}})|{{.ID}}|{{.Status}}\")\"\n  if [ -z \"$CONTAINERS\" ]; then\n    echo \"No running containers\"\n  else\n    LAST_CONTAINER=$(echo \"$CONTAINERS\" | tail -n1 )\n    echo \"${CONTAINERS}\" | while read -r CONTAINER; do\n      CONTAINER_NAME=$(echo \"$CONTAINER\" | awk -F\"|\" '{print $1}')\n      CONTAINER_ID=$(echo \"$CONTAINER\" | awk -F\"|\" '{print $2}')\n      CONTAINER_STATE=$(echo \"$CONTAINER\" | awk -F\"|\" '{print $3}')\n      SYM=\"‚îú üíª \"\n      if [ \"$CONTAINER\" = \"$LAST_CONTAINER\" ]; then SYM=\"‚îî üíª \"; fi\n      case \"$CONTAINER_STATE\" in\n        *Up*) echo \"$SYM $CONTAINER_NAME | color=green bash=\\\"$(command -v docker)\\\" param1=stop param2=$CONTAINER_ID terminal=false refresh=true\";;\n        *Exited*) echo \"$SYM $CONTAINER_NAME | color=red bash=\\\"$(command -v docker)\\\" param1=start param2=$CONTAINER_ID terminal=false refresh=true\";;\n      esac\n    done\n  fi\n}\n\nif command -v docker-machine \u003e /dev/null; then\n    DOCKER_MACHINES=\"$(docker-machine ls -q)\"\nfi\nif command -v dlite \u003e /dev/null; then\n    DLITE=\"$(command -v dlite)\"\nfi\nif command -v docker \u003e /dev/null; then\n    DOCKER_NATIVE=\"$(command -v docker)\"\nfi\n\nif test -z \"$DOCKER_MACHINES\" \u0026\u0026 test -z \"$DLITE\" \u0026\u0026 test -z \"$DOCKER_NATIVE\"; then\n  echo \"No docker machine, dlite or docker native found\"\n  exit 0\nfi\n\nif [ -n \"$DOCKER_NATIVE\" ]; then\n  MACHINE=\"$($DOCKER_NATIVE -v)\"\n  CONTAINERS=\"$($DOCKER_NATIVE ps -a --format \"{{.Names}} ({{.Image}})|{{.ID}}|{{.Status}}\")\"\n  if [ -n \"$CONTAINERS\" ]; then\n    echo \"üîµ  $MACHINE | bash=\\\"$DOCKER_NATIVE\\\" param1=stop terminal=false refresh=true\"\n    containers\n  fi\n  exit 0\nfi\n\nif [ -n \"$DLITE\" ]; then\n  MACHINE=\"$($DLITE ip)\"\n  CONTAINERS=\"$(docker ps -a --format \"{{.Names}} ({{.Image}})|{{.ID}}|{{.Status}}\")\"\n  if [ -z \"$CONTAINERS\" ]; then\n    echo \"üî¥  $MACHINE | bash=\\\"$DLITE\\\" param1=start terminal=false refresh=true\"\n  else\n    echo \"üîµ  $MACHINE | bash=\\\"$DLITE\\\" param1=stop terminal=false refresh=true\"\n    containers\n  fi\n  exit 0\nfi\n\nif [ -n \"$DOCKER_MACHINES\" ]; then\n  DM_EXEC=$(command -v docker-machine)\n  echo \"${DOCKER_MACHINES}\" | while read -r machine; do\n    STATUS=$($DM_EXEC status \"$machine\")\n    if [ \"$STATUS\" = \"Running\" ]; then\n      echo \"üîµ  $machine | bash=\\\"$DM_EXEC\\\" param1=stop param2=$machine terminal=false refresh=true\"\n      ENV=$($DM_EXEC env --shell sh \"$machine\")\n      eval \"$ENV\"\n      containers\n    else\n      echo \"üî¥  $machine | bash=\\\"$DM_EXEC\\\" param1=start param2=$machine terminal=false refresh=true\"\n    fi\n    echo \"---\"\n  done\nfi\n\nif [ -n \"$CONTAINERS\" ]; then\n  echo \"Docker VM Containers\"\n  containers\nfi\n"
				}
			],
			"path": "Dev/Docker/docker-status.1m.sh",
			"filename": "docker-status.1m.sh",
			"dir": "Dev/Docker",
			"docsPlugin": "Dev/Docker/docker-status.1m.sh.html",
			"docsCategory": "Dev/Docker.html",
			"pathSegments": [
				"Dev",
				"Docker"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Docker",
					"text": "Docker",
					"isLast": true
				}
			],
			"title": "Docker Status",
			"version": "v1.2",
			"author": "Manoj Mahalingam",
			"authors": [
				{
					"name": "Manoj",
					"githubUsername": "manojlds",
					"imageURL": "https://avatars.githubusercontent.com/u/191378?v=4",
					"bio": "Principal Engineer @avalara. Previously @indix @thoughtworks. #kubernetes #terraform #docker #scala #javascript #nodejs. Author of http://bit.ly/learningci ",
					"primary": true
				}
			],
			"desc": "Displays the status of docker machines and running containers",
			"imageURL": "https://cloud.githubusercontent.com/assets/191378/12255368/1e671b32-b919-11e5-8166-6d975396f408.png",
			"dependencies": [
				"shell",
				"docker"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:47.905143Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Docker/docker-disk.1m.sh",
					"filename": "docker-disk.1m.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eDocker disk usage\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eHoratiu Ion\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eLink512\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows docker disk usage (via docker system df).\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash,docker\u003c/bitbar.dependencies\u003e\n#\n# Docker disk usage plugin\n#\n# Displays the total disk usage of docker. Clicking the menu will show a detailed breakdown (images, containers, volumes, build cache)\n\nexport PATH=\"/usr/local/bin:/usr/bin:$PATH\"\nDOCKER=\"$(command -v docker)\"\n\nhumanize() {\n    local L_BYTES=\"${1:-0}\"\n    local L_BASE=\"${2:-1000}\"\n    echo \"$1\" | awk -v bytes=\"${L_BYTES}\" -v base=\"${L_BASE}\" 'function human(x, base) {\n         if(base!=1024)base=1000\n         basesuf=(base==1024)?\"iB\":\"B\"\n\n         s=\"BKMGTEPYZ\"\n         while (x\u003e=base \u0026\u0026 length(s)\u003e1)\n               {x/=base; s=substr(s,2)}\n         s=substr(s,1,1)\n\n         xf=((s==\"B\")?\"%d\":\"%.2f\")\n         s=(s!=\"B\") ? (s basesuf) : s\n\n         return sprintf( (xf \" %s\\n\"), x, s)\n      }\n      BEGIN{print human(bytes, base)}'\n}\n\ndehumanise() {\n    read -r v\n    echo \"$v\" | awk \\\n        'BEGIN{IGNORECASE = 1}\n        function printpower(n,b,p) {printf \"%d\\n\", n*b^p}\n        /[0-9](B)?$/{ printpower($1, 10,  1); next;};\n        /K(B)?$/{     printpower($1, 10,  3); next;};\n        /M(B)?$/{     printpower($1, 10,  6); next;};\n        /G(B)?$/{     printpower($1, 10,  9); next;};\n        /T(B)?$/{     printpower($1, 10, 12); next;};'\n}\n\nDOCKER_DF=$(${DOCKER} system df --format \"{{.Size}}\")\n\nIMAGE_SIZES=$(echo \"${DOCKER_DF}\" | sed -n 1p | dehumanise)\nCONTAINER_SIZES=$(echo \"${DOCKER_DF}\" | sed -n 2p | dehumanise)\nVOLUME_SIZES=$(echo \"${DOCKER_DF}\" | sed -n 3p | dehumanise)\nBUILD_SIZES=$(echo \"${DOCKER_DF}\" | sed -n 4p | dehumanise)\n\nTOTAL=$((IMAGE_SIZES + CONTAINER_SIZES + VOLUME_SIZES + BUILD_SIZES))\n\necho \"üê≥: $(humanize ${TOTAL})\"\necho \"---\"\necho \"images: $(echo \"${DOCKER_DF}\" | sed -n 1p)\"\necho \"containers: $(echo \"${DOCKER_DF}\" | sed -n 2p)\"\necho \"volumes: $(echo \"${DOCKER_DF}\" | sed -n 3p)\"\necho \"build cache: $(echo \"${DOCKER_DF}\" | sed -n 4p)\"\necho \"---\"\necho \"Refresh | refresh=true\"\n"
				}
			],
			"path": "Dev/Docker/docker-disk.1m.sh",
			"filename": "docker-disk.1m.sh",
			"dir": "Dev/Docker",
			"docsPlugin": "Dev/Docker/docker-disk.1m.sh.html",
			"docsCategory": "Dev/Docker.html",
			"pathSegments": [
				"Dev",
				"Docker"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Docker",
					"text": "Docker",
					"isLast": true
				}
			],
			"title": "Docker disk usage",
			"version": "v0.0.1",
			"author": "Horatiu Ion",
			"authors": [
				{
					"name": "Horatiu Ion",
					"githubUsername": "Link512",
					"imageURL": "https://avatars.githubusercontent.com/u/4046355?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows docker disk usage (via docker system df).",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash",
				"docker"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:47.894375Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Docker/docker-sync-status.1m.sh",
					"filename": "docker-sync-status.1m.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eDocker-Sync Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBrendan Shanny\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebrenshanny\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay the current status of docker-sync.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/LbaqXzU.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003edocker-sync\u003c/bitbar.dependencies\u003e\n#\n# Docker-Sync Status Plugin\n#\n# by Brendan Shanny\n#\n# To get started, create a new text file in your project tree that docker-sync will watch\n# then edit the docker_log and docker_checker vars below to be the paths to your\n# docker_sync daemon.log and the newly created text file.\n\nerror_status=\"‚ùå\"\nerror_message=\"Docker-Sync does not appear to by syncing | color=#ff0000\"\n\nsuccess_status=\"üõ∞\"\nsuccess_message=\"Docker-Sync is Running | color=#008000\"\n\n# The path to your docker-sync daemon.log file\ndocker_log=\"/path/to/your/project/.docker-sync/daemon.log\"\n# The path to a text file within your project that docker-sync will watch\ndocker_checker=\"/path/to/your/project/docker-sync-checker.txt\"\n\nfirst_file_access=$(stat -f '%m' $docker_log)\n\n# Trigger a sync of the file\necho \"test docker-sync\" \u003e\u003e $docker_checker\n\n# 3s works just fine, 5s provides a safety margin\nsleep 5\n\nsecond_file_access=$(stat -f '%m' $docker_log)\n\n# Reset the file\necho \"This file is used by the bitbar docker-sync-status plugin to check the status of docker-sync.\" \u003e $docker_checker\n\nif [ \"$first_file_access\" == \"$second_file_access\" ]; then\n  sync_status=$error_status\n  sync_message=$error_message\nelse\n  sync_status=$success_status\n  sync_message=$success_message\nfi\necho \"$sync_status\"\necho \"---\"\necho \"$sync_message\"\n"
				}
			],
			"path": "Dev/Docker/docker-sync-status.1m.sh",
			"filename": "docker-sync-status.1m.sh",
			"dir": "Dev/Docker",
			"docsPlugin": "Dev/Docker/docker-sync-status.1m.sh.html",
			"docsCategory": "Dev/Docker.html",
			"pathSegments": [
				"Dev",
				"Docker"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Docker",
					"text": "Docker",
					"isLast": true
				}
			],
			"title": "Docker-Sync Status",
			"version": "v1.0.0",
			"author": "Brendan Shanny",
			"authors": [
				{
					"name": "Brendan Shanny",
					"githubUsername": "brenshanny",
					"imageURL": "https://avatars.githubusercontent.com/u/13106568?v=4",
					"bio": "Senior Software Engineer at @securedocs ",
					"primary": true
				}
			],
			"desc": "Display the current status of docker-sync.",
			"imageURL": "https://i.imgur.com/LbaqXzU.png",
			"dependencies": [
				"docker-sync"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:47.922608Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Docker/numContainers.5s.sh",
					"filename": "numContainers.5s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eNumContainers\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ecghamburg\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecghamburg\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePrint number of running Docker containers with whale unicode char\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003edocker\u003c/bitbar.dependencies\u003e\n\nCONTAINERS=$(/usr/local/bin/docker ps --format '{{.Names}}' | sort)\nNUM_CONTAINERS=0\nif [ -n \"$CONTAINERS\" ]\nthen\n\tNUM_CONTAINERS=$(echo \"${CONTAINERS}\" | wc -l | tr -d '[:space:]')\nfi\necho \"$(printf \"üê≥ %.0f \\n\" \"${NUM_CONTAINERS}\") | size=13\"\necho \"---\"\necho \"${CONTAINERS}\"\n"
				}
			],
			"path": "Dev/Docker/numContainers.5s.sh",
			"filename": "numContainers.5s.sh",
			"dir": "Dev/Docker",
			"docsPlugin": "Dev/Docker/numContainers.5s.sh.html",
			"docsCategory": "Dev/Docker.html",
			"pathSegments": [
				"Dev",
				"Docker"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Docker",
					"text": "Docker",
					"isLast": true
				}
			],
			"title": "NumContainers",
			"version": "v1.0",
			"author": "cghamburg",
			"authors": [
				{
					"name": "cghamburg",
					"githubUsername": "cghamburg",
					"imageURL": "https://avatars.githubusercontent.com/u/2742203?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Print number of running Docker containers with whale unicode char",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"docker"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.091876Z",
			"vars": null
		}
	]
}