{
	"plugin": {
		"files": [
			{
				"path": "Dev/Git/get_pull_requests_bitbar.1h.rb",
				"filename": "get_pull_requests_bitbar.1h.rb",
				"content": "#!/usr/bin/env ruby\n# frozen_string_literal: true\n\n# \u003cbitbar.title\u003ePR Counts for Github and Bitbucket\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMarco Cabazal\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eMarcoCabazal\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGets Pull Request Counts for Github and Bitbucket Repos\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://marcocabazal.github.io/images/gpr_snap.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby \u003e= 2\u003c/bitbar.dependencies\u003e\n\n###### README\n# Please secure the app-specific password/personal access token from either Bitbucket or Github.\n# These tokens are necessary to raise request limits and for the script to have read access to\n# private repositories.\n#\n# For Bitbucket: From your profile page, click on Bitbucket Settings -\u003e App Passwords\n# For Github: Click on your avatar, then go to Settings -\u003e Personal Access Tokens\n#\n#\n# Run frequency of this script is defined by the filename, i.e., for\n# the default get_pull_requests_bitbar.1h.rb, frequency is every hour.\n#\n# You may rename this script with the following options to fine-tune.\n# Options: {n}s for seconds\n#          {n}m for minutes\n#          {n}h for hours\n#          {n}d for days\n#\n#\n###### EXTRA\n# When run from bitbar or if filename contains the word bitbar, output is\n# multiline (click menu item to see details), otherwise, it just outputs\n# the total PR counts (good for use with BetterTouchTool). To use with BetterTouchTool,\n# just create a symlink to this script without the word bitbar and refer to that link instead.\n\n###### BEGIN_CONFIG\nREPOS_YAML = File.expand_path \"~/.repos.yaml\"\n###### Sample YAML config\n# repos:\n#   - name: \"Bitbar Plugins\"\n#     service: \"github\"\n#     repo: \"matryer/bitbar-plugins\"\n#\n#   - name: \"Bitbar Plugins\"\n#     service: \"github\"\n#     repo: \"matryer/bitbar-plugins\"\n#     username: \"your-github-username-not-your-email\"\n#     app_password: \"personal-access-token\"\n#\n# should_monitor_on_weekends: true\n\n###### END_CONFIG\n\nSERVICES = {\n  bitbucket: {\n    api_prefix: \"https://api.bitbucket.org/2.0/repositories\",\n    api_suffix: \"pullrequests\",\n    human_prefix: \"https://bitbucket.org\",\n    human_suffix: \"pull-requests\"\n  },\n  github: {\n    api_prefix: \"https://api.github.com/repos\",\n    api_suffix: \"pulls?state=open\u0026type=pr\u0026per_page=1\",\n    human_prefix: \"https://github.com\",\n    human_suffix: \"pulls\"\n  }\n}.freeze\n\nrequire \"net/http\"\nrequire \"net/https\"\nrequire \"json\"\nrequire \"base64\"\nrequire \"yaml\"\n\nclass GetPullRequests\n  def do_it!\n    return if $PROGRAM_NAME != __FILE__\n    parse_yaml_config\n    if !should_monitor_on_weekends? \u0026\u0026 its_a_weekend?\n      puts \"0 PRs.\"\n      return\n    end\n\n    retrieve_pr_counts\n  end\n\n  private\n\n  def should_monitor_on_weekends?\n    @should_monitor_on_weekends\n  end\n\n  def its_a_weekend?\n    now = Time.now\n    now.saturday? || now.sunday?\n  end\n\n  def called_by_bitbar?\n    $PROGRAM_NAME =~ /bitbar/i\n  end\n\n  def parse_yaml_config\n    if !File.exist? REPOS_YAML\n      puts \"Please configure at least one repo in ~/.repos.yaml. See source for example.\"\n      exit\n    end\n    config = YAML.load_file REPOS_YAML\n    @should_monitor_on_weekends = config[\"should_monitor_on_weekends\"] || false\n\n    @repos = []\n    config[\"repos\"].each do |repo|\n      repo_hash = { name: repo[\"name\"], service: repo[\"service\"], repo: repo[\"repo\"] }\n      repo_hash[:username] = repo[\"username\"] if !repo[\"username\"].nil?\n      repo_hash[:app_password] = repo[\"app_password\"] if !repo[\"app_password\"].nil?\n      @repos \u003c\u003c repo_hash\n    end\n  end\n\n  def call_api(http_method, endpoint, token = nil)\n    uri = URI endpoint\n\n    begin\n      http = Net::HTTP.new(uri.host, uri.port)\n      http.use_ssl = true\n      http.verify_mode = OpenSSL::SSL::VERIFY_PEER\n\n      request = Net::HTTP.const_get(http_method.downcase.capitalize).new(uri)\n      request.add_field \"Authorization\", \"Basic #{token}\" if !token.nil?\n      request.add_field \"Content-Type\", \"application/json\"\n      response = http.request(request)\n\n      yield(response)\n    rescue StandardError =\u003e error\n      puts \"? PRs\"\n      if called_by_bitbar?\n        puts \"---\"\n        puts \"Got Error: #{error.message}\"\n      end\n    end\n  end\n\n  def retrieve_pr_counts\n    total_pr_count = 0\n    repo_counts = [\"---\"]\n\n    @repos.each do |repo|\n      if repo[:app_password]\n        token = Base64.encode64(\"#{repo[:username]}:#{repo[:app_password]}\").chomp if repo[:service] == \"bitbucket\"\n        token = repo[:app_password] if repo[:service] == \"github\"\n      end\n\n      service = SERVICES[repo[:service].to_sym]\n      endpoint = \"#{service[:api_prefix]}/#{repo[:repo]}/#{service[:api_suffix]}\"\n      human_url = \"#{service[:human_prefix]}/#{repo[:repo]}/#{service[:human_suffix]}\"\n\n      call_api 'GET', endpoint, token do |response|\n        pr_count = pr_count_for_bitbucket(response) if repo[:service] == \"bitbucket\"\n        pr_count = pr_count_for_github(response) if repo[:service] == \"github\"\n        total_pr_count += pr_count\n\n        repo_counts \u003c\u003c \"#{repo[:name]}: #{pr_count} | href=#{human_url}\" if called_by_bitbar?\n      end\n    end\n\n    if total_pr_count.positive?\n      puts \"#{total_pr_count} PR#{total_pr_count \u003e 1 ? 's' : ''}\"\n    else\n      puts called_by_bitbar? ? \"0 PRs | color=lightgray size=12\" : \"0 PRs\"\n    end\n    puts repo_counts.join(\"\\n\") if called_by_bitbar?\n  end\n\n  def pr_count_for_github(response)\n    links = {}\n    if response[\"Link\"]\n      header_links = response[\"Link\"].split(',')\n      header_links.each do |link|\n        (page, rel) = link.match(/\u0026page=(.*)\u003e; rel=\"(.*)\"/).captures\n        links[rel] = page\n      end\n      links[\"last\"].to_i\n    else\n      result = JSON.parse(response.body)\n      result.count.to_i\n    end\n  end\n\n  def pr_count_for_bitbucket(response)\n    result = JSON.parse(response.body)\n    result[\"size\"].to_i\n  end\nend\n\nGetPullRequests.new.do_it!\n"
			}
		],
		"path": "Dev/Git/get_pull_requests_bitbar.1h.rb",
		"filename": "get_pull_requests_bitbar.1h.rb",
		"dir": "Dev/Git",
		"docsPlugin": "Dev/Git/get_pull_requests_bitbar.1h.rb.html",
		"docsCategory": "Dev/Git.html",
		"pathSegments": [
			"Dev",
			"Git"
		],
		"categoryPathSegments": [
			{
				"path": "Dev",
				"text": "Dev",
				"isLast": false
			},
			{
				"path": "Dev/Git",
				"text": "Git",
				"isLast": true
			}
		],
		"title": "PR Counts for Github and Bitbucket",
		"version": "v1.1.1",
		"author": "Marco Cabazal",
		"authors": [
			{
				"name": "Marco Cabazal",
				"githubUsername": "MarcoCabazal",
				"imageURL": "https://avatars.githubusercontent.com/u/918909?v=4",
				"bio": "swift (ios, macos), ruby (rails), js (react, react-native, express)",
				"primary": true
			}
		],
		"desc": "Gets Pull Request Counts for Github and Bitbucket Repos",
		"imageURL": "https://marcocabazal.github.io/images/gpr_snap.png",
		"dependencies": [
			"ruby \u003e= 2"
		],
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:21:48.227994Z",
		"vars": null
	}
}