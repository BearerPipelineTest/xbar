{
	"plugins": [
		{
			"files": [
				{
					"path": "Dev/GitHub/notifications.30s.py",
					"filename": "notifications.30s.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eGitHub Notifications\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev3.0.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMatt Sephton, Keith Cirkel, John Flesch\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eflesch\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGitHub (and GitHub:Enterprise) notifications in your menu bar!\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/hW7dw9E.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nimport json\nimport urllib2\nimport os\nimport sys\nimport re\nfrom itertools import groupby\n\n# GitHub.com\ngithub_api_key = os.getenv( 'GITHUB_TOKEN', 'Enter your GitHub.com Personal Access Token here...' )\n\n# GitHub:Enterprise (optional)\nenterprise_api_key = os.getenv( 'GITHUB_ENTERPRISE_TOKEN', 'Enter your GitHub:Enterprise Personal Access Token here...' )\nenterprise_api_url = os.getenv( 'GITHUB_ENTERPRISE_API', 'https://github.example.com/api/v3' )\n\nactive = '#4078C0'\ninactive = '#7d7d7d'\n\n# Utility Functions\n\ndef plural( word, n ):\n    return str(n) + ' ' + (word + 's' if n \u003e 1 else word)\n\ndef get_dict_subset( thedict, *keys ):\n    return dict([ (key, thedict[key]) for key in keys if key in thedict ])\n\ndef print_bitbar_line( title, **kwargs ):\n    print title + ' | ' + ( ' '.join( [ '{}={}'.format( k, v ) for k, v in kwargs.items() ] ) )\n\ndef make_github_request( url, method='GET', data=None, enterprise = False ):\n    try:\n        api_key = enterprise_api_key if enterprise else github_api_key\n        headers = {\n            'Authorization': 'token ' + api_key,\n            'Accept': 'application/json',\n        }\n        if data is not None:\n            data = json.dumps(data)\n            headers['Content-Type'] = 'application/json'\n            headers['Contnet-Length'] = len(data)\n        request = urllib2.Request( url, headers=headers )\n        request.get_method = lambda: method\n        response = urllib2.urlopen( request, data )\n        return json.load( response ) if response.headers.get('content-length', 0) \u003e 0 else {}\n    except Exception:\n        return None\n\ndef get_notifications( enterprise ):\n    url = '%s/notifications' % (enterprise_api_url if enterprise else 'https://api.github.com')\n    return make_github_request( url, enterprise=enterprise ) or []\n\ndef print_notifications( notifications, enterprise=False ):\n    notifications = sorted( notifications, key=lambda notification: notification['repository']['full_name'] )\n    for repo, repo_notifications in groupby( notifications, key=lambda notification: notification['repository']['full_name'] ):\n        if repo:\n            repo_notifications = list( repo_notifications )\n            print_bitbar_line( title=repo )\n            print_bitbar_line(\n                title='{title} - Mark {count} As Read'.format( title=repo, count=len( repo_notifications ) ),\n                alternate='true',\n                refresh='true',\n                bash=__file__,\n                terminal='false',\n                param1='readrepo',\n                param2=repo,\n                param3='--enterprise' if enterprise else None\n            )\n            for notification in repo_notifications:\n                formatted_notification = format_notification( notification )\n                print_bitbar_line( refresh='true', **get_dict_subset( formatted_notification, 'title', 'href', 'image', 'templateImage' ) )\n                print_bitbar_line(\n                    refresh='true',\n                    title='%s - Mark As Read' % formatted_notification['title'],\n                    alternate='true',\n                    bash=__file__,\n                    terminal='false',\n                    param1='readthread',\n                    param2=formatted_notification['thread'],\n                    param3='--enterprise' if enterprise else None,\n                    **get_dict_subset( formatted_notification, 'image', 'templateImage' )\n                )\n\ndef format_notification( notification ):\n    type = notification['subject']['type']\n    formatted = {\n        'thread': notification['url'],\n        'title': notification['subject']['title'].encode('utf-8'),\n        'href': notification['subject']['url'],\n        'image': 'iVBORw0KGgoAAAANSUhEUgAAAA4AAAAQCAYAAAAmlE46AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMBAJqcGAAAA',\n    }\n    if len(formatted['title']) \u003e 90:\n        formatted['title'] = formatted['title'][:79] + '…'\n    formatted['title'] = formatted['title'].replace('|','-')\n    latest_comment_url = notification.get( 'subject', {} ).get( 'latest_comment_url', None )\n    typejson = make_github_request( formatted['href'] )\n    if latest_comment_url:\n        formatted['href'] = ( make_github_request( latest_comment_url ) or {} ).get( 'html_url', formatted['href'] )\n    # Try to hack a web-viewable URL if the last check failed\n    if formatted['href']:\n        formatted['href'] = re.sub( 'api\\.|api/v3/|repos/', '', re.sub( '(pull|commit)s', ur'\\1', formatted['href'] ) )\n    if (type == 'PullRequest'):\n        if typejson and typejson['merged']:\n            formatted['image'] += 'SpJREFUKJG9kkFOwmAQhb+ZQiVx5xm4hIlncEF7jLZuWSjSeAJsvQUY4xkMHsCtcU9MXBmwJsy4EWgFEt34VpP55mX+eflhj9KoGO5jAK00LmOwoZiaYIPRbXaXRsVQRC6BvWZJ4uLJRI6DcKlUMsVl/G0CwIw3UR8V4+QKxFd9BbfDqiP6buo1sB5QjgTJ07i8aPTFgvNFa/7i7fYzaL+YpEN3zwGux4mY2QmAm6db783i0rO4bGyrh7OL66a0Bigm6d5gGkYz3brvV8a/SjeF/dPGJLrpmTMDXs/i4vTnQNYrInNm5szqvIVYbiJdCV1Z6ANwXze6em4i3SBcqi+CNVeAIFxq9dkR0+07HfHVz6rzlsLAK5keUCEu/R0hDD7C+SME6A7+Z30BqF2G+GPLjSUAAAAASUVORK5CYII='\n        elif typejson and typejson['state'] == 'closed':\n            formatted['image'] += 'Q9JREFUKJG9kjFOw0AQRd9sbAiiQOIMqWJfAInOPULANehTQIjFCbgHFS1eKhR6cDpEbyHRmljyDpWVTWJbSsOvRvvm72i+BjpkI2ZdDIBszNVzTG7HvGcx543JxmifT7KIj4FyUlaYcMjcKI8Id17Pj8JDknMvrD4zoriwRg4OMaKtU44FUhtz6z8aFW7KkC9X82mESbJghpICJDkiyimAwvV2EDG6uZMfThs3TeFYB8miP1XjFb0pdhp31cro/muijbjAUTjDtx1zttnwEnGJo8BR+DxQSAcwWv5i9vd4BZ58Yy2kgTIqq3VuAMoKEx4htCQrijaX5fMAYRoOmbMEJ0y2lhGmZcgbNdDGd9Uf3M1iNlKZZGMAAAAASUVORK5CYII='\n        else:\n            formatted['image'] += 'TJJREFUKJG9krFOAlEQRe/MLpqHnd/ATyBWsLWF+hcLPYXibvwCE/gLC2MNVrD7AbbGnpjYboBlro2QXWATabzVy5x338ydPKBC4awTVTEA8Huz9i1FI5gZBINh6+0lnHUiEXkAUGmWMGm/c7Fues4pLU9IPv+aAABm9i2qT6Pm+BECbuoqpnZWW4lmmRLG3ZdV9VyAOEyD+1JdVO4yqX+ua7UPofRHrUlEMgaA4cVYALkEACF6e/N2k4DdJCh1Ky7nENftyVACo9akcjElox3I9yfjsdoaVfFPHbtpcG2GOUy/wjS42r0QTjs3ZpibYV7kPmkxVuuGOKfIl1MAr0WjqMRcrBqec8oCVwDwnNOFnwugezkJ4+ZnFbkPeANanpwsAQr7+2m8Qab1FKcAeYgfqR/3P4pMOYR15QAAAABJRU5ErkJggg=='\n        if typejson and typejson.get( 'user', {} ).get( 'login', None ):\n            formatted['title'] += ' (by @{})'.format(typejson['user']['login'])\n    elif (type == 'RepositoryInvitation'):\n        formatted['image'] = 'iVBORw0KGgoAAAANSUhEUgAAAA4AAAAKCAYAAACE2W/HAAAAAXNSR0IArs4c6QAAAM1JREFUKBWVkD0OQUEUhcdv/ASJn55SyxLoVBJq8tZjBRQsgkZiAQoqOiQ2oFc935nMvLxEXsRJPufOufe+kTHGmBeEf3Jg3i4t8IwOP6QZzeoi+3PFt1BRkKAq+Q4uEKbdUA+/wxm6LoubshPcoO8b9lp3GOMPGPomPoInqOcV/VUfyKfwhsChegJxfS3O6R5hALpFqFY2A69osUyygT3UQOpAWwVSpt4aShAt6lWXkIUk5WiswL5qiqIODdBz6+ZirM67cwFvulwfaH0AC7M1lHL62U4AAAAASUVORK5CYII=';\n        formatted['templateImage'] = formatted.pop('image');\n        formatted['href'] = 'https://github.com/{}/invitations'.format(notification['repository']['full_name'])\n    elif (type == 'Issue'):\n        if typejson and typejson['state'] == 'closed':\n            formatted['image'] += 'YpJREFUKJGdkj9I23EQxT93SZrJQYNQ6Bo65BtQcHRpSeyUuQqNWx2ti7qJRpqhUxGX0lGhlXQ0uJhfU7cOLm3+QKCzoIjoJpp8z0HT/BpJBd90HO/dvTsePBLS36iM8Uw6vANyQNJ7RJU/wG7nmo1XLY7uCStp8uL5BJwgbJtRU8E8jImR98qoGHPZBjsSFhlsCRQjCQovD2iHhx5OEDu/ZF2E5Y4wLn/tXdMy5WO2zkqXHKQxgEy95+y7Y1KMXwogbeaBk0iCwqBn7DteAJym+NmBnSiAF3IK2/32wiIVqoGjYE1GRMlGARSSZtQGbZtq8CNwFBBWDUxgJjqI3I9Mg7XAgRoXmSYlACqOWuAG39ePimNB7+oyxuzhBLEwIUhj3c92sZckLsaSAvg2m14ZPb98eGs8ThFlqBcAx4wJX8T4cGasvm5yFRaUUjwZUd4bLKow/W/kbsWfgTMxvorxmwhtjHEPbxSGEd5many7F/JqiqdemceT88rzu3ZLoWywma1z/NA5/8UNNkSJCdaYQF4AAAAASUVORK5CYII='\n        else:\n            formatted['image'] += 'ZxJREFUKJGdkjFoU2EUhb97k9jNRzEFoWvJVHXoZCqIaQaH7JaUbtpi2zc4ORWJYKGTYJLBroFaiGPo0hBwyAOhU51Cd8EOOid53uugL4SnkOK3/dx7OPccfvhPZPqxHZUWc0gIUjFs6c/CJdDBtN580P36lzCM1jZ+mr9HuFKkJfgXABO9i/mmqOTd7VlztXcyEYbR2oabtFx5kx+Oa7VHn+LpS7bOV3K5UfBaTF+6WLW52juR7ai0mDEGovq2WezuJ8t7UdkBGsXu5KqdfvlQhOeeGRc0h4QIV/nhuDarkIVgft+xHxJnQwWpKNJKn/cvasvtkcCxuFTUsKWkiOsgrhcoBb2uIE1W4NKRO8DH6cF0KSnLewYDBTqGb26dr+Sm53tR2ZNmE8LTx3O4V9XpKKZ1FV24MZyf2aoH8YE5garXBWC3X1oX12NXO8zfvPWqttwepZ08iA9wXqDypFE8a09y7PZL64geCXx37IO4XiSZcK/+dso8bRTP2pD65DufH96WOBuKSwWlAGD4QJ2Oqtff3e99mxVnJr8AXSGi02ni0+YAAAAASUVORK5CYII='\n    elif (type == 'Commit'):\n        formatted['image'] += 'HhJREFUKJHl0LEKwkAQBNCH3yIaf05S+VUqmh8ykFoUYn8WbnEc8a7XgYVlmNkdhv/EDgNmvHDFtmXq8ETCiFvsD2xqxksI9xnXB3cqxamYceHgVOpWC6JUi/QNQxj7jDsEd6wZ83KmLOId69bXzqekOeas0eiv4g3q4SY7NY1R2gAAAABJRU5ErkJggg=='\n        formatted['templateImage'] = formatted.pop('image')\n    elif (type == 'Release'):\n        formatted['image'] += 'JdJREFUKJGl0DsKwkAUBdDTRgvFHbgmNyLY+QWzKxM/kK2kSKc70MIIQ0ziqBceA/dxinn8mSkKVMGUmH+CBWaNboQjdn2wqt97Pa8kNd5+C0O86YNdSZC34RLjCJxhHZYLXDCIxKuwTHGOwBNcm2WKUw9OcMCybZl6XjHpQOs30cB5gKNQiDPPP0WjV/a4aVwxNsNfUGce7P8k4XgVPSYAAAAASUVORK5CYII='\n        formatted['templateImage'] = formatted.pop('image')\n    return formatted\n\nif len(sys.argv) \u003e 1:\n    command = sys.argv[1]\n    args = sys.argv[2:]\n    enterprise=False\n    if ('--enterprise' in args):\n        enterprise=True\n        args.remove( '--enterprise' )\n    if command == 'readrepo':\n        url = '%s/repos/%s/notifications' % (enterprise_api_url if enterprise else 'https://api.github.com', args[0])\n        print 'Marking %s as read' % url\n        make_github_request( url=url, method='PUT', data={}, enterprise=enterprise )\n    elif command == 'readthread':\n        url = args[0]\n        print 'Marking %s as read' % url\n        make_github_request( url=url, method='PATCH', data={}, enterprise=enterprise )\n\nelse:\n    is_github_defined = len( github_api_key ) == 40\n    is_github_enterprise_defined = len( enterprise_api_key ) == 40\n    github_notifications = get_notifications( enterprise=False ) if is_github_defined else []\n    enterprise_notifications = get_notifications( enterprise=True ) if is_github_enterprise_defined else []\n    has_notifications = len( github_notifications ) + len( enterprise_notifications )\n    color = active if has_notifications else inactive\n\n    if (has_notifications):\n        print_bitbar_line(\n            title=u'\\u25CF'.encode( 'utf-8' ),\n            color=color\n        )\n        print '---'\n    else:\n        print ''\n        exit(0)\n\n    print_bitbar_line( title='Refresh', refresh='true' )\n\n    if is_github_defined:\n        if len( github_notifications ):\n            print_bitbar_line(\n                title=( u'GitHub \\u2014 %s' % plural( 'notification', len( github_notifications ) ) ).encode( 'utf-8' ),\n                color=active,\n                href='https://github.com/notifications',\n            )\n            print_notifications( github_notifications )\n        else:\n            print_bitbar_line(\n                title=u'GitHub \\u2014 No new notifications'.encode( 'utf-8' ),\n                color=inactive,\n                href='https://github.com',\n            )\n\n    if is_github_enterprise_defined:\n        if len( enterprise_notifications ):\n            if is_github_defined:\n                print '---'\n            print_bitbar_line(\n                title=( u'GitHub:Enterprise \\u2014 %s' % plural( 'notification', len( enterprise_notifications ) ) ).encode( 'utf-8' ),\n                color=active,\n                href='%s/notifications' % re.sub( '/api/v3', '',  enterprise_api_url ),\n            )\n            print_notifications( enterprise_notifications, enterprise=True )\n        else:\n            print '---'\n            print_bitbar_line(\n                title=u'GitHub:Enterprise \\u2014 No new notifications',\n                color=inactive,\n            )\n"
				}
			],
			"path": "Dev/GitHub/notifications.30s.py",
			"filename": "notifications.30s.py",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/notifications.30s.py.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "GitHub Notifications",
			"version": "v3.0.2",
			"author": "Matt Sephton,  Keith Cirkel,  John Flesch",
			"authors": [
				{
					"name": "John Flesch",
					"githubUsername": "flesch",
					"imageURL": "https://avatars.githubusercontent.com/u/13259?v=4",
					"bio": "𝕱 • Insatiable curiosity for technologies that make life better.",
					"primary": true
				},
				{
					"name": "Keith Cirkel",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				},
				{
					"name": "John Flesch",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				}
			],
			"desc": "GitHub (and GitHub:Enterprise) notifications in your menu bar!",
			"imageURL": "https://i.imgur.com/hW7dw9E.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.655336Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github_watch.1h.rb",
					"filename": "github_watch.1h.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eGitHub Watch\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eD. Khamsing\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edkhamsing\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow GitHub stars ⭐️ for a list of repos\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/z1qhSun.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/dkhamsing\u003c/bitbar.abouturl\u003e\n\nrequire 'open-uri'\nrequire 'json'\n\nREPOS = [\n  'matryer/bitbar',\n  'dkhamsing/awesome_bot'\n]\n\nVERSION = '0.1.0'\n\nCONFIG_GITHUB_WATCH = 'stargazers_count'\n\nCONFIG_SYMBOL = '★'\n\nGITHUB_REPO_API = 'https://api.github.com/repos'\n\ndef get_stars(repos)\n  s = []\n  repos.each do |r|\n    repo_url = \"#{GITHUB_REPO_API}/#{r}\"\n    c = open repo_url\n    j = JSON.parse c.read\n    s.push j[CONFIG_GITHUB_WATCH]\n  end\n  s\nend\n\ndef line(r, s)\n  repo_url = \"https://github.com/#{r}\"\n  puts \"#{r} #{CONFIG_SYMBOL} #{s} | href=#{repo_url}\"\nend\n\n# bitbar output\nbegin\nget_stars(REPOS).each_with_index { |s, i| line REPOS[i], s.to_s }\nrescue =\u003e e\n  puts \"#{CONFIG_SYMBOL} | color=red\"\n  puts \"Error: #{e}\"\n  exit\nend\n"
				}
			],
			"path": "Dev/GitHub/github_watch.1h.rb",
			"filename": "github_watch.1h.rb",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github_watch.1h.rb.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "GitHub Watch",
			"version": "v0.1.0",
			"author": "D. Khamsing",
			"authors": [
				{
					"name": "D. Khamsing",
					"githubUsername": "dkhamsing",
					"imageURL": "https://avatars.githubusercontent.com/u/4723115?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show GitHub stars ⭐️ for a list of repos",
			"imageURL": "http://i.imgur.com/z1qhSun.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/dkhamsing",
			"lastUpdated": "2021-03-08T15:21:48.615508Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github_status.10m.py",
					"filename": "github_status.10m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eGitHub status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBrett Jones\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eblockloop\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/3022496/12325555/a4b2bd9a-ba90-11e5-8254-9de54c2c6847.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eShows the current status of www.githubstatus.com. Find out if Github is having DDOS problems which will affect pushes/pulls.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n\nimport json\nimport time\nfrom datetime import datetime\n\ntry:\n    # For Python 3.0 and later\n    from urllib.request import urlopen\nexcept ImportError:\n    # Fall back to Python 2's urllib2\n    from urllib2 import urlopen\n\n# See https://www.githubstatus.com/api\nbody = urlopen(\"https://kctbh9vrtdwd.statuspage.io/api/v2/status.json\").read()\nobj = json.loads(body.decode('utf-8'))\n\nif obj[\"status\"][\"indicator\"] == \"none\":\n    # print(\"GH: ✔ | color=green\")\n    print(\"✓ | font='PilGi Regular' image=iVBORw0KGgoAAAANSUhEUgAAABgAAAAQCAYAAAF7I48DAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAARgSURBVHjaYt6/fz+Dr68vw9WrVw8xMDExfYqMjGRgYGD4DwAAAP//BMFBAQAwEMKwSprBU8MPbXjoEu7utUWFJGxD5QMAAP//Yrhw4QJECRL+//8/A9OVK1e079+/z/j48WNGBgYGBmZm5j8MDAwMAAAAAP//ZM2hEYAgGIDRj4PACtxJoHksYeNgNBormYkE7VSSC/wGowu8p5xzd61111rTez9SSmcphR8zxvgOQOac5JxprWGtfUQEE0K4vPey1lLGGGKMG8ALAAD//zyPsQqCUBiFv1sQxnWopF4hArdewAcQfIkGX8DBuUdoC+7uIAhtzvkU3gYX15ZwutLfUHamwwfng0NVVX+d1voJiFLq7Xnea+JlWSIiiAjzYRiubdseAZxzS75R4zgufh2ttUuS5A4ws9Yeoii6GGO2AE3TKGutAqjrWoVheOu6bj+N6fueOI7PQRA88jzfFEWxMsassyzb+b7/TNP0ND0WET58UTFLhlAUve8RKA0fukboM9pc1N8gNApOD/+ASzj7A5z6CTUIIoiTgwQNLraJS5A4tUUgTjaloLwWX0hEZzmXwz2He7hQFMWJEFLFcQxRFEHXdRCGISRJArIsv1ZV9bPMGAOglN7ycpIkfez8zrUgCG6OBjzP8xU/b5qmi50vubZt2zUcgPakf8EYQ3zGAAC2bT+0bYvSNEWu66Isy1DTNMiyrKc/A+q6BkEQvnzf9/M8B0rpnaIob/ypxw5nAACEENB1/dnzvEoURXAc53FZlnNN0/DvdDyOI1JVlZmmeV+W5ee6rqe+7zuM8YthGNswDOho+Cad/EGXCKA4/u64K/HuB78KlAYbft0ZaaAYLQ7XkIODiy5CDeogSU5tNgiC8VsaRA3iQBdBxEVQ4kQQEc7JQ7RB0YQLlKgO/1CYoHd6LfmD0iUa3vJ4jy/f9/08hOd5aDabj6PRaPPQpGm6FgwGnymKMsdx/I7BYLguiuJ6s9l8xnGcYlm2OJ1ObYf5VCp1QdP0J6fTeWw4kUiAw+GI/c3/v5TH43kaj8f/AOIKDI7jHiAIov6PgF6vlwRBOD8lgOh0urEkSVewaLXar2az+QOKoqgoijdlWT7b7/fYfr/fkiT5w2g0LpfLJTYYDB7udrvzw57Vam10u90nR6GtVqszAACKovrj8Rjp9Xq3TSZTgSCIj4IgPEomk/d8Pt/dQqFwv9FoOCVJ+ub3+98oinKj1WrdIknyOwDAYrHQn6Q2EAhcAoDKMEya53nIZDIXB+sul+tVqVSCbDYLlUoF7HZ79vdvzYvF4rVarQYWi+U9AKiRSOT5yQxmsxmEQqHXAKCGw+GXo9EIcrkcsCwL/X4f6vU6tNttKJfL0Ol0IJ1OA8dxMBwOwe12vwUANRaLBSaTycmQkdFoBLIsw3w+h2q1asrn8+8Wi4VVVdUVhmErgiB+4ji+22632Hq9JmVZJhEE0VIU1fB6vS8Yhvmi0WgARVGw2WxHF/o1AOIORIB/vrb+AAAAAElFTkSuQmCC\")\nelse:\n    print(\"✕ | color=red image=iVBORw0KGgoAAAANSUhEUgAAABgAAAAQCAYAAAF7I48DAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAAJOSURBVHjaYvzPAAeHGP4zMHz6z8DA8J+B4T8AAAD//2L4z8Bg8J+BgeH///8MjHBl//8zAAAAAP//gnGQtDIwMPz/z8jEwMCgzcDAwAjFDAwMDH8YGBgYAAAAAP//ZMwxDQAgEMDAPgKwhH8DBB0YKMvzIWHo0OUQVsIIQy33YwBablQR+1JT8OG6ygEAAP//gnH+Q/E7KP3vPwPDZ7g41F6YhllIGnDhKpgGJgYGBk0GBobJDAwMomjug7E3MTAwqCM8A8HN/xkY7vxnYBD6z8Ag8J+BQfA/A4MY1IkpyE4CAAAA//9s0rEJAmEMhuEHucrCAcRKdBYXcAcbJ3EF5xAsbgvdQBzAykrOwuh9egZCQvhDvuT9X8vQxnLpp3z8btiG1mvFS9RW2TDCPM49rTiL2iJ5DAn9s6KW5PZf9Ho/Dpt7mveOTeW7uppfcI38s7SVHzAOBR9ranSHNW6Y4IwlHqkfnozTsUpDUQwG4K+LgyjUOgqCoos4CJ0cxaGPIU6Cm6O7+AIWnBx8hw6d+gYdBDcHR4soiugiSBwMej3cqz2QITkJyZ/8/w9Pf1NhGCzm33KwHiylvxaMi/yV8l4lhJ1i0h4eTP+2cVt/ETanIPd/dh+06xC0gpuCLBNc5QE6mM/dv+MFT+l30a7UjUTs1iGY5BTXFQ3sBf34ImZVGwvBZdBLvxM8f9fXIBCcZsJZFq1WoB8XDS4y/hjMZGyQsYOmBoKTTDpqUHWT9bNuv4lFrUKYGzjHFl7T3vCRe59Lm8UIhyLu/qLX5wCSNr11XIiJWQAAAABJRU5ErkJggg==\")\n\nprint(\"---\")\nprint(obj[\"status\"][\"description\"] + \" | href=\" + obj[\"page\"][\"url\"])\n\n# convert UTC to local\nutc_date = datetime.strptime(obj[\"page\"][\"updated_at\"], '%Y-%m-%dT%H:%M:%S.%fZ')\nnow = time.time()\noffset = datetime.fromtimestamp(now) - datetime.utcfromtimestamp(now)\nlocal_time = utc_date + offset\n\nprint(\"Last Change: %s\" % local_time.strftime(\"%D %r\"))\n"
				}
			],
			"path": "Dev/GitHub/github_status.10m.py",
			"filename": "github_status.10m.py",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github_status.10m.py.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "GitHub status",
			"version": "v0.2",
			"author": "Brett Jones",
			"authors": [
				{
					"name": "Brett Jones",
					"githubUsername": "blockloop",
					"imageURL": "https://avatars.githubusercontent.com/u/3022496?v=4",
					"bio": "I think I am a Pyrrhonist, but I’m not sure",
					"primary": true
				}
			],
			"desc": "Shows the current status of www.githubstatus.com. Find out if Github is having DDOS problems which will affect pushes/pulls.",
			"imageURL": "https://cloud.githubusercontent.com/assets/3022496/12325555/a4b2bd9a-ba90-11e5-8254-9de54c2c6847.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.502168Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github-ci.1m.php",
					"filename": "github-ci.1m.php",
					"content": "#!/usr/bin/env php\n\u003c?php\n/**\n * \u003cbitbar.title\u003eGithub CI Status\u003c/bitbar.title\u003e\n * \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n * \u003cbitbar.author\u003eJordan Andree\u003c/bitbar.author\u003e\n * \u003cbitbar.author.github\u003ejordanandree\u003c/bitbar.author.github\u003e\n * \u003cbitbar.desc\u003eDisplays Github Pull Request CI Check statuses\u003c/bitbar.desc\u003e\n * \u003cbitbar.dependencies\u003ephp\u003c/bitbar.dependencies\u003e\n * \u003cbitbar.abouturl\u003ehttps://github.com/jordanandree/bitbar-github-ci\u003c/bitbar.abouturl\u003e\n *\n * Icon sourced from feather icons: https://feathericons.com/\n *\n * To setup, create or edit your ~/.bitbarrc file with a new section:\n *\n * [github_ci]\n * access_token=xxx # Personal Access Token\n * username=jordanandree\n * repos[]=jordanandree/bitbar-github-ci\n * repos[]=jordanandree/dotfiles\n */\n\nclass GithubCIStatus\n{\n    /**\n     * Default config values\n     *\n     * @var array\n     */\n    protected $default_config = [\n        \"hostname\" =\u003e \"github.com\",\n    ];\n\n    /**\n     * Config options sourced from ~/.bitbarrc\n     *\n     * @var stdClass\n     */\n    protected $config;\n\n    /**\n     * Status line template for each check\n     *\n     * @var string\n     */\n    protected $status_line = \"%s %s | href=%s\";\n\n    /**\n     * State of CI checks\n     *\n     * @var string\n     */\n    protected $state = \"success\";\n\n    /**\n     * Lock param for mutating state\n     *\n     * @var bool\n     */\n    protected $state_lock = false;\n\n    /**\n     * Menu bar icon\n     *\n     * @var string\n     */\n    protected $icon = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAABDtpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgICAgICAgICAgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIj4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoTWFjaW50b3NoKTwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8eG1wTU06RG9jdW1lbnRJRD54bXAuZGlkOjVEMzE5OTBGREQzRTExRTdCNjU1Q0M4MUYwMENBMTNDPC94bXBNTTpEb2N1bWVudElEPgogICAgICAgICA8eG1wTU06RGVyaXZlZEZyb20gcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICA8c3RSZWY6aW5zdGFuY2VJRD5hZG9iZTpkb2NpZDpwaG90b3Nob3A6ODMzYTI0NjgtMjVhOC0xMTdiLTkxNzEtZjU1MDA2YWFhMDcyPC9zdFJlZjppbnN0YW5jZUlEPgogICAgICAgICAgICA8c3RSZWY6ZG9jdW1lbnRJRD5hZG9iZTpkb2NpZDpwaG90b3Nob3A6ODMzYTI0NjgtMjVhOC0xMTdiLTkxNzEtZjU1MDA2YWFhMDcyPC9zdFJlZjpkb2N1bWVudElEPgogICAgICAgICA8L3htcE1NOkRlcml2ZWRGcm9tPgogICAgICAgICA8eG1wTU06SW5zdGFuY2VJRD54bXAuaWlkOjVEMzE5OTBFREQzRTExRTdCNjU1Q0M4MUYwMENBMTNDPC94bXBNTTpJbnN0YW5jZUlEPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K4XbDnwAAAxFJREFUWAnNl1uITlEUxweTonG/y2UYIsUUUSIP84zwIELNk9LwwpsXmhEvk8sTKZq8eBJJXqQUuV+SUJPmySXjEpM7g9//m73OrDnO/r75Lg9W/WatvfZa6+y9z977fFNVlS0NuD/BH+iAw1AHxUgNwdvhBnSDarVCHxnQp9XbOI+5qreZs1TgOLTBfJgNI2EUfIH38BwegAZ7AMaAlx80xsNH78yyVVAP7AJbCbVL4Td5r1zuSuxEBiZWrzEWc0hoXkRPhF3wIfj6qzTYNpgDO8BkqhnS1b4RbD8oFdEKHIRTsBO05Frmh9AJGthQGA1zYVGwT6BvgWRBj8r9jb32JEQB9graE295Rgvp9vr67C0/W3vEYozBoTHDnGVqbViTpWbE9BU6bLTNsaAi/ZrU91BXJ2FaLL8+BGkAes+DYoEl+HeTYxPbH8v3QY2xoBL9I8jT7DWI+7EaJ0OAgqbHgsrw3w71P1uN9CbUUTIpeFtZYBHa7hId25ykB6BbyyR9jZq/HO0nmKuTHsBLV32Ssytl2u5/bQXTA3hiHegVzq6EqbtgXCj01AqmB3DZOtBrnF0Jc60r4p/j3D3mdZSd1/X/9JbmmEDam1D3F7oWotJAjw1A34TV0cj+deg43wGreaw/aYdcghIvgL7jyfHBzie6QXX96ivqf09ojw2DgqK9cQRs1KZ1k90FzWIyeFHOXrgGXWA5pnW1T4FM2YxXH4t7sNxFrMNuByvitQboZRkN32+2BrMP7EeOz0ns01iWoFlqH5hoZlp+f00rdqMFBK1fUp1gdbQS22A4FJR5RFwFS36HPTOVtdD1a09kySacVqM1KyCfTxvnrCvwDHuWS9jg+rY6vzc1WxvAGd8Rs6tdRzf2FtDS1UMdPIZLoDMsn4leU5bofZtoQiWJrstHYDPJ0o15Klv8uTwxSZc2WFo02yWwB16kOyvdzhqAnvEVmkHnVue9Fpqg4uL3QKy4/quR6FquuMRWIOtBfoN5Ox37Mzi0igWlmJ3aQbUauAlHQacmSxT3DVrgbVbAf+X7C2311IYwO5eYAAAAAElFTkSuQmCC\";\n\n    /**\n     * Output the Pull Request checks\n     *\n     * @return string\n     */\n    public function run()\n    {\n        $lines = [];\n\n        try {\n            $pull_requests = $this-\u003esearchPullRequests();\n\n            if (empty($pull_requests)) {\n                $this-\u003esendOutput(\"No Pull Requests. Get to work!\");\n                exit;\n            }\n\n            foreach ($pull_requests as $pr) {\n                $repo_name = substr($pr-\u003erepository_url, strlen($this-\u003egetConfig()-\u003ebase_uri . \"repos/\"));\n\n                $pr_info = $this-\u003egetPullRequest($repo_name, $pr-\u003enumber);\n                $status  = $this-\u003egetCommitStatus($repo_name, $pr_info-\u003ehead-\u003esha);\n                $lines[] = $this-\u003eformatLine($status-\u003estate, $pr_info-\u003etitle, $pr_info-\u003ehtml_url);\n\n                if ($status-\u003estate !== $this-\u003estate \u0026\u0026 !$this-\u003estate_lock) {\n                    $this-\u003estate = $status-\u003estate;\n                    $this-\u003estate_lock = true;\n                }\n\n                foreach ($status-\u003estatuses as $check) {\n                    $lines[] = \"--\" . $this-\u003eformatLine($check-\u003estate, $check-\u003econtext, $check-\u003etarget_url);\n                }\n            }\n        } catch (RuntimeException $e) {\n            $this-\u003estate = \"failure\";\n            $this-\u003esendOutput($e-\u003egetMessage());\n            exit;\n        }\n\n        $this-\u003esendOutput($lines);\n    }\n\n    /**\n     * echo back output to bitbar\n     *\n     * @param string[]|string\n     *\n     * @return void\n     */\n    public function sendOutput($lines)\n    {\n        echo $this-\u003estatusIcon($this-\u003estate) . \" | templateImage=\" . $this-\u003eicon;\n        echo \"\\n---\\n\";\n\n        if (is_array($lines)) {\n            echo implode($lines, \"\\n\");\n        } else {\n            echo $lines . \"\\n\";\n        }\n    }\n\n    /**\n     * Format a line for output\n     *\n     * @param mixed ...$text\n     *\n     * @return string\n     */\n    public function formatLine(...$args)\n    {\n        $icon = $this-\u003estatusIcon($args[0]);\n        $args[0] = $icon;\n\n        return sprintf($this-\u003estatus_line, ...$args);\n    }\n\n    /**\n     * Get the memoized configuration struct or set it\n     *\n     * @return stdClass\n     *\n     * @throws RuntimeException\n     */\n    protected function getConfig()\n    {\n        if (is_null($this-\u003econfig)) {\n            $bitbarrc = getenv('HOME') . \"/.bitbarrc\";\n\n            if (!file_exists($bitbarrc)) {\n                throw new RuntimeException(\"~/.bitbarrc is missing\");\n            }\n\n            $config = parse_ini_file($bitbarrc, true);\n\n            if (!array_key_exists(\"github_ci\", $config)) {\n                throw new RuntimeException(\"[github_ci] section is missing in ~/.bitbarrc\");\n            }\n\n            $config = array_merge($this-\u003edefault_config, $config[\"github_ci\"]);\n            $config[\"base_uri\"] = \"https://\" . $config[\"hostname\"] . \"/api/v3/\";\n            $this-\u003econfig = (object) $config;\n        }\n\n        return $this-\u003econfig;\n    }\n\n    /**\n     * Send a Request to the Github API\n     *\n     * @param string $endpoint\n     * @param array $options\n     *\n     * @return stdClass\n     *\n     * @throws RuntimeException\n     */\n    protected function sendRequest($endpoint, $params = [])\n    {\n        $url = $this-\u003egetConfig()-\u003ebase_uri . $endpoint;\n        $params[\"access_token\"] = $this-\u003egetConfig()-\u003eaccess_token;\n        $url .= \"?\" . http_build_query($params);\n\n        $headers = null;\n        $body = null;\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        $response = curl_exec($ch);\n\n        if (!empty($response)) {\n            list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        }\n\n        curl_close($ch);\n\n        if (is_null($body)) {\n            throw new RuntimeException(\"Error making request to the Github API. Check your configuration.\");\n        } else {\n            return json_decode($body);\n        }\n    }\n\n    /**\n     * Get a single Pull Request\n     *\n     * @param string $repo\n     * @param int $id\n     *\n     * @return stdClass\n     */\n    protected function getPullRequest($repo, $id)\n    {\n        return $this-\u003esendRequest(\"repos/$repo/pulls/$id\");\n    }\n\n    /**\n     * Get the status of a single Commit\n     *\n     * @param string $repo\n     * @param string $sha\n     *\n     * @return stdClass\n     */\n    protected function getCommitStatus($repo, $sha)\n    {\n        return $this-\u003esendRequest(\"repos/$repo/commits/$sha/status\");\n    }\n\n    /**\n     * Perform search for open issues by the author in the repos\n     *\n     * @return stdClass\n     */\n    protected function searchPullRequests()\n    {\n        $q = \"state:open author:\" . $this-\u003egetConfig()-\u003eusername;\n        foreach ($this-\u003egetConfig()-\u003erepos as $repo) {\n          $q .= \" repo:$repo\";\n        }\n\n        return $this-\u003esendRequest(\"search/issues\", [\n            \"q\" =\u003e $q,\n        ])-\u003eitems;\n    }\n\n    /**\n     * Get the icon for the status\n     *\n     * @param string $status\n     *\n     * @return string\n     */\n    protected function statusIcon($status)\n    {\n        $map = [\n            \"success\" =\u003e \"\\033[0;32m●\\033[0m\",\n            \"failure\" =\u003e \"\\033[0;31m●\\033[0m\",\n            \"pending\" =\u003e \"\\033[0;34m●\\033[0m\",\n            \"warning\" =\u003e \"\\033[0;33m●\\033[0m\",\n        ];\n\n        return $map[$status];\n    }\n}\n\necho (new GithubCIStatus())-\u003erun();\n"
				}
			],
			"path": "Dev/GitHub/github-ci.1m.php",
			"filename": "github-ci.1m.php",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github-ci.1m.php.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github CI Status",
			"version": "v1.0",
			"author": "Jordan Andree",
			"authors": [
				{
					"name": "Jordan Andree",
					"githubUsername": "jordanandree",
					"imageURL": "https://avatars.githubusercontent.com/u/235503?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays Github Pull Request CI Check statuses",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"php"
			],
			"aboutURL": "https://github.com/jordanandree/bitbar-github-ci",
			"lastUpdated": "2021-03-08T15:21:48.293876Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github-contribution.10m.rb",
					"filename": "github-contribution.10m.rb",
					"content": "#!/usr/bin/env ruby\n# frozen_string_literal: true\n\n# \u003cbitbar.title\u003eGithub Contribution\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.0.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emizoR\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emizoR\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://user-images.githubusercontent.com/1257116/34550684-37da7286-f156-11e7-9299-5873b6bb2fd7.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n#\n# To setup, create or edit your ~/.bitbarrc file with a new section:\n#\n# [github_contribution]\n# username = mizoR\n# max_contributions = 10\n\nrequire 'erb'\nrequire 'date'\nrequire 'open-uri'\n\nmodule BitBar\n  class INIFile\n    Error = Class.new(StandardError)\n\n    INIFileNotFound = Class.new(Error)\n\n    SectionNotFound = Class.new(Error)\n\n    def self.load(file = \"#{ENV['HOME']}/.bitbarrc\")\n      raise INIFileNotFound if !File.exist?(file)\n\n      parse(open(file) { |f| f.read })\n    end\n\n    def self.parse(source)\n      # XXX: This implementation isn't correct, but will work in most cases.\n      #      (Probably `StringScanner` will make code correct and clean.)\n      sections = {}\n\n      section = nil\n\n      source.each_line do |line|\n        if line =~ /^ *;/\n          # comment\n          next\n        end\n\n        if line =~ /^\\[(.+)\\]$/\n          section = sections[$1.to_sym] = {}\n          next\n        end\n\n        next unless section\n\n        if line =~ /(.+)=(.+)/\n          name  = $1.strip.to_sym\n          value = $2.strip\n\n          section[name] = value[/^\"(.*)\"$/, 1] || value[/^'(.*)'$/, 1] || value\n          next\n        end\n      end\n\n      new(sections: sections)\n    end\n\n    def initialize(sections:)\n      @sections = sections\n    end\n\n    def fetch(name)\n      @sections.fetch(name.to_sym)\n    rescue KeyError\n      raise SectionNotFound\n    end\n  end\n\n  module GitHubContribution\n    ConfigurationError = Class.new(StandardError)\n\n    class Contribution \u003c Struct.new(:username, :contributed_on, :count)\n      RE_CONTRIBUTION = %r|\u003crect .+ class=\"ContributionCalendar-day\" .+ data-count=\"(\\d+)\" data-date=\"(\\d\\d\\d\\d-\\d\\d-\\d\\d)\" .+\u003e|\n      def self.find_all_by(username:)\n        [].tap do |contributions|\n          today = Date.parse(DateTime.now.to_s).to_s\n          year = today.split(\"-\")[0];\n          html = URI.send(:open, \"https://github.com/users/#{username}/contributions?to=#{today}#year-link-#{year}\") { |f| f.read };\n          html.scan(RE_CONTRIBUTION) do |count, date|\n            contributions \u003c\u003c Contribution.new(username, Date.parse(date), count.to_i)\n            break if Date.parse(date) == Date.parse(DateTime.now.to_s)\n          end\n        end\n      end\n\n      def color\n        count \u003c= 0 ? 'brown' : 'green'\n      end\n\n      def icon\n        case count\n        when 0    then ':poop:'\n        when 1..3 then ':seedling:'\n        when 4..9 then ':herb:'\n        else           ':deciduous_tree:'\n        end\n      end\n    end\n\n    class View\n      TEMPLATE = \u003c\u003c-EOT.gsub(/^ */, '')\n        \u003c%= @contribution.icon %\u003e\u003c%= @contribution.count %\u003e | color=\u003c%= @contribution.color %\u003e\n        ---\n        \u003c% @contributions.each do |c| -%\u003e\n        \u003c%= @helper.link_to(@helper.contribution_text_for(c), @helper.contribution_activity_for(c)) %\u003e\n        \u003c% end -%\u003e\n      EOT\n\n      class Helper\n        def link_to(text, href)\n          if text =~ / | /\n            \"#{text} href=#{href}\"\n          else\n            \"#{text} | href=#{href}\"\n          end\n        end\n\n        def contribution_text_for(contribution)\n          \"#{contribution.icon} #{contribution.contributed_on.strftime('%Y-%m-%d (%a)')}   \\t#{contribution.count} | color=#{contribution.color}\"\n        end\n\n        def contribution_activity_for(contribution)\n          query    = \"to=#{contribution.contributed_on}\"\n          fragment = \"year-link-#{contribution.contributed_on.year}\"\n          \n          \"https://github.com/#{contribution.username}?#{query}##{fragment}\"\n        end\n      end\n\n      def initialize(contributions:)\n        @contribution  = contributions.fetch(0)\n        @contributions = contributions\n        @helper        = Helper.new\n      end\n\n      def render\n        puts ERB.new(TEMPLATE, nil, '-').result(binding)\n      end\n    end\n\n    class App\n      DEFAULT_CONFIG = { max_contributions: 10 }\n\n      def initialize(config = {})\n        config = cast_config(DEFAULT_CONFIG.merge(config))\n\n        @username, @max_contributions = config.values_at(:username, :max_contributions)\n      end\n\n      def run\n        # (DateTime.now-7).to_s\n        contributions = Contribution.find_all_by(username: @username)\n                                    .sort_by(\u0026:contributed_on)\n                                    .select{|l| l.contributed_on \u003c DateTime.now}\n                                    .reverse\n                                    .slice(0, @max_contributions)\n        View.new(contributions: contributions).render\n      end\n\n      private\n\n      def cast_config(config)\n        username          = config[:username].to_s\n        max_contributions = config[:max_contributions].to_i\n\n        if username.empty?\n          raise ConfigurationError, 'GitHub username is not given.'\n        end\n\n        if !max_contributions.positive?\n          raise ConfigurationError,\n            \"Max contributions should be positive integer, but it was #{max_contributions}\"\n        end\n\n        { username: username, max_contributions: max_contributions }\n      end\n    end\n  end\nend\n\nif __FILE__ == $0\n  begin\n    config = BitBar::INIFile.load.fetch(:github_contribution)\n\n    BitBar::GitHubContribution::App.new(config).run\n  rescue BitBar::INIFile::Error\n    puts \u003c\u003c-EOM.gsub(/^ */, '')\n      ⚠️\n      ---\n      To setup, create or edit your ~/.bitbarrc file with a new section:\n      |\n      ;# ~/.bitbarrc\n      [github_contribution]\n      username = \u003cGITHUB_USERNAME\u003e\n      max_contributions = 10\n    EOM\n  rescue BitBar::GitHubContribution::ConfigurationError =\u003e e\n    puts \u003c\u003c-EOM.gsub(/^ */, '')\n      ⚠️\n      ---\n      #{e.message}\n    EOM\n  end\nend"
				}
			],
			"path": "Dev/GitHub/github-contribution.10m.rb",
			"filename": "github-contribution.10m.rb",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github-contribution.10m.rb.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github Contribution",
			"version": "v0.0.2",
			"author": "mizoR",
			"authors": [
				{
					"name": "Ryutaro Mizokami",
					"githubUsername": "mizoR",
					"imageURL": "https://avatars.githubusercontent.com/u/1257116?v=4",
					"bio": "Software developer",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://user-images.githubusercontent.com/1257116/34550684-37da7286-f156-11e7-9299-5873b6bb2fd7.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.298112Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/pull-requests.5m.js",
					"filename": "pull-requests.5m.js",
					"content": "#!/usr/bin/env node\n// jshint esversion: 6, asi: true\n\n// \u003cbitbar.title\u003eGithub Pull requests\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eNoam Knispel\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003enoamknispel\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eGet list of pull requests from Github for multiple repositories\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js request co bluebird\u003c/bitbar.dependencies\u003e\n\n// EDIT YOUR INFO BELOW:\nconst username = ''\nconst token = ''\nvar repos = [\n//owner/repo\n]\n// DO NOT EDIT BELOW THIS POINT\n\nvar bluebird = require(\"bluebird\")\nvar request = bluebird.promisifyAll(require(\"request\"))\nvar co = require(\"co\")\n\nco(function* () {\n  var results = yield repos.map(function(repo) { //jshint ignore:line\n    var options = {\n      url: 'https://api.github.com/repos/' + repo + '/pulls',\n      headers: {\n        'User-Agent': username + ' - bitbar'\n      },\n      auth: {\n        user: username,\n        password: token\n      }\n    }\n    return request.getAsync(options);\n  })\n\n  var totalCount = 0\n  var strings = results.reduce( (acc, response) =\u003e {\n    var info = JSON.parse(response.body)\n    if(info.length \u003e 0) {\n      totalCount += info.length\n      acc.push(info[0].base.repo.name + \" | color=#0000ff\")\n      info.forEach(function(pr) {\n        acc.push(\"#\" + pr.number + \" \" + pr.title + \" (\" + pr.user.login + \") | href=\" + pr.html_url)\n      })\n    }\n    return acc\n  }, ['---'] )\n\n  strings.unshift(`${totalCount} Pull Request`)\n  for( var string of strings)\n    console.log(string)\n}).catch(function() {});\n"
				}
			],
			"path": "Dev/GitHub/pull-requests.5m.js",
			"filename": "pull-requests.5m.js",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/pull-requests.5m.js.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github Pull requests",
			"version": "v2.0",
			"author": "Noam Knispel",
			"authors": [
				{
					"name": "Noam Knispel",
					"githubUsername": "noamknispel",
					"imageURL": "https://avatars.githubusercontent.com/u/6729694?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Get list of pull requests from Github for multiple repositories",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"node.js request co bluebird"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.661976Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/repo-issues.5m.js",
					"filename": "repo-issues.5m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eGithub Repository Issues\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eTom Genoni\u003c/bitbar.author\u003e\n// \u003cbitbar.desc\u003eLists all pull requests and issues, up to 100 total.\u003c/bitbar.desc\u003e\n// \u003cbitbar.author.github\u003etomgenoni\u003c/bitbar.author.github\u003e\n// \u003cbitbar.dependencies\u003enode.js\u003c/bitbar.dependencies\u003e\n\n$HOSTNAME = \"\"; // For enterprise Github accounts, e.g., github.tinderforcats.com/api/v3\n$ORG = \"matryer\";\n$REPOSITORY = \"bitbar\";\n$BITBAR_TITLE = \"bitbar\";\n$GITHUB_ACCESS_TOKEN = \"\";\n\n// ----------- Ignore below this line ---------------\n\nvar https = require('https');\n\nvar options = {\n  host: $HOSTNAME || 'api.github.com',\n  headers: {'user-agent': 'Mozilla/5.0'},\n  path: '/repos/'+$ORG+'/'+$REPOSITORY+'/issues?GITHUB_ACCESS_TOKEN=' + $GITHUB_ACCESS_TOKEN + '\u0026per_page=100'\n};\n\nhttps.get(options, function(res) {\n  var body = '';\n  res.on('data', function(data) {\n    body += data;\n  });\n  res.on('end', function() {\n    handleResponse(JSON.parse(body));\n  });\n});\n\nfunction fixedIssues(body) {\n\n  var arr = [];\n\n  var closeTerms = ['close', 'closes', 'closed', 'fix', 'fixes', 'fixed', 'resolve', 'resolves', 'resolved'];\n\n  body.map(function(issues){\n    if ( issues.pull_request ) {\n      var comments = issues.body;\n\n      closeTerms.forEach(function(term) {\n        var regex = new RegExp(term + \" #([0-9]+)\", \"ig\");\n        var matches = comments.match(regex);\n        if (matches) {\n          matches.forEach(function(match) {\n            var num = match.split(\"#\")[1];\n            arr.push(num);\n          });\n        }\n      });\n    }\n  });\n\n  return arr;\n}\n\nfunction allIssues(body) {\n\n  var fixed = fixedIssues(body);\n\n  var issues = body.map(function(issues){\n    if ( issues.pull_request ) {\n      return [issues.title, ' - #', issues.number, ' | href=', issues.html_url,'\\n'].join('');\n    }\n  }).join('\\n');\n\n  var prs = body.map(function(issues){\n    var color = \"\";\n    if ( !issues.pull_request ) {\n      if ( fixed.indexOf(issues.number.toString()) \u003e -1 ) {\n        color = \"color=#aaaaaa\";\n      }\n      return [issues.title, ' - #', issues.number,' (', issues.user.login, ') | href=', issues.html_url, ' ', color, '\\n'].join('');\n    }\n  }).join('\\n');\n\n  return [issues, prs];\n}\n\nfunction issueCount(body) {\n  var p = 0;\n  body.map(function(issues){\n    if ( issues.pull_request ) {\n      p++;\n    }\n  });\n  var i = body.length - p;\n  return [i, p];\n}\n\nfunction handleResponse(body) {\n  var countPRs = issueCount(body)[1];\n  var countIssues = issueCount(body)[0];\n  var listIssues = allIssues(body)[1];\n  var listPRs = allIssues(body)[0];\n\n  console.log($BITBAR_TITLE + \" \" + countPRs + \"/\" + countIssues);\n\n  console.log(\"---\");\n  console.log(\"Pull Requests \" + countPRs);\n  console.log(listPRs);\n\n  console.log(\"---\");\n  console.log(\"Issues \" + countIssues);\n  console.log(listIssues);\n\n}\n"
				}
			],
			"path": "Dev/GitHub/repo-issues.5m.js",
			"filename": "repo-issues.5m.js",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/repo-issues.5m.js.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github Repository Issues",
			"version": "v1.0",
			"author": "Tom Genoni",
			"authors": [
				{
					"name": "Tom Genoni",
					"githubUsername": "tomgenoni",
					"imageURL": "https://avatars.githubusercontent.com/u/1171072?v=4",
					"bio": "Design Systems at Thumbtack",
					"primary": true
				}
			],
			"desc": "Lists all pull requests and issues, up to 100 total.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"node.js"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.689832Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github-trending.1h.rb",
					"filename": "github-trending.1h.rb",
					"content": "#!/usr/bin/env ruby\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eGithub Trending\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emfks17\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emfks17\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGithub Daily Trending Viewer\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/mfks17/bitbar-plugin-github-trending/Screenshots/01.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby, nokogiri\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/mfks17/bitbar-plugins-github-trending\u003c/bitbar.abouturl\u003e\n\nrequire 'open-uri'\nrequire 'json'\nrequire 'nokogiri'\n\nLANG = 'swift'.freeze # your favorite language\n# LANG = 'java'.freeze\n\nurl = 'https://github.com/trending/' + LANG + '?since=daily'\nBASE_URL = 'https://github.com/'.freeze\n\ncharset = nil\nhtml = open(url) do |f|\n  charset = f.charset\n  f.read\nend\n\nhash = {}\n\nputs LANG.capitalize\nputs '---'\n\ndoc = Nokogiri::HTML.parse(html, nil, charset)\ndoc.xpath('//li[@class=\"repo-list-item\"]').each do |node|\n  node.xpath('./h3[@class=\"repo-list-name\"]/a').attribute('href').value.each_line do |s|\n    s.slice!(0)\n    hash = { name: s, url: BASE_URL + s }\n\n    api = 'https://api.github.com/repos/' + s\n    begin\n      res = open(api)\n      code, message = res.status\n    rescue =\u003e _\n      puts '🙅Github Api Limits🙅'\n      exit\n    end\n\n    if code == '200'\n      result = JSON.parse(res.read)\n      puts hash.fetch(:name) + ' ⭐️ Daily: ' + node.xpath('./p[@class=\"repo-list-meta\"]').text.split(\"\\n\")[5].split(' ')[0] + ' - Total: ' + result.fetch('stargazers_count').to_s + '| sizes=14 href=' + hash.fetch(:url)\n    else\n      puts \"OMG!! #{code} #{message}\"\n    end\n  end\nend\n"
				}
			],
			"path": "Dev/GitHub/github-trending.1h.rb",
			"filename": "github-trending.1h.rb",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github-trending.1h.rb.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github Trending",
			"version": "v0.1.2",
			"author": "mfks17",
			"authors": [
				{
					"name": "mfks17",
					"githubUsername": "mfks17",
					"imageURL": "https://avatars.githubusercontent.com/u/1155040?v=4",
					"bio": "programmer 📱 ",
					"primary": true
				}
			],
			"desc": "Github Daily Trending Viewer",
			"imageURL": "https://raw.githubusercontent.com/mfks17/bitbar-plugin-github-trending/Screenshots/01.png",
			"dependencies": [
				"ruby",
				"nokogiri"
			],
			"aboutURL": "https://github.com/mfks17/bitbar-plugins-github-trending",
			"lastUpdated": "2021-03-08T15:21:48.533463Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github-review-requests.5m.py",
					"filename": "github-review-requests.5m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eGithub review requests\u003c/bitbar.title\u003e\n# \u003cbitbar.desc\u003eShows a list of PRs that need to be reviewed\u003c/bitbar.desc\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAdam Bogdał\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebogdal\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://github-bogdal.s3.amazonaws.com/bitbar-plugins/review-requests.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\n# ----------------------\n# ---  BEGIN CONFIG  ---\n# ----------------------\n\n# https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/\nACCESS_TOKEN = ''\n\nGITHUB_LOGIN = ''\n\n# (optional) PRs with this label (e.g 'in progress') will be grayed out on the list\nWIP_LABEL = ''\n\n# (optional) Filter the PRs by an organization, labels, etc. E.g 'org:YourOrg -label:dropped'\nFILTERS = ''\n\n# --------------------\n# ---  END CONFIG  ---\n# --------------------\n\nimport datetime\nimport json\nimport os\nimport sys\ntry:\n    # For Python 3.x\n    from urllib.request import Request, urlopen\nexcept ImportError:\n    # For Python 2.x\n    from urllib2 import Request, urlopen\n\n\nDARK_MODE = os.environ.get('BitBarDarkMode')\n\nquery = '''{\n  search(query: \"%(search_query)s\", type: ISSUE, first: 100) {\n    issueCount\n    edges {\n      node {\n        ... on PullRequest {\n          repository {\n            nameWithOwner\n          }\n          author {\n            login\n          }\n          createdAt\n          number\n          url\n          title\n          labels(first:100) {\n            nodes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}'''\n\n\ncolors = {\n    'inactive': '#b4b4b4',\n    'title': '#ffffff' if DARK_MODE else '#000000',\n    'subtitle': '#586069'}\n\n\ndef execute_query(query):\n    headers = {\n        'Authorization': 'bearer ' + ACCESS_TOKEN,\n        'Content-Type': 'application/json'}\n    data = json.dumps({'query': query}).encode('utf-8')\n    req = Request(\n        'https://api.github.com/graphql', data=data, headers=headers)\n    body = urlopen(req).read()\n    return json.loads(body)\n\n\ndef search_pull_requests(login, filters=''):\n    search_query = 'type:pr state:open review-requested:%(login)s %(filters)s' % {\n        'login': login, 'filters': filters}\n    response = execute_query(query % {'search_query': search_query})\n    return response['data']['search']\n\n\ndef parse_date(text):\n    date_obj = datetime.datetime.strptime(text, '%Y-%m-%dT%H:%M:%SZ')\n    return date_obj.strftime('%B %d, %Y')\n\n\ndef print_line(text, **kwargs):\n    params = ' '.join(['%s=%s' % (key, value) for key, value in kwargs.items()])\n    print('%s | %s' % (text, params) if kwargs.items() else text)\n\n\nif __name__ == '__main__':\n    if not all([ACCESS_TOKEN, GITHUB_LOGIN]):\n        print_line('⚠ Github review requests', color='red')\n        print_line('---')\n        print_line('ACCESS_TOKEN and GITHUB_LOGIN cannot be empty')\n        sys.exit(0)\n\n    response = search_pull_requests(GITHUB_LOGIN, FILTERS)\n\n    print_line('#%s' % response['issueCount'])\n    print_line('---')\n\n    for pr in [r['node'] for r in response['edges']]:\n        labels = [l['name'] for l in pr['labels']['nodes']]\n        title = '%s - %s' % (pr['repository']['nameWithOwner'], pr['title'])\n        title_color = colors.get('inactive' if WIP_LABEL in labels else 'title')\n        subtitle = '#%s opened on %s by @%s' % (\n            pr['number'], parse_date(pr['createdAt']), pr['author']['login'])\n        subtitle_color = colors.get('inactive' if WIP_LABEL in labels else 'subtitle')\n\n        print_line(title, size=16, color=title_color, href=pr['url'])\n        print_line(subtitle, size=12, color=subtitle_color)\n        print_line('---')\n"
				}
			],
			"path": "Dev/GitHub/github-review-requests.5m.py",
			"filename": "github-review-requests.5m.py",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github-review-requests.5m.py.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github review requests",
			"version": "v0.1",
			"author": "Adam Bogdał",
			"authors": [
				{
					"name": "Adam Bogdał",
					"githubUsername": "bogdal",
					"imageURL": "https://avatars.githubusercontent.com/u/1451824?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows a list of PRs that need to be reviewed",
			"imageURL": "https://github-bogdal.s3.amazonaws.com/bitbar-plugins/review-requests.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.311914Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/swift-trending.15m.swift",
					"filename": "swift-trending.15m.swift",
					"content": "#!/usr/bin/swift\n\n// # \u003cbitbar.title\u003eTrending Swift on GitHub\u003c/bitbar.title\u003e\n// # \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// # \u003cbitbar.author\u003eReda Lemeden\u003c/bitbar.author\u003e\n// # \u003cbitbar.author.github\u003ekaishin\u003c/bitbar.author.github\u003e\n// # \u003cbitbar.desc\u003eList Swift repositories tending on GitHub in a given period.\u003c/bitbar.desc\u003e\n// # \u003cbitbar.image\u003ehttps://github.com/kaishin/swift-trending-bitbar/raw/master/screenshot.png\u003c/bitbar.image\u003e\n// # \u003cbitbar.dependencies\u003eswift\u003c/bitbar.dependencies\u003e\n// # \u003cbitbar.abouturl\u003ehttps://github.com/kaishin/swift-trending-bitbar\u003c/bitbar.abouturl\u003e\n\nimport Foundation\n\n// PREFERENCES (Feel free to change these to your liking)\n\nvar displayCount = 15 // Min: 10, Max: 25\nvar maxSubtitleLineLength = 70\nvar trendingPeriod = \"daily\" // Possible values: \"daily\", \"weekly\", \"monthly\"\n\n// Try not to edit the code below.\n\nlet icon = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAuBJREFUWAm1l1uITlEUx8c9GmmIKR4UXsjtgZGaeHBLlEYpD0p5EZLMA0nJg0TzRKI8KJ6IlHiYKKE0D5PEvEgyLil3ocn98vvrW1/Lts85+3zzWfWbvfbaa62zzv725UxDQ32liXRLy6QcWMY5wfcdPvNhZ4Lvf3MZSeZX0JHyhEEFTpMY11uVka84N8KuSnulTPCAwHka/ZWBLaU7HicV8gu2pQSYTyuKptDLbjpt3pCon8FPBfyA5IU5GOfj0AwmQ1C6YbUZEttV+KkA8RzGQZJMxasHpjjv2eh9sMbZitQRONjPoCLOFwX48S10XsAcZ9yD/h3WOluRegcHmwW1C4sC/PhFOh9hWcWon6cLVMT6iq2oOYeDL0A/ZbKMwfMpfAN74ET0t/ATNEtFchIHX4D0lqIgP76Ajt5YgftB23QFqADZ9kKeHGMwLOBoXkBsTL+9JbmAPgr2Odsp9KEQkyMYLdba19jC8yYWW7XpvugES3AffRZcdrYb6LFtdtb5WLza6VBKRuPdC5ZEW7IdHjub1ss88HKTjsX4dpN3StVn4qhd4ROF2+wL4z75m8DfYrU2ahLdC7YoLVmsPY3fXIiNyXYVapYNRGYl9vbPOX73an56JXBHTnJfRJb+rL8FKP5gP4rQ4q2KTrxapYPArLfMs9/yD9TlshlKHQ4uwQH0vIfFxk64+D/qJf52Q2s4kNgvuya2h3nHYngEqlbfcIshdUZ0S26ETxB725hNV30T/CUz6H0AC3iIrulVMToJvUygo2taC/EJWEyZ9jBx/8hyLLp+Y4m0r99DykEUiw9tmrHm8LP8AcYeaANNrRf1h4Eup3qI8r3MSqRjtBfCquvd78wqQPZGOAT6rK7Hg/UdoBnWhWX5MmcAn6q0oF0HCyrbXiPWb2990NgpqmKSZRGemjL/BnnF3MVX/xtkyToG+lL3uk+in2YJ6K0mg47y4aBVrfv/NuhrqQuKZOtv52B4+dBxxIcAAAAASUVORK5CYII=\"\nlet templateImage = \"|templateImage=\\(icon)\"\n\n// Mark: - Regex\n\ninfix operator =~\n\nfunc =~ (value: String, pattern: String) -\u003e RegexResult {\n  var error: NSError?\n  let string = value as NSString\n  let options = NSRegularExpression.Options(rawValue: 0)\n  let regex: NSRegularExpression?\n\n  do {\n    regex = try NSRegularExpression(pattern: pattern, options: options)\n  } catch let error1 as NSError {\n    error = error1\n    regex = nil\n  }\n\n  if error != nil { return RegexResult(results: []) }\n\n  let all = NSRange(location: 0, length: string.length)\n  let matchingOptions = NSRegularExpression.MatchingOptions(rawValue: 0)\n  var matches: [String] = []\n\n  regex?.enumerateMatches(in: value, options: matchingOptions, range: all) { result, _, _ in\n    guard let result = result else { return }\n    let subString = string.substring(with: result.range)\n    matches.append(subString)\n  }\n\n  return RegexResult(results: matches)\n}\n\nstruct RegexResult {\n  let isMatching: Bool\n  let matches: [String]\n\n  init(results: [String]) {\n    matches = results\n    isMatching = matches.count \u003e 0\n  }\n}\n\n// Mark: - Foundation Extensions\n\nextension String {\n  func matches(pattern: String) -\u003e [String] {\n    let regexResult = (self =~ pattern)\n\n    if regexResult.isMatching {\n      return regexResult.matches\n    } else {\n      return []\n    }\n  }\n\n  func condenseWhitespace() -\u003e String {\n    let components = self.components(separatedBy: NSCharacterSet.whitespacesAndNewlines)\n    return components.filter { !$0.isEmpty }.joined(separator: \" \")\n  }\n\n  func trunc(length: Int, trailing: String = \"…\") -\u003e String {\n    return (self.count \u003e length) ? self.prefix(length) + trailing : self\n  }\n}\n\nextension Array {\n  func chunk(_ chunkSize: Int) -\u003e [[Element]] {\n    return stride(from: 0, to: self.count, by: chunkSize).map({ (startIndex) -\u003e [Element] in\n      let endIndex = (startIndex.advanced(by: chunkSize) \u003e self.count) ? self.count-startIndex : chunkSize\n      return Array(self[startIndex..\u003cstartIndex.advanced(by: endIndex)])\n    })\n  }\n}\n\n// Mark: - Repository\n\nstruct Repository {\n  let authorName: String\n  let projectName: String\n  let description: String\n  let starCount: Int\n  let newStarCount: Int\n\n  init?(string: String) {\n    let properties = string.split(separator: \"|\")\n    if properties.count != 4 { return nil }\n\n    self.authorName = String(describing: properties[0].split(separator: \"/\").first ?? \"\").trimmingCharacters(in: .whitespacesAndNewlines)\n    self.projectName = String(describing: properties[0].split(separator: \"/\").last ?? \"\").trimmingCharacters(in: .whitespacesAndNewlines)\n    self.description = String(describing: properties[1])\n      .trimmingCharacters(in: .whitespacesAndNewlines)\n      .replacingOccurrences(of: \"\u0026amp;\", with: \"\u0026\")\n\n    let stars = String(describing: properties[2]\n      .split(separator: \" \").first?.replacingOccurrences(of: \",\", with: \"\") ?? \"0\")\n    self.starCount = Int(stars) ?? 0\n\n    let newStarsString = String(describing: properties[3]\n      .split(separator: \" \").first?.replacingOccurrences(of: \",\", with: \"\") ?? \"0\")\n\n    self.newStarCount = Int(newStarsString) ?? 0\n  }\n\n  var gitHubURL: String {\n    return \"https://github.com/\\(authorName)/\\(projectName)/\"\n  }\n\n  var firstLine: String {\n    return \"\\(projectName) (by \\(authorName))\" + \"| href=\\(gitHubURL)\"\n  }\n\n  var secondLine: String {\n    return \"★\\(starCount) (+\\(newStarCount)) — \\(description)\" + \"| size=12 length=\\(maxSubtitleLineLength)\"\n  }\n\n  func multiLineDescription(wordCount count: Int) -\u003e String {\n    let fullDescriptionWords = description.split(separator: \" \")\n    let chunkedDescription = fullDescriptionWords.chunk(count).map { chunk in\n      return chunk.joined(separator: \" \")\n    }\n\n    return  chunkedDescription.joined(separator: \"| size=12 \\n\")\n  }\n}\n\nenum Period: String {\n  case daily, weekly, monthly\n\n  var title: String {\n    switch self {\n    case .daily:\n      return \"today\"\n    case .weekly:\n      return \"this week\"\n    default:\n      return \"this month\"\n    }\n  }\n}\n\n// Mark: - Free Functions\n\nfunc trendingRepositories(html: String) -\u003e [Repository] {\n  let repos = html.matches(pattern: \"\u003col class=\\\"repo-list\\\"\u003e(.|\\n)*?\u003c/ol\u003e\")[0]\n  let repoList = repos.matches(pattern: \"\u003cli class=(.|\\n)*?\u003c/li\u003e\")\n\n  return repoList.flatMap { repo in\n    let sanitizedString = repo.replacingOccurrences(of: \"\u003c[^\u003e]+\u003e\", with: \"\", options: .regularExpression)\n      .replacingOccurrences(of: \"\\n    Star|Built by\\n|\\n          Swift\", with: \"|\", options: .regularExpression)\n      .condenseWhitespace()\n\n    return Repository(string: sanitizedString)\n  }\n}\n\nfunc printOutput(responseHTML html: String) {\n  print(templateImage)\n  print(\"---\")\n\n  guard let period = Period(rawValue: trendingPeriod) else {\n    fatalError(\"Frequency specified should be one of the following options: 'daily', 'weekly', 'monthly'.\")\n  }\n\n  print(\"Trending Swift \\(period.title.capitalized)\")\n  print(\"---\")\n\n  let count = max(min(displayCount, 25), 10)\n\n  for repo in trendingRepositories(html: html)[0..\u003ccount] {\n    print(repo.firstLine)\n    print(repo.secondLine)\n  }\n}\n\n// Mark: - Output\n\nlet url = URL(string: \"https://github.com/trending/swift?since=\\(trendingPeriod)\")!\nlet html = try? String(contentsOf: url)\n\nprintOutput(responseHTML: html!)\n\n"
				}
			],
			"path": "Dev/GitHub/swift-trending.15m.swift",
			"filename": "swift-trending.15m.swift",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/swift-trending.15m.swift.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Trending Swift on GitHub",
			"version": "v1.0",
			"author": "Reda Lemeden",
			"authors": [
				{
					"name": "Reda Lemeden",
					"githubUsername": "kaishin",
					"imageURL": "https://avatars.githubusercontent.com/u/519433?v=4",
					"bio": "Developer/Designer based in Stockholm.",
					"primary": true
				}
			],
			"desc": "List Swift repositories tending on GitHub in a given period.",
			"imageURL": "https://github.com/kaishin/swift-trending-bitbar/raw/master/screenshot.png",
			"dependencies": [
				"swift"
			],
			"aboutURL": "https://github.com/kaishin/swift-trending-bitbar",
			"lastUpdated": "2021-03-08T15:21:48.691601Z",
			"vars": null
		}
	]
}