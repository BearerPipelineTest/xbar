{
	"plugin": {
		"files": [
			{
				"path": "Dev/Gitlab/gitlab_projects.js",
				"filename": "gitlab_projects.js",
				"content": "#!/usr/bin/env /usr/local/bin/node\n// jshint asi:true\n// \u003cbitbar.title\u003eGitLab Projects\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eShelton Koskie\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003eeightygrit\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eList of your last active GitLab projects. Now supports API v4\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.image\u003ehttp://i.imgur.com/4X40XIK.png\u003c/bitbar.image\u003e\n\n/**\n * Information\n *\n * This was inspired by the work of Sylvain Baronnet (@sylvainbaronnet), who made the\n * first version of the \"GITLAB Projects\" for API v3. What started as a couple of edits\n * became a total rewrite.\n *\n * @see   GitLab API Documentation    https://docs.gitlab.com/ee/api/README.html\n * @see   Create GitLab Access Token  https://gitlab.com/profile/personal_access_tokens\n * @see   BitBar Node Module Docs     https://github.com/sindresorhus/bitbar\n */\n\n\n\n/**\n * The domain your instance is hosted on. Leave the default if using gitlab.com\n *\n * @var       {string}\n */\nvar gitlab_domain = 'gitlab.com';\n\n/**\n * Your private access token.\n *\n * @var       {string}\n * @see       Create a token  https://gitlab.com/profile/personal_access_tokens\n */\nvar private_token = '';\n\n/**\n * When you select a project, which sub-page should it take you to?\n *\n * @var  {string}\n *\n * Options include:\n * - /issues\n * - /activity\n * - /commits\n */\nvar default_page  = '/issues';\n\n/**\n * How would you like results ordered?\n *\n * @var  {string}\n *\n * Options include:\n * - last_activity_at\n * - id\n * - name\n * - path\n * - created_at\n * - updated_at\n */\nvar order_by      = 'last_activity_at';\n\n/**\n * Total number of results you want returned\n *\n * @var       {string}\n */\nvar result_count  = '30';\n\n/**\n * Font size of the project list\n *\n * @var       {string}\n */\nvar font_size     = '15';\n\n/////////////////////////////////////////////////////////////////////////\n// Do not edit below this line unless you know what you're doing. :)  //\n///////////////////////////////////////////////////////////////////////\nvar bitbar;\n\n// Verify bitbar node module is available or try to install it globally.\ntry { bitbar = require('bitbar'); }\ncatch(e) {\n\n  try { bitbar = globalRequire('bitbar'); }\n  catch(e) {\n\n    installBitbarModule();\n\n    // Not catching error if one is thrown.\n    bitbar = globalRequire('bitbar');\n  }\n}\n\n/**\n * Performs the GET request for a projects list for authenticated user\n *\n * @param   {Function}  callback  The function to call to handle the response\n *\n * @return  {void}                Does not return anything\n */\n(function(callback) {\n    'use strict';\n\n    const httpTransport = require('https');\n    const responseEncoding = 'utf8';\n    const httpOptions = {\n        hostname: gitlab_domain,\n        port: '443',\n        path: '/api/v4/projects?order_by=' + order_by + '\u0026sort=desc\u0026archived=false\u0026per_page=' + result_count + '\u0026owned=true',\n        method: 'GET',\n        headers: {\"PRIVATE-TOKEN\":private_token}\n    };\n    httpOptions.headers['User-Agent'] = 'bitbar/gitlab_projects - node ' + process.version;\n\n    const request = httpTransport.request(httpOptions, (res) =\u003e {\n        let responseBufs = [];\n        let responseStr = '';\n\n        res.on('data', (chunk) =\u003e {\n            if (Buffer.isBuffer(chunk)) {\n                responseBufs.push(chunk);\n            }\n            else {\n                responseStr = responseStr + chunk;\n            }\n        }).on('end', () =\u003e {\n            responseStr = responseBufs.length \u003e 0 ?\n                Buffer.concat(responseBufs).toString(responseEncoding) : responseStr;\n\n            callback(null, res.statusCode, res.headers, responseStr);\n        });\n\n    })\n    .setTimeout(0)\n    .on('error', (error) =\u003e {\n        callback(error);\n    });\n    request.write(\"\")\n    request.end();\n\n\n})((error, statusCode, headers, body) =\u003e {\n    // console.log('ERROR:', error);\n    // console.log('STATUS:', statusCode);\n    // console.log('HEADERS:', JSON.stringify(headers));\n\n    const bitbar = globalRequire('bitbar');\n    var content = [];\n\n    content.push({\n      text: 'GitLab',\n      color: bitbar.darkMode ? 'white' : 'black',\n      dropdown: true\n    });\n\n    content.push(bitbar.separator);\n\n    var projects = JSON.parse(body);\n\n    for(var p in projects) {\n\n      var project = projects[p];\n      var ta = timeago();\n      var last_activity = ta.ago(project.last_activity_at);\n\n      content.push({\n        text: project.name + ' ⤏ ' + 'Last activity: ' + last_activity + ' | href=\"' + project.web_url + '/activity' + '\" size=' + font_size\n      });\n\n      content.push({\n        text: project.name + ' ⤏ ' + project.open_issues_count + ' issue' + (project.open_issues_count \u003e 1 ? 's' : '') + ' | alternate=true href=\"' + project.web_url + '/issues\" size=' + font_size\n      });\n\n      // Uncomment if you want a separator after each project.\n      //content.push(bitbar.separator);\n    }\n\n    // Execute the dispaly.\n    bitbar(content);\n\n\n});\n\n/* Source : https://github.com/digplan/time-ago */\nfunction timeago() {\n\n  var o = {\n    second: 1000,\n    minute: 60 * 1000,\n    hour: 60 * 1000 * 60,\n    day: 24 * 60 * 1000 * 60,\n    week: 7 * 24 * 60 * 1000 * 60,\n    month: 30 * 24 * 60 * 1000 * 60,\n    year: 365 * 24 * 60 * 1000 * 60\n  };\n  var obj = {};\n\n  obj.ago = function(nd) {\n    var r = Math.round,\n      pl = function(v, n) {\n        return n + ' ' + v + (n \u003e 1 ? 's' : '') + ' ago'\n      },\n      ts = new Date().getTime() - new Date(nd).getTime(),\n      ii;\n      if(ts \u003c 0) {\n        return 'Just now';\n      }\n\n    for (var i in o) {\n      if (r(ts) \u003c o[i]) return pl(ii || 'm', r(ts / (o[ii] || 1)))\n      ii = i;\n    }\n    return pl(i, r(ts / o[i]));\n  }\n  return obj;\n}\n\n/**\n * Sets up the ability to require global node packages.\n *\n * @return     {object}  Returns the required node package object\n */\nfunction globalRequire(package){\n  var childProcess = require('child_process');\n  var path = require('path');\n  var fs = require('fs');\n  var env = Object.assign({}, process.env);\n  env.PATH = path.resolve(\"/usr/local/bin\") + ':' + env.PATH;\n\n\n  var globalNodeModulesDir = childProcess.execSync(npmBin() + ' root -g', {env: env}).toString().trim() + '/';\n  var packageDir = path.join(globalNodeModulesDir, package, '/');\n\n  //find package required by older versions of npm\n  if (!fs.existsSync(packageDir)){\n    packageDir = path.join(globalNodeModulesDir, 'npm/node_modules/', package);\n  }\n\n  // Package not found\n  if (!fs.existsSync(packageDir)){\n    throw new Error('Cannot find global module \\'' + package + '\\'');\n  }\n\n  var packageMeta = JSON.parse(fs.readFileSync(path.join(packageDir, 'package.json')).toString());\n  var main = path.join(packageDir, packageMeta.files[0]);\n\n  return require(main);\n}\n\n/**\n * Installs Bitbar node module if it doesn't exits.\n *\n * @see    BitBar node module on github    https://github.com/sindresorhus/bitbar\n */\nfunction installBitbarModule() {\n\n    // Allows one to run the npm command as if on the command line.\n    var childProcess = require('child_process');\n    var execSync = childProcess.execSync;\n    var path = require('path');\n    var fs = require('fs');\n\n    var env = Object.assign({}, process.env);\n    env.PATH = path.resolve(\"/usr/local/bin\") + ':' + env.PATH;\n\n    // Get the path to npm bin\n    var npm = npmBin();\n\n    // The install command\n    var cmd = npm + ' install -g bitbar';\n\n    console.log(\"Installing the BitBar Node module...\");\n\n    var output = execSync(cmd, {\n        cwd: process.cwd(),\n        env: env\n    }).toString('utf8').trim();\n\n    console.log(\"Installation complete.\");\n\n}\n\n/**\n * Gets the path to your npm executable.\n *\n * @return  {string}  The full path to your npm executable\n */\nfunction npmBin(){\n  var path = require('path');\n  var childProcess = require('child_process');\n  var execSync = childProcess.execSync;\n  var env = Object.assign({}, process.env);\n  env.PATH = path.resolve(\"/usr/local/bin\") + ':' + env.PATH;\n  var buffs = [];\n\n  // Get the path to npm bin\n  return execSync('which npm', {env: env}).toString('utf8').trim();\n}"
			}
		],
		"path": "Dev/Gitlab/gitlab_projects.js",
		"filename": "gitlab_projects.js",
		"dir": "Dev/Gitlab",
		"docsPlugin": "Dev/Gitlab/gitlab_projects.js.html",
		"docsCategory": "Dev/Gitlab.html",
		"pathSegments": [
			"Dev",
			"Gitlab"
		],
		"categoryPathSegments": [
			{
				"path": "Dev",
				"text": "Dev",
				"isLast": false
			},
			{
				"path": "Dev/Gitlab",
				"text": "Gitlab",
				"isLast": true
			}
		],
		"title": "GitLab Projects",
		"version": "v2.0",
		"author": "Shelton Koskie",
		"authors": [
			{
				"name": "Eighty Grit",
				"githubUsername": "eightygrit",
				"imageURL": "https://avatars.githubusercontent.com/u/50476396?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "List of your last active GitLab projects. Now supports API v4",
		"imageURL": "http://i.imgur.com/4X40XIK.png",
		"dependencies": [
			"node.js"
		],
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:21:48.919272Z",
		"vars": null
	}
}