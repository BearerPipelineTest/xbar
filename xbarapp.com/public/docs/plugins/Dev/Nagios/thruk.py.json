{
	"plugin": {
		"files": [
			{
				"path": "Dev/Nagios/thruk.py",
				"filename": "thruk.py",
				"content": "#! /usr/bin/env PYTHONIOENCODING=utf8 PYTHONUNBUFFERED=1 /usr/local/bin/python3\n\n# \u003cbitbar.title\u003eThruk\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eBrian Hartvigsen\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etresni\u003c/bitbar.author.github\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.image\u003ehttps://monosnap.com/file/nFJPVlGURwBi7b8bU3ZFG8SVma7gEc.png\u003c/bitbar.image\u003e\n\nfrom urllib.parse import quote_plus\nimport sys\n\nimport requests\n\nNAGIOS_HOST = ''\nNAGIOS_USERNAME = ''\nNAGIOS_PASSWORD = ''\nONLY_NEW = False\n\n# Leave them all blank to get everything (can be seriously slow...)\nchecks = {\n    'hosts': [],\n    'hostgroups': [],\n    'servicegroups': [],\n    'services': []\n}\n\n# STOP EDITING HERE!\n\nSTATE_OK = 0\nSTATE_WARNING = 1\nSTATE_CRITICAL = 2\nSTATE_UNKNOWN = 3\nSTATE_PENDING = -1\n\nparams = {\n    'view_mode': 'json',\n    'style': 'detail',\n}\n\n\ndef errOut(msg):\n    print(\"üí• Thruk Error\")\n    print(msg, file=sys.stderr)  # noqa\n    sys.exit(1)\n\n\ndef getData(key, value):\n    p = {key: value}\n    p.update(params)\n    r = requests.get(\"%s/thruk/cgi-bin/status.cgi\" % NAGIOS_HOST, params=p, auth=(NAGIOS_USERNAME, NAGIOS_PASSWORD))\n    return r.json()\n\nif not NAGIOS_HOST or not NAGIOS_USERNAME or not NAGIOS_PASSWORD:\n    errOut('You must edit %s and enter your Nagios credentials' % sys.argv[0])\n\nif not checks['hosts'] and not checks['hostgroups'] and not checks['services'] and not checks['servicegroups']:\n    checks['hosts'].append(\"all\")\n\nhosts = {}\nservices = []\nfor group, values in checks.items():\n    for v in values:\n        try:\n            jsondata = getData(group[:-1], v)\n        except requests.exceptions.ConnectionError:\n            errOut(\"Unable to connect to %s\" % NAGIOS_HOST)\n        for service in jsondata:\n            dns_name = service['host_name'].split('.')\n            dns_name.reverse()\n            dns_name = '.'.join(dns_name)\n            if dns_name not in hosts:\n                hosts[dns_name] = {\n                    'services': {},\n                    'notifications': service['host_notifications_enabled'],\n                    'offline': service['host_state'] == 1,\n                    'disabled': service['host_checks_enabled'] == 0,\n                    'name': service['host_name']\n                }\n            hosts[dns_name]['services'][service['display_name']] = service\n\nfor info in hosts.values():\n    if not ONLY_NEW:\n        info[STATE_OK] = len(list(filter(lambda x: info['services'][x]['state'] == 0, info['services'])))\n        info[STATE_WARNING] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_WARNING,\n                                              info['services'])))\n        info[STATE_CRITICAL] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_CRITICAL,\n                                               info['services'])))\n        info[STATE_UNKNOWN] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_UNKNOWN,\n                                              info['services'])))\n    else:\n        info[STATE_OK] = 0\n        info[STATE_WARNING] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_WARNING and\n                                              info['services'][x]['checks_enabled'] and\n                                              info['services'][x]['notifications_enabled'] and\n                                              not info['services'][x]['acknowledged'] and\n                                              not info['disabled'] and\n                                              not info['notifications'],\n                                              info['services'])))\n        info[STATE_CRITICAL] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_CRITICAL and\n                                               info['services'][x]['checks_enabled'] and\n                                               info['services'][x]['notifications_enabled'] and\n                                               not info['services'][x]['acknowledged'] and\n                                               not info['disabled'] and\n                                               not info['notifications'],\n                                               info['services'])))\n        info[STATE_UNKNOWN] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_UNKNOWN and\n                                              info['services'][x]['checks_enabled'] and\n                                              info['services'][x]['notifications_enabled'] and\n                                              not info['services'][x]['acknowledged'] and\n                                              not info['disabled'] and\n                                              not info['notifications'],\n                                              info['services'])))\n\n\nprint('%s%s%s%s%d%s %s%d%s %s%d%s ' % (\n    '\\033[1;32m' if not ONLY_NEW else '',\n    sum([hosts[x][STATE_OK] for x in hosts]) if not ONLY_NEW else '',\n    '\\033[0m ' if not ONLY_NEW else '',\n\n    '\\033[1;33m',\n    sum([hosts[x][STATE_WARNING] for x in hosts]),\n    '\\033[0m',\n\n    '\\033[1;31m',\n    sum([hosts[x][STATE_CRITICAL] for x in hosts]),\n    '\\033[0m',\n\n    '\\033[1;30m',\n    sum([hosts[x][STATE_UNKNOWN] for x in hosts]),\n    '\\033[0m',\n))\n\nprint('---')\n\nfor k in sorted(hosts.keys()):\n    info = hosts[k]\n    host = info['name']\n    print('%s%s%s %s%d %s%d %s%d %s%d%s %s%s| ansi=true' % (\n        '\\033[1;31m' if info['offline'] else '',\n        host,\n        '\\033[0m' if info['offline'] else '',\n        '\\033[1;32m',\n        info[STATE_OK],\n        '\\033[1;33m',\n        info[STATE_WARNING],\n        '\\033[1;31m',\n        info[STATE_CRITICAL],\n        '\\033[1;30m',\n        info[STATE_UNKNOWN],\n        '\\033[0m',\n        ':no_bell:' if not info['notifications'] else '',\n        '‚ùå' if info['disabled'] else ''\n    ))\n    print('-- View host in Nagios |  href=\"%s/thruk/#cgi-bin/status.cgi?host=%s\"' % (NAGIOS_HOST, host))\n    for s in info['services'].values():\n        status = '‚úÖ'\n        if s['state'] == STATE_WARNING:\n            status = '‚ö†Ô∏è'\n        elif s['state'] == STATE_CRITICAL:\n            status = '‚ùóÔ∏è'\n        elif s['state'] == STATE_OK and not s['has_been_checked']:\n            status = '‚ùî'\n\n        if not s['notifications_enabled']:\n            status += ' :no_bell:'\n\n        if s['acknowledged']:\n            status += ' :+1:'\n\n        print('-- %s %s | href=\"%s/thruk/#cgi-bin/extinfo.cgi?host=%s\u0026service=%s\u0026type=2\"' % (\n            status,\n            s['display_name'],\n            NAGIOS_HOST,\n            host,\n            quote_plus(s['display_name'])\n        ))\n\n\nprint(\"refresh | refresh=true\")\n"
			}
		],
		"path": "Dev/Nagios/thruk.py",
		"filename": "thruk.py",
		"dir": "Dev/Nagios",
		"docsPlugin": "Dev/Nagios/thruk.py.html",
		"docsCategory": "Dev/Nagios.html",
		"pathSegments": [
			"Dev",
			"Nagios"
		],
		"categoryPathSegments": [
			{
				"path": "Dev",
				"text": "Dev",
				"isLast": false
			},
			{
				"path": "Dev/Nagios",
				"text": "Nagios",
				"isLast": true
			}
		],
		"title": "Thruk",
		"version": "1.0",
		"author": "Brian Hartvigsen",
		"authors": [
			{
				"name": "Brian Hartvigsen",
				"githubUsername": "tresni",
				"imageURL": "https://avatars.githubusercontent.com/u/210250?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "",
		"imageURL": "https://monosnap.com/file/nFJPVlGURwBi7b8bU3ZFG8SVma7gEc.png",
		"dependencies": null,
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:21:49.858713Z",
		"vars": null
	}
}