{
	"plugins": [
		{
			"files": [
				{
					"path": "Dev/alexa_rank.1h.py",
					"filename": "alexa_rank.1h.py",
					"content": "#!/usr/bin/python\n# coding=utf-8\n#\n# \u003cbitbar.title\u003eAlexa rank checker\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eLuca Cappelletti\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eLucaCappelletti94\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays Alexa rank from given websites\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/30YjoCF.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n# by Luca Cappelletti\n\nimport urllib\nimport sys\nimport xml.etree.ElementTree as ET\nimport time\nimport json\nimport os\nfrom urlparse import urlparse\n\nreload(sys)\nsys.setdefaultencoding('utf8')\n\n\nclass Alexa:\n    api_url = \"http://data.alexa.com/data\"\n    is_online_test_url = \"http://google.com\"\n    cache_file_dir = \"/tmp/alexa_rank_cache\"\n    cache_file_name = \"/tmp/alexa_rank_cache/alexa_cache.json\"\n    popularity_icon = \" 🌐 \"\n    black_popularity_icon = \" ♥ \"\n    delta_icon = \" ⇕ \"\n    default_flag_icon = \"⚑\"\n    flags_icons = {\n        \"AU\": \"🇦🇺\",\n        \"CA\": \"🇨🇦\",\n        \"CH\": \"🇨🇭\",\n        \"CN\": \"🇨🇳\",\n        \"DE\": \"🇩🇪\",\n        \"ES\": \"🇪🇸\",\n        \"FR\": \"🇫🇷\",\n        \"GB\": \"🇬🇧\",\n        \"IL\": \"🇮🇱\",\n        \"IT\": \"🇮🇹\",\n        \"JP\": \"🇯🇵\",\n        \"KN\": \"🇰🇳\",\n        \"KR\": \"🇰🇷\",\n        \"NO\": \"🇳🇴\",\n        \"NP\": \"🇳🇵\",\n        \"PS\": \"🇵🇸\",\n        \"QA\": \"🇶🇦\",\n        \"RU\": \"🇷🇺\",\n        \"SS\": \"🇸🇸\",\n        \"US\": \"🇺🇸\"\n    }\n\n    OFFLINE = 0\n    UNRETRIEVED_DATA = 1\n    INVALID_JSON = 2\n    UNEXISTING_FILE = 3\n    INVALID_URLS = 4\n    UNEXISTING_ERROR_ID = 5\n\n    error_messages = {\n        OFFLINE: {\n            \"en\": \"You are offline.\",\n            \"de\": \"Du bist Offline.\",\n            \"it\": \"Sei offline.\"\n        },\n        UNRETRIEVED_DATA: {\n            \"en\": \"Unable to get data for %s.\",\n            \"it\": \"Impossibile recuperare dati per %s.\"\n        },\n        INVALID_JSON: {\n            \"en\": \"The file %s does not contain valid json.\",\n            \"it\": \"Il file %s non contiene json valido.\"\n        },\n        UNEXISTING_FILE: {\n            \"en\": \"The file %s does not exist.\",\n            \"it\": \"Il file %s non esiste.\"\n        },\n        INVALID_URLS: {\n            \"en\": \"No valid urls were provided.\",\n            \"it\": \"Non son stati inseriti url validi.\"\n        },\n        UNEXISTING_ERROR_ID: {\n            \"en\": \"The given error_id %s is not valid\",\n            \"it\": \"L'error_id %s fornito non è valido\"\n        }\n    }\n\n    website_url_list = []\n    alexa_data = {}\n    cli = 10\n    cache = True\n    max_offline_wait = 10\n    user_language = \"en\"\n    default_user_language = \"en\"\n    polling_interval = 60 * 60  # One hour\n    show_global = True\n    show_top_country = True\n    show_delta = False\n    use_black_icons = False\n\n    def __init__(self, website_url_list, cache=None, polling_interval=None, show_global=None, show_top_country=None, show_delta=None, use_black_icons=None, max_offline_wait=None, user_language=None):\n\n        if cache != None:\n            self.cache = cache\n\n        if polling_interval != None:\n            self.polling_interval = polling_interval\n\n        if show_global != None:\n            self.show_global = show_global\n\n        if show_top_country != None:\n            self.show_top_country = show_top_country\n\n        if show_delta != None:\n            self.show_delta = show_delta\n\n        if use_black_icons != None:\n            self.use_black_icons = use_black_icons\n\n        if max_offline_wait != None:\n            self.max_offline_wait = max_offline_wait\n\n        if user_language != None:\n            self.user_language = user_language\n\n        for website_url in website_url_list:\n            if self.is_valid_url(website_url):\n                self.website_url_list.append(website_url)\n\n        if len(self.website_url_list) == 0:\n            print(self.get_error_message(self.INVALID_URLS))\n            sys.exit()\n\n        self.update()\n\n    @classmethod\n    def from_url(cls, website_url, cache=None, polling_interval=None, show_global=None, show_top_country=None, show_delta=None, use_black_icons=None, max_offline_wait=None, user_language=None):\n        return cls([website_url], cache, polling_interval, show_global, show_top_country, show_delta, use_black_icons)\n\n    def get_error_message(self, error_id):\n        if error_id in self.error_messages:\n            if self.user_language in self.error_messages[error_id]:\n                return self.error_messages[error_id][self.user_language]\n            return self.error_messages[error_id][self.default_user_language]\n        print(self.get_error_message(self.UNEXISTING_ERROR_ID), error_id)\n        sys.exit(0)\n\n    def get_data(self, website_url, data):\n        return self.alexa_data[website_url][data]\n\n    def extract(self, raw_data, key, attribute):\n        return raw_data.find(key).get(attribute)\n\n    def extract_delta(self, raw_data):\n        try:\n            return int(self.extract(raw_data, \"RANK\", \"DELTA\"))\n        except AttributeError:\n            return 0\n\n    def extract_rank(self, raw_data):\n        try:\n            return int(self.extract(raw_data, \"REACH\", \"RANK\"))\n        except AttributeError:\n            return 0\n\n    def extract_country_rank(self, raw_data):\n        try:\n            return int(self.extract(raw_data, \"COUNTRY\", \"RANK\"))\n        except AttributeError:\n            return 0\n\n    def extract_country_code(self, raw_data):\n        try:\n            return self.extract(raw_data, \"COUNTRY\", \"CODE\")\n        except AttributeError:\n            return \"\"\n\n    def extract_country_name(self, raw_data):\n        try:\n            return self.extract(raw_data, \"COUNTRY\", \"NAME\")\n        except AttributeError:\n            return \"\"\n\n    def extract_url(self, raw_data):\n        try:\n            return self.extract(raw_data, \"POPULARITY\", \"URL\").strip(\"/\")\n        except AttributeError:\n            return \"\"\n\n    def build_url(self, website_url):\n        return self.api_url + \"?cli=\" + str(self.cli) + \"\u0026url=\" + website_url\n\n    def read_from_url(self, url):\n        try:\n            return urllib.urlopen(url).read()\n        except IOError:\n            return None\n\n    def get_alexa_data(self, website_url):\n        request_url = self.build_url(website_url)\n        data_xml = self.read_from_url(request_url)\n        if data_xml == None:\n            print(self.get_error_message(self.UNRETRIEVED_DATA), self.clean_url(website_url))\n            sys.exit()\n        return ET.ElementTree(ET.fromstring(data_xml)).getroot().find(\"SD\")\n\n    def update_url_data(self, website_url):\n        raw_data = self.get_alexa_data(website_url)\n        self.alexa_data[website_url] = {\n            \"delta\": self.extract_delta(raw_data),\n            \"global_rank\": self.extract_rank(raw_data),\n            \"top_country_rank\": self.extract_country_rank(raw_data),\n            \"top_country_code\": self.extract_country_code(raw_data),\n            \"top_country_name\": self.extract_country_name(raw_data),\n            \"url\": self.extract_url(raw_data),\n            \"last_update\": time.time()\n        }\n\n    def save_data_to_cache(self):\n        if not os.path.exists(self.cache_file_dir):\n            os.makedirs(self.cache_file_dir)\n        with open(self.cache_file_name, 'w') as outfile:\n            json.dump(self.alexa_data, outfile)\n\n    def load_data_from_cache(self):\n        if os.path.exists(self.cache_file_name):\n            with open(self.cache_file_name, 'r') as outfile:\n                try:\n                    return json.load(outfile)\n                except ValueError:\n                    os.remove(self.cache_file_name)\n                    pass\n        return {}\n\n    def is_valid_url(self, website_url):\n        test = urlparse(website_url)\n        if test.netloc == \"\":\n            return False\n        return True\n\n    def is_user_online(self):\n        if self.read_from_url(self.is_online_test_url) == None:\n            return False\n        return True\n\n    def is_url_cached(self, website_url):\n        if (website_url in self.alexa_data):\n            if(self.get_data(website_url, \"last_update\") \u003e time.time() - self.polling_interval):\n                return True\n        return False\n\n    def update(self):\n        if self.cache:\n            self.alexa_data = self.load_data_from_cache()\n        if self.is_user_online():\n            for website_url in self.website_url_list:\n                if not self.is_url_cached(website_url):\n                    self.update_url_data(website_url)\n        if(len(self.alexa_data) == 0):\n            seconds_waited = 0\n            while(not self.is_user_online() and self.max_offline_wait \u003e seconds_waited):\n                time.sleep(1)\n                seconds_waited = seconds_waited + 1\n            if(self.max_offline_wait \u003e seconds_waited):\n                self.update()\n            else:\n                print(self.get_error_message(self.OFFLINE))\n                sys.exit()\n        if self.cache:\n            self.save_data_to_cache()\n\n    def get_global_alexa_rank(self, website_url):\n        return self.get_data(website_url, \"global_rank\")\n\n    def get_top_country_alexa_rank(self, website_url):\n        return self.get_data(website_url, \"top_country_rank\")\n\n    def get_alexa_delta(self, website_url):\n        return self.get_data(website_url, \"delta\")\n\n    def get_top_country_alexa_code(self, website_url):\n        return self.get_data(website_url, \"top_country_code\")\n\n    def get_popularity_icon(self):\n        if self.use_black_icons == False:\n            return self.popularity_icon\n        return self.black_popularity_icon\n\n    def get_flag_icon(self, code):\n        if self.use_black_icons == False and code in self.flags_icons:\n            return self.flags_icons[code]\n        return self.default_flag_icon + \" \" + code + \": \"\n\n    def clean_url(self, website_url):\n        if website_url not in self.alexa_data or self.alexa_data[website_url][\"url\"] == \"\":\n            website_url = website_url.replace(\"http://\", \"\")\n            website_url = website_url.replace(\"https://\", \"\")\n            website_url = website_url.replace(\"www.\", \"\")\n            return website_url\n        return self.alexa_data[website_url][\"url\"]\n\n    def build_bitbar(self):\n        for website_url in self.website_url_list:\n            bitbar = self.clean_url(website_url) + \":\"\n            if self.show_global:\n                bitbar = bitbar + self.get_popularity_icon() + str(self.get_global_alexa_rank(website_url)) + \" \"\n            if self.show_top_country:\n                bitbar = bitbar + self.get_flag_icon(self.get_top_country_alexa_code(website_url)) + \\\n                    str(self.get_top_country_alexa_rank(website_url))\n            if self.show_delta:\n                bitbar = bitbar + self.delta_icon + str(self.get_alexa_delta(website_url))\n            print(bitbar)\n            print(\"---\")\n\n###################\n#  USAGE EXAMPLES #\n###################\n\n# With single url\n# myAlexa = Alexa.from_url(\"https://twitchtimer.com\")\n\n# Full parameters bonanza\n#\n# cache: put this to true to cache to /tmp/alexa_rank_cache/alexa_cache.json\n# polling_interval: seconds of duration of caching file\n# show_global: put this to true to show the global rank\n# show_top_country: put this to true to show the top country rank\n# show_delta: put this to true to show how the website rank has varied in the last period\n# use_black_icons: for those who do not like color in their menu bar\n# max_offline_wait: how many seconds should be waited brefore triyng again to read data and eventually show an \"You are offline\" error.\n# user_language: the language in which errors and messages should be shown, if available\n#\n# myAlexa = Alexa([\"twitchtimer.com\", \"google.com\"], cache=True, polling_interval=60*60, show_global=True, show_top_country=True, show_delta=False, use_black_icons=False, max_offline_wait=15, user_language=\"en\")\n\nmyAlexa = Alexa([\"https://twitchtimer.com\"], use_black_icons=True, show_top_country=False)\nmyAlexa.build_bitbar()\n"
				}
			],
			"path": "Dev/alexa_rank.1h.py",
			"filename": "alexa_rank.1h.py",
			"dir": "Dev",
			"docsPlugin": "Dev/alexa_rank.1h.py.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Alexa rank checker",
			"version": "v1.1",
			"author": "Luca Cappelletti",
			"authors": [
				{
					"name": "Luca Cappelletti",
					"githubUsername": "LucaCappelletti94",
					"imageURL": "https://avatars.githubusercontent.com/u/7738570?v=4",
					"bio": "Waiting for CRISPR vim macros.",
					"primary": true
				}
			],
			"desc": "Displays Alexa rank from given websites",
			"imageURL": "http://i.imgur.com/30YjoCF.jpg",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.710919Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Tutorial/alternate_options.sh",
					"filename": "alternate_options.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eAlternate Options Tutorial\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMat Ryer\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ematryer\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/EDYR52G.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eExample of how to include alternate items that replace the one before it when the Option key is pressed.\u003c/bitbar.desc\u003e\necho \"Hello\"\necho \"Option key is pressed | alternate=true\"\n\necho \"Another\""
				}
			],
			"path": "Dev/Tutorial/alternate_options.sh",
			"filename": "alternate_options.sh",
			"dir": "Dev/Tutorial",
			"docsPlugin": "Dev/Tutorial/alternate_options.sh.html",
			"docsCategory": "Dev/Tutorial.html",
			"pathSegments": [
				"Dev",
				"Tutorial"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Tutorial",
					"text": "Tutorial",
					"isLast": true
				}
			],
			"title": "Alternate Options Tutorial",
			"version": "v1.0",
			"author": "Mat Ryer",
			"authors": [
				{
					"name": "Mat Ryer",
					"githubUsername": "matryer",
					"imageURL": "https://avatars.githubusercontent.com/u/101659?v=4",
					"bio": "Building pace.dev and firesearch.dev - Gopher, developer, speaker, author (Go Programming Blueprints) - BitBar app getbitbar.com - Co-creator Gopherize.me",
					"primary": true
				}
			],
			"desc": "Example of how to include alternate items that replace the one before it when the Option key is pressed.",
			"imageURL": "http://i.imgur.com/EDYR52G.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.23042Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/appcenter-status.1m.rb",
					"filename": "appcenter-status.1m.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eAppcenter Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRishabh Tayal\u003c/bitbar.author\u003e\n# \u003cbitbar.desc\u003eGet status for all your Appcenter apps\u003c/bitbar.desc\u003e\n# \u003cbitbar.author.github\u003erishabhtayal\u003c/bitbar.author.github\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n\nrequire 'json'\nrequire 'uri'\nrequire 'net/http'\nrequire 'open-uri'\nrequire 'base64'\n\n# ----------------------------CONFIGURE THE VALUES----------------------------\n\nAPPCENTER_API_TOKEN = 'XXXXXXXXXXXXXXXXXXXXXXXX'.freeze\n\n# ----------------------------IGNORE THE LINES BELOW THIS---------------------\n\n# ----------------------------IGNORE THE LINES BELOW THIS----------------------------\nclass Appcenter\n  def self.list_apps\n    url = URI('https://api.appcenter.ms/v0.1/apps/')\n\n    http = Net::HTTP.new(url.host, url.port)\n    http.use_ssl = true\n\n    request = Net::HTTP::Get.new(url)\n    request['X-API-Token'] = APPCENTER_API_TOKEN\n\n    response = http.request(request)\n    apps = JSON.parse(response.read_body)\n    apps\n  end\n\n  def self.branches(owner, app_id)\n    url = URI(\"https://api.appcenter.ms/v0.1/apps/#{owner}/#{app_id}/branches\")\n\n    http = Net::HTTP.new(url.host, url.port)\n    http.use_ssl = true\n\n    request = Net::HTTP::Get.new(url)\n    request['X-API-Token'] = APPCENTER_API_TOKEN\n\n    response = http.request(request)\n    app_status = JSON.parse(response.read_body)\n    app_status\n  end\nend\n\napps = Appcenter.list_apps\nputs \"Appcenter (#{apps.count})\"\n\nputs '---'\n\napps.each do |app|\n  app_name = app['display_name']\n  app_id = app['name']\n  owner = app['owner']['name']\n  image_url = app['icon_url']\n  # puts \"calling: #{app_id}\"\n  branches = Appcenter.branches(owner, app_id)\n  if branches.is_a?(Array)\n    branches = branches.select { |branch| branch['branch']['name'] == 'master' }\n  end\n\n  # require 'pry'\n  # binding.pry\n  color = '#000000'\n  if branches.count \u003e 0 \u0026\u0026 branches.is_a?(Array) \u0026\u0026 !branches.first['lastBuild'].nil?\n    status_string = branches.first['lastBuild']['status']\n    color = '#ff0000' if status_string == 'failed'\n  else\n    color = 'gray'\n  end\n\n  if image_url.nil?\n    puts \"#{app_name} (#{owner}) | href=https://appcenter.ms/orgs/#{owner}/apps/#{app_name}/build/branches color=#{color}\"\n  else\n    # TODO: Fix the image not showing issue\n    # image = Base64.encode64(open(image_url, \u0026:read))\n    puts \"#{app_name} (#{owner}) | href=https://appcenter.ms/orgs/#{owner}/apps/#{app_name}/build/branches color=#{color}\"\n  end\nend\n"
				}
			],
			"path": "Dev/appcenter-status.1m.rb",
			"filename": "appcenter-status.1m.rb",
			"dir": "Dev",
			"docsPlugin": "Dev/appcenter-status.1m.rb.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Appcenter Status",
			"version": "v1.0",
			"author": "Rishabh Tayal",
			"authors": [
				{
					"name": "Rishabh Tayal",
					"githubUsername": "rishabhtayal",
					"imageURL": "https://avatars.githubusercontent.com/u/2100166?v=4",
					"bio": "iOS Developer at Sears\r\n\r\nhttps://resume.github.io/?rishabhtayal",
					"primary": true
				}
			],
			"desc": "Get status for all your Appcenter apps",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.725476Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/totp.20s.sh",
					"filename": "totp.20s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eAuthenticator\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eGunasekaran Namachivayam\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003egunasekar\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin will generate the TOTP tokens and allows to copy them to clipboard\u003c/bitbar.desc\u003e\n\n# Hack for language not being set properly and unicode support\nexport LANG=\"${LANG:-en_US.UTF-8}\"\n\n# update the key value pairs as per your requirement\n# Key - for your reference to identify a TOTP Account\n# Value - base32 secret key corresponding to the TOTP Account\ntotp_secrets=( \"OpenVPN:2b2drladcdoxtpheuom6t4zjsr6tq7ix\"\n        \"BitBucket:2b2drladcdoxtpheuom6t4zjsr6tq7ix\"\n        \"GitHub:2b2drladcdoxtpheuom6t4zjsr6tq7ix\"\n        \"Okta:2b2drladcdoxtpheuom6t4zjsr6tq7ix\"\n        \"GrabTaxi:2b2drladcdoxtpheuom6t4zjsr6tq7ix\" )\n\n# oath-toolkit needs to be installed. Use 'brew install oath-toolkit'\n# update the appropriate path of oathtool binary below\noathtool=\"/usr/local/bin/oathtool\"\n\nfunction get-totp {\n  $oathtool --totp -b \"$1\"\n}\n\nif [[ \"$1\" == \"copy\" ]]; then\n  echo -n \"$(echo -n \"$2\")\" | pbcopy\n  exit\nfi\n\necho \"⏳\"\necho '---'\necho \"Clear Clipboard | bash='$0' param1=copy param2=' ' terminal=false\"\necho \"---\"\n\nfor secret in \"${totp_secrets[@]}\" ; do\n    KEY=\"${secret%%:*}\"\n    VALUE=\"${secret##*:}\"\n    token=$( get-totp \"$VALUE\" )\n    echo \"$KEY | bash='$0' param1=copy param2='$token' terminal=false\"\ndone\n"
				}
			],
			"path": "Dev/totp.20s.sh",
			"filename": "totp.20s.sh",
			"dir": "Dev",
			"docsPlugin": "Dev/totp.20s.sh.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Authenticator",
			"version": "v0.1",
			"author": "Gunasekaran Namachivayam",
			"authors": [
				{
					"name": "Gunasekaran Namachivayam",
					"githubUsername": "gunasekar",
					"imageURL": "https://avatars.githubusercontent.com/u/914111?v=4",
					"bio": "Software Engineer/ Gopher. Worked @grab, @Microsoft",
					"primary": true
				}
			],
			"desc": "This plugin will generate the TOTP tokens and allows to copy them to clipboard",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:52.340858Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/average_app_store_review_times.1h.rb",
					"filename": "average_app_store_review_times.1h.rb",
					"content": "#!/usr/bin/env ruby\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eAverage Review Times\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emfks17\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emfks17\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eAverage App Store Review Times\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/mfks17/bitbar-plugin-AppStore/master/Screenshots/01.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby, nokogiri\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/mfks17/bitbar-plugin-AppStore\u003c/bitbar.abouturl\u003e\n\nrequire 'open-uri'\nrequire 'nokogiri'\n\nurl = 'http://appreviewtimes.com/'\n\ncharset = nil\nhtml = open(url) do |f|\n  charset = f.charset\n  f.read\nend\n\ndoc = Nokogiri::HTML.parse(html, nil, charset)\n\nputs 'Average Review Times'\nputs '---'\nputs '📱  iOS App Store ' + doc.xpath('/html/body/div[2]/div/div[2]/div[1]/p[1]').text\n\nputs '💻  Mac App Store ' + doc.xpath('/html/body/div[2]/div/div[3]/div[1]/p[1]').text\n"
				}
			],
			"path": "Dev/average_app_store_review_times.1h.rb",
			"filename": "average_app_store_review_times.1h.rb",
			"dir": "Dev",
			"docsPlugin": "Dev/average_app_store_review_times.1h.rb.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Average Review Times",
			"version": "v0.1.2",
			"author": "mfks17",
			"authors": [
				{
					"name": "mfks17",
					"githubUsername": "mfks17",
					"imageURL": "https://avatars.githubusercontent.com/u/1155040?v=4",
					"bio": "programmer 📱 ",
					"primary": true
				}
			],
			"desc": "Average App Store Review Times",
			"imageURL": "https://raw.githubusercontent.com/mfks17/bitbar-plugin-AppStore/master/Screenshots/01.png",
			"dependencies": [
				"ruby",
				"nokogiri"
			],
			"aboutURL": "https://github.com/mfks17/bitbar-plugin-AppStore",
			"lastUpdated": "2021-03-08T15:21:50.87279Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/backlog-show-my-task.1m.rb",
					"filename": "backlog-show-my-task.1m.rb",
					"content": "#!/usr/bin/env ruby\n# coding: utf-8\n\n# \u003cbitbar.title\u003eBacklog Show My Task\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ehikouki\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ehikouki\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow Backlog open ticket for mine\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/hikouki/bitbar-backlog/master/preview.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/hikouki\u003c/bitbar.abouturl\u003e\n\nrequire 'net/http'\nrequire 'uri'\nrequire 'json'\n\n# a6140cbf6e84a0bAffb0cX49138fc5687310b518\n#   or\n# launchctl setenv BACKLOG_ACCESS_TOKEN a6140cbf6e84a0bAffb0cX49138fc5687310b518\nTOKEN = ENV[\"BACKLOG_ACCESS_TOKEN\"] || ''\n# https://xxxx.backlog.jp\n#   or\n# launchctl setenv BACKLOG_URL https://xxxx.backlog.jp\nBACKLOG_URL = ENV[\"BACKLOG_URL\"] || ''\n\nbegin\n\n  myself_api = URI.parse(\"#{BACKLOG_URL}/api/v2/users/myself\")\n  myself_api.query = URI.encode_www_form(apiKey: TOKEN)\n\n  myself_res = Net::HTTP.start(myself_api.host, myself_api.port, use_ssl: myself_api.scheme == 'https') do | http |\n    http.get(myself_api.request_uri)\n  end\n\n  raise \"error #{myself_res.code} #{myself_res.message}\" if myself_res.code != '200'\n\n  me = JSON.parse(myself_res.body, symbolize_names: true)\n\n  issues_api = URI.parse(\"#{BACKLOG_URL}/api/v2/issues\")\n  issues_api.query = URI.encode_www_form(apiKey: TOKEN, 'assigneeId[]' =\u003e me[:id], count: 100)\n\n  issues_res = Net::HTTP.start(issues_api.host, issues_api.port, use_ssl: issues_api.scheme == 'https') do | http |\n    http.get(issues_api.request_uri)\n  end\n\n  raise \"error #{issues_res.code} #{issues_res.message}\" if issues_res.code != '200'\n\n  issues = JSON.parse(issues_res.body, symbolize_names: true)\n\n  projects = Hash.new do | h, k |\n    h[k] = {\n      name: \"\u003cproject name\u003e\",\n      issue_count: 0,\n      issue_type_groups: Hash.new do | h1, k1 |\n        h1[k1] = {\n          name: \"\u003ctype name\u003e\",\n          color: \"\u003ctype color\u003e\",\n          issue_status_groups: Hash.new do | h2, k2 |\n            h2[k2] = {\n              name: \"\u003cstatus name\u003e\",\n              issues: []\n            }\n          end\n        }\n      end\n    }\n  end\n\n  issues.each do | issue |\n    project_id = issue[:projectId]\n    issue_type_id = issue[:issueType][:id]\n    issue_status_id = issue[:status][:id]\n\n    projects[project_id][:issue_count] += 1\n    projects[project_id][:issue_type_groups][issue_type_id][:name] = issue[:issueType][:name]\n    projects[project_id][:issue_type_groups][issue_type_id][:color] = issue[:issueType][:color]\n    projects[project_id][:issue_type_groups][issue_type_id][:issue_status_groups][issue_status_id][:name] = issue[:status][:name]\n    projects[project_id][:issue_type_groups][issue_type_id][:issue_status_groups][issue_status_id][:issues].push(\n      {\n        key: issue[:issueKey],\n        summary: issue[:summary]\n      }\n    )\n  end\n\n  puts issues.empty? ? \"◈ | color=#7d7d7d\" : \"◈ #{issues.count}\"\n  puts \"---\"\n  puts \"Backlog | color=black href=#{BACKLOG_URL}\"\n  puts \"---\"\n\n  projects.each do | project_id, project |\n    project_api = URI.parse(\"#{BACKLOG_URL}/api/v2/projects/#{project_id}\")\n    project_api.query = URI.encode_www_form(apiKey: TOKEN)\n\n    project_res = Net::HTTP.start(project_api.host, project_api.port, use_ssl: project_api.scheme == 'https') do | http |\n      http.get(project_api.request_uri)\n    end\n\n    raise \"error #{project_res.code} #{project_res.message}\" if project_res.code != '200'\n\n    project_info = JSON.parse(project_res.body, symbolize_names: true)\n\n    puts \"#{project_info[:name]}: #{project[:issue_count]} | size=11\"\n    project[:issue_type_groups].each do | _, type_group |\n      puts \"➠ #{type_group[:name]} | color=#{type_group[:color]} size=11\"\n      type_group[:issue_status_groups].each do | _, status_group |\n        puts \"[#{status_group[:name]}] | color=#58BE89 size=11\"\n        status_group[:issues].each do | issue |\n          prefix = status_group[:issues].last == issue ? \"└\" : \"├\"\n          puts \"#{prefix} #{issue[:summary]} | color=black href=#{BACKLOG_URL}/view/#{issue[:key]} size=11\"\n        end\n      end\n    end\n    puts \"---\"\n  end\n\n  puts \"---\"\n  puts \"Refresh | color=#7d7d7d refresh=true\"\n\nrescue =\u003e e\n  puts \"◈ ! | color=#ECB935\"\n  puts \"---\"\n  puts \"Exception: #{$!}\"\n  puts e.backtrace\nend\n"
				}
			],
			"path": "Dev/backlog-show-my-task.1m.rb",
			"filename": "backlog-show-my-task.1m.rb",
			"dir": "Dev",
			"docsPlugin": "Dev/backlog-show-my-task.1m.rb.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Backlog Show My Task",
			"version": "v1.0.0",
			"author": "hikouki",
			"authors": [
				{
					"name": "Kouki Higashikawa",
					"githubUsername": "hikouki",
					"imageURL": "https://avatars.githubusercontent.com/u/15326035?v=4",
					"bio": ":airplane:",
					"primary": true
				}
			],
			"desc": "Show Backlog open ticket for mine",
			"imageURL": "https://raw.githubusercontent.com/hikouki/bitbar-backlog/master/preview.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/hikouki",
			"lastUpdated": "2021-03-08T15:21:50.89196Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/bamboo_build_status.1m.sh",
					"filename": "bamboo_build_status.1m.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eBamboo Build Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eNathan Jovin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003enjovin\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays Bamboo build status\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/RPYrUok.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ejq,curl\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/Dev/Bamboo/bamboo_build_status.1m.sh\u003c/bitbar.abouturl\u003e\n#\n# Displays the status of a single Bamboo build\n# Runs 2 REST calls - one to find out if a build is currently runnning and another to get the last build status if one is not currently running\n#\n# CONFIGURATION\n# All of the below options must be filled in\n\nUSERNAME=\"YOUR_BAMBOO_USERNAME\"\nPASSWORD=\"YOUR_BAMBOO_PASSWORD\"\nSERVER=\"YOUR_BAMBOO_SERVER\"\nPLAN=\"YOUR_BAMBOO_BUILD_PLAN\"\nJQPATH=\"jq\"\n\n# END CONFIGURATION\n\nPLANRESULT=$(curl -s --user $USERNAME:$PASSWORD  $SERVER/builds/rest/api/latest/plan/$PLAN.json\\?os_authType=basic)\nBUILDRESULT=$(curl -s --user $USERNAME:$PASSWORD  $SERVER/builds/rest/api/latest/result/$PLAN/latest.json\\?os_authType=basic)\nISBUILDING=$(echo \"$PLANRESULT\" | $JQPATH '.isBuilding')\n\nRELATIVETIME=$(echo \"$BUILDRESULT\" | $JQPATH '.buildRelativeTime')\nBUILDTIME=$(echo \"$BUILDRESULT\" | $JQPATH '.buildDurationInSeconds')\n#TIME=$(echo \"$BUILDRESULT\" | $JQPATH '.buildRelativeTime')\n\nif [ \"$ISBUILDING\" = \"true\" ]\nthen\n    # This is displayed when the build is currently running, feel free to customize\n    echo \"Building...\"\n    echo ---\nelse\n    STATE=$(echo \"$BUILDRESULT\" | $JQPATH '.state')\n    # We display the exact state as displayed in the JSON data.\n    echo \"${STATE//\\\"/}\"\nfi\n\necho ---\n# Show how long ago the last build was done\necho \"Completed: ${RELATIVETIME//\\\"/}\"\n# Show time it took to complete the last build\necho \"Build time: $BUILDTIME seconds\"\n# Show a link to the builds page\necho \"Build page | href=$SERVER/builds/browse/$PLAN\"\n"
				}
			],
			"path": "Dev/bamboo_build_status.1m.sh",
			"filename": "bamboo_build_status.1m.sh",
			"dir": "Dev",
			"docsPlugin": "Dev/bamboo_build_status.1m.sh.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Bamboo Build Status",
			"version": "v1.0",
			"author": "Nathan Jovin",
			"authors": [
				{
					"name": "Nathan Jovin",
					"githubUsername": "njovin",
					"imageURL": "https://avatars.githubusercontent.com/u/1540436?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays Bamboo build status",
			"imageURL": "http://i.imgur.com/RPYrUok.png",
			"dependencies": [
				"jq",
				"curl"
			],
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/Dev/Bamboo/bamboo_build_status.1m.sh",
			"lastUpdated": "2021-03-08T15:21:50.912612Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/getopenPRs.10m.sh",
					"filename": "getopenPRs.10m.sh",
					"content": "#!/bin/bash\n# shellcheck disable=SC2034\n# shellcheck disable=SC2154\n# shellcheck source=/dev/null\n\n# \u003cbitbar.title\u003eBitbucket Pull Requests\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMikey Beck\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emikeybeck\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows Bitbucket open pull request information\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/mikeybeck/bitbar-bitbucketPRs/master/screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ejq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/mikeybeck/bitbar-bitbucketPRs\u003c/bitbar.abouturl\u003e\n\n# Relevant documentation for BitBucket: http://web.archive.org/web/20150530151816/https://confluence.atlassian.com/display/BITBUCKET/pullrequests+Resource#pullrequests\n\nUSERNAME=\nPASSWORD=\n\nREPO_OWNER=\nREPO_SLUG=\n\nNUM_APPROVALS_REQ=2  # Number of approvals required for pull request\n\n# Export PATH\nexport PATH=\"/usr/local/bin:/usr/bin:$PATH\"\n\n# Base64 icon to use in system bar\nicon=\"iVBORw0KGgoAAAANSUhEUgAAABQAAAAWCAYAAADAQbwGAAAAAXNSR0IArs4c6QAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAAsTAAALEwEAmpwYAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAACK0lEQVQ4EbWUO2tUQRSAb2K0CMgGsVCUoCCBlCIqNlY+QImPxsLaH5AiIhYWQsDSQgSxsRHUwsJGLYRNFbXRgGDtgqKCqEl8Jz6+b3bO3SFeDRYe+PY85txzZs7euVXVkxU9M1nh9+f4AHprtvuyXlYNk7Ef1uRMi4Rcw7iUHePSWDh2cIaEj9CBOTgOIRcxfsK5CBQ6TlKEqmo3ng8czNEJ9CdYBxfAtR/wAqZhCk7DKlB+KzpJsJ2Wej8zmA/BYgvwPdv6wX3s1aDESZMzxu9nGE1eVR1Bf4AdcAui6Dy2I/kC7tj4DVDqgjHYKwSd3R34Bh5J8Ti3wYfPg7IdnoExc2Mj6ehRucXCu5z0GK2Us3mEfzlFuz/+4xaUvd1QNVC+FoMEPfYQODOLOTdzFmEPOIImsWiS2J2OwfDVzkixmMXfwl1YCX+Ucod1F7JL2xm702gWjRqLRlLj4pKghf5azPx/KbikfrP7Xws6+Jidc1uuWby/brV+vcqHZl3JElct/FLHM971kHg2NYmEk6y6Qz8A6kOg1N0Lewv2K3gD5sb1w+zKLpSvxuHsn0LbdW32bVoe0VtzM8dG0N6wcahlEmuq9rpGB3U0x3xf4yQbsN/DxrymOgttjUjy7u6ETaDsg/XwVAfxWKK8BD/EJ3SyHEPPhBP6OoafLDt5fLsq0VQ75ulovsIDeA5PoAVpLn3o6H4AexvcAz+eTWIDb8xmcGev4Sp45/t/AVL9dQ7qDO64AAAAAElFTkSuQmCC\"\nresponse=$(curl -s -X GET --user $USERNAME:$PASSWORD \"https://bitbucket.org/api/2.0/repositories/$REPO_OWNER/$REPO_SLUG/pullrequests/\")\njson=$(echo \"$response\" | jq -r -c '[.values[] | {title: .title, author: .author.display_name, num_comments: .comment_count, link_html: .links.html.href, link_status: .links.statuses.href, link_self: .links.self.href}]')\nprs=$(echo \"$response\" | jq -r -c '(.size|tostring)')\n\nnum_approved_by_me=0\ndeclare -a lines\n\nfor pr in $(echo \"${json}\" | jq -r '.[] | @base64'); do\n    _jq() {\n     echo \"${pr}\" | base64 --decode | jq -r \"${1}\"\n    }\n\n   build_state=$(curl -s -X GET --user $USERNAME:$PASSWORD \"$(_jq '.link_status')\" | jq -r '.values[].state')\n   self=$(curl -s -X GET --user $USERNAME:$PASSWORD \"$(_jq '.link_self')\")\n   num_approvals=$(echo \"$self\" | jq -r '[select(.participants[].approved)] | length')\n   colour=\"red\"\n   if [[ $build_state == \"SUCCESSFUL\" ]]; then\n    colour=\"green\" # Colour to show if PR is good to go (approved \u0026 build passed)\n    if [ \"$num_approvals\" -lt \"$NUM_APPROVALS_REQ\" ]; then\n      colour=\"black\" # Colour to show if PR build passed but not approved\n    fi\n   fi\n  \n   approved_by_me=$(echo \"$self\" | jq -r --arg USERNAME \"$USERNAME\" '.participants[] | select(.user.username == $USERNAME) | .approved')\n   if [[ $approved_by_me == \"true\" ]]; then\n    approved_by_me=\":heavy_check_mark:\"\n    ((num_approved_by_me++))\n   else\n    approved_by_me=\"-\"\n   fi\n\n  line=\"$approved_by_me $(_jq '.author') - $(_jq '.title') ┃ :heavy_check_mark: $num_approvals ┃ :speech_balloon: $(_jq '.num_comments') | href=$(_jq '.link_html') color=$colour\"\n  lines+=(\"$line\")\n\ndone\n\n# Print everything out\n\nnum_unapproved_by_me=$((prs - num_approved_by_me))\necho \"$prs / $num_unapproved_by_me | templateImage=$icon dropdown=false\" # Display number of PRs in menu bar\necho \"---\"\necho \"View all open pull requests | href=https://bitbucket.org/$REPO_OWNER/$REPO_SLUG/pull-requests/\"\necho \"---\"\n\nfor line in \"${lines[@]}\"\ndo\n  echo \"$line\" # Display open PRs in dropdown\ndone\n"
				}
			],
			"path": "Dev/getopenPRs.10m.sh",
			"filename": "getopenPRs.10m.sh",
			"dir": "Dev",
			"docsPlugin": "Dev/getopenPRs.10m.sh.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Bitbucket Pull Requests",
			"version": "1.0",
			"author": "Mikey Beck",
			"authors": [
				{
					"name": "Mikey Beck",
					"githubUsername": "mikeybeck",
					"imageURL": "https://avatars.githubusercontent.com/u/468643?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows Bitbucket open pull request information",
			"imageURL": "https://raw.githubusercontent.com/mikeybeck/bitbar-bitbucketPRs/master/screenshot.png",
			"dependencies": [
				"jq"
			],
			"aboutURL": "https://github.com/mikeybeck/bitbar-bitbucketPRs",
			"lastUpdated": "2021-03-08T15:21:51.341968Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/stash-pull-requests.2m.rb",
					"filename": "stash-pull-requests.2m.rb",
					"content": "#!/usr/bin/env ruby\n\nrequire 'duration'\nrequire 'json'\nrequire 'rest-client'\nrequire 'pp'\n\n# rubocop:disable all\n# \u003cbitbar.title\u003eBitbucket Server (Stash) Pull Requests\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAdam Snodgrass\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003easnodgrass\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays a list of open pull requests in for all repositories in a specified project on Bitbucket Server (aka Stash) in which the user is a participant. Results are sorted by last update (ascending), and are prefixed with a character to indicate participation type: A for author, R for reviewer, and nothing for other (e.g. added a comment). Each entry is clickable and will take you to the pull request page.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/9vp4D6e.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003erest-client gem, ruby_duration gem\u003c/bitbar.dependencies\u003e\n# rubocop:enable all\n\n# Change these, or use a wrapper script and pass in via ARGV.\n# Project is optional, and will be ~user if not specified.\nUSER = nil\nPASS = nil\nHOST = nil\nPROJECT = nil\n\n# Stash RESTful API\nclass Stash\n  def initialize(options = {})\n    @host = options.delete(:host) || 'localhost'\n    @port = options.delete(:port) || 443\n    @user = options.delete(:user)\n    @pass = options.delete(:pass)\n    @baseurl = \"https://#{@host}:#{@port}/rest/api\"\n    @rest = RestClient::Resource.new @baseurl, @user, @pass\n  end\n\n  # Returns an array of repository names for the given project\n  def list_repos(project, repos = [], start = 0)\n    url = \"1.0/projects/#{project}/repos\"\n    url \u003c\u003c \"?start=#{start}\" if start \u003e 0\n    j = JSON.parse(@rest[url].get)\n    repos.concat(j['values'].map { |v| v['slug'] })\n    list_repos(project, repos, j['nextPageStart']) unless j['isLastPage']\n    repos\n  end\n\n  # Return an array of pull request IDs for a repo\n  # where the user is some kind of participant\n  def pull_requests(project, repo, user, prs = [], start = 0)\n    url = \"1.0/projects/#{project}/repos/#{repo}/pull-requests\"\n    url \u003c\u003c \"?start=#{start}\u0026username.1=#{user}\"\n    j = JSON.parse(@rest[url].get)\n    prs.concat(j['values'].map { |v| v['id'] })\n    unless j['isLastPage']\n      list_prs(project, repo, user, prs, j['nextPageStart'])\n    end\n    prs\n  end\n\n  # Return the message body for a pull request\n  def pull_request(project, repo, id)\n    url = \"1.0/projects/#{project}/repos/#{repo}/pull-requests/#{id}\"\n    JSON.parse(@rest[url].get)\n  end\nend\n\n# main plugin class\nclass StashPRPlugin\n  def initialize(user, pass, host, project = nil)\n    @user = user\n    @host = host\n    @stash = Stash.new(\n      host: host,\n      user: user,\n      pass: pass\n    )\n    @project = project || \"~#{user}\"\n  end\n\n  def output\n    prs = with_error_handling { all_user_prs }\n\n    puts \"🔧 Pull Requests (#{prs.size})\"\n    puts '---'\n    prs.each { |pr| puts output_line(pr) }\n    puts '---'\n    puts 'Refresh | refresh=true'\n  end\n\n  private\n\n  def all_user_prs\n    prs = []\n    @stash.list_repos(@project).each do |repo|\n      msg(\"Trying #{@project}/#{repo}\")\n      @stash.pull_requests(@project, repo, @user).each do |id|\n        msg(\"Adding PR##{id}\")\n        prs \u003c\u003c @stash.pull_request(@project, repo, id)\n      end\n    end\n    prs.sort { |a, b| b['updatedDate'] \u003c=\u003e a['updatedDate'] }\n  end\n\n  def with_error_handling\n    yield\n  rescue SocketError =\u003e e\n    puts \"😡 Pull Requests\"\n    puts '---'\n    puts e\n  rescue RestClient::RequestTimeout\n    puts \"😡 Pull Requests\"\n    puts '---'\n    puts \"Connection to #{@host} timed out\"\n  end\n\n  # rubocop:disable Metrics/AbcSize\n  def output_line(pr)\n    format('\u003c%s\u003e %s/%s - %s [%s] | href=%s',\n           status(pr),\n           pr['toRef']['repository']['project']['key'],\n           pr['toRef']['repository']['slug'],\n           pr['title'],\n           duration(pr['updatedDate'] / 1000),\n           pr['links']['self'].first['href']\n          )\n  end\n  # rubocop:enable Metrics/AbcSize\n\n  def status(pr)\n    return 'A' if author?(pr)\n    return 'R' if reviewer?(pr)\n    ' '\n  end\n\n  def reviewer?(pr)\n    !pr['reviewers'].select { |r| r['user']['slug'].eql?(@user) }.empty?\n  end\n\n  def author?(pr)\n    pr['author']['user']['slug'].eql?(@user)\n  end\n\n  # rubocop:disable Metrics/AbcSize\n  def duration(tstamp)\n    return 'never' if tstamp == 0\n    duration = ''\n    d = Duration.new(Time.now.to_f - tstamp)\n    duration \u003c\u003c d.format('%w %~w ') if d.weeks \u003e 0\n    duration \u003c\u003c d.format('%d %~d ') if d.days \u003e 0\n    duration \u003c\u003c d.format('%H:%M:%S') if d.weeks \u003c= 0\n    duration.strip\n  end\n  # rubocop:enable Metrics/AbcSize\n\n  def msg(text)\n    return if ENV['BitBar']\n    puts text\n  end\n\n  def debug(obj)\n    return if ENV['BitBar']\n    pp obj\n  end\nend\n\nif ARGV.empty?\n  ARGV \u003c\u003c USER\n  ARGV \u003c\u003c PASS\n  ARGV \u003c\u003c HOST\n  ARGV \u003c\u003c PROJECT unless PROJECT.nil?\nend\nplugin = StashPRPlugin.new(*ARGV)\nplugin.output\n"
				}
			],
			"path": "Dev/stash-pull-requests.2m.rb",
			"filename": "stash-pull-requests.2m.rb",
			"dir": "Dev",
			"docsPlugin": "Dev/stash-pull-requests.2m.rb.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Bitbucket Server (Stash) Pull Requests",
			"version": "v1.0.0",
			"author": "Adam Snodgrass",
			"authors": [
				{
					"name": "Adam Snodgrass",
					"githubUsername": "asnodgrass",
					"imageURL": "https://avatars.githubusercontent.com/u/6187908?v=4",
					"bio": "Sapient ambulatory bio-software",
					"primary": true
				}
			],
			"desc": "Displays a list of open pull requests in for all repositories in a specified project on Bitbucket Server (aka Stash) in which the user is a participant. Results are sorted by last update (ascending), and are prefixed with a character to indicate participation type: A for author, R for reviewer, and nothing for other (e.g. added a comment). Each entry is clickable and will take you to the pull request page.",
			"imageURL": "http://i.imgur.com/9vp4D6e.png",
			"dependencies": [
				"rest-client gem",
				"ruby_duration gem"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:52.228479Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Homebrew/brew-services.10m.rb",
					"filename": "brew-services.10m.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eBrew Services\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAdam Lindberg\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeproxus\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows and manages Homebrew services.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/hVfhHYP.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby, brew, brew-services\u003c/bitbar.dependencies\u003e\n\n# BitBar Homebrew services plugin\n# by Adam Lindbeng (@eproxus)\n\n#--- User parameters ----------------------------------------------------------\n\nBAR_COLORS = true\n\n#--- Script internals ---------------------------------------------------------\n\nrequire 'pathname'\n\nSCRIPT_PATH = Pathname.new($0).realpath()\nBREW = \"/usr/local/bin/brew\"\nBREW_LINK = \"http://brew.sh/\"\nBREW_SERVICES = \"/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services/cmd/services.rb\"\nBREW_SERVICES_LINK = \"https://github.com/Homebrew/homebrew-services\"\n\nREFRESH = \"---\\nRefresh | refresh=true\"\n\nif BAR_COLORS\n  DARK_MODE=`defaults read -g AppleInterfaceStyle 2\u003e /dev/null`.strip\n  RESET_COLOR = DARK_MODE == 'Dark' ? \"\\e[37m\" : \"\\e[30m\"\nelse\n  RESET_COLOR = \"\\e[37m\"\nend\n\nif !File.exist?(BREW)\n  puts [\n    \"Homebrew not installed | color=red\",\n    \"---\",\n    \"Install Homebrew... | href=#{BREW_LINK}\",\n    REFRESH,\n  ].join(\"\\n\")\n  exit(1)\nend\nif !File.exist?(BREW_SERVICES)\n  puts [\n    \"Homebrew Services not installed | color=red\",\n    \"---\",\n    \"Install Homebrew Services... | href=#{BREW_SERVICES_LINK}\",\n    REFRESH,\n  ].join(\"\\n\")\n  exit(1)\nend\n\ndef green(string)\n  \"\\e[1m\\e[32m#{string}#{RESET_COLOR}\"\nend\n\ndef service(command, name)\n  \"bash=\\\"#{BREW}\\\"\" \\\n    + \" param1=services param2=#{command} param3=\\\"#{name}\\\"\" \\\n    + \" terminal=false refresh=true\"\nend\n\ndef menu(name, status, user)\n  if status == \"started\"\n    [\n      \"#{name} | color=#4FFF50\",\n      \"--Restart | #{service(\"restart\", name)}\",\n      \"--Stop | #{service(\"stop\", name)}\",\n      \"-----\",\n      \"--State: #{status}\",\n      \"--User: #{user}\",\n    ]\n  else\n    [\n      name,\n      \"--Start | #{service(\"start\", name)}\",\n      \"-----\",\n      \"--State: #{status}\",\n    ]\n  end\nend\n\ndef plural(count)\n  count \u003c= 1 ? \"#{count} Service\" : \"#{count} Services\"\nend\n\noutput = `#{BREW} services list`.split(\"\\n\")[1..-1]\n\nservices = output \u0026\u0026 output.reduce({started: 0, menus: []}) do |acc, service|\n  name, status, user, _plist = service.split\n  acc[:started] += 1 if status == \"started\"\n  acc[:menus] += menu(name, status, user)\n  acc\nend\n\ntotal = (output || []).length\nstarted = services[:started]\nmenus = services[:menus].join(\"\\n\")\nall = \"\"\nif total \u003e 0\n  all = \"\"\"\nAll\n--Start #{plural(total - started)} | #{service(\"start\", \"--all\")}\n--Stop #{plural(started)} | #{service(\"stop\", \"--all\")}\n--Restart #{plural(total)} | #{service(\"restart\", \"--all\")}\n\"\"\"\nend\n\nputs \"\"\"\n#{started != 0 \u0026\u0026 BAR_COLORS ? green(started) : started}/#{total}\n---\n#{menus}\n---\n#{all}\n#{REFRESH}\n\"\"\"\n"
				}
			],
			"path": "Dev/Homebrew/brew-services.10m.rb",
			"filename": "brew-services.10m.rb",
			"dir": "Dev/Homebrew",
			"docsPlugin": "Dev/Homebrew/brew-services.10m.rb.html",
			"docsCategory": "Dev/Homebrew.html",
			"pathSegments": [
				"Dev",
				"Homebrew"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Homebrew",
					"text": "Homebrew",
					"isLast": true
				}
			],
			"title": "Brew Services",
			"version": "v1.0",
			"author": "Adam Lindberg",
			"authors": [
				{
					"name": "Adam Lindberg",
					"githubUsername": "eproxus",
					"imageURL": "https://avatars.githubusercontent.com/u/112878?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows and manages Homebrew services.",
			"imageURL": "http://i.imgur.com/hVfhHYP.jpg",
			"dependencies": [
				"ruby",
				"brew",
				"brew-services"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.041183Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/buildbot9_status.py",
					"filename": "buildbot9_status.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eBuildbot 9 Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRyan Sydnor\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eryansydnor\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays most recent build status on configurable list of builders.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nimport os\nimport sys\nimport json\nimport urllib2\nfrom urllib2 import URLError, HTTPError\n\nbitbar_header = ['BB', '---']\nbuildbot_url = 'http://nine.buildbot.net'\nbuilders = ['db-postgres', 'py27-tw1020', 'db-mysql']\n\n\ndef parse_buildbot_status(url, status):\n    return {\n        'success': status['results'] == 0,\n        'url': url + '#/builders/' + str(status['builderid']) + '/builds/' + str(status['number'])\n    }\n\n\ndef get_buildbot_status(url, builder):\n    builders_url = url + 'api/v2/builders'\n    most_recent_build_url = builders_url + '/%s/builds?complete=true\u0026order=-complete_at\u0026limit=1'\n    try:\n        builder_id_results = json.loads(urllib2.urlopen(builders_url).read()).get('builders', None)\n        builder_id = (b['builderid'] for b in builder_id_results if b[\"name\"] == builder).next()\n        builds = json.loads(urllib2.urlopen(most_recent_build_url % builder_id).read())\n        return builds['builds'][0]\n    except (URLError, HTTPError):\n        bitbar_header.append(\"Could not connect to buildbot.\")\n        print '\\n'.join(bitbar_header)\n        sys.exit(0)\n    except IndexError:\n        bitbar_header.append(\"No recent builds.\")\n        print '\\n'.join(bitbar_header)\n        sys.exit(0)\n\n\ndef main():\n    # add trailing slash if it doesn't already exist\n    url = os.path.join(buildbot_url, '')\n    for builder in builders:\n        status = get_buildbot_status(url, builder)\n        result = parse_buildbot_status(url, status)\n        bitbar_header.append(\"%s | color=%s href=%s\" % (builder, 'green' if result['success'] else 'red', result['url']))\n    print '\\n'.join(bitbar_header)\n\n\nmain()\n"
				}
			],
			"path": "Dev/buildbot9_status.py",
			"filename": "buildbot9_status.py",
			"dir": "Dev",
			"docsPlugin": "Dev/buildbot9_status.py.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Buildbot 9 Status",
			"version": "v1.0",
			"author": "Ryan Sydnor",
			"authors": [
				{
					"name": "Ryan Sydnor",
					"githubUsername": "ryansydnor",
					"imageURL": "https://avatars.githubusercontent.com/u/1832096?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays most recent build status on configurable list of builders.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.973856Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Pastebin/pastebin.1m.sh",
					"filename": "pastebin.1m.sh",
					"content": "#!/bin/bash\n\n#\n# \u003cbitbar.title\u003eCheck Pastebin\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTyllis Xu\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003elivelycarpet87\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eUses a set of Pastebin API keys to check for pastes created by the user. It will provide links to all the pastes it finds by the user. \u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.ibb.co/cym797V/Pastebin2.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/LivelyCarpet87/BitBar-Pastebin#bitbar-pastebin\u003c/bitbar.abouturl\u003e\n#\n\n#Requires Configuration Here\n\n#Pastebin developer key\ndev_key=\"\"\n\n#Pastebin user key\nusr_key=\"\"\n\n#Save-To Directory\n#Saved pastes will be saved to this directory\nsaveDir=\"\"\n\n#Enable Deletion of pastes\n# 0=disabled | 1=enabled\ndeleteEnabled=1\n\n#End Configuration\n\n#Constants\n#Pastebin API List Paste URL\nlist_paste_url=\"https://pastebin.com/api/api_post.php\"\n#Pastebin API Get Paste URL\nget_paste_url=\"https://pastebin.com/api/api_raw.php\"\n\n\n#empty pastes arrays\npasteNameArr=()\npasteKeyArr=()\n\n#Initialize the temp directory if it does not exist\nif [ ! -d /tmp/pastebinReader ]\nthen\nmkdir /tmp/pastebinReader\nfi\n\n#clear the temp directory\nrm -f /tmp/pastebinReader/*\n\n\n#get a list of all the pastes\n\nqueryResults=$(curl --silent --connect-timeout 15 --speed-time 15 --speed-limit 500  -X POST -d \"api_option=list\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\" $list_paste_url)\n\n#parse the paste titles and keys\n\ntitles=$(echo \"$queryResults\" | grep -E \"\u003cpaste_title\u003e([^\\r]*)\" --context=0 | sed s+'\u003cpaste_title\u003e\u003c/paste_title\u003e'+Untitled+g | sed s+\\\u003cpaste_title\\\u003e++g | sed s+'\u003c/paste_title\u003e'++g |tr '\\r' ' ')\n\npasteURLs=$(echo \"$queryResults\" | grep -E \"\u003cpaste_key\u003e(\\S*)\u003c/paste_key\u003e\" --context=0 | sed s+\\\u003cpaste_key\\\u003e++g | sed s+'\u003c/paste_key\u003e'++g |tr '\\r' ' ')\n\nSAVEIFS=$IFS\nIFS=$'\\n\\r'\n#shellcheck disable=SC2206\npasteNameArr=($titles)\n#shellcheck disable=SC2206\npasteKeyArr=($pasteURLs)\nIFS=$SAVEIFS\n\ntotalPastes=$((${#pasteNameArr[@]}))\n\n\n\n# test if the request response was valid\nif [[ $(echo \"$queryResults\" | grep \"paste\" -c) -gt 0 || $(echo \"$queryResults\" | grep \"No pastes found\" -c) == 1 ]]\nthen\n\necho Pastes Found: $totalPastes\n\ni=0\nwhile [[ $i \u003c $totalPastes ]]\ndo\nprintf '%s\\n' \"$((i + 1)): ${pasteNameArr[$i]} | length=15 dropdown=false\"\ni=$((i + 1))\ndone\n\necho \"---\"\ni=0\nwhile [[ $i \u003c $totalPastes ]]\ndo\n#print paste title\nprintf '%s\\n' \"$((i + 1)): ${pasteNameArr[$i]} |href=https://pastebin.com/${pasteKeyArr[$i]}\"\n\n#get and display paste content with slight modifications to prevent breaking Bitbar display\npasteContent=\"$(curl --silent -X POST --connect-timeout 15 --speed-time 15 --speed-limit 500 -d \"api_option=show_paste\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\u0026api_paste_key=${pasteKeyArr[$i]}\"  $get_paste_url)\"\n\necho \"-- $(echo \"$pasteContent\" | tr '\\n' '$' |  tr '\\r' '$' | sed 's/\\$\\$/; /g' | sed 's/;;/; /g')\"\n\n#save paste contents temporarily until next refresh\n\nfname=$(echo \"${pasteNameArr[$i]}_${pasteKeyArr[$i]}\"|tr ' ' '_'|tr '\t' '_')\ntempname=\"/tmp/pastebinReader/${fname}.txt\"\necho \"$pasteContent\" \u003e \"$tempname\"\n\n#display the paste in terminal\necho \"---- Read :book: | bash='cat \\\"$tempname\\\" |less'\"\n\n\n#if a save directory is given, offer to save the paste\nif [[ $saveDir != \"\" \u0026\u0026 -d $saveDir ]]\nthen\necho \"---- Save :arrow_down: | bash='cat \\\"$tempname\\\" \u003e \\\"$saveDir/${fname}.txt\\\"' terminal=false\"\nelse\necho \"---- Save Disabled | color=yellow\"\necho \"------ Go to config section to enable\"\nfi\n\n#if delete is enabled, give user a choice to delete paste\n\nif [[ $deleteEnabled == 1 ]]\nthen\necho \"---- Delete\"\necho \"api_option=delete\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\u0026api_paste_key=${pasteKeyArr[$i]}\" \u003e \"/tmp/pastebinReader/${fname}_delete_request.txt\"\necho \"------ Confirm | color = red bash='curl --silent --connect-timeout 15 --speed-time 15 --speed-limit 500  -X POST --data \\\"@/tmp/pastebinReader/${fname}_delete_request.txt\\\" $list_paste_url' terminal=false\"\nelse\necho Delete Disabled\nfi\n\ni=$((i + 1))\n\n\n\ndone\n\n# test if it is a connectivity issue\nelif [[ $(curl https://pastebin.com/api/api_post.php --silent --connect-timeout 15 --speed-time 15 --speed-limit 500| grep \"Bad API request\" -c) == 0  ]]\nthen\n\necho \":warning: Disconnected | color=yellow\"\necho \"---\"\necho \"Refresh Now | refresh=true color=blue\"\n\nelse\n\necho \":warning: Bad API Request | color=red\"\necho :warning: Please check keys for errors\necho \"---\"\necho \"Refresh Now | refresh=true color=blue\"\n\nfi\n"
				}
			],
			"path": "Dev/Pastebin/pastebin.1m.sh",
			"filename": "pastebin.1m.sh",
			"dir": "Dev/Pastebin",
			"docsPlugin": "Dev/Pastebin/pastebin.1m.sh.html",
			"docsCategory": "Dev/Pastebin.html",
			"pathSegments": [
				"Dev",
				"Pastebin"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Pastebin",
					"text": "Pastebin",
					"isLast": true
				}
			],
			"title": "Check Pastebin",
			"version": "v1.2",
			"author": "Tyllis Xu",
			"authors": [
				{
					"name": "Tyllis Xu",
					"githubUsername": "livelycarpet87",
					"imageURL": "https://avatars.githubusercontent.com/u/46377494?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Uses a set of Pastebin API keys to check for pastes created by the user. It will provide links to all the pastes it finds by the user. ",
			"imageURL": "https://i.ibb.co/cym797V/Pastebin2.png",
			"dependencies": null,
			"aboutURL": "https://github.com/LivelyCarpet87/BitBar-Pastebin#bitbar-pastebin",
			"lastUpdated": "2021-03-08T15:21:49.873114Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Pastebin/pastebin.3m.sh",
					"filename": "pastebin.3m.sh",
					"content": "#!/bin/bash\n\n#\n# \u003cbitbar.title\u003eCheck Pastebin\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTyllis Xu\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003elivelycarpet87\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eUses a set of Pastebin API keys to check for pastes created by the user. It will provide links to all the pastes it finds by the user. \u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.ibb.co/cym797V/Pastebin2.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/LivelyCarpet87/BitBar-Pastebin#bitbar-pastebin\u003c/bitbar.abouturl\u003e\n#\n\n#Requires Configuration Here\n\n#Pastebin developer key\ndev_key=\"\"\n\n#Pastebin user key\nusr_key=\"\"\n\n#Save-To Directory\n#Saved pastes will be saved to this directory\nsaveDir=\"\"\n\n#Enable Deletion of pastes\n# 0=disabled | 1=enabled\ndeleteEnabled=1\n\n#End Configuration\n\n#Constants\n#Pastebin API List Paste URL\nlist_paste_url=\"https://pastebin.com/api/api_post.php\"\n#Pastebin API Get Paste URL\nget_paste_url=\"https://pastebin.com/api/api_raw.php\"\n\n\n#empty pastes arrays\npasteNameArr=()\npasteKeyArr=()\n\n#Initialize the temp directory if it does not exist\nif [ ! -d /tmp/pastebinReader ]\nthen\nmkdir /tmp/pastebinReader\nfi\n\n#clear the temp directory\nrm -f /tmp/pastebinReader/*\n\n\n#get a list of all the pastes\n\nqueryResults=$(curl --silent --connect-timeout 15 --speed-time 15 --speed-limit 500  -X POST -d \"api_option=list\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\" $list_paste_url)\n\n#parse the paste titles and keys\n\ntitles=$(echo \"$queryResults\" | grep -E \"\u003cpaste_title\u003e([^\\r]*)\" --context=0 | sed s+'\u003cpaste_title\u003e\u003c/paste_title\u003e'+Untitled+g | sed s+\\\u003cpaste_title\\\u003e++g | sed s+'\u003c/paste_title\u003e'++g |tr '\\r' ' ')\n\npasteURLs=$(echo \"$queryResults\" | grep -E \"\u003cpaste_key\u003e(\\S*)\u003c/paste_key\u003e\" --context=0 | sed s+\\\u003cpaste_key\\\u003e++g | sed s+'\u003c/paste_key\u003e'++g |tr '\\r' ' ')\n\nSAVEIFS=$IFS\nIFS=$'\\n\\r'\n#shellcheck disable=SC2206\npasteNameArr=($titles)\n#shellcheck disable=SC2206\npasteKeyArr=($pasteURLs)\nIFS=$SAVEIFS\n\ntotalPastes=$((${#pasteNameArr[@]}))\n\n\n\n# test if the request response was valid\nif [[ $(echo \"$queryResults\" | grep \"paste\" -c) -gt 0 || $(echo \"$queryResults\" | grep \"No pastes found\" -c) == 1 ]]\nthen\n\necho \"Found: $totalPastes\"\n\ni=0\nwhile [[ $i \u003c $totalPastes ]]\ndo\nprintf '%s\\n' \"$((i + 1)): ${pasteNameArr[$i]} | length=7 dropdown=false\"\ni=$((i + 1))\ndone\n\necho \"---\"\ni=0\nwhile [[ $i \u003c $totalPastes ]]\ndo\n#print paste title\nprintf '%s\\n' \"$((i + 1)): ${pasteNameArr[$i]} |href=https://pastebin.com/${pasteKeyArr[$i]}\"\n\n#get and display paste content with slight modifications to prevent breaking Bitbar display\npasteContent=\"$(curl --silent -X POST --connect-timeout 15 --speed-time 15 --speed-limit 500 -d \"api_option=show_paste\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\u0026api_paste_key=${pasteKeyArr[$i]}\"  $get_paste_url)\"\n\necho \"-- $(echo \"$pasteContent\" | tr '\\n' '$' |  tr '\\r' '$' | sed 's/\\$\\$/; /g' | sed 's/;;/; /g')\"\n\n#save paste contents temporarily until next refresh\n\nfname=$(echo \"${pasteNameArr[$i]}_${pasteKeyArr[$i]}\"| tr ' ' '_'| tr '' '_'| tr '#' 'H'|tr '$' 'S'| tr '\u0026' '+'| tr -d '\u003e'| tr -d '\u003c'| tr -d '[' | tr -d ']'| tr -d '(' | tr -d ')' | tr -d '`' | tr -d '\"' | tr -d \\'| tr -d \\\\ | tr -d '|' | tr -d ';' |tr -d '*' | tr -d '?'| tr -d '~' | tr -d '/')\ntempname=\"/tmp/pastebinReader/${fname}.txt\"\necho \"$pasteContent\" \u003e \"$tempname\"\n\n#display the paste in terminal\n#quotes around tempname has been removed. Bitbar seems to fail to parse the rest of the command when there are quotes. This should be fine as the spaces and tabs have been replaced with underscores in tempname variable.\necho \"---- Read :book: | bash='cat $tempname |less'\"\n\n#if a save directory is given, offer to save the paste\nif [[ $saveDir != \"\" \u0026\u0026 -d $saveDir ]]\nthen\necho \"---- Save :arrow_down: | bash='cat $tempname \u003e $saveDir/${fname}.txt' terminal=false\"\nelse\necho \"---- Save Disabled | color=yellow\"\necho \"------ Go to config section to enable\"\nfi\n\n#if delete is enabled, give user a choice to delete paste\n\nif [[ $deleteEnabled == 1 ]]\nthen\necho \"---- Delete\"\necho \"api_option=delete\u0026api_user_key=$usr_key\u0026api_dev_key=$dev_key\u0026api_paste_key=${pasteKeyArr[$i]}\" \u003e \"/tmp/pastebinReader/${fname}_delete_request.txt\"\necho \"------ Confirm | color = red bash='curl --silent --connect-timeout 15 --speed-time 15 --speed-limit 500  -X POST --data @/tmp/pastebinReader/${fname}_delete_request.txt $list_paste_url' terminal=true\"\nelse\necho Delete Disabled\nfi\n\ni=$((i + 1))\n\n\n\ndone\n\n# test if it is a connectivity issue\nelif [[ $(curl https://pastebin.com/api/api_post.php --silent --connect-timeout 15 --speed-time 15 --speed-limit 500| grep \"Bad API request\" -c) == 0  ]]\nthen\n\necho \":warning: Disconnected | color=#DAA520\"\necho \"---\"\necho \"Refresh Now | refresh=true color=blue\"\n\nelse\n\necho \":warning: Bad API Request | color=#800000\"\necho :warning: Please check keys for errors\necho \"---\"\necho \"Refresh Now | refresh=true color=blue\"\n\nfi\n"
				}
			],
			"path": "Dev/Pastebin/pastebin.3m.sh",
			"filename": "pastebin.3m.sh",
			"dir": "Dev/Pastebin",
			"docsPlugin": "Dev/Pastebin/pastebin.3m.sh.html",
			"docsCategory": "Dev/Pastebin.html",
			"pathSegments": [
				"Dev",
				"Pastebin"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Pastebin",
					"text": "Pastebin",
					"isLast": true
				}
			],
			"title": "Check Pastebin",
			"version": "v1.2",
			"author": "Tyllis Xu",
			"authors": [
				{
					"name": "Tyllis Xu",
					"githubUsername": "livelycarpet87",
					"imageURL": "https://avatars.githubusercontent.com/u/46377494?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Uses a set of Pastebin API keys to check for pastes created by the user. It will provide links to all the pastes it finds by the user. ",
			"imageURL": "https://i.ibb.co/cym797V/Pastebin2.png",
			"dependencies": null,
			"aboutURL": "https://github.com/LivelyCarpet87/BitBar-Pastebin#bitbar-pastebin",
			"lastUpdated": "2021-03-08T15:21:49.873136Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Jenkins/jenkins-status.1m.sh",
					"filename": "jenkins-status.1m.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eCheck status of single Jenkins project\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eStratouklos\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eStratouklos\u003c/bitbar.author.github\u003e\n\nUSER=\"username\"\nPASS=\"pass\"\nBASE_URL=\"my-jenkins.com\"\nJOBNAME=\"jobname\"\n\nRESULT=$(curl -silent http://${USER}:${PASS}@${BASE_URL}/job/${JOBNAME}/lastBuild/api/json?pretty=true | grep \"result\" | awk '{print $3}')\n\nif [[ $RESULT == *\"SUCCESS\"* ]]\nthen\n  echo '🍏'\nelse\n  echo '🍎'\nfi\n"
				}
			],
			"path": "Dev/Jenkins/jenkins-status.1m.sh",
			"filename": "jenkins-status.1m.sh",
			"dir": "Dev/Jenkins",
			"docsPlugin": "Dev/Jenkins/jenkins-status.1m.sh.html",
			"docsCategory": "Dev/Jenkins.html",
			"pathSegments": [
				"Dev",
				"Jenkins"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Jenkins",
					"text": "Jenkins",
					"isLast": true
				}
			],
			"title": "Check status of single Jenkins project",
			"version": "",
			"author": "Stratouklos",
			"authors": [
				{
					"name": "Stratos Xakoustos",
					"githubUsername": "Stratouklos",
					"imageURL": "https://avatars.githubusercontent.com/u/657997?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.473687Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/checkman.10s.rb",
					"filename": "checkman.10s.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eCheckman Simulator\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDeluan Quintao\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edeluan\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin reuses Checkman's configurations and plugins, so you don't need to install it :) It has checks for: HTTP, GoCD, Concourse, Jenkins, Travis, Semaphore, Codeship, CircleCI, Airbrake, GitHub, Pivotal Tracker, TDDium and SnapCI, and you can even create your own plugins to leverage Checkman's streamlined UI and configuration files. More info: https://gist.github.com/deluan/3f6fa6bcff2a355ae89181bb15590b88#file-readme-md\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/irmlsOX.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://goo.gl/SdNXj2\u003c/bitbar.abouturl\u003e\n\n# This plugin simulates Checkman functionality, allowing you to use all its\n# plugins and creating checks in external files. It downloads Checkman's plugins\n# on demand, so you don't need to install Checkman itself.\n#\n# To learn more about Checkman, and learn about its existing plugins, see:\n# https://github.com/cppforlife/checkman#included-check-scripts\n#\n# Configuration\n# Same as for Checkman: https://github.com/cppforlife/checkman#configuring-checkman-via-checkfiles\n#\n# Missing/Not yet implemented:\n# - Notifications/Stickies\n\nrequire 'json'\nrequire 'fileutils'\nrequire 'open-uri'\n\nCHECKS_DIR=\"#{ENV['HOME']}/.bitbar-checkman-plugins/\"\nCHECKS_URL=\"https://raw.githubusercontent.com/cppforlife/checkman/master/scripts/\"\nCONFIG_DIR=\"#{ENV['HOME']}/Checkman/\"\n\nREADME_URL=\"https://goo.gl/SdNXj2\"\n\nICON_OK=\"iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAEJGlDQ1BJQ0MgUHJvZmlsZQAAOBGFVd9v21QUPolvUqQWPyBYR4eKxa9VU1u5GxqtxgZJk6XtShal6dgqJOQ6N4mpGwfb6baqT3uBNwb8AUDZAw9IPCENBmJ72fbAtElThyqqSUh76MQPISbtBVXhu3ZiJ1PEXPX6yznfOec7517bRD1fabWaGVWIlquunc8klZOnFpSeTYrSs9RLA9Sr6U4tkcvNEi7BFffO6+EdigjL7ZHu/k72I796i9zRiSJPwG4VHX0Z+AxRzNRrtksUvwf7+Gm3BtzzHPDTNgQCqwKXfZwSeNHHJz1OIT8JjtAq6xWtCLwGPLzYZi+3YV8DGMiT4VVuG7oiZpGzrZJhcs/hL49xtzH/Dy6bdfTsXYNY+5yluWO4D4neK/ZUvok/17X0HPBLsF+vuUlhfwX4j/rSfAJ4H1H0qZJ9dN7nR19frRTeBt4Fe9FwpwtN+2p1MXscGLHR9SXrmMgjONd1ZxKzpBeA71b4tNhj6JGoyFNp4GHgwUp9qplfmnFW5oTdy7NamcwCI49kv6fN5IAHgD+0rbyoBc3SOjczohbyS1drbq6pQdqumllRC/0ymTtej8gpbbuVwpQfyw66dqEZyxZKxtHpJn+tZnpnEdrYBbueF9qQn93S7HQGGHnYP7w6L+YGHNtd1FJitqPAR+hERCNOFi1i1alKO6RQnjKUxL1GNjwlMsiEhcPLYTEiT9ISbN15OY/jx4SMshe9LaJRpTvHr3C/ybFYP1PZAfwfYrPsMBtnE6SwN9ib7AhLwTrBDgUKcm06FSrTfSj187xPdVQWOk5Q8vxAfSiIUc7Z7xr6zY/+hpqwSyv0I0/QMTRb7RMgBxNodTfSPqdraz/sDjzKBrv4zu2+a2t0/HHzjd2Lbcc2sG7GtsL42K+xLfxtUgI7YHqKlqHK8HbCCXgjHT1cAdMlDetv4FnQ2lLasaOl6vmB0CMmwT/IPszSueHQqv6i/qluqF+oF9TfO2qEGTumJH0qfSv9KH0nfS/9TIp0Wboi/SRdlb6RLgU5u++9nyXYe69fYRPdil1o1WufNSdTTsp75BfllPy8/LI8G7AUuV8ek6fkvfDsCfbNDP0dvRh0CrNqTbV7LfEEGDQPJQadBtfGVMWEq3QWWdufk6ZSNsjG2PQjp3ZcnOWWing6noonSInvi0/Ex+IzAreevPhe+CawpgP1/pMTMDo64G0sTCXIM+KdOnFWRfQKdJvQzV1+Bt8OokmrdtY2yhVX2a+qrykJfMq4Ml3VR4cVzTQVz+UoNne4vcKLoyS+gyKO6EHe+75Fdt0Mbe5bRIf/wjvrVmhbqBN97RD1vxrahvBOfOYzoosH9bq94uejSOQGkVM6sN/7HelL4t10t9F4gPdVzydEOx83Gv+uNxo7XyL/FtFl8z9ZAHF4bBsrEwAAAVdJREFUKBWVU1FOwkAUfPvahgL+mHgMLyF+kngUQwieQlHDUYx+qpfwGCb+iFba3XXmwUojJNaG0nbfzJt526mLMQqP0W051lxnrpDjLHNHora8/gsi3sfXWMtLaMLV06R6YMGRfLoYXOZ9mRYHqnmJxQyncz9sYqIXaSqR+j2E5lOuH88/LtzJTW9cDPWuPFQthk40BweqLa6YOaiHBuRllOothHoZznJapSKJWW9XNclTnY6AEF+r+i+ZKWekVSr+tpuIRoEV1omz0cBTbo51NKvbOdvEdG/7QByakKc2H6rtGRN435U4k0AT/HB0ZaZuG/yabNuZKh2uG7wKXgFj0pVPnMUKPLXkIADW5I8OlkaKAU+eMnJMDgPARQPscZ5SRhzx5KlfhTkjx+TgxUtYoWsd0Wx72jPXUSeOeGbcsj1aDOZFXyb/znay2fWrotPnaXXPyb4BZsjMvJjQ4YcAAAAASUVORK5CYII=\"\nICON_FAIL=\"iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAEJGlDQ1BJQ0MgUHJvZmlsZQAAOBGFVd9v21QUPolvUqQWPyBYR4eKxa9VU1u5GxqtxgZJk6XtShal6dgqJOQ6N4mpGwfb6baqT3uBNwb8AUDZAw9IPCENBmJ72fbAtElThyqqSUh76MQPISbtBVXhu3ZiJ1PEXPX6yznfOec7517bRD1fabWaGVWIlquunc8klZOnFpSeTYrSs9RLA9Sr6U4tkcvNEi7BFffO6+EdigjL7ZHu/k72I796i9zRiSJPwG4VHX0Z+AxRzNRrtksUvwf7+Gm3BtzzHPDTNgQCqwKXfZwSeNHHJz1OIT8JjtAq6xWtCLwGPLzYZi+3YV8DGMiT4VVuG7oiZpGzrZJhcs/hL49xtzH/Dy6bdfTsXYNY+5yluWO4D4neK/ZUvok/17X0HPBLsF+vuUlhfwX4j/rSfAJ4H1H0qZJ9dN7nR19frRTeBt4Fe9FwpwtN+2p1MXscGLHR9SXrmMgjONd1ZxKzpBeA71b4tNhj6JGoyFNp4GHgwUp9qplfmnFW5oTdy7NamcwCI49kv6fN5IAHgD+0rbyoBc3SOjczohbyS1drbq6pQdqumllRC/0ymTtej8gpbbuVwpQfyw66dqEZyxZKxtHpJn+tZnpnEdrYBbueF9qQn93S7HQGGHnYP7w6L+YGHNtd1FJitqPAR+hERCNOFi1i1alKO6RQnjKUxL1GNjwlMsiEhcPLYTEiT9ISbN15OY/jx4SMshe9LaJRpTvHr3C/ybFYP1PZAfwfYrPsMBtnE6SwN9ib7AhLwTrBDgUKcm06FSrTfSj187xPdVQWOk5Q8vxAfSiIUc7Z7xr6zY/+hpqwSyv0I0/QMTRb7RMgBxNodTfSPqdraz/sDjzKBrv4zu2+a2t0/HHzjd2Lbcc2sG7GtsL42K+xLfxtUgI7YHqKlqHK8HbCCXgjHT1cAdMlDetv4FnQ2lLasaOl6vmB0CMmwT/IPszSueHQqv6i/qluqF+oF9TfO2qEGTumJH0qfSv9KH0nfS/9TIp0Wboi/SRdlb6RLgU5u++9nyXYe69fYRPdil1o1WufNSdTTsp75BfllPy8/LI8G7AUuV8ek6fkvfDsCfbNDP0dvRh0CrNqTbV7LfEEGDQPJQadBtfGVMWEq3QWWdufk6ZSNsjG2PQjp3ZcnOWWing6noonSInvi0/Ex+IzAreevPhe+CawpgP1/pMTMDo64G0sTCXIM+KdOnFWRfQKdJvQzV1+Bt8OokmrdtY2yhVX2a+qrykJfMq4Ml3VR4cVzTQVz+UoNne4vcKLoyS+gyKO6EHe+75Fdt0Mbe5bRIf/wjvrVmhbqBN97RD1vxrahvBOfOYzoosH9bq94uejSOQGkVM6sN/7HelL4t10t9F4gPdVzydEOx83Gv+uNxo7XyL/FtFl8z9ZAHF4bBsrEwAAAUJJREFUKBWVk1tOwzAQRccTIlFVUCgsozupxDaAP4TKKqB8FrENBDvpMiDioQrU1DZz4rjiA6JgaWzHc8/YTm5cjFFod+PRtFSdlU4mhXPHrllNHQof43MdZVmHcHNevT2RccD3RwfXA3WXe6q665wU4sSGbaO+lyhfNvkIIXyGeHv68nrlFof702GhD+Oi0KERpYVSdYuKYSLBojZ4ZVF5H1Y+nOxwVHYETLsa+HPbtggntOs0T7Xp11Fmyh2B2LGw1G8gBOvk0SW9TJSXwx2bo1qiq1EAHXo4RZ6jC8y5rGWkUKKbSc8O0lqC06dOK336Vq+MOfpyWa84BwPwHbPb/ipCHh16OMVyOAcD+I4CgOTRJb0sdRP8HMvhHBbXrWBj8xwArJNHhx6Pt94ezQeqF//2dr5n37+Kk55V7492EPkGePnLtKbOBRoAAAAASUVORK5CYII=\"\nICON_UNDETERMINED=\"iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAEJGlDQ1BJQ0MgUHJvZmlsZQAAOBGFVd9v21QUPolvUqQWPyBYR4eKxa9VU1u5GxqtxgZJk6XtShal6dgqJOQ6N4mpGwfb6baqT3uBNwb8AUDZAw9IPCENBmJ72fbAtElThyqqSUh76MQPISbtBVXhu3ZiJ1PEXPX6yznfOec7517bRD1fabWaGVWIlquunc8klZOnFpSeTYrSs9RLA9Sr6U4tkcvNEi7BFffO6+EdigjL7ZHu/k72I796i9zRiSJPwG4VHX0Z+AxRzNRrtksUvwf7+Gm3BtzzHPDTNgQCqwKXfZwSeNHHJz1OIT8JjtAq6xWtCLwGPLzYZi+3YV8DGMiT4VVuG7oiZpGzrZJhcs/hL49xtzH/Dy6bdfTsXYNY+5yluWO4D4neK/ZUvok/17X0HPBLsF+vuUlhfwX4j/rSfAJ4H1H0qZJ9dN7nR19frRTeBt4Fe9FwpwtN+2p1MXscGLHR9SXrmMgjONd1ZxKzpBeA71b4tNhj6JGoyFNp4GHgwUp9qplfmnFW5oTdy7NamcwCI49kv6fN5IAHgD+0rbyoBc3SOjczohbyS1drbq6pQdqumllRC/0ymTtej8gpbbuVwpQfyw66dqEZyxZKxtHpJn+tZnpnEdrYBbueF9qQn93S7HQGGHnYP7w6L+YGHNtd1FJitqPAR+hERCNOFi1i1alKO6RQnjKUxL1GNjwlMsiEhcPLYTEiT9ISbN15OY/jx4SMshe9LaJRpTvHr3C/ybFYP1PZAfwfYrPsMBtnE6SwN9ib7AhLwTrBDgUKcm06FSrTfSj187xPdVQWOk5Q8vxAfSiIUc7Z7xr6zY/+hpqwSyv0I0/QMTRb7RMgBxNodTfSPqdraz/sDjzKBrv4zu2+a2t0/HHzjd2Lbcc2sG7GtsL42K+xLfxtUgI7YHqKlqHK8HbCCXgjHT1cAdMlDetv4FnQ2lLasaOl6vmB0CMmwT/IPszSueHQqv6i/qluqF+oF9TfO2qEGTumJH0qfSv9KH0nfS/9TIp0Wboi/SRdlb6RLgU5u++9nyXYe69fYRPdil1o1WufNSdTTsp75BfllPy8/LI8G7AUuV8ek6fkvfDsCfbNDP0dvRh0CrNqTbV7LfEEGDQPJQadBtfGVMWEq3QWWdufk6ZSNsjG2PQjp3ZcnOWWing6noonSInvi0/Ex+IzAreevPhe+CawpgP1/pMTMDo64G0sTCXIM+KdOnFWRfQKdJvQzV1+Bt8OokmrdtY2yhVX2a+qrykJfMq4Ml3VR4cVzTQVz+UoNne4vcKLoyS+gyKO6EHe+75Fdt0Mbe5bRIf/wjvrVmhbqBN97RD1vxrahvBOfOYzoosH9bq94uejSOQGkVM6sN/7HelL4t10t9F4gPdVzydEOx83Gv+uNxo7XyL/FtFl8z9ZAHF4bBsrEwAAAUlJREFUKBWdk01ugzAQhW0TECCkbjhG9t31ApF6CViwrtJT9GdXCSEuQdUeg11XPUOXCBA/pvNcT4VQ1EaxZJOM53sz2A+5LIvASNP04Lru0XGcPc1YSmniWJAzz/MXzY9xHB/LsnxHXGIjy7IHz/PugiBQJCCUUmILa60FgaLrOj0Mw3Oe5/cySZJDGIavURQp3/cFVTXgFrbVRd/3omka3bbt7Q6toiLAU1XRHgZgdIRB7Svq4qjwjoBQcduuybQLOsE+8mz+HnDM0LrVNci/sb8SiRUH/gO3AkaEg5c8f07gEpIYhVPkeY4G55rTh3NgAA7+JcA5yAenrOXwR7DIKQGAFjJOA7ej5Yksd0NXZt4f98g3wCJcEQXgMFgUHnfquv6squqKNq4pSbI6Eqdp+p3wNUCypfF2URQv5sNAhXO/KnRK4BuYbwDN9qHScGVnAAAAAElFTkSuQmCC\"\n\nICON_OK_CHANGING=\"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\"\nICON_FAIL_CHANGING=\"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\"\nICON_UNDETERMINED_CHANGING=\"iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAEJGlDQ1BJQ0MgUHJvZmlsZQAAOBGFVd9v21QUPolvUqQWPyBYR4eKxa9VU1u5GxqtxgZJk6XtShal6dgqJOQ6N4mpGwfb6baqT3uBNwb8AUDZAw9IPCENBmJ72fbAtElThyqqSUh76MQPISbtBVXhu3ZiJ1PEXPX6yznfOec7517bRD1fabWaGVWIlquunc8klZOnFpSeTYrSs9RLA9Sr6U4tkcvNEi7BFffO6+EdigjL7ZHu/k72I796i9zRiSJPwG4VHX0Z+AxRzNRrtksUvwf7+Gm3BtzzHPDTNgQCqwKXfZwSeNHHJz1OIT8JjtAq6xWtCLwGPLzYZi+3YV8DGMiT4VVuG7oiZpGzrZJhcs/hL49xtzH/Dy6bdfTsXYNY+5yluWO4D4neK/ZUvok/17X0HPBLsF+vuUlhfwX4j/rSfAJ4H1H0qZJ9dN7nR19frRTeBt4Fe9FwpwtN+2p1MXscGLHR9SXrmMgjONd1ZxKzpBeA71b4tNhj6JGoyFNp4GHgwUp9qplfmnFW5oTdy7NamcwCI49kv6fN5IAHgD+0rbyoBc3SOjczohbyS1drbq6pQdqumllRC/0ymTtej8gpbbuVwpQfyw66dqEZyxZKxtHpJn+tZnpnEdrYBbueF9qQn93S7HQGGHnYP7w6L+YGHNtd1FJitqPAR+hERCNOFi1i1alKO6RQnjKUxL1GNjwlMsiEhcPLYTEiT9ISbN15OY/jx4SMshe9LaJRpTvHr3C/ybFYP1PZAfwfYrPsMBtnE6SwN9ib7AhLwTrBDgUKcm06FSrTfSj187xPdVQWOk5Q8vxAfSiIUc7Z7xr6zY/+hpqwSyv0I0/QMTRb7RMgBxNodTfSPqdraz/sDjzKBrv4zu2+a2t0/HHzjd2Lbcc2sG7GtsL42K+xLfxtUgI7YHqKlqHK8HbCCXgjHT1cAdMlDetv4FnQ2lLasaOl6vmB0CMmwT/IPszSueHQqv6i/qluqF+oF9TfO2qEGTumJH0qfSv9KH0nfS/9TIp0Wboi/SRdlb6RLgU5u++9nyXYe69fYRPdil1o1WufNSdTTsp75BfllPy8/LI8G7AUuV8ek6fkvfDsCfbNDP0dvRh0CrNqTbV7LfEEGDQPJQadBtfGVMWEq3QWWdufk6ZSNsjG2PQjp3ZcnOWWing6noonSInvi0/Ex+IzAreevPhe+CawpgP1/pMTMDo64G0sTCXIM+KdOnFWRfQKdJvQzV1+Bt8OokmrdtY2yhVX2a+qrykJfMq4Ml3VR4cVzTQVz+UoNne4vcKLoyS+gyKO6EHe+75Fdt0Mbe5bRIf/wjvrVmhbqBN97RD1vxrahvBOfOYzoosH9bq94uejSOQGkVM6sN/7HelL4t10t9F4gPdVzydEOx83Gv+uNxo7XyL/FtFl8z9ZAHF4bBsrEwAAAWtJREFUKBXFUj1Lw1AUvS95bRrByW7+BWcRFP+Ak3Mk7VAo3fszDC4urUMHyeIWcPAPuHaQbi7+gC4hNEm/8jwn9IGIgnTxws3Lu+ece25enjLGyL7h7Cuk7v/E+q9jdzqd42azeaGUOoIm2263byoIgsc4jkMc3I8n1+v1TiGKtNbnSEWzzWYji8VCVBiGBuArCjeTyeSDoI3BYBAAe2i1Wj5WcV1X6LFcLiXLMlH9ft8AJD+vquoJ4AuyxHjXnueFwBSFcBXUBJxanKap6EajIb7vEzwA0MW3dEmiCwXEHcepk3UGV6YmQBK7W9ASiFmixTi2TQ2nOTZtEun2NazQ1qyIo1Pn4DFbr9fc1B0p+D4mxRTuRLLjzzRebouiuIRrfdvo/psjDcqyFPAN3iN3Op2+J0lyiM0ZuivbnUT+T5t0ozDPc7Nare5Go9G94jgMXIYrnOwQzifItj0gYuSg2Rw5Q0bj8fiZ9U9rAuOyymXbswAAAABJRU5ErkJggg==\"\n\nICONS = {\n  true: {\n    false: ICON_OK,\n    true: ICON_OK_CHANGING\n  },\n  false: {\n    false: ICON_FAIL,\n    true: ICON_FAIL_CHANGING\n  },\n}\n\nPRIORITY_ORDER = [ICON_OK, ICON_OK_CHANGING, ICON_FAIL, ICON_FAIL_CHANGING, ICON_UNDETERMINED, ICON_UNDETERMINED_CHANGING]\n\nDARK_MODE=`defaults read -g AppleInterfaceStyle 2\u003e /dev/null`.strip\nNO_DIM = \" color=#{DARK_MODE == 'Dark' ? 'white' : 'black'} \"\n\n@output = \"\"\n@failed = 0\n@undetermined = 0\n@aggregated_status = ICON_OK\n\ndef help\n  puts \" | image=#{ICON_UNDETERMINED}\"\n  puts \"---\"\n  puts \"Checkman Simulator v0.1.1|href=#{README_URL}\"\n  puts \"More info...|href=#{README_URL}\"\n  puts \"---\"\n  puts \"No configuration files found in #{CONFIG_DIR} | bash=/usr/bin/open param1=\\\"#{CONFIG_DIR}\\\" terminal=false\"\n  puts \"Click here to learn how to write configuration files... | href=https://github.com/cppforlife/checkman#configuring-checkman-via-checkfiles\"\n  puts \"---\\nRefresh... | refresh=true\"\n  exit\nend\n\ndef plugin_path(plugin)\n  FileUtils.mkdir_p(CHECKS_DIR)\n  plugin_path = \"#{CHECKS_DIR}/#{plugin}\"\n  return plugin_path if File.executable? plugin_path\n  File.write(plugin_path, open(\"#{CHECKS_URL}/#{plugin}\").read)\n  File.chmod(0755, plugin_path)\n  plugin_path\nend\n\ndef format_info(info)\n  lines = info[1].split(\"\\n\")\n  s = \"--#{info[0]}: #{lines[0]} | #{NO_DIM}\"\n  lines.each_with_index do |line, i|\n    s += \"\\n--#{line} | #{NO_DIM}\" if i \u003e 0 \n  end\n  s += \"href=#{info[1]}\" if info[0].downcase == \"url\"\n  s += \"\\n\"\nend\n\ndef parse_output(check_name, check_output)\n  if check_output.strip == \"\"\n    @output += \"#{check_name}| #{NO_DIM} image= #{ICON_UNDETERMINED} \\n\"\n    @undetermined += 1\n    return ICON_UNDETERMINED\n  end\n  r = JSON.parse(check_output)\n  icon = ICONS[r[\"result\"].to_s.to_sym][(!!r[\"changing\"]).to_s.to_sym]\n  @output += \"#{check_name}| image=#{icon} \"\n  @output += r['url'].nil? ? NO_DIM : \"href=#{r['url']}\"\n  @output += \"\\n\"\n  @failed += 1 unless r[\"result\"]\n  unless r[\"info\"].nil?\n    r[\"info\"].each do |i|\n      if i[0] != '-'\n        @output += format_info i\n      else\n        @output += \"-----\\n\"\n      end\n    end\n  end\n\n  icon\nend\n\ncheck_files = Dir[\"#{CONFIG_DIR}/*\"]\nhelp if check_files.count == 0\n\ncheck_files.each do |checkfile|\n  check = File.open(checkfile).read\n  check.each_line do |line|\n    case line.strip\n    when /^#-(.+)/\n      @output += \"#{$1.strip}| size=12\\n\"\n    when '#-'\n      @output += \"---\\n\"\n    when /^#.*/, ''\n      true\n    else\n      item = line.split(\":\", 2)\n      cmd = item[1].strip.split(\" \", 2)\n      output = `(#{plugin_path cmd[0]} #{cmd[1]}) 2\u003e/dev/null`\n      icon = parse_output item[0], output\n      if PRIORITY_ORDER.index(icon) \u003e PRIORITY_ORDER.index(@aggregated_status)\n        @aggregated_status = icon\n      end\n    end\n  end\n  @output += \"---\\n\"\nend\n\nif @undetermined \u003e 0\n  print @undetermined\nelsif @failed \u003e 0\n    print @failed\nend\nputs \" | image=#{@aggregated_status}\"\nputs \"---\\n#{@output}\"\n\nputs \"---\\nRefresh... | refresh=true\"\n"
				}
			],
			"path": "Dev/checkman.10s.rb",
			"filename": "checkman.10s.rb",
			"dir": "Dev",
			"docsPlugin": "Dev/checkman.10s.rb.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Checkman Simulator",
			"version": "v0.1.1",
			"author": "Deluan Quintao",
			"authors": [
				{
					"name": "Deluan Quintão",
					"githubUsername": "deluan",
					"imageURL": "https://avatars.githubusercontent.com/u/331353?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin reuses Checkman's configurations and plugins, so you don't need to install it :) It has checks for: HTTP, GoCD, Concourse, Jenkins, Travis, Semaphore, Codeship, CircleCI, Airbrake, GitHub, Pivotal Tracker, TDDium and SnapCI, and you can even create your own plugins to leverage Checkman's streamlined UI and configuration files. More info: https://gist.github.com/deluan/3f6fa6bcff2a355ae89181bb15590b88#file-readme-md",
			"imageURL": "http://i.imgur.com/irmlsOX.jpg",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://goo.gl/SdNXj2",
			"lastUpdated": "2021-03-08T15:21:51.032258Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/circleci-check.5m.py",
					"filename": "circleci-check.5m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eCircleCI Check\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eFlorent Segouin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003efsegouin\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays the build status of repositories listed on CircleCI.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/Qvdgb39.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\n# Florent Segouin\n# github.com/fsegouin\n\n# Based on Travis Check by Chris Tomkins-Tinch\n# github.com/tomkinsc\n\n# version history\n# 1.0\n#   initial commit\n# 1.1\n#   - Update icons\n#   - Sort builds\n#   - Add running builds\n\nfrom urllib import unquote\nimport requests\n\n# You need to set your CIRCLECI_API_TOKEN with an API Token from CircleCI.\nCIRCLECI_API_TOKEN = ''\n\nCIRCLECI_API_ENDPOINT = 'https://circleci.com/api/v1/'\n\n# ======================================\n\nSYMBOLS = {\n    'running': u' ▶',\n    'success': u' ✓',\n    'failed': u' ✗',\n    'timedout': u' ⚠',\n    'canceled': u' ⊝',\n    'scheduled': u' ⋯',\n    'no_tests': u' ',\n}\n\nCOLORS = {\n    'running': '#61D3E5',\n    'success': '#39C988',\n    'failed': '#EF5B58',\n    'timedout': '#F3BA61',\n    'canceled': '#898989',\n    'scheduled': '#AC7DD3',\n    'no_tests': 'black',\n}\n\nNO_SYMBOL = u' ❂'\n\n\ndef getOutcomeKey(build):\n    return build['outcome']\n\n\ndef request(uri):\n    url = CIRCLECI_API_ENDPOINT + uri + '?circle-token=' + CIRCLECI_API_TOKEN\n    headers = {'Accept': 'application/json'}\n    r = requests.get(url, headers=headers)\n    return r.json()\n\n\ndef getRessource(ressource_name):\n    return request(ressource_name)\n\n\ndef updateStatuses(projects):\n    output = []\n\n    output.append('CircleCI')\n    output.append('---')\n\n    for project in projects:\n        user_name = project['username']\n        repo_name = project['reponame']\n        repo_href = project['vcs_url']\n        branches = project['branches']\n        running_builds = []\n        recent_builds = []\n        output.append(u'{}/{} | href={}'.format(user_name, repo_name, repo_href))\n\n        for branch_name, branch in sorted(branches.iteritems()):\n            if 'running_builds' in branch and len(branch['running_builds']) \u003e 0:\n                branch['running_builds'][0]['branch_name'] = branch_name\n                running_builds.append(branch['running_builds'][0])\n\n            if 'recent_builds' in branch and len(branch['recent_builds']) \u003e 0:\n                branch['recent_builds'][0]['branch_name'] = branch_name\n                recent_builds.append(branch['recent_builds'][0])\n\n        for running_build in running_builds:\n            status = running_build['status']\n            if not status in ['not_running']:\n                color = 'color={}'.format(COLORS[status]) if COLORS[status] else ''\n                symbol = SYMBOLS.get(status, NO_SYMBOL)\n                branch_href = 'href=https://circleci.com/gh/{}/{}/tree/{}'.format(user_name, repo_name, running_build['branch_name'])\n                output_msg = u'- {} {}'.format(symbol, unquote(running_build['branch_name']))\n                output.append(u'{} | {} {}'.format(output_msg, branch_href, color))\n\n\n        for recent_build in sorted(recent_builds, key=getOutcomeKey):\n            outcome = recent_build['outcome']\n            if not outcome in ['no_tests']:\n                color = 'color={}'.format(COLORS[outcome]) if COLORS[outcome] else ''\n                symbol = SYMBOLS.get(outcome, NO_SYMBOL)\n                branch_href = 'href=https://circleci.com/gh/{}/{}/tree/{}'.format(user_name, repo_name, recent_build['branch_name'])\n                output_msg = u'- {} {}'.format(symbol, unquote(recent_build['branch_name']))\n                output.append(u'{} | {} {}'.format(output_msg, branch_href, color))\n\n        output.append('---')\n\n    for line in output:\n        print line.encode('utf-8')\n\n\nif __name__ == '__main__':\n    if len(CIRCLECI_API_TOKEN) == 0:\n        raise ValueError(\"token can not be empty\")\n\n    updateStatuses(getRessource('projects'))\n"
				}
			],
			"path": "Dev/circleci-check.5m.py",
			"filename": "circleci-check.5m.py",
			"dir": "Dev",
			"docsPlugin": "Dev/circleci-check.5m.py.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "CircleCI Check",
			"version": "v1.1",
			"author": "Florent Segouin",
			"authors": [
				{
					"name": "Florent Segouin",
					"githubUsername": "fsegouin",
					"imageURL": "https://avatars.githubusercontent.com/u/2843216?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin displays the build status of repositories listed on CircleCI.",
			"imageURL": "http://i.imgur.com/Qvdgb39.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:51.062643Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/cloudflare.1m.js",
					"filename": "cloudflare.1m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n\n/* jshint esversion: 6 */\n\n/*\n * \u003cbitbar.title\u003eCloudflare Development Mode\u003c/bitbar.title\u003e\n * \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n * \u003cbitbar.author\u003eAaron Crawford\u003c/bitbar.author\u003e\n * \u003cbitbar.author.github\u003eaaroncrawford\u003c/bitbar.author.github\u003e\n * \u003cbitbar.image\u003ehttps://i.imgur.com/nKXgmxg.png\u003c/bitbar.image\u003e\n * \u003cbitbar.desc\u003eEnable or Disable Development Mode from BitBar.  Plugin will need to be edited to include your API key and email to work.\u003c/bitbar.desc\u003e\n * \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n */\n\n// CHANGE THESE AREAS\nlet email = 'CHANGE@ME.com'; // Cloudflare email\nlet key = 'CHANGE ME'; // Global API Key, not Origin CA Key - Located under \"My Profile\"\n//\n\n\nvar https = require('https');\nvar data = {\n    zones: []\n};\n\nvar headers = {\n    'X-Auth-Email': email,\n    'X-Auth-Key': key,\n    'Content-Type': 'application/json'\n};\n\nfunction getZones() {\n    var options = {\n        host: 'api.cloudflare.com',\n        path: '/client/v4/zones?per_page=50',\n        method: 'GET',\n        headers: headers\n    };\n    return new Promise((resolve, reject) =\u003e {\n        var res = https.request(options, (res) =\u003e {\n            var responseString = '';\n\n            res.setEncoding('utf-8');\n\n            res.on('data', function(data) {\n                responseString += data;\n            });\n\n            res.on('end', function() {\n                var parse = JSON.parse(responseString);\n                parse.result.map((val, i) =\u003e {\n                    if(val.development_mode \u003e 0) {\n                        dev = true;\n                    }\n                    else {\n                        dev = false;\n                    }\n                    data.zones.push({name:val.name, id:val.id, dev:dev});\n                });\n                resolve();\n            });\n\n        });\n        res.end();\n    });\n}\n\nfunction flipSwitch(status) {\n    var flag = (status == true) ? 'on' : 'off';\n    var options = {\n        host: 'api.cloudflare.com',\n        path: `/client/v4/zones/${process.argv[3]}/settings/development_mode`,\n        method: 'PATCH',\n        headers: headers\n    };\n\n    return new Promise((resolve, reject) =\u003e {\n        var postData = { value: flag };\n\n        var res = https.request(options, (res) =\u003e {\n            var body = [];\n            var responseString = '';\n\n            res.setEncoding('utf-8');\n            res.on('data', function(data) {\n                responseString += data;\n            });\n            res.on('end', function() {\n                var parse = JSON.parse(responseString);\n                resolve();\n            });\n            res.on('error', function(err) {\n                reject(err);\n            });\n        });\n        res.write(JSON.stringify(postData));\n        res.end();\n    });\n}\n\nconsole.log('⚙️');\nconsole.log('---');\n\nif(process.argv[2] == 'triggerUpdate') {\n    var status = (process.argv[4] == 'Enable') ? true : false;\n    flipSwitch(status)\n    .then(getZones())\n    .then(() =\u003e {\n        data.zones.map((val, i) =\u003e {\n            var status = (val.dev) ? 'Disable' : 'Enable';\n            var color = (val.dev) ? 'red' : 'black';\n            console.log(`${val.name}| color=${color}`);\n            console.log(`--${status}| bash=${process.argv[0]} param1=${process.argv[1]} param2=triggerUpdate param3=${val.id} param4=${status} refresh=true terminal=false`);\n        });\n    });\n\n}\nelse {\n    getZones().then(() =\u003e {\n        data.zones.map((val, i) =\u003e {\n            var status = (val.dev) ? 'Disable' : 'Enable';\n            var color = (val.dev) ? 'red' : 'black';\n            console.log(`${val.name}| color=${color}`);\n            console.log(`--${status}| bash=${process.argv[0]} param1=${process.argv[1]} param2=triggerUpdate param3=${val.id} param4=${status} refresh=true terminal=false`);\n        });\n    });\n}"
				}
			],
			"path": "Dev/cloudflare.1m.js",
			"filename": "cloudflare.1m.js",
			"dir": "Dev",
			"docsPlugin": "Dev/cloudflare.1m.js.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Cloudflare Development Mode",
			"version": "v1.0",
			"author": "Aaron Crawford",
			"authors": [
				{
					"name": "Aaron Crawford",
					"githubUsername": "aaroncrawford",
					"imageURL": "https://avatars.githubusercontent.com/u/3203500?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Enable or Disable Development Mode from BitBar.  Plugin will need to be edited to include your API key and email to work.",
			"imageURL": "https://i.imgur.com/nKXgmxg.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:51.116063Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/clubhouse.rb",
					"filename": "clubhouse.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eClubhouse\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTom Haratyk\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejazzytomato\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow your Clubhouse.io work and allow to quickly open tickets, associated branches and pull requests\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/oExbPOg.png\u003c/bitbar.image\u003e\n\nCLUBHOUSE_API_TOKEN='CHANGE_ME'\nCLUBHOUSE_USER='CHANGE_ME'\nGITHUB_ORG='CHANGE_ME' # for PRs\nCLUBHOUSE_WORKFLOW='Engineering'\nCLUBHOUSE_NUMBER_OF_ITEMS=20 # max is 25\nCLUBHOUSE_QUERY=\"owner:#{CLUBHOUSE_USER} !is:done !is:archived\" # https://help.clubhouse.io/hc/en-us/articles/360000046646-Search-Operators\n\nBAR_COLORS = true\n\nrequire 'net/http'\nrequire \"uri\"\nrequire 'json'\nrequire 'pathname'\nrequire 'openssl'\nrequire 'time'\n\nSCRIPT_PATH = Pathname.new($0).realpath()\nREFRESH = \"---\\nRefresh | refresh=true\"\n\ndef get_workflows\n  uri = URI.parse(\"https://api.clubhouse.io/api/v3/workflows\")\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  http.verify_mode = OpenSSL::SSL::VERIFY_PEER\n\n  request = Net::HTTP::Get.new(uri.request_uri)\n  request[\"Content-Type\"] = \"application/json\"\n  request[\"Clubhouse-Token\"] = CLUBHOUSE_API_TOKEN\n\n  http.request(request)\nend\n\ndef get_stories\n  uri = URI.parse(\"https://api.clubhouse.io/api/v3/search/stories?page_size=#{CLUBHOUSE_NUMBER_OF_ITEMS}\u0026query=#{CLUBHOUSE_QUERY}\")\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true\n  http.verify_mode = OpenSSL::SSL::VERIFY_PEER\n\n  request = Net::HTTP::Get.new(uri.request_uri)\n  request[\"Content-Type\"] = \"application/json\"\n  request[\"Clubhouse-Token\"] = CLUBHOUSE_API_TOKEN\n\n  http.request(request)\nend\n\ndef format_pr(pr)\n  repo = /#{GITHUB_ORG}\\/(.*)\\/pull/.match(pr['url'])[1]\n  icon = pr['closed'] ? ':cl:' : (pr['review_status'] == 'approved' ? ':white_check_mark:' : '')\n  updated_at = Time.parse(pr['updated_at'])\n  day = updated_at.strftime('%a %d/%m')\n  timestamp = (day != Time.now.strftime('%a %d/%m') ? ('on ' + day) : '') + \" at \" + updated_at.strftime(\"%I:%M%p\")\n  \"\\n----#{icon} #{repo} ##{pr['number']} -\u003e #{pr['target_branch_name']} - Modified on #{timestamp} | href=#{pr['url']}\"\nend\n\ndef format_branch(b)\n  \"\\n----:clipboard:#{b['name']} | terminal=false bash='/bin/bash' param1='-c' param2=\\\"'echo #{b['name']} | pbcopy'\\\"\"\nend\n\ndef format_labels(item)\n  \"[\" + item['labels'].map { |l| l['name'] }.join(' ') + \"] \"\nend\n\ndef create_branch(item)\n  name = \"ch#{item['id']}/#{item['name'].downcase.gsub(/(?!\\s)\\W/, '').gsub(/\\s+/, '-')[0..50]}\"\n  \":clipboard::heavy_plus_sign: #{name} | terminal=false bash='/bin/bash' param1='-c' param2=\\\"'echo #{name} | pbcopy'\\\"\"\nend\n\ndef build_item(item)\n  (item['blocked'] ? ':no_entry_sign: ' : '') +\n  item['name'].gsub('|', '/') + \" \" + \n  \" | color=black length=80 href=#{item['app_url']}\" +\n  \"\\n--#{format_labels(item)}\" +\n  \"\\n--:clipboard:Copy story id #{item['id'].to_s} | terminal=false bash='/bin/bash' param1='-c' param2=\\\"'echo #{item['id']} | pbcopy'\\\"\" +\n  \"\\n--Branches\" +\n  item['branches'].map(\u0026method(:format_branch)).uniq.join('') +\n  (item['branches'].size == 0 ? \"\\n----\" + create_branch(item) : '') +\n  \"\\n--PRs\" +\n  item['branches'].flat_map { |b| b['pull_requests'].map(\u0026method(:format_pr)) }.join('') +\n  \"\\n\"\nend\n\ndef handle_error(msg, details = \"\")\n  puts \"\"\"\n    :checkered_flag::interrobang:\n    ---\n    #{msg} | color=red\n    #{details}\n    ---\n    #{REFRESH}\n  \"\"\"\n  exit\nend\n\nerror = nil\n\nresponse = get_workflows\nif response.code != '200'\n  handle_error \"Error when making request to clubhouse API: HTTP #{response.code}\", response.body.to_s\nend\n\nworkflows = JSON.parse(response.body)\nworkflows_hash = workflows.find { |w| w['name'] == CLUBHOUSE_WORKFLOW }.fetch('states').reduce({}) { |h, s| h[s['id']] = s['name']; h }\n\nresponse = get_stories\n\nif response.code != '200'\n  handle_error \"Error when making request to clubhouse API: HTTP #{response.code}\" , response.body.to_s\nend\n\nstories = JSON.parse(response.body).fetch('data')\n\nlines = ''\n\nworkflows_hash.each do |wfid, wf|\n  wf_stories = stories.select { |s| s['workflow_state_id'] == wfid }\n  if wf_stories.any?\n    lines += wf + \"\\n\"\n    lines += wf_stories.map { |s|  build_item(s) }.join(\"\\n\")\n  end\nend\n\nputs \"\"\"\n:checkered_flag:\n---\n#{lines}\n---\n#{REFRESH}\n\"\"\"\n"
				}
			],
			"path": "Dev/clubhouse.rb",
			"filename": "clubhouse.rb",
			"dir": "Dev",
			"docsPlugin": "Dev/clubhouse.rb.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Clubhouse",
			"version": "v1.0",
			"author": "Tom Haratyk",
			"authors": [
				{
					"name": "Tom Haratyk",
					"githubUsername": "jazzytomato",
					"imageURL": "https://avatars.githubusercontent.com/u/397195?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show your Clubhouse.io work and allow to quickly open tickets, associated branches and pull requests",
			"imageURL": "https://i.imgur.com/oExbPOg.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:51.124832Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Codeship/codeship.1m.js",
					"filename": "codeship.1m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n/* jshint esversion:9 */\nconst https = require('https');\n\n/* EDIT HERE */\nconst USER = '';\nconst PASSWORD = '';\nconst ORGANIZATION_NAME = '';\nconst PROJECT_ID = '';\n/* DON'T EDIT BELOW */\n// \u003cbitbar.title\u003eCodeship\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eGil Barbara\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003egilbarbara\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eList recent builds.\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.abouturl\u003ehttps://github.com/gilbarbara/bitbar-plugins\u003c/bitbar.abouturl\u003e\nconst BASE_URL = 'api.codeship.com';\nconst PROJECT_URL = `https://app.codeship.com/projects/${PROJECT_ID}`;\nconst AUTH = Buffer.from(`${USER}:${PASSWORD}`).toString('base64');\nconst COLORS = {\n  success: '#42A86F',\n  testing: '#607192',\n  error: '#D12C3F',\n  infrastructure_failure: '#9E212F',\n  stopped: '#C4CDCE',\n  waiting: '#3FCBDA',\n};\n\nlet ACCESS_TOKEN;\nlet ORGANIZATION_UUID;\nlet PROJECT_UUID;\n\nconst ICON = '';\nconst RELOAD_ICON = 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAmElEQVR4AY3SJdYCYRhA4V+BRGY5rAF3ZwvkiSyANLugYgUtOJsg4s7LxV3uOU8a+fTrom9EUMEAfZQRwDEFuwxIQ9CEetCBIIk4BF/fSKMPL26LYgHZoQgEXjxKgQCgCpqfvQwaQMVtOhhv3X7wURU08apvxGB5v2giFwTmT7bVigly+H11cAnUIChAD3p+NbrIwotv7NoAffg2NR6lsPIAAAAASUVORK5CYII=';\n\nfunction request(options = {}) {\n  const OPTIONS = {\n    hostname: BASE_URL,\n    path: `/v2${options.path || '/auth'}`,\n    port: 443,\n    method: options.method || 'GET',\n    headers: {\n      ...options.headers,\n    },\n  };\n\n  return new Promise((resolve, reject) =\u003e {\n    const req = https.request(OPTIONS, (response) =\u003e {\n      const { headers, statusCode } = response;\n\n      if (statusCode \u003c 200 || statusCode \u003e 299) {\n        reject(new Error(`Request failed - status code: ${response.statusCode}`));\n      }\n\n      const isJSON = headers['content-type'].includes('application/json');\n\n      // temporary data holder\n      const body = [];\n      // on every content chunk, push it to the data array\n      response.on('data', chunk =\u003e body.push(chunk));\n      // we are done, resolve promise with those joined chunks\n      response.on('end', () =\u003e {\n        const content = body.join('');\n        resolve(isJSON ? JSON.parse(content) : content);\n      });\n    });\n\n    // handle connection errors of the request\n    req.on('error', err =\u003e reject(err));\n    req.end();\n  });\n}\n\nfunction timeSince(dateString) {\n  const date = new Date(dateString);\n  const seconds = Math.floor((new Date() - date) / 1000);\n  let intervalType;\n\n  let interval = Math.floor(seconds / 31536000);\n  if (interval \u003e= 1) {\n    intervalType = 'year';\n  }\n  else {\n    interval = Math.floor(seconds / 2592000);\n    if (interval \u003e= 1) {\n      intervalType = 'month';\n    }\n    else {\n      interval = Math.floor(seconds / 86400);\n      if (interval \u003e= 1) {\n        intervalType = 'day';\n      }\n      else {\n        interval = Math.floor(seconds / 3600);\n        if (interval \u003e= 1) {\n          intervalType = 'hour';\n        }\n        else {\n          interval = Math.floor(seconds / 60);\n          if (interval \u003e= 1) {\n            intervalType = 'minute';\n          }\n          else {\n            interval = seconds;\n            intervalType = 'second';\n          }\n        }\n      }\n    }\n  }\n\n  if (interval \u003e 1 || interval === 0) {\n    intervalType += 's';\n  }\n\n  return `${interval} ${intervalType}`;\n}\n\nfunction formatTitle(build) {\n  return `${build.branch} | href=${PROJECT_URL} color=${COLORS[build.status]}`;\n}\n\nfunction formatDate(build) {\n  return `${timeSince(build.finished_at)} ago - (${build.username}) | size=12`;\n}\n\nfunction formatBuild(build) {\n  return [\n    formatTitle(build),\n    formatDate(build),\n  ].join('\\n');\n}\n\nfunction handleResponse(body) {\n  const content = body.map(formatBuild).join('\\n---\\n');\n  const output = [\n    `|image=${ICON}`,\n    content,\n    `RELOAD | image=${RELOAD_ICON} refresh=true`,\n  ];\n  console.log(output.join('\\n---\\n'));\n}\n\nconst login = () =\u003e request({ method: 'POST', headers: { Authorization: `Basic ${AUTH}` } })\n  .then((d) =\u003e {\n    if (d.access_token) {\n      ACCESS_TOKEN = d.access_token;\n\n      const organization = d.organizations.find(o =\u003e o.name === ORGANIZATION_NAME);\n\n      if (!organization) {\n        throw new Error(`Organization \"${ORGANIZATION_NAME}\" not found`);\n      }\n\n      ORGANIZATION_UUID = organization.uuid;\n    }\n  })\n  .catch((error) =\u003e {\n    throw new Error(`[Login] ${error.message}`);\n  });\n\nconst getProjects = () =\u003e request({\n  path: `/organizations/${ORGANIZATION_UUID}/projects`,\n  headers: { Authorization: `Bearer ${ACCESS_TOKEN}` },\n});\n\nconst getBuilds = () =\u003e request({\n  path: `/organizations/${ORGANIZATION_UUID}/projects/${PROJECT_UUID}/builds`,\n  headers: { Authorization: `Bearer ${ACCESS_TOKEN}` },\n});\n\nlogin()\n  .then(() =\u003e {\n    getProjects()\n      .then((d) =\u003e {\n        const project = d.projects.find(p =\u003e p.id === PROJECT_ID);\n\n        if (!project) {\n          throw new Error(`Project \"${PROJECT_ID}\" not found`);\n        }\n\n        PROJECT_UUID = project.uuid;\n      })\n      .then(() =\u003e getBuilds())\n      .then(d =\u003e handleResponse(d.builds.filter((b, i) =\u003e i \u003c 15)))\n      .catch(err =\u003e console.log(err.toString()));\n  })\n  .catch(err =\u003e console.log(err.toString()));\n"
				}
			],
			"path": "Dev/Codeship/codeship.1m.js",
			"filename": "codeship.1m.js",
			"dir": "Dev/Codeship",
			"docsPlugin": "Dev/Codeship/codeship.1m.js.html",
			"docsCategory": "Dev/Codeship.html",
			"pathSegments": [
				"Dev",
				"Codeship"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Codeship",
					"text": "Codeship",
					"isLast": true
				}
			],
			"title": "Codeship",
			"version": "v1.0",
			"author": "Gil Barbara",
			"authors": [
				{
					"name": "Gil Barbara",
					"githubUsername": "gilbarbara",
					"imageURL": "https://avatars.githubusercontent.com/u/31954?v=4",
					"bio": "Coder",
					"primary": true
				}
			],
			"desc": "List recent builds.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "https://github.com/gilbarbara/bitbar-plugins",
			"lastUpdated": "2021-03-08T15:21:47.891315Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Codeship/codeship.1m.py",
					"filename": "codeship.1m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eCodeship\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDaniel Seripap\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eseripap\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eLatest build status for all projects in Codeship\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/683200/16809335/fadc3746-48ed-11e6-8c86-517dd94412ff.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nimport json\nimport urllib2\n\n# Get it here: https://codeship.com/user/edit\nAPI_KEY = ''\n\nBASE_URL = 'https://codeship.com/api/v1/projects.json?api_key=' + API_KEY\nCOLORS = {\n  'success': '#42A86F',\n  'testing': '#607192',\n  'error': '#D12C3F',\n  'stopped': '#C4CDCE'\n}\n\ndef getData():\n  try:\n    return json.load(urllib2.urlopen(BASE_URL))\n  except urllib2.URLError:\n    return False\n\ndef generateMenu(data):\n  if data is False:\n    print 'Build data unavailable'\n    return False\n\n  for project in data['projects']:\n    print project['repository_name'] + ' | href=' + 'https://codeship.com/projects/' + str(project['id'])\n    print '---'\n    for build in project['builds']:\n      print '- ' + build['branch'] + ': ' + build['status']  + ' | color=' + COLORS[build['status']] + ' href=' + 'https://codeship.com/projects/' + str(build['project_id']) + '/builds/' + str(build['id'])\n    print '---'\n\nprint 'Codeship'\nprint '---'\ngenerateMenu(getData());\n"
				}
			],
			"path": "Dev/Codeship/codeship.1m.py",
			"filename": "codeship.1m.py",
			"dir": "Dev/Codeship",
			"docsPlugin": "Dev/Codeship/codeship.1m.py.html",
			"docsCategory": "Dev/Codeship.html",
			"pathSegments": [
				"Dev",
				"Codeship"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Codeship",
					"text": "Codeship",
					"isLast": true
				}
			],
			"title": "Codeship",
			"version": "v1.0.0",
			"author": "Daniel Seripap",
			"authors": [
				{
					"name": "Daniel Seripap",
					"githubUsername": "seripap",
					"imageURL": "https://avatars.githubusercontent.com/u/683200?v=4",
					"bio": "untitled_document.html",
					"primary": true
				}
			],
			"desc": "Latest build status for all projects in Codeship",
			"imageURL": "https://cloud.githubusercontent.com/assets/683200/16809335/fadc3746-48ed-11e6-8c86-517dd94412ff.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:47.890822Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Codeship/codeship-single.30s.py",
					"filename": "codeship-single.30s.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eCodeship Single Project\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDaniel Seripap\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eseripap\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eLatest build status for individual Codeship project\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/683200/16809236/8fffa28c-48ed-11e6-9060-e42992612f50.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nimport json\nimport urllib2\n\n# Get it here: https://codeship.com/user/edit\nAPI_KEY = ''\n# Modify accordingly\nPROJECT_ID = 0\n\nBASE_URL = 'https://codeship.com/api/v1/projects.json?api_key=' + API_KEY\nHREF_URL = 'https://codeship.com/projects/' + str(PROJECT_ID) + '/builds/'\nCOLORS = {\n  'success': '#42A86F',\n  'testing': '#607192',\n  'error': '#D12C3F',  \n  'stopped': '#C4CDCE'\n}\n\ndef getData():\n  try:\n    return json.load(urllib2.urlopen(BASE_URL))\n  except urllib2.URLError:\n    return False\n\ndef generate(data):\n  header = []\n  menu = []\n  if data is False:\n    print 'Build data unavailable'\n    return False\n\n  for project in data['projects']:\n    if PROJECT_ID == project['id']:\n      index = 0;\n      latest = False;\n      for build in project['builds']:\n        menu.append('- ' + build['branch'] + ': ' + build['status'] + ' | color=' + COLORS[build['status']] + ' href=' + HREF_URL + str(build['id']))\n        if index == 0:\n          index = 1\n          latest = COLORS[build['status']]\n\n      header.append(project['repository_name'] + ' | color=' + latest)\n      header.append('---')\n\n  for line in header:\n      print line.encode('utf-8')\n  for line in menu:\n      print line.encode('utf-8')\n\ngenerate(getData());\n"
				}
			],
			"path": "Dev/Codeship/codeship-single.30s.py",
			"filename": "codeship-single.30s.py",
			"dir": "Dev/Codeship",
			"docsPlugin": "Dev/Codeship/codeship-single.30s.py.html",
			"docsCategory": "Dev/Codeship.html",
			"pathSegments": [
				"Dev",
				"Codeship"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Codeship",
					"text": "Codeship",
					"isLast": true
				}
			],
			"title": "Codeship Single Project",
			"version": "v1.0.0",
			"author": "Daniel Seripap",
			"authors": [
				{
					"name": "Daniel Seripap",
					"githubUsername": "seripap",
					"imageURL": "https://avatars.githubusercontent.com/u/683200?v=4",
					"bio": "untitled_document.html",
					"primary": true
				}
			],
			"desc": "Latest build status for individual Codeship project",
			"imageURL": "https://cloud.githubusercontent.com/assets/683200/16809236/8fffa28c-48ed-11e6-9060-e42992612f50.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:47.83619Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Tutorial/cycle_text_and_detail.sh",
					"filename": "cycle_text_and_detail.sh",
					"content": "#!/bin/bash\n\n#\n# Include BitBar metadata like this at the top of the file\n# (commented out, of course):\n#\n# \u003cbitbar.title\u003eCycle text and detail text\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMat Ryer\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ematryer\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eExample of how to include items that cycle in the top, and items that only appear in the dropdown.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://camo.githubusercontent.com/5cec3248a9fc4eede235ead682a65f977577f670/68747470733a2f2f7261772e6769746875622e636f6d2f6d6174727965722f6269746261722f6d61737465722f446f63732f4269744261722d4578616d706c652d4d656e752e706e67\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/Tutorial/cycle_text_and_detail.sh\u003c/bitbar.abouturl\u003e\n#\n# Text above --- will be cycled through in the menu bar,\n# whereas text underneath will be visible only when you\n# open the menu.\n#\n\necho one\necho two\necho three\necho ---\necho These lines are only visible\necho when you open the menu.\n"
				}
			],
			"path": "Dev/Tutorial/cycle_text_and_detail.sh",
			"filename": "cycle_text_and_detail.sh",
			"dir": "Dev/Tutorial",
			"docsPlugin": "Dev/Tutorial/cycle_text_and_detail.sh.html",
			"docsCategory": "Dev/Tutorial.html",
			"pathSegments": [
				"Dev",
				"Tutorial"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Tutorial",
					"text": "Tutorial",
					"isLast": true
				}
			],
			"title": "Cycle text and detail text",
			"version": "v1.0",
			"author": "Mat Ryer",
			"authors": [
				{
					"name": "Mat Ryer",
					"githubUsername": "matryer",
					"imageURL": "https://avatars.githubusercontent.com/u/101659?v=4",
					"bio": "Building pace.dev and firesearch.dev - Gopher, developer, speaker, author (Go Programming Blueprints) - BitBar app getbitbar.com - Co-creator Gopherize.me",
					"primary": true
				}
			],
			"desc": "Example of how to include items that cycle in the top, and items that only appear in the dropdown.",
			"imageURL": "https://camo.githubusercontent.com/5cec3248a9fc4eede235ead682a65f977577f670/68747470733a2f2f7261772e6769746875622e636f6d2f6d6174727965722f6269746261722f6d61737465722f446f63732f4269744261722d4578616d706c652d4d656e752e706e67",
			"dependencies": null,
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/Tutorial/cycle_text_and_detail.sh",
			"lastUpdated": "2021-03-08T15:21:50.262482Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Git/daily-standup.sh",
					"filename": "daily-standup.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eDaily Standup\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKrishna Kumar\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekrishkumar\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays a list of all your git commits in the last 24 hours. Indicates days you have been chilling without committing any code. \u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://raw.githubusercontent.com/krishkumar/daily-standup/master/daily-standup-gold.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/krishkumar/daily-standup\u003c/bitbar.abouturl\u003e\n#\n# Dependencies: You need to have git-standup installed.\n# To install git-standup on OSX with homebrew, open Terminal and run - $ brew install git-standup\n# For other installation options, see this page - https://github.com/kamranahmedse/git-standup\n\n\n# Constants\nCOMMITINDICATOR=\"\"\nGOLDMEDAL=🥇 # More than 5 commits today\nSILVERMEDAL=🥈 # More than 3 commits today\nBRONZEMEDAL=🥉 # Atleast 1 commit today\nPROJECTINDICATOR=📂\nEMPTY_INDICATOR=❄️\nALERT_INDICATOR=🚨\nDAYS_SINCE_COMMIT_MESSAGE=\"Earn medals... Get to work! | color=blue\"\nDAYS_SINCE_COMMIT_CONTENT=\" days since last commit \"\nuser=$(whoami)\nPROJECTS_DIRECTORY=\"/Users/$user/projects/\"\nDAYS_SINCE_COMMIT=0\n\n# Start\nCOUNT=$(cd \"$PROJECTS_DIRECTORY\" || exit ;/usr/local/bin/git-standup | grep -c \"\u003c$user\u003e\")\nCOUNT=\"$COUNT\"\nif [ \"$COUNT\" = 0 ]\nthen\n    COUNT=\"\"\n    COMMITINDICATOR=$EMPTY_INDICATOR\n    DAYS_SINCE_COMMIT=1\n    COUNT2=$(cd \"$PROJECTS_DIRECTORY\" || exit ;/usr/local/bin/git-standup -d 2 | grep -c \"\u003c$user\u003e\")\n    COUNT3=$(cd \"$PROJECTS_DIRECTORY\" || exit ;/usr/local/bin/git-standup -d 3 | grep -c \"\u003c$user\u003e\") \n    COUNT4=$(cd \"$PROJECTS_DIRECTORY\" || exit ;/usr/local/bin/git-standup -d 4 | grep -c \"\u003c$user\u003e\") \n    COUNT5=$(cd \"$PROJECTS_DIRECTORY\" || exit ;/usr/local/bin/git-standup -d 5 | grep -c \"\u003c$user\u003e\") \n    COUNT6=$(cd \"$PROJECTS_DIRECTORY\" || exit ;/usr/local/bin/git-standup -d 6 | grep -c \"\u003c$user\u003e\") \n    COUNT7=$(cd \"$PROJECTS_DIRECTORY\" || exit ;/usr/local/bin/git-standup -d 7 | grep -c \"\u003c$user\u003e\") \n    COUNT8=$(cd \"$PROJECTS_DIRECTORY\" || exit ;/usr/local/bin/git-standup -d 8 | grep -c \"\u003c$user\u003e\") \n    if [ \"$COUNT2\" = 0 ]\n    then\n      COUNT=\"\"\n      COMMITINDICATOR=$EMPTY_INDICATOR$EMPTY_INDICATOR\n      DAYS_SINCE_COMMIT=2\n    fi\n    if [ \"$COUNT3\" = 0 ]\n    then\n      COUNT=\"\"\n      COMMITINDICATOR=$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR\n      DAYS_SINCE_COMMIT=3\n    fi\n    if [ \"$COUNT4\" = 0 ]\n    then\n      COUNT=\"\"\n      COMMITINDICATOR=$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR\n      DAYS_SINCE_COMMIT=4\n    fi\n    if [ \"$COUNT5\" = 0 ]\n    then\n      COUNT=\"\"\n      COMMITINDICATOR=$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR\n      DAYS_SINCE_COMMIT=5\n    fi\n    if [ \"$COUNT6\" = 0 ]\n    then\n      COUNT=\"\"\n      COMMITINDICATOR=$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR\n      DAYS_SINCE_COMMIT=6\n    fi\n    if [ \"$COUNT7\" = 0 ]\n    then\n      COUNT=\"\"\n      COMMITINDICATOR=$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR$EMPTY_INDICATOR\n      DAYS_SINCE_COMMIT=7\n    fi\n    if [ \"$COUNT8\" = 0 ]\n    then\n      COUNT=\"\"\n      COMMITINDICATOR=$ALERT_INDICATOR\n      DAYS_SINCE_COMMIT=7+\n    fi\nfi\nif [[ $COUNT -gt 0 ]]\n  then\n  #statements\n  COMMITINDICATOR=$BRONZEMEDAL\nfi\nif [[ $COUNT -gt 2 ]]\n then\n  #statements\n  COMMITINDICATOR=$SILVERMEDAL\nfi\nif [[ $COUNT -gt 5 ]]\n  then\n  #statements\n  COMMITINDICATOR=$GOLDMEDAL\nfi\necho $COMMITINDICATOR\n\necho ---\n\n# On Click\ncd \"$PROJECTS_DIRECTORY\" || exit \nSTANDUP=$(/usr/local/bin/git-standup)\nif [[ -z \"$STANDUP\" ]]; then\n  echo \"$DAYS_SINCE_COMMIT| size=30 \"\n  echo \"$DAYS_SINCE_COMMIT_CONTENT\"\n  echo \"$DAYS_SINCE_COMMIT_MESSAGE\"\nelif [[ -n \"$STANDUP\" ]]; then\n  /usr/local/bin/git-standup | sed \"s@$PROJECTS_DIRECTORY@$PROJECTINDICATOR@;n\"\nfi\n"
				}
			],
			"path": "Dev/Git/daily-standup.sh",
			"filename": "daily-standup.sh",
			"dir": "Dev/Git",
			"docsPlugin": "Dev/Git/daily-standup.sh.html",
			"docsCategory": "Dev/Git.html",
			"pathSegments": [
				"Dev",
				"Git"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Git",
					"text": "Git",
					"isLast": true
				}
			],
			"title": "Daily Standup",
			"version": "v1.0",
			"author": "Krishna Kumar",
			"authors": [
				{
					"name": "Krishna",
					"githubUsername": "krishkumar",
					"imageURL": "https://avatars.githubusercontent.com/u/425580?v=4",
					"bio": "\r\n    iOS main. generalist in security, AR, ML. ex 7-11, PayPal.\r\n\r\n\r\n",
					"primary": true
				}
			],
			"desc": "Displays a list of all your git commits in the last 24 hours. Indicates days you have been chilling without committing any code. ",
			"imageURL": "http://raw.githubusercontent.com/krishkumar/daily-standup/master/daily-standup-gold.png",
			"dependencies": null,
			"aboutURL": "https://github.com/krishkumar/daily-standup",
			"lastUpdated": "2021-03-08T15:21:48.114098Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Hosting/DigitalOcean/digitalocean.1h.js",
					"filename": "digitalocean.1h.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n/* jshint esversion: 6 */\n\n/*\n * \u003cbitbar.title\u003eDigitalOcean\u003c/bitbar.title\u003e\n * \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n * \u003cbitbar.author\u003eHasit Mistry\u003c/bitbar.author\u003e\n * \u003cbitbar.author.github\u003ehasit\u003c/bitbar.author.github\u003e\n * \u003cbitbar.image\u003ehttp://i.imgur.com/1YTWFSn.png\u003c/bitbar.image\u003e\n * \u003cbitbar.desc\u003eView status of DigitalOcean Droplets\u003c/bitbar.desc\u003e\n * \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n */\n\nvar https = require('https');\n\nvar hostname = 'api.digitalocean.com';\n\n// Add your Digital Ocean token.\n// If you have different DO teams you can add multiple tokens: ['DO_TOKEN_1', 'DO_TOKEN_2', ...]\nvar DOTokens = ['DO_TOKEN'];\n\nvar menuBarIcon = '💧';\nvar startMenu = '---';\n\nconsole.log(menuBarIcon);\nconsole.log(startMenu);\n\nfor (var i = 0; i \u003c DOTokens.length; i++) {\n    if (DOTokens.length == 1 \u0026\u0026 DOTokens[0] === 'DO_TOKEN') {\n        console.log('DO token is missing!');\n    } else {\n        tokenIndex = i;\n        getDroplets();\n    }\n}\n\nfunction getDroplets() {\n    performRequest('/v2/droplets', 'GET', function(data) {\n        var droplets = data.droplets;\n\n        for (var i = 0; i \u003c droplets.length; i++) {\n            var status = 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAMAAABhq6zVAAAAXVBMVEUAAADAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvAOSvGu33lAAAAHnRSTlMAAwYHCQoQEh0fNVBRX2N5fJG+wMfK3O3v8fP3+/37J2BkAAAATklEQVQIHQXBhQHCAADAsA53d1j+P5OkqoaqqmbHr/G8rGr1BuOmmjwB47L2AM51A/CrFwBDFwDf2gI41fAAfObV4gFe66qG3fV9P0yrPxEfCr3MVhkLAAAAAElFTkSuQmCC';\n            var date = new Date(droplets[i].created_at);\n            var humanDate = date.getFullYear() + '/' + date.getMonth() + 1 + '/' + date.getDate() + ' ' + date.getHours() + ':' + date.getMinutes();\n\n            if (droplets[i].status === 'active') {\n                status = 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAMAAABhq6zVAAAAXVBMVEUAAAAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmAnrmCynqnaAAAAHnRSTlMAAwYHCQoQEh0fNVBRX2N5fJG+wMfK3O3v8fP3+/37J2BkAAAATklEQVQIHQXBhQHCAADAsA53d1j+P5OkqoaqqmbHr/G8rGr1BuOmmjwB47L2AM51A/CrFwBDFwDf2gI41fAAfObV4gFe66qG3fV9P0yrPxEfCr3MVhkLAAAAAElFTkSuQmCC';\n            }\n\n            printBitBarLine(droplets[i].name, ['color=black', 'image=' + status]);\n\n            // Open in browser and console\n            printBitBarLine('--Open in browser', ['href=https://cloud.digitalocean.com/droplets/' + droplets[i].id]);\n            printBitBarLine('--Connect to console', ['href=https://cloud.digitalocean.com/droplets/' + droplets[i].id + '/console?no_layout=true']);\n\n            // Droplet creation date and time\n            printBitBarLine('-----');\n            printBitBarLine('--Created');\n            printBitBarLine('--' + humanDate, ['color=black']);\n\n            // Droplet IPv4 address\n            printBitBarLine('-----');\n            printBitBarLine('--IP Address');\n            printBitBarLine('--' + droplets[i].networks.v4[0].ip_address, ['color=black']);\n\n            // Droplet region\n            printBitBarLine('-----');\n            printBitBarLine('--Region');\n            printBitBarLine('--' + droplets[i].region.name, ['color=black']);\n\n            // Droplet details - image, memory, storage, vcpus\n            printBitBarLine('-----');\n            printBitBarLine('--Details');\n            printBitBarLine('--Image: ' + droplets[i].image.distribution + droplets[i].image.name, ['color=black']);\n            printBitBarLine('--Memory: ' + droplets[i].memory + 'MB', ['color=black']);\n            printBitBarLine('--Storage: ' + droplets[i].disk + 'GB', ['color=black']);\n            printBitBarLine('--CPUs: ' + droplets[i].vcpus, ['color=black']);\n        }\n    });\n}\n\nfunction printBitBarLine(title, args) {\n    var lineArgs = [];\n\n    if (title !== '-----') {\n        for (var i in args) {\n            lineArgs.push(args[i]);\n        }\n\n        if (lineArgs.length !== 0) {\n            title = title + '|';\n        }\n    }\n\n    console.log(title + lineArgs.join(' '));\n}\n\nfunction performRequest(endpoint, method, success) {\n    var headers = {};\n\n    headers = {\n        'Authorization': 'Bearer ' + DOTokens[tokenIndex],\n        'Content-Type': 'application/json'\n    };\n\n    var options = {\n        host: hostname,\n        path: endpoint,\n        method: method,\n        headers: headers\n    };\n\n    var req = https.request(options, function(res) {\n        res.setEncoding('utf-8');\n\n        var responseString = '';\n\n        res.on('data', function(data) {\n            responseString += data;\n        });\n\n        res.on('end', function() {\n            var responseObject = JSON.parse(responseString);\n            success(responseObject);\n        });\n    });\n\n    req.end();\n\n    req.on('error', function(err) {\n        console.log(err);\n    });\n}\n"
				}
			],
			"path": "Dev/Hosting/DigitalOcean/digitalocean.1h.js",
			"filename": "digitalocean.1h.js",
			"dir": "Dev/Hosting/DigitalOcean",
			"docsPlugin": "Dev/Hosting/DigitalOcean/digitalocean.1h.js.html",
			"docsCategory": "Dev/Hosting/DigitalOcean.html",
			"pathSegments": [
				"Dev",
				"Hosting",
				"DigitalOcean"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Hosting",
					"text": "Hosting",
					"isLast": false
				},
				{
					"path": "Dev/Hosting/DigitalOcean",
					"text": "DigitalOcean",
					"isLast": true
				}
			],
			"title": "DigitalOcean",
			"version": "v1.0",
			"author": "Hasit Mistry",
			"authors": [
				{
					"name": "Hasit Mistry",
					"githubUsername": "hasit",
					"imageURL": "https://avatars.githubusercontent.com/u/1553055?v=4",
					"bio": "I am a software engineer who designs and develops web apps, system level tools and CLI tools. My primary language is Go.",
					"primary": true
				}
			],
			"desc": "View status of DigitalOcean Droplets",
			"imageURL": "http://i.imgur.com/1YTWFSn.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.081264Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Docker/docker-status.1m.sh",
					"filename": "docker-status.1m.sh",
					"content": "#!/usr/bin/env bash\n#\n# \u003cbitbar.title\u003eDocker Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eManoj Mahalingam\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emanojlds\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/191378/12255368/1e671b32-b919-11e5-8166-6d975396f408.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eDisplays the status of docker machines and running containers\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eshell,docker\u003c/bitbar.dependencies\u003e\n#\n# Docker status plugin\n# by Manoj Mahalingam (@manojlds)\n#\n# Displays the status of docker machines and running containers\n\nexport PATH=\"/usr/local/bin:/usr/bin:$PATH\"\necho \"⚓️ | dropdown=false\"\necho \"---\"\n\nfunction containers() {\n  CONTAINERS=\"$(docker ps -a --format \"{{.Names}} ({{.Image}})|{{.ID}}|{{.Status}}\")\"\n  if [ -z \"$CONTAINERS\" ]; then\n    echo \"No running containers\"\n  else\n    LAST_CONTAINER=$(echo \"$CONTAINERS\" | tail -n1 )\n    echo \"${CONTAINERS}\" | while read -r CONTAINER; do\n      CONTAINER_NAME=$(echo \"$CONTAINER\" | awk -F\"|\" '{print $1}')\n      CONTAINER_ID=$(echo \"$CONTAINER\" | awk -F\"|\" '{print $2}')\n      CONTAINER_STATE=$(echo \"$CONTAINER\" | awk -F\"|\" '{print $3}')\n      SYM=\"├ 💻 \"\n      if [ \"$CONTAINER\" = \"$LAST_CONTAINER\" ]; then SYM=\"└ 💻 \"; fi\n      case \"$CONTAINER_STATE\" in\n        *Up*) echo \"$SYM $CONTAINER_NAME | color=green bash=\\\"$(command -v docker)\\\" param1=stop param2=$CONTAINER_ID terminal=false refresh=true\";;\n        *Exited*) echo \"$SYM $CONTAINER_NAME | color=red bash=\\\"$(command -v docker)\\\" param1=start param2=$CONTAINER_ID terminal=false refresh=true\";;\n      esac\n    done\n  fi\n}\n\nif command -v docker-machine \u003e /dev/null; then\n    DOCKER_MACHINES=\"$(docker-machine ls -q)\"\nfi\nif command -v dlite \u003e /dev/null; then\n    DLITE=\"$(command -v dlite)\"\nfi\nif command -v docker \u003e /dev/null; then\n    DOCKER_NATIVE=\"$(command -v docker)\"\nfi\n\nif test -z \"$DOCKER_MACHINES\" \u0026\u0026 test -z \"$DLITE\" \u0026\u0026 test -z \"$DOCKER_NATIVE\"; then\n  echo \"No docker machine, dlite or docker native found\"\n  exit 0\nfi\n\nif [ -n \"$DOCKER_NATIVE\" ]; then\n  MACHINE=\"$($DOCKER_NATIVE -v)\"\n  CONTAINERS=\"$($DOCKER_NATIVE ps -a --format \"{{.Names}} ({{.Image}})|{{.ID}}|{{.Status}}\")\"\n  if [ -n \"$CONTAINERS\" ]; then\n    echo \"🔵  $MACHINE | bash=\\\"$DOCKER_NATIVE\\\" param1=stop terminal=false refresh=true\"\n    containers\n  fi\n  exit 0\nfi\n\nif [ -n \"$DLITE\" ]; then\n  MACHINE=\"$($DLITE ip)\"\n  CONTAINERS=\"$(docker ps -a --format \"{{.Names}} ({{.Image}})|{{.ID}}|{{.Status}}\")\"\n  if [ -z \"$CONTAINERS\" ]; then\n    echo \"🔴  $MACHINE | bash=\\\"$DLITE\\\" param1=start terminal=false refresh=true\"\n  else\n    echo \"🔵  $MACHINE | bash=\\\"$DLITE\\\" param1=stop terminal=false refresh=true\"\n    containers\n  fi\n  exit 0\nfi\n\nif [ -n \"$DOCKER_MACHINES\" ]; then\n  DM_EXEC=$(command -v docker-machine)\n  echo \"${DOCKER_MACHINES}\" | while read -r machine; do\n    STATUS=$($DM_EXEC status \"$machine\")\n    if [ \"$STATUS\" = \"Running\" ]; then\n      echo \"🔵  $machine | bash=\\\"$DM_EXEC\\\" param1=stop param2=$machine terminal=false refresh=true\"\n      ENV=$($DM_EXEC env --shell sh \"$machine\")\n      eval \"$ENV\"\n      containers\n    else\n      echo \"🔴  $machine | bash=\\\"$DM_EXEC\\\" param1=start param2=$machine terminal=false refresh=true\"\n    fi\n    echo \"---\"\n  done\nfi\n\nif [ -n \"$CONTAINERS\" ]; then\n  echo \"Docker VM Containers\"\n  containers\nfi\n"
				}
			],
			"path": "Dev/Docker/docker-status.1m.sh",
			"filename": "docker-status.1m.sh",
			"dir": "Dev/Docker",
			"docsPlugin": "Dev/Docker/docker-status.1m.sh.html",
			"docsCategory": "Dev/Docker.html",
			"pathSegments": [
				"Dev",
				"Docker"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Docker",
					"text": "Docker",
					"isLast": true
				}
			],
			"title": "Docker Status",
			"version": "v1.2",
			"author": "Manoj Mahalingam",
			"authors": [
				{
					"name": "Manoj",
					"githubUsername": "manojlds",
					"imageURL": "https://avatars.githubusercontent.com/u/191378?v=4",
					"bio": "Principal Engineer @avalara. Previously @indix @thoughtworks. #kubernetes #terraform #docker #scala #javascript #nodejs. Author of http://bit.ly/learningci ",
					"primary": true
				}
			],
			"desc": "Displays the status of docker machines and running containers",
			"imageURL": "https://cloud.githubusercontent.com/assets/191378/12255368/1e671b32-b919-11e5-8166-6d975396f408.png",
			"dependencies": [
				"shell",
				"docker"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:47.905143Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Docker/docker-disk.1m.sh",
					"filename": "docker-disk.1m.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eDocker disk usage\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eHoratiu Ion\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eLink512\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows docker disk usage (via docker system df).\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash,docker\u003c/bitbar.dependencies\u003e\n#\n# Docker disk usage plugin\n#\n# Displays the total disk usage of docker. Clicking the menu will show a detailed breakdown (images, containers, volumes, build cache)\n\nexport PATH=\"/usr/local/bin:/usr/bin:$PATH\"\nDOCKER=\"$(command -v docker)\"\n\nhumanize() {\n    local L_BYTES=\"${1:-0}\"\n    local L_BASE=\"${2:-1000}\"\n    echo \"$1\" | awk -v bytes=\"${L_BYTES}\" -v base=\"${L_BASE}\" 'function human(x, base) {\n         if(base!=1024)base=1000\n         basesuf=(base==1024)?\"iB\":\"B\"\n\n         s=\"BKMGTEPYZ\"\n         while (x\u003e=base \u0026\u0026 length(s)\u003e1)\n               {x/=base; s=substr(s,2)}\n         s=substr(s,1,1)\n\n         xf=((s==\"B\")?\"%d\":\"%.2f\")\n         s=(s!=\"B\") ? (s basesuf) : s\n\n         return sprintf( (xf \" %s\\n\"), x, s)\n      }\n      BEGIN{print human(bytes, base)}'\n}\n\ndehumanise() {\n    read -r v\n    echo \"$v\" | awk \\\n        'BEGIN{IGNORECASE = 1}\n        function printpower(n,b,p) {printf \"%d\\n\", n*b^p}\n        /[0-9](B)?$/{ printpower($1, 10,  1); next;};\n        /K(B)?$/{     printpower($1, 10,  3); next;};\n        /M(B)?$/{     printpower($1, 10,  6); next;};\n        /G(B)?$/{     printpower($1, 10,  9); next;};\n        /T(B)?$/{     printpower($1, 10, 12); next;};'\n}\n\nDOCKER_DF=$(${DOCKER} system df --format \"{{.Size}}\")\n\nIMAGE_SIZES=$(echo \"${DOCKER_DF}\" | sed -n 1p | dehumanise)\nCONTAINER_SIZES=$(echo \"${DOCKER_DF}\" | sed -n 2p | dehumanise)\nVOLUME_SIZES=$(echo \"${DOCKER_DF}\" | sed -n 3p | dehumanise)\nBUILD_SIZES=$(echo \"${DOCKER_DF}\" | sed -n 4p | dehumanise)\n\nTOTAL=$((IMAGE_SIZES + CONTAINER_SIZES + VOLUME_SIZES + BUILD_SIZES))\n\necho \"🐳: $(humanize ${TOTAL})\"\necho \"---\"\necho \"images: $(echo \"${DOCKER_DF}\" | sed -n 1p)\"\necho \"containers: $(echo \"${DOCKER_DF}\" | sed -n 2p)\"\necho \"volumes: $(echo \"${DOCKER_DF}\" | sed -n 3p)\"\necho \"build cache: $(echo \"${DOCKER_DF}\" | sed -n 4p)\"\necho \"---\"\necho \"Refresh | refresh=true\"\n"
				}
			],
			"path": "Dev/Docker/docker-disk.1m.sh",
			"filename": "docker-disk.1m.sh",
			"dir": "Dev/Docker",
			"docsPlugin": "Dev/Docker/docker-disk.1m.sh.html",
			"docsCategory": "Dev/Docker.html",
			"pathSegments": [
				"Dev",
				"Docker"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Docker",
					"text": "Docker",
					"isLast": true
				}
			],
			"title": "Docker disk usage",
			"version": "v0.0.1",
			"author": "Horatiu Ion",
			"authors": [
				{
					"name": "Horatiu Ion",
					"githubUsername": "Link512",
					"imageURL": "https://avatars.githubusercontent.com/u/4046355?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows docker disk usage (via docker system df).",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash",
				"docker"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:47.894375Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Docker/docker-sync-status.1m.sh",
					"filename": "docker-sync-status.1m.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eDocker-Sync Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBrendan Shanny\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebrenshanny\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay the current status of docker-sync.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/LbaqXzU.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003edocker-sync\u003c/bitbar.dependencies\u003e\n#\n# Docker-Sync Status Plugin\n#\n# by Brendan Shanny\n#\n# To get started, create a new text file in your project tree that docker-sync will watch\n# then edit the docker_log and docker_checker vars below to be the paths to your\n# docker_sync daemon.log and the newly created text file.\n\nerror_status=\"❌\"\nerror_message=\"Docker-Sync does not appear to by syncing | color=#ff0000\"\n\nsuccess_status=\"🛰\"\nsuccess_message=\"Docker-Sync is Running | color=#008000\"\n\n# The path to your docker-sync daemon.log file\ndocker_log=\"/path/to/your/project/.docker-sync/daemon.log\"\n# The path to a text file within your project that docker-sync will watch\ndocker_checker=\"/path/to/your/project/docker-sync-checker.txt\"\n\nfirst_file_access=$(stat -f '%m' $docker_log)\n\n# Trigger a sync of the file\necho \"test docker-sync\" \u003e\u003e $docker_checker\n\n# 3s works just fine, 5s provides a safety margin\nsleep 5\n\nsecond_file_access=$(stat -f '%m' $docker_log)\n\n# Reset the file\necho \"This file is used by the bitbar docker-sync-status plugin to check the status of docker-sync.\" \u003e $docker_checker\n\nif [ \"$first_file_access\" == \"$second_file_access\" ]; then\n  sync_status=$error_status\n  sync_message=$error_message\nelse\n  sync_status=$success_status\n  sync_message=$success_message\nfi\necho \"$sync_status\"\necho \"---\"\necho \"$sync_message\"\n"
				}
			],
			"path": "Dev/Docker/docker-sync-status.1m.sh",
			"filename": "docker-sync-status.1m.sh",
			"dir": "Dev/Docker",
			"docsPlugin": "Dev/Docker/docker-sync-status.1m.sh.html",
			"docsCategory": "Dev/Docker.html",
			"pathSegments": [
				"Dev",
				"Docker"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Docker",
					"text": "Docker",
					"isLast": true
				}
			],
			"title": "Docker-Sync Status",
			"version": "v1.0.0",
			"author": "Brendan Shanny",
			"authors": [
				{
					"name": "Brendan Shanny",
					"githubUsername": "brenshanny",
					"imageURL": "https://avatars.githubusercontent.com/u/13106568?v=4",
					"bio": "Senior Software Engineer at @securedocs ",
					"primary": true
				}
			],
			"desc": "Display the current status of docker-sync.",
			"imageURL": "https://i.imgur.com/LbaqXzU.png",
			"dependencies": [
				"docker-sync"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:47.922608Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/emacs-package-updates.1d.sh",
					"filename": "emacs-package-updates.1d.sh",
					"content": "#!/bin/sh\n\n# \u003cbitbar.title\u003eEmacs Package Updates\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTakashi Masuda\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emasutaka\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eList available updates from Emacs package\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/SBlrP2t.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eemacs\u003c/bitbar.dependencies\u003e\n\nEMACS=$(command -v emacs)\n\nexit_with_error() {\n  echo \"🐮err | color=red\";\n  exit 1;\n}\n\ncat \u003c\u003cEOE \u003e /tmp/emacs-package-updates.el\n(require 'package)\n\n(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)\n(package-initialize)\n\n(defun melpa-archive-contents ()\n  (let ((archive-contents (expand-file-name \"elpa/archives/melpa/archive-contents\"\n                                            user-emacs-directory))\n        lisp)\n    (when (file-readable-p archive-contents)\n      (with-temp-buffer\n        (progn\n          (insert-file-contents archive-contents)\n          (setq lisp\n                (condition-case nil\n                    (read (current-buffer))\n                  (error ()))))))\n    lisp))\n\n(catch 'success\n  (let ((retry-count 0))\n    (while (\u003c retry-count 3)\n      (list-packages)\n      (if (last (melpa-archive-contents))\n          (throw 'success \"list-packages() succeeded.\")\n        (setq retry-count (+ retry-count 1)))\n      (sleep-for 3))\n    (error (format \"list-packages() failed with retry count %d.\" retry-count))))\n\n(defun my-package-version (pkg-desc)\n  (package-version-join (package-desc-version pkg-desc)))\n\n(let ((upgrades (with-current-buffer \"*Packages*\"\n                  (package-menu--find-upgrades)))\n      pkg-desc pkg-name)\n  (message \"🐮%d\" (length upgrades))\n  (message \"---\")\n  (dolist (upgrade upgrades)\n    (setq pkg-desc (cdr upgrade))\n    (setq pkg-name (package-desc-name pkg-desc))\n    (message \"%s (%s \u003c %s)\"\n             pkg-name\n             (my-package-version (cadr (assoc pkg-name package-alist)))\n             (my-package-version pkg-desc)))\n  (message \"---\")\n  (message \"Refresh... | refresh=true\"))\nEOE\n\n($EMACS -Q --batch -l /tmp/emacs-package-updates.el 2\u003e\u00261 || exit_with_error) | sed -ne '/🐮/,$p'\n"
				}
			],
			"path": "Dev/emacs-package-updates.1d.sh",
			"filename": "emacs-package-updates.1d.sh",
			"dir": "Dev",
			"docsPlugin": "Dev/emacs-package-updates.1d.sh.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Emacs Package Updates",
			"version": "v1.2",
			"author": "Takashi Masuda",
			"authors": [
				{
					"name": "Takashi Masuda",
					"githubUsername": "masutaka",
					"imageURL": "https://avatars.githubusercontent.com/u/170014?v=4",
					"bio": "\r\n    I like curry! 🍛\r\n",
					"primary": true
				}
			],
			"desc": "List available updates from Emacs package",
			"imageURL": "http://i.imgur.com/SBlrP2t.png",
			"dependencies": [
				"emacs"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:51.274499Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Git/gitfinderinfo.1s.sh",
					"filename": "gitfinderinfo.1s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eFinder Git Info\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMiguel Carvalho\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emmcarvalho\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays the active git branch of the focused finder Window in the menu bar. When open, lists all finder windows with active git projects.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/mmcarvalho/git-finder-info/main/gitfinderinfo-screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/mmcarvalho/git-finder-info\u003c/bitbar.abouturl\u003e\n#\n# Dependencies: none.\n\nread -d '' get_windows \u003c\u003cEOL\ntell application \"Finder\"\n\tset mywindowlist to the name of every window\n\t# send result as text to bash - avoid strange chars. \n\t# @todo: improve it using 'text item delimiters' or move functionality to bash completely. \n\tset windowsPaths to \"\"\n\trepeat with thePath in mywindowlist\n\t\tset windowsPaths to windowsPaths \u0026 thePath \u0026 \"|\"\n\tend repeat\nend tell\nEOL\nwindows_list=$(osascript -e \"${get_windows}\")\nif [ -n \"$windows_list\" ]; then\n\tIFS='|'\n\tread -a paths \u003c\u003c\u003c \"$windows_list\"\n    i=0\n    for path in \"${paths[@]}\"\n    do\n        git_path=\"${path}/.git\"\n        if [ -d \"$git_path\" ]; then\n            branch=$(cd \"${path}\" \u0026\u0026 git branch --show-current)\n            basename=$(basename ${path})\n            if [ \"$i\" -eq \"0\" ]; then\n                echo \"𣎴 $branch\"\n                echo ---\n            fi\n\t\t\techo \"📂 $branch ($basename)\"\n\t\telse\n\t\t\tif [ \"$i\" -eq \"0\" ]; then\n                echo \"∅ no git dir\"\n                echo ---\n            fi\n\t\tfi\n        i=$(($i + 1))\n    done\n\techo ---\n\techo \"△ Open finder windows with active git projects.\"\nelse\n    echo \"∅ no git dir\"\nfi\n\n"
				}
			],
			"path": "Dev/Git/gitfinderinfo.1s.sh",
			"filename": "gitfinderinfo.1s.sh",
			"dir": "Dev/Git",
			"docsPlugin": "Dev/Git/gitfinderinfo.1s.sh.html",
			"docsCategory": "Dev/Git.html",
			"pathSegments": [
				"Dev",
				"Git"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Git",
					"text": "Git",
					"isLast": true
				}
			],
			"title": "Finder Git Info",
			"version": "v1.0",
			"author": "Miguel Carvalho",
			"authors": [
				{
					"name": "Miguel Carvalho",
					"githubUsername": "mmcarvalho",
					"imageURL": "https://avatars.githubusercontent.com/u/40001773?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays the active git branch of the focused finder Window in the menu bar. When open, lists all finder windows with active git projects.",
			"imageURL": "https://raw.githubusercontent.com/mmcarvalho/git-finder-info/main/gitfinderinfo-screenshot.png",
			"dependencies": null,
			"aboutURL": "https://github.com/mmcarvalho/git-finder-info",
			"lastUpdated": "2021-03-08T15:21:48.271525Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/gerrit_incoming_crs.5m.py",
					"filename": "gerrit_incoming_crs.5m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eGerrit Incoming Code Reviews\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRyan Sydnor\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eryansydnor\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays your incoming code reviews.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nimport sys\nimport json\nimport subprocess\n\ngerrit_user = 'my-gerrit-user'\ngerrit_host = 'gerrit.example.com'\ngerrit_port = '29418'\n\n\ndef query_gerrit():\n    gerrit_query = ['ssh', '%s@%s' % (gerrit_user, gerrit_host), '-p', gerrit_port,\n                    'gerrit', 'query', '--format=JSON', '--all-approvals',\n                    'status:open', 'reviewer:\"%s\"' % gerrit_user]\n    try:\n        results = subprocess.check_output(\n            gerrit_query, stderr=subprocess.STDOUT)\n        return strip_unused_results(results)\n    except:\n        print 'Unable to query gerrit'\n        print '---'\n        print \"Ensure you've uploaded your SSH key to gerrit\"\n        sys.exit(1)\n\n\ndef strip_unused_results(results):\n    # last line is blank\n    # second to last line is an aggregate\n    results = results.split('\\n')\n    results = results[:-2] if len(results) \u003e 2 else []\n    return [json.loads(x) for x in results]\n\n\ndef is_self(result):\n    return result.get('owner', {}).get('username', '') == gerrit_user\n\n\ndef filter_self(results):\n    return [x for x in results if not is_self(x)]\n\n\ndef print_results(results):\n    print '%s CRs' % len(results)\n    print '---'\n    for r in results:\n        subj = r.get('subject')\n        url = r.get('url')\n        print '%s | href=%s' % (subj, url)\n\n\ndef main():\n    all_incoming = filter_self(query_gerrit())\n    print_results(all_incoming)\n\n\nif __name__ == \"__main__\":\n    main()\n"
				}
			],
			"path": "Dev/gerrit_incoming_crs.5m.py",
			"filename": "gerrit_incoming_crs.5m.py",
			"dir": "Dev",
			"docsPlugin": "Dev/gerrit_incoming_crs.5m.py.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Gerrit Incoming Code Reviews",
			"version": "v1.0",
			"author": "Ryan Sydnor",
			"authors": [
				{
					"name": "Ryan Sydnor",
					"githubUsername": "ryansydnor",
					"imageURL": "https://avatars.githubusercontent.com/u/1832096?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays your incoming code reviews.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:51.310729Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/notifications.30s.py",
					"filename": "notifications.30s.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eGitHub Notifications\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev3.0.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMatt Sephton, Keith Cirkel, John Flesch\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eflesch\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGitHub (and GitHub:Enterprise) notifications in your menu bar!\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/hW7dw9E.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nimport json\nimport urllib2\nimport os\nimport sys\nimport re\nfrom itertools import groupby\n\n# GitHub.com\ngithub_api_key = os.getenv( 'GITHUB_TOKEN', 'Enter your GitHub.com Personal Access Token here...' )\n\n# GitHub:Enterprise (optional)\nenterprise_api_key = os.getenv( 'GITHUB_ENTERPRISE_TOKEN', 'Enter your GitHub:Enterprise Personal Access Token here...' )\nenterprise_api_url = os.getenv( 'GITHUB_ENTERPRISE_API', 'https://github.example.com/api/v3' )\n\nactive = '#4078C0'\ninactive = '#7d7d7d'\n\n# Utility Functions\n\ndef plural( word, n ):\n    return str(n) + ' ' + (word + 's' if n \u003e 1 else word)\n\ndef get_dict_subset( thedict, *keys ):\n    return dict([ (key, thedict[key]) for key in keys if key in thedict ])\n\ndef print_bitbar_line( title, **kwargs ):\n    print title + ' | ' + ( ' '.join( [ '{}={}'.format( k, v ) for k, v in kwargs.items() ] ) )\n\ndef make_github_request( url, method='GET', data=None, enterprise = False ):\n    try:\n        api_key = enterprise_api_key if enterprise else github_api_key\n        headers = {\n            'Authorization': 'token ' + api_key,\n            'Accept': 'application/json',\n        }\n        if data is not None:\n            data = json.dumps(data)\n            headers['Content-Type'] = 'application/json'\n            headers['Contnet-Length'] = len(data)\n        request = urllib2.Request( url, headers=headers )\n        request.get_method = lambda: method\n        response = urllib2.urlopen( request, data )\n        return json.load( response ) if response.headers.get('content-length', 0) \u003e 0 else {}\n    except Exception:\n        return None\n\ndef get_notifications( enterprise ):\n    url = '%s/notifications' % (enterprise_api_url if enterprise else 'https://api.github.com')\n    return make_github_request( url, enterprise=enterprise ) or []\n\ndef print_notifications( notifications, enterprise=False ):\n    notifications = sorted( notifications, key=lambda notification: notification['repository']['full_name'] )\n    for repo, repo_notifications in groupby( notifications, key=lambda notification: notification['repository']['full_name'] ):\n        if repo:\n            repo_notifications = list( repo_notifications )\n            print_bitbar_line( title=repo )\n            print_bitbar_line(\n                title='{title} - Mark {count} As Read'.format( title=repo, count=len( repo_notifications ) ),\n                alternate='true',\n                refresh='true',\n                bash=__file__,\n                terminal='false',\n                param1='readrepo',\n                param2=repo,\n                param3='--enterprise' if enterprise else None\n            )\n            for notification in repo_notifications:\n                formatted_notification = format_notification( notification )\n                print_bitbar_line( refresh='true', **get_dict_subset( formatted_notification, 'title', 'href', 'image', 'templateImage' ) )\n                print_bitbar_line(\n                    refresh='true',\n                    title='%s - Mark As Read' % formatted_notification['title'],\n                    alternate='true',\n                    bash=__file__,\n                    terminal='false',\n                    param1='readthread',\n                    param2=formatted_notification['thread'],\n                    param3='--enterprise' if enterprise else None,\n                    **get_dict_subset( formatted_notification, 'image', 'templateImage' )\n                )\n\ndef format_notification( notification ):\n    type = notification['subject']['type']\n    formatted = {\n        'thread': notification['url'],\n        'title': notification['subject']['title'].encode('utf-8'),\n        'href': notification['subject']['url'],\n        'image': 'iVBORw0KGgoAAAANSUhEUgAAAA4AAAAQCAYAAAAmlE46AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMBAJqcGAAAA',\n    }\n    if len(formatted['title']) \u003e 90:\n        formatted['title'] = formatted['title'][:79] + '…'\n    formatted['title'] = formatted['title'].replace('|','-')\n    latest_comment_url = notification.get( 'subject', {} ).get( 'latest_comment_url', None )\n    typejson = make_github_request( formatted['href'] )\n    if latest_comment_url:\n        formatted['href'] = ( make_github_request( latest_comment_url ) or {} ).get( 'html_url', formatted['href'] )\n    # Try to hack a web-viewable URL if the last check failed\n    if formatted['href']:\n        formatted['href'] = re.sub( 'api\\.|api/v3/|repos/', '', re.sub( '(pull|commit)s', ur'\\1', formatted['href'] ) )\n    if (type == 'PullRequest'):\n        if typejson and typejson['merged']:\n            formatted['image'] += 'SpJREFUKJG9kkFOwmAQhb+ZQiVx5xm4hIlncEF7jLZuWSjSeAJsvQUY4xkMHsCtcU9MXBmwJsy4EWgFEt34VpP55mX+eflhj9KoGO5jAK00LmOwoZiaYIPRbXaXRsVQRC6BvWZJ4uLJRI6DcKlUMsVl/G0CwIw3UR8V4+QKxFd9BbfDqiP6buo1sB5QjgTJ07i8aPTFgvNFa/7i7fYzaL+YpEN3zwGux4mY2QmAm6db783i0rO4bGyrh7OL66a0Bigm6d5gGkYz3brvV8a/SjeF/dPGJLrpmTMDXs/i4vTnQNYrInNm5szqvIVYbiJdCV1Z6ANwXze6em4i3SBcqi+CNVeAIFxq9dkR0+07HfHVz6rzlsLAK5keUCEu/R0hDD7C+SME6A7+Z30BqF2G+GPLjSUAAAAASUVORK5CYII='\n        elif typejson and typejson['state'] == 'closed':\n            formatted['image'] += 'Q9JREFUKJG9kjFOw0AQRd9sbAiiQOIMqWJfAInOPULANehTQIjFCbgHFS1eKhR6cDpEbyHRmljyDpWVTWJbSsOvRvvm72i+BjpkI2ZdDIBszNVzTG7HvGcx543JxmifT7KIj4FyUlaYcMjcKI8Id17Pj8JDknMvrD4zoriwRg4OMaKtU44FUhtz6z8aFW7KkC9X82mESbJghpICJDkiyimAwvV2EDG6uZMfThs3TeFYB8miP1XjFb0pdhp31cro/muijbjAUTjDtx1zttnwEnGJo8BR+DxQSAcwWv5i9vd4BZ58Yy2kgTIqq3VuAMoKEx4htCQrijaX5fMAYRoOmbMEJ0y2lhGmZcgbNdDGd9Uf3M1iNlKZZGMAAAAASUVORK5CYII='\n        else:\n            formatted['image'] += 'TJJREFUKJG9krFOAlEQRe/MLpqHnd/ATyBWsLWF+hcLPYXibvwCE/gLC2MNVrD7AbbGnpjYboBlro2QXWATabzVy5x338ydPKBC4awTVTEA8Huz9i1FI5gZBINh6+0lnHUiEXkAUGmWMGm/c7Fues4pLU9IPv+aAABm9i2qT6Pm+BECbuoqpnZWW4lmmRLG3ZdV9VyAOEyD+1JdVO4yqX+ua7UPofRHrUlEMgaA4cVYALkEACF6e/N2k4DdJCh1Ky7nENftyVACo9akcjElox3I9yfjsdoaVfFPHbtpcG2GOUy/wjS42r0QTjs3ZpibYV7kPmkxVuuGOKfIl1MAr0WjqMRcrBqec8oCVwDwnNOFnwugezkJ4+ZnFbkPeANanpwsAQr7+2m8Qab1FKcAeYgfqR/3P4pMOYR15QAAAABJRU5ErkJggg=='\n        if typejson and typejson.get( 'user', {} ).get( 'login', None ):\n            formatted['title'] += ' (by @{})'.format(typejson['user']['login'])\n    elif (type == 'RepositoryInvitation'):\n        formatted['image'] = 'iVBORw0KGgoAAAANSUhEUgAAAA4AAAAKCAYAAACE2W/HAAAAAXNSR0IArs4c6QAAAM1JREFUKBWVkD0OQUEUhcdv/ASJn55SyxLoVBJq8tZjBRQsgkZiAQoqOiQ2oFc935nMvLxEXsRJPufOufe+kTHGmBeEf3Jg3i4t8IwOP6QZzeoi+3PFt1BRkKAq+Q4uEKbdUA+/wxm6LoubshPcoO8b9lp3GOMPGPomPoInqOcV/VUfyKfwhsChegJxfS3O6R5hALpFqFY2A69osUyygT3UQOpAWwVSpt4aShAt6lWXkIUk5WiswL5qiqIODdBz6+ZirM67cwFvulwfaH0AC7M1lHL62U4AAAAASUVORK5CYII=';\n        formatted['templateImage'] = formatted.pop('image');\n        formatted['href'] = 'https://github.com/{}/invitations'.format(notification['repository']['full_name'])\n    elif (type == 'Issue'):\n        if typejson and typejson['state'] == 'closed':\n            formatted['image'] += 'YpJREFUKJGdkj9I23EQxT93SZrJQYNQ6Bo65BtQcHRpSeyUuQqNWx2ti7qJRpqhUxGX0lGhlXQ0uJhfU7cOLm3+QKCzoIjoJpp8z0HT/BpJBd90HO/dvTsePBLS36iM8Uw6vANyQNJ7RJU/wG7nmo1XLY7uCStp8uL5BJwgbJtRU8E8jImR98qoGHPZBjsSFhlsCRQjCQovD2iHhx5OEDu/ZF2E5Y4wLn/tXdMy5WO2zkqXHKQxgEy95+y7Y1KMXwogbeaBk0iCwqBn7DteAJym+NmBnSiAF3IK2/32wiIVqoGjYE1GRMlGARSSZtQGbZtq8CNwFBBWDUxgJjqI3I9Mg7XAgRoXmSYlACqOWuAG39ePimNB7+oyxuzhBLEwIUhj3c92sZckLsaSAvg2m14ZPb98eGs8ThFlqBcAx4wJX8T4cGasvm5yFRaUUjwZUd4bLKow/W/kbsWfgTMxvorxmwhtjHEPbxSGEd5many7F/JqiqdemceT88rzu3ZLoWywma1z/NA5/8UNNkSJCdaYQF4AAAAASUVORK5CYII='\n        else:\n            formatted['image'] += 'ZxJREFUKJGdkjFoU2EUhb97k9jNRzEFoWvJVHXoZCqIaQaH7JaUbtpi2zc4ORWJYKGTYJLBroFaiGPo0hBwyAOhU51Cd8EOOid53uugL4SnkOK3/dx7OPccfvhPZPqxHZUWc0gIUjFs6c/CJdDBtN580P36lzCM1jZ+mr9HuFKkJfgXABO9i/mmqOTd7VlztXcyEYbR2oabtFx5kx+Oa7VHn+LpS7bOV3K5UfBaTF+6WLW52juR7ai0mDEGovq2WezuJ8t7UdkBGsXu5KqdfvlQhOeeGRc0h4QIV/nhuDarkIVgft+xHxJnQwWpKNJKn/cvasvtkcCxuFTUsKWkiOsgrhcoBb2uIE1W4NKRO8DH6cF0KSnLewYDBTqGb26dr+Sm53tR2ZNmE8LTx3O4V9XpKKZ1FV24MZyf2aoH8YE5garXBWC3X1oX12NXO8zfvPWqttwepZ08iA9wXqDypFE8a09y7PZL64geCXx37IO4XiSZcK/+dso8bRTP2pD65DufH96WOBuKSwWlAGD4QJ2Oqtff3e99mxVnJr8AXSGi02ni0+YAAAAASUVORK5CYII='\n    elif (type == 'Commit'):\n        formatted['image'] += 'HhJREFUKJHl0LEKwkAQBNCH3yIaf05S+VUqmh8ykFoUYn8WbnEc8a7XgYVlmNkdhv/EDgNmvHDFtmXq8ETCiFvsD2xqxksI9xnXB3cqxamYceHgVOpWC6JUi/QNQxj7jDsEd6wZ83KmLOId69bXzqekOeas0eiv4g3q4SY7NY1R2gAAAABJRU5ErkJggg=='\n        formatted['templateImage'] = formatted.pop('image')\n    elif (type == 'Release'):\n        formatted['image'] += 'JdJREFUKJGl0DsKwkAUBdDTRgvFHbgmNyLY+QWzKxM/kK2kSKc70MIIQ0ziqBceA/dxinn8mSkKVMGUmH+CBWaNboQjdn2wqt97Pa8kNd5+C0O86YNdSZC34RLjCJxhHZYLXDCIxKuwTHGOwBNcm2WKUw9OcMCybZl6XjHpQOs30cB5gKNQiDPPP0WjV/a4aVwxNsNfUGce7P8k4XgVPSYAAAAASUVORK5CYII='\n        formatted['templateImage'] = formatted.pop('image')\n    return formatted\n\nif len(sys.argv) \u003e 1:\n    command = sys.argv[1]\n    args = sys.argv[2:]\n    enterprise=False\n    if ('--enterprise' in args):\n        enterprise=True\n        args.remove( '--enterprise' )\n    if command == 'readrepo':\n        url = '%s/repos/%s/notifications' % (enterprise_api_url if enterprise else 'https://api.github.com', args[0])\n        print 'Marking %s as read' % url\n        make_github_request( url=url, method='PUT', data={}, enterprise=enterprise )\n    elif command == 'readthread':\n        url = args[0]\n        print 'Marking %s as read' % url\n        make_github_request( url=url, method='PATCH', data={}, enterprise=enterprise )\n\nelse:\n    is_github_defined = len( github_api_key ) == 40\n    is_github_enterprise_defined = len( enterprise_api_key ) == 40\n    github_notifications = get_notifications( enterprise=False ) if is_github_defined else []\n    enterprise_notifications = get_notifications( enterprise=True ) if is_github_enterprise_defined else []\n    has_notifications = len( github_notifications ) + len( enterprise_notifications )\n    color = active if has_notifications else inactive\n\n    if (has_notifications):\n        print_bitbar_line(\n            title=u'\\u25CF'.encode( 'utf-8' ),\n            color=color\n        )\n        print '---'\n    else:\n        print ''\n        exit(0)\n\n    print_bitbar_line( title='Refresh', refresh='true' )\n\n    if is_github_defined:\n        if len( github_notifications ):\n            print_bitbar_line(\n                title=( u'GitHub \\u2014 %s' % plural( 'notification', len( github_notifications ) ) ).encode( 'utf-8' ),\n                color=active,\n                href='https://github.com/notifications',\n            )\n            print_notifications( github_notifications )\n        else:\n            print_bitbar_line(\n                title=u'GitHub \\u2014 No new notifications'.encode( 'utf-8' ),\n                color=inactive,\n                href='https://github.com',\n            )\n\n    if is_github_enterprise_defined:\n        if len( enterprise_notifications ):\n            if is_github_defined:\n                print '---'\n            print_bitbar_line(\n                title=( u'GitHub:Enterprise \\u2014 %s' % plural( 'notification', len( enterprise_notifications ) ) ).encode( 'utf-8' ),\n                color=active,\n                href='%s/notifications' % re.sub( '/api/v3', '',  enterprise_api_url ),\n            )\n            print_notifications( enterprise_notifications, enterprise=True )\n        else:\n            print '---'\n            print_bitbar_line(\n                title=u'GitHub:Enterprise \\u2014 No new notifications',\n                color=inactive,\n            )\n"
				}
			],
			"path": "Dev/GitHub/notifications.30s.py",
			"filename": "notifications.30s.py",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/notifications.30s.py.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "GitHub Notifications",
			"version": "v3.0.2",
			"author": "Matt Sephton,  Keith Cirkel,  John Flesch",
			"authors": [
				{
					"name": "John Flesch",
					"githubUsername": "flesch",
					"imageURL": "https://avatars.githubusercontent.com/u/13259?v=4",
					"bio": "𝕱 • Insatiable curiosity for technologies that make life better.",
					"primary": true
				},
				{
					"name": "Keith Cirkel",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				},
				{
					"name": "John Flesch",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				}
			],
			"desc": "GitHub (and GitHub:Enterprise) notifications in your menu bar!",
			"imageURL": "https://i.imgur.com/hW7dw9E.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.655336Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github_watch.1h.rb",
					"filename": "github_watch.1h.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eGitHub Watch\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eD. Khamsing\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edkhamsing\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow GitHub stars ⭐️ for a list of repos\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/z1qhSun.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/dkhamsing\u003c/bitbar.abouturl\u003e\n\nrequire 'open-uri'\nrequire 'json'\n\nREPOS = [\n  'matryer/bitbar',\n  'dkhamsing/awesome_bot'\n]\n\nVERSION = '0.1.0'\n\nCONFIG_GITHUB_WATCH = 'stargazers_count'\n\nCONFIG_SYMBOL = '★'\n\nGITHUB_REPO_API = 'https://api.github.com/repos'\n\ndef get_stars(repos)\n  s = []\n  repos.each do |r|\n    repo_url = \"#{GITHUB_REPO_API}/#{r}\"\n    c = open repo_url\n    j = JSON.parse c.read\n    s.push j[CONFIG_GITHUB_WATCH]\n  end\n  s\nend\n\ndef line(r, s)\n  repo_url = \"https://github.com/#{r}\"\n  puts \"#{r} #{CONFIG_SYMBOL} #{s} | href=#{repo_url}\"\nend\n\n# bitbar output\nbegin\nget_stars(REPOS).each_with_index { |s, i| line REPOS[i], s.to_s }\nrescue =\u003e e\n  puts \"#{CONFIG_SYMBOL} | color=red\"\n  puts \"Error: #{e}\"\n  exit\nend\n"
				}
			],
			"path": "Dev/GitHub/github_watch.1h.rb",
			"filename": "github_watch.1h.rb",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github_watch.1h.rb.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "GitHub Watch",
			"version": "v0.1.0",
			"author": "D. Khamsing",
			"authors": [
				{
					"name": "D. Khamsing",
					"githubUsername": "dkhamsing",
					"imageURL": "https://avatars.githubusercontent.com/u/4723115?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show GitHub stars ⭐️ for a list of repos",
			"imageURL": "http://i.imgur.com/z1qhSun.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/dkhamsing",
			"lastUpdated": "2021-03-08T15:21:48.615508Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github_status.10m.py",
					"filename": "github_status.10m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eGitHub status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBrett Jones\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eblockloop\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/3022496/12325555/a4b2bd9a-ba90-11e5-8254-9de54c2c6847.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eShows the current status of www.githubstatus.com. Find out if Github is having DDOS problems which will affect pushes/pulls.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n\nimport json\nimport time\nfrom datetime import datetime\n\ntry:\n    # For Python 3.0 and later\n    from urllib.request import urlopen\nexcept ImportError:\n    # Fall back to Python 2's urllib2\n    from urllib2 import urlopen\n\n# See https://www.githubstatus.com/api\nbody = urlopen(\"https://kctbh9vrtdwd.statuspage.io/api/v2/status.json\").read()\nobj = json.loads(body.decode('utf-8'))\n\nif obj[\"status\"][\"indicator\"] == \"none\":\n    # print(\"GH: ✔ | color=green\")\n    print(\"✓ | font='PilGi Regular' image=iVBORw0KGgoAAAANSUhEUgAAABgAAAAQCAYAAAF7I48DAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAARgSURBVHjaYt6/fz+Dr68vw9WrVw8xMDExfYqMjGRgYGD4DwAAAP//BMFBAQAwEMKwSprBU8MPbXjoEu7utUWFJGxD5QMAAP//Yrhw4QJECRL+//8/A9OVK1e079+/z/j48WNGBgYGBmZm5j8MDAwMAAAAAP//ZM2hEYAgGIDRj4PACtxJoHksYeNgNBormYkE7VSSC/wGowu8p5xzd61111rTez9SSmcphR8zxvgOQOac5JxprWGtfUQEE0K4vPey1lLGGGKMG8ALAAD//zyPsQqCUBiFv1sQxnWopF4hArdewAcQfIkGX8DBuUdoC+7uIAhtzvkU3gYX15ZwutLfUHamwwfng0NVVX+d1voJiFLq7Xnea+JlWSIiiAjzYRiubdseAZxzS75R4zgufh2ttUuS5A4ws9Yeoii6GGO2AE3TKGutAqjrWoVheOu6bj+N6fueOI7PQRA88jzfFEWxMsassyzb+b7/TNP0ND0WET58UTFLhlAUve8RKA0fukboM9pc1N8gNApOD/+ASzj7A5z6CTUIIoiTgwQNLraJS5A4tUUgTjaloLwWX0hEZzmXwz2He7hQFMWJEFLFcQxRFEHXdRCGISRJArIsv1ZV9bPMGAOglN7ycpIkfez8zrUgCG6OBjzP8xU/b5qmi50vubZt2zUcgPakf8EYQ3zGAAC2bT+0bYvSNEWu66Isy1DTNMiyrKc/A+q6BkEQvnzf9/M8B0rpnaIob/ypxw5nAACEENB1/dnzvEoURXAc53FZlnNN0/DvdDyOI1JVlZmmeV+W5ee6rqe+7zuM8YthGNswDOho+Cad/EGXCKA4/u64K/HuB78KlAYbft0ZaaAYLQ7XkIODiy5CDeogSU5tNgiC8VsaRA3iQBdBxEVQ4kQQEc7JQ7RB0YQLlKgO/1CYoHd6LfmD0iUa3vJ4jy/f9/08hOd5aDabj6PRaPPQpGm6FgwGnymKMsdx/I7BYLguiuJ6s9l8xnGcYlm2OJ1ObYf5VCp1QdP0J6fTeWw4kUiAw+GI/c3/v5TH43kaj8f/AOIKDI7jHiAIov6PgF6vlwRBOD8lgOh0urEkSVewaLXar2az+QOKoqgoijdlWT7b7/fYfr/fkiT5w2g0LpfLJTYYDB7udrvzw57Vam10u90nR6GtVqszAACKovrj8Rjp9Xq3TSZTgSCIj4IgPEomk/d8Pt/dQqFwv9FoOCVJ+ub3+98oinKj1WrdIknyOwDAYrHQn6Q2EAhcAoDKMEya53nIZDIXB+sul+tVqVSCbDYLlUoF7HZ79vdvzYvF4rVarQYWi+U9AKiRSOT5yQxmsxmEQqHXAKCGw+GXo9EIcrkcsCwL/X4f6vU6tNttKJfL0Ol0IJ1OA8dxMBwOwe12vwUANRaLBSaTycmQkdFoBLIsw3w+h2q1asrn8+8Wi4VVVdUVhmErgiB+4ji+22632Hq9JmVZJhEE0VIU1fB6vS8Yhvmi0WgARVGw2WxHF/o1AOIORIB/vrb+AAAAAElFTkSuQmCC\")\nelse:\n    print(\"✕ | color=red image=iVBORw0KGgoAAAANSUhEUgAAABgAAAAQCAYAAAF7I48DAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAAJOSURBVHjaYvzPAAeHGP4zMHz6z8DA8J+B4T8AAAD//2L4z8Bg8J+BgeH///8MjHBl//8zAAAAAP//gnGQtDIwMPz/z8jEwMCgzcDAwAjFDAwMDH8YGBgYAAAAAP//ZMwxDQAgEMDAPgKwhH8DBB0YKMvzIWHo0OUQVsIIQy33YwBablQR+1JT8OG6ygEAAP//gnH+Q/E7KP3vPwPDZ7g41F6YhllIGnDhKpgGJgYGBk0GBobJDAwMomjug7E3MTAwqCM8A8HN/xkY7vxnYBD6z8Ag8J+BQfA/A4MY1IkpyE4CAAAA//9s0rEJAmEMhuEHucrCAcRKdBYXcAcbJ3EF5xAsbgvdQBzAykrOwuh9egZCQvhDvuT9X8vQxnLpp3z8btiG1mvFS9RW2TDCPM49rTiL2iJ5DAn9s6KW5PZf9Ho/Dpt7mveOTeW7uppfcI38s7SVHzAOBR9ranSHNW6Y4IwlHqkfnozTsUpDUQwG4K+LgyjUOgqCoos4CJ0cxaGPIU6Cm6O7+AIWnBx8hw6d+gYdBDcHR4soiugiSBwMej3cqz2QITkJyZ/8/w9Pf1NhGCzm33KwHiylvxaMi/yV8l4lhJ1i0h4eTP+2cVt/ETanIPd/dh+06xC0gpuCLBNc5QE6mM/dv+MFT+l30a7UjUTs1iGY5BTXFQ3sBf34ImZVGwvBZdBLvxM8f9fXIBCcZsJZFq1WoB8XDS4y/hjMZGyQsYOmBoKTTDpqUHWT9bNuv4lFrUKYGzjHFl7T3vCRe59Lm8UIhyLu/qLX5wCSNr11XIiJWQAAAABJRU5ErkJggg==\")\n\nprint(\"---\")\nprint(obj[\"status\"][\"description\"] + \" | href=\" + obj[\"page\"][\"url\"])\n\n# convert UTC to local\nutc_date = datetime.strptime(obj[\"page\"][\"updated_at\"], '%Y-%m-%dT%H:%M:%S.%fZ')\nnow = time.time()\noffset = datetime.fromtimestamp(now) - datetime.utcfromtimestamp(now)\nlocal_time = utc_date + offset\n\nprint(\"Last Change: %s\" % local_time.strftime(\"%D %r\"))\n"
				}
			],
			"path": "Dev/GitHub/github_status.10m.py",
			"filename": "github_status.10m.py",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github_status.10m.py.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "GitHub status",
			"version": "v0.2",
			"author": "Brett Jones",
			"authors": [
				{
					"name": "Brett Jones",
					"githubUsername": "blockloop",
					"imageURL": "https://avatars.githubusercontent.com/u/3022496?v=4",
					"bio": "I think I am a Pyrrhonist, but I’m not sure",
					"primary": true
				}
			],
			"desc": "Shows the current status of www.githubstatus.com. Find out if Github is having DDOS problems which will affect pushes/pulls.",
			"imageURL": "https://cloud.githubusercontent.com/assets/3022496/12325555/a4b2bd9a-ba90-11e5-8254-9de54c2c6847.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.502168Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Gitlab/gitlab_merge_requests.js",
					"filename": "gitlab_merge_requests.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n// jshint asi:true\n// jshint esversion: 8\n// \u003cbitbar.title\u003eGitLab Merge Requests\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eSimeon Cheeseman\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003esimeonc\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eList of your assigned and created merge requests.\n// The menu bar shows a count of MRs requiring your approval (🔎), WIP MRs (🛠️), Un-mergable MRs (⛔), MRs with failed pipelines (⚠️), MRs with unresolved discussions (🚧), MRs with running pipeline (🚀), MRs pending approval (💬) and Approved/Ready to Merge (❇️).\n// Each MR in the dropdown is grouped by project and displays `\u003cUnmergable\u003e \"Title\"; \"Pipeline Status\" : \"Approval Status\"`, clicking on an MR opens it in the browser\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.image\u003ehttps://i.imgur.com/t0TtQXO.png\u003c/bitbar.image\u003e\n\n/**\n * Information\n *\n * This was inspired by the work of Shelton Koskie (@eightygrit), who made the\n * first version of the \"GITLAB Projects\" for API v4.\n *\n * @see   GitLab API Documentation    https://docs.gitlab.com/ee/api/README.html\n * @see   Create GitLab Access Token  https://gitlab.com/profile/personal_access_tokens\n * @see   BitBar Node Module Docs     https://github.com/sindresorhus/bitbar\n */\n\n/**\n * The domain your instance is hosted on. Leave the default if using gitlab.com\n *\n * @const       {string}\n */\nconst gitlab_domain = 'gitlab.com';\n\n/**\n * Your private access token.\n *\n * @const       {string}\n * @see       Create a token  https://gitlab.com/profile/personal_access_tokens\n */\nconst private_token = '7Tkm2aLMxk8q-M9TaJz1';\n\n/**\n * Font size of the project list\n *\n * @const       {string}\n */\nconst font_size = '15';\n\n/**\n * Change this array to choose which statuses show and in what order on the menu bar.\n *\n * @type {string[]}\n */\nconst MENU_BAR_ORDER = [\n  'newMR',\n  'reviewer',\n  'wip',\n  'unmergable',\n  'failed',\n  'unresolved',\n  'ciRunning',\n  'pending',\n  'approved'\n];\n\n/**\n * MAX length of the title string in the toolbar\n *\n * @type {number}\n */\nconst MAX_LENGTH = 60;\n\n/////////////////////////////////////////////////////////////////////////\n// Do not edit below this line unless you know what you're doing. :)  //\n///////////////////////////////////////////////////////////////////////\nlet bitbar;\nconst fs = require('fs');\nconst path = require('path');\nconst SETTINGS_FILE_PATH = path.resolve(\n  __dirname,\n  './.gitlab_merge_requests.settings.json'\n);\n\n// Verify bitbar node module is available or try to install it globally.\ntry {\n  bitbar = require('bitbar');\n} catch (e) {\n  try {\n    bitbar = globalRequire('bitbar');\n  } catch (e) {\n    installBitbarModule();\n\n    // Not catching error if one is thrown.\n    bitbar = globalRequire('bitbar');\n  }\n}\n\n// Converts the gitlab status to emoji\n// see https://emojipedia.org/ for customisation\nfunction stateIcon(status) {\n  return {\n    created: '💤',\n    pending: '💤',\n    running: '🚀',\n    failed: '⚠️',\n    success: '✅',\n    skipped: '🚀',\n    manual: '⏯️'\n  }[status];\n}\n\nconst gitlabIconBase64 =\n  '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';\n\nfunction request(path) {\n  const httpTransport = require('https');\n  const responseEncoding = 'utf8';\n  const httpOptions = {\n    hostname: gitlab_domain,\n    port: '443',\n    path,\n    method: 'GET',\n    headers: { 'PRIVATE-TOKEN': private_token }\n  };\n  httpOptions.headers['User-Agent'] =\n    'bitbar/gitlab_projects - node ' + process.version;\n\n  return new Promise((resolve, reject) =\u003e {\n    const request = httpTransport\n    .request(httpOptions, (res) =\u003e {\n      let responseBufs = [];\n      let responseStr = '';\n\n      res\n      .on('data', (chunk) =\u003e {\n        if (Buffer.isBuffer(chunk)) {\n          responseBufs.push(chunk);\n        } else {\n          responseStr = responseStr + chunk;\n        }\n      })\n      .on('end', () =\u003e {\n        if (responseBufs.length \u003e 0) {\n          responseStr = Buffer.concat(responseBufs).toString(responseEncoding);\n        } else {\n          responseStr = responseStr;\n        }\n\n        resolve(JSON.parse(responseStr));\n      });\n    })\n    .setTimeout(0)\n    .on('error', (error) =\u003e {\n      reject(error);\n    });\n    request.write('');\n    request.end();\n  });\n}\n\nconst cachedProjectNames = {};\nasync function registerProject(project_id) {\n  if (!cachedProjectNames[project_id]) {\n    const project = await request(`/api/v4/projects/${project_id}`);\n    cachedProjectNames[project_id] = project.name_with_namespace;\n  }\n}\n\nasync function getMRs() {\n  if (!fs.existsSync(SETTINGS_FILE_PATH)) {\n    const myUser = await request('/api/v4/user');\n    fs.writeFileSync(\n      SETTINGS_FILE_PATH,\n      JSON.stringify({\n        userId: myUser.id\n      })\n    );\n  }\n\n  const statusCount = {};\n  function incrementStatusCount(key) {\n    statusCount[key] = statusCount[key] || 0;\n    statusCount[key] += 1;\n  }\n\n  const mergeRequestsByProjectId = {};\n\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  const yesterdayParam = `${yesterday.getFullYear()}-${yesterday.getMonth() + 1}-${yesterday.getDate()}`;\n\n  const { userId, todaysUUID, todaysExcludedEvents = [] } = JSON.parse(fs.readFileSync(SETTINGS_FILE_PATH));\n  let excludedEvents = [];\n  if (todaysUUID === yesterdayParam) {\n    excludedEvents = todaysExcludedEvents;\n  }\n\n  const createdMRs = await request(\n    '/api/v4/merge_requests?scope=created_by_me\u0026state=opened'\n  );\n  const assignedMRs = await request(\n    '/api/v4/merge_requests?scope=assigned_to_me\u0026state=opened'\n  );\n  const approvalMRs = await request(\n    `/api/v4/merge_requests?scope=all\u0026state=opened\u0026approver_ids[]=${userId}`\n  );\n\n  const allMRs = assignedMRs\n  .concat(approvalMRs, createdMRs)\n  .reduce((uniqueMRs, currentMR) =\u003e {\n    if (!uniqueMRs.find(({ id }) =\u003e id === currentMR.id)) {\n      uniqueMRs.push(currentMR);\n    }\n    return uniqueMRs;\n  }, []);\n\n  const bitbar = globalRequire('bitbar');\n\n  if (allMRs.length === 0) {\n    // Hide when no open MRs\n    return bitbar([\n      {\n        image: gitlabIconBase64,\n        text: `0 MR`,\n        color: bitbar.darkMode ? 'white' : 'black',\n        dropdown: true\n      }\n    ]);\n  }\n\n\n  await Promise.all(\n    allMRs.map(async (mergeRequest) =\u003e {\n      const {\n        web_url,\n        merge_when_pipeline_succeeds,\n        merge_status,\n        title,\n        project_id,\n        iid,\n        blocking_discussions_resolved,\n        work_in_progress,\n        assignee,\n        assignees,\n        author,\n        source_branch\n      } = mergeRequest;\n      excludedEvents.push(`${project_id}_${source_branch}`);\n\n      const isReviewer =\n        (!author || author.id !== userId) \u0026\u0026\n        (!assignee || assignee.id !== userId) \u0026\u0026\n        (!assignees || !assignees.find(({ id }) =\u003e id === userId));\n\n      await registerProject(project_id);\n\n      mergeRequestsByProjectId[project_id] =\n        mergeRequestsByProjectId[project_id] || [];\n\n      const pipelines = await request(\n        `/api/v4/projects/${project_id}/merge_requests/${iid}/pipelines`\n      );\n      let pipelineStatus = '';\n      if (pipelines.length) {\n        pipelineStatus = stateIcon(pipelines[0].status);\n      }\n      const approvals = await request(\n        `/api/v4/projects/${project_id}/merge_requests/${iid}/approval_state`\n      );\n      const isApproved = approvals.rules.reduce(\n        (isApproved, { approved }) =\u003e isApproved \u0026\u0026 approved,\n        true\n      );\n      const hasCurrentUserApproved = approvals.rules.reduce(\n        (currentUserHasApproved, { approved_by }) =\u003e\n          currentUserHasApproved ||\n          !!approved_by.find(({ id }) =\u003e id === userId),\n        false\n      );\n      const canMerge = merge_status === 'can_be_merged';\n      if (isReviewer \u0026\u0026 (work_in_progress || !canMerge || isApproved || hasCurrentUserApproved))\n        return;\n      let mergeStatus = '  ';\n      if (!canMerge) {\n        mergeStatus = '⛔ ';\n      } else if (isReviewer) {\n        mergeStatus = '🔎 ';\n      }\n      let approvalStatus = '💬';\n      if (work_in_progress) {\n        approvalStatus = '🛠️';\n      } else if (!blocking_discussions_resolved) {\n        approvalStatus = '🚧';\n      } else if (isApproved) {\n        approvalStatus = '❇️';\n      }\n      if (isReviewer) {\n        incrementStatusCount('reviewer');\n      } else if (work_in_progress) {\n        incrementStatusCount('wip');\n      } else if (merge_status !== 'can_be_merged') {\n        incrementStatusCount('unmergeable');\n      } else if (pipelines.length \u0026\u0026 pipelines[0].status === 'failed') {\n        incrementStatusCount('failed');\n      } else if (!blocking_discussions_resolved) {\n        incrementStatusCount('unresolved');\n      } else if (pipelines.length \u0026\u0026 pipelines[0].status === 'running') {\n        incrementStatusCount('ciRunning');\n      } else if (!isApproved) {\n        incrementStatusCount('pending');\n      } else {\n        incrementStatusCount('approved');\n      }\n\n      let statusString = '';\n      if (pipelineStatus || approvals.rules.length) {\n        const statusStrings = [];\n        if (pipelineStatus) statusStrings.push(pipelineStatus);\n        if (approvals.rules.length) statusStrings.push(approvalStatus);\n        statusString = `  ${statusStrings.join(' ')}`;\n      }\n      let trimmedTitle = title.substring(0, MAX_LENGTH);\n      if (title.length \u003e MAX_LENGTH) {\n        trimmedTitle += '...';\n      }\n      mergeRequestsByProjectId[project_id].push(\n        `${mergeStatus}!${iid}: ${trimmedTitle}${statusString} | href=\"${web_url}\" size=${font_size}`\n      );\n    })\n  );\n\n  const todaysEvents = await request(\n    `/api/v4/users/4557473/events?after=${yesterdayParam}\u0026action=pushed`\n  );\n  for (let i = 0; i \u003c todaysEvents.length; i += 1) {\n    const { project_id, push_data: {action, ref, ref_type, commit_to} } = todaysEvents[i];\n    if (excludedEvents.indexOf(`${project_id}_${ref}`) !== -1) continue;\n    if (!(action === 'created' \u0026\u0026 ref_type === 'branch')) continue;\n\n    const mrCheck = await request(`/api/v4/projects/${project_id}/repository/commits/${commit_to}/merge_requests`);\n    if (mrCheck.length) {\n      excludedEvents.push(`${project_id}_${ref}`);\n      continue;\n    }\n    await registerProject(project_id);\n    const { web_url } = await request(`/api/v4/projects/${project_id}`);\n    const params = [\n      `merge_request%5Bsource_branch%5D=${ref}`,\n      `merge_request%5Bsource_project_id%5D=${project_id}`,\n      `merge_request%5Btarget_project_id%5D=${project_id}`\n    ];\n    const createMRUrl = `${web_url}/-/merge_requests/new?${params.join('\u0026')}`;\n    mergeRequestsByProjectId[project_id] = mergeRequestsByProjectId[project_id] || [];\n    mergeRequestsByProjectId[project_id].unshift(\n      `📝: ${ref} | href=\"${createMRUrl}\" size=${font_size}`\n    );\n    incrementStatusCount('newMR');\n  }\n\n  const content = [];\n\n  const statusMap = {\n    reviewer: '🔎',\n    unmergable: '⛔',\n    failed: '⚠️',\n    ciRunning: '🚀',\n    pending: '💬',\n    approved: '❇️',\n    wip: '🛠️',\n    unresolved: '🚧',\n    newMR: '📝'\n  };\n  const statusString = MENU_BAR_ORDER\n  .map((key) =\u003e {\n    if (statusCount[key]) {\n      return `${statusMap[key]}[${statusCount[key]}]`;\n    }\n  })\n  .filter((s) =\u003e !!s)\n  .join(', ');\n\n  content.push({\n    image: gitlabIconBase64,\n    text: `${statusString}`,\n    color: bitbar.darkMode ? 'white' : 'black',\n    dropdown: true\n  });\n\n  Object.keys(mergeRequestsByProjectId).forEach((projectId) =\u003e {\n    if (!mergeRequestsByProjectId[projectId].length) return;\n    content.push(bitbar.separator);\n    content.push({\n      text: cachedProjectNames[projectId]\n    });\n    mergeRequestsByProjectId[projectId].forEach((text) =\u003e\n      text ? content.push({ text }) : null\n    );\n  });\n\n  // Update settings file for speed later\n  fs.writeFileSync(\n    SETTINGS_FILE_PATH,\n    JSON.stringify({\n      userId,\n      todaysUUID: yesterdayParam,\n      todaysExcludedEvents: excludedEvents.reduce((uniqueEvents, event) =\u003e {\n        if (uniqueEvents.indexOf(event) === -1) {\n          uniqueEvents.push(event);\n        }\n        return uniqueEvents;\n      }, [])\n    })\n  );\n\n  try {\n    bitbar(content);\n  } catch (error) {\n    console.log(content);\n    throw error;\n  }\n}\n\ngetMRs().catch((error) =\u003e {\n  console.error(error);\n});\n\n/**\n * Sets up the ability to require global node packages.\n *\n * @return     {object}  Returns the required node package object\n */\nfunction globalRequire(package) {\n  const childProcess = require('child_process');\n  const path = require('path');\n  const fs = require('fs');\n  const env = Object.assign({}, process.env);\n  env.PATH = path.resolve('/usr/local/bin') + ':' + env.PATH;\n\n  const globalNodeModulesDir =\n    childProcess\n    .execSync(npmBin() + ' root -g', { env: env })\n    .toString()\n    .trim() + '/';\n  let packageDir = path.join(globalNodeModulesDir, package, '/');\n\n  //find package required by older versions of npm\n  if (!fs.existsSync(packageDir)) {\n    packageDir = path.join(globalNodeModulesDir, 'npm/node_modules/', package);\n  }\n\n  // Package not found\n  if (!fs.existsSync(packageDir)) {\n    throw new Error(\"Cannot find global module '\" + package + \"'\");\n  }\n\n  const packageMeta = JSON.parse(\n    fs.readFileSync(path.join(packageDir, 'package.json')).toString()\n  );\n  const main = path.join(packageDir, packageMeta.files[0]);\n\n  return require(main);\n}\n\n/**\n * Installs Bitbar node module if it doesn't exits.\n *\n * @see    BitBar node module on github    https://github.com/sindresorhus/bitbar\n */\nfunction installBitbarModule() {\n  // Allows one to run the npm command as if on the command line.\n  const childProcess = require('child_process');\n  const execSync = childProcess.execSync;\n  const path = require('path');\n  const fs = require('fs');\n\n  const env = Object.assign({}, process.env);\n  env.PATH = path.resolve('/usr/local/bin') + ':' + env.PATH;\n\n  // Get the path to npm bin\n  const npm = npmBin();\n\n  // The install command\n  const cmd = npm + ' install -g bitbar';\n\n  console.log('Installing the BitBar Node module...');\n\n  const output = execSync(cmd, {\n    cwd: process.cwd(),\n    env: env\n  })\n  .toString('utf8')\n  .trim();\n\n  console.log('Installation complete.');\n}\n\n/**\n * Gets the path to your npm executable.\n *\n * @return  {string}  The full path to your npm executable\n */\nfunction npmBin() {\n  const path = require('path');\n  const childProcess = require('child_process');\n  const execSync = childProcess.execSync;\n  const env = Object.assign({}, process.env);\n  env.PATH = path.resolve('/usr/local/bin') + ':' + env.PATH;\n  const buffs = [];\n\n  // Get the path to npm bin\n  return execSync('which npm', { env: env })\n  .toString('utf8')\n  .trim();\n}\n"
				}
			],
			"path": "Dev/Gitlab/gitlab_merge_requests.js",
			"filename": "gitlab_merge_requests.js",
			"dir": "Dev/Gitlab",
			"docsPlugin": "Dev/Gitlab/gitlab_merge_requests.js.html",
			"docsCategory": "Dev/Gitlab.html",
			"pathSegments": [
				"Dev",
				"Gitlab"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Gitlab",
					"text": "Gitlab",
					"isLast": true
				}
			],
			"title": "GitLab Merge Requests",
			"version": "v1.0",
			"author": "Simeon Cheeseman",
			"authors": [
				{
					"name": "Simeon Cheeseman",
					"githubUsername": "simeonc",
					"imageURL": "https://avatars.githubusercontent.com/u/1085899?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://i.imgur.com/t0TtQXO.png",
			"dependencies": [
				"node.js"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.895054Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Gitlab/gitlab_projects.js",
					"filename": "gitlab_projects.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n// jshint asi:true\n// \u003cbitbar.title\u003eGitLab Projects\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eShelton Koskie\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003eeightygrit\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eList of your last active GitLab projects. Now supports API v4\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.image\u003ehttp://i.imgur.com/4X40XIK.png\u003c/bitbar.image\u003e\n\n/**\n * Information\n *\n * This was inspired by the work of Sylvain Baronnet (@sylvainbaronnet), who made the\n * first version of the \"GITLAB Projects\" for API v3. What started as a couple of edits\n * became a total rewrite.\n *\n * @see   GitLab API Documentation    https://docs.gitlab.com/ee/api/README.html\n * @see   Create GitLab Access Token  https://gitlab.com/profile/personal_access_tokens\n * @see   BitBar Node Module Docs     https://github.com/sindresorhus/bitbar\n */\n\n\n\n/**\n * The domain your instance is hosted on. Leave the default if using gitlab.com\n *\n * @var       {string}\n */\nvar gitlab_domain = 'gitlab.com';\n\n/**\n * Your private access token.\n *\n * @var       {string}\n * @see       Create a token  https://gitlab.com/profile/personal_access_tokens\n */\nvar private_token = '';\n\n/**\n * When you select a project, which sub-page should it take you to?\n *\n * @var  {string}\n *\n * Options include:\n * - /issues\n * - /activity\n * - /commits\n */\nvar default_page  = '/issues';\n\n/**\n * How would you like results ordered?\n *\n * @var  {string}\n *\n * Options include:\n * - last_activity_at\n * - id\n * - name\n * - path\n * - created_at\n * - updated_at\n */\nvar order_by      = 'last_activity_at';\n\n/**\n * Total number of results you want returned\n *\n * @var       {string}\n */\nvar result_count  = '30';\n\n/**\n * Font size of the project list\n *\n * @var       {string}\n */\nvar font_size     = '15';\n\n/////////////////////////////////////////////////////////////////////////\n// Do not edit below this line unless you know what you're doing. :)  //\n///////////////////////////////////////////////////////////////////////\nvar bitbar;\n\n// Verify bitbar node module is available or try to install it globally.\ntry { bitbar = require('bitbar'); }\ncatch(e) {\n\n  try { bitbar = globalRequire('bitbar'); }\n  catch(e) {\n\n    installBitbarModule();\n\n    // Not catching error if one is thrown.\n    bitbar = globalRequire('bitbar');\n  }\n}\n\n/**\n * Performs the GET request for a projects list for authenticated user\n *\n * @param   {Function}  callback  The function to call to handle the response\n *\n * @return  {void}                Does not return anything\n */\n(function(callback) {\n    'use strict';\n\n    const httpTransport = require('https');\n    const responseEncoding = 'utf8';\n    const httpOptions = {\n        hostname: gitlab_domain,\n        port: '443',\n        path: '/api/v4/projects?order_by=' + order_by + '\u0026sort=desc\u0026archived=false\u0026per_page=' + result_count + '\u0026owned=true',\n        method: 'GET',\n        headers: {\"PRIVATE-TOKEN\":private_token}\n    };\n    httpOptions.headers['User-Agent'] = 'bitbar/gitlab_projects - node ' + process.version;\n\n    const request = httpTransport.request(httpOptions, (res) =\u003e {\n        let responseBufs = [];\n        let responseStr = '';\n\n        res.on('data', (chunk) =\u003e {\n            if (Buffer.isBuffer(chunk)) {\n                responseBufs.push(chunk);\n            }\n            else {\n                responseStr = responseStr + chunk;\n            }\n        }).on('end', () =\u003e {\n            responseStr = responseBufs.length \u003e 0 ?\n                Buffer.concat(responseBufs).toString(responseEncoding) : responseStr;\n\n            callback(null, res.statusCode, res.headers, responseStr);\n        });\n\n    })\n    .setTimeout(0)\n    .on('error', (error) =\u003e {\n        callback(error);\n    });\n    request.write(\"\")\n    request.end();\n\n\n})((error, statusCode, headers, body) =\u003e {\n    // console.log('ERROR:', error);\n    // console.log('STATUS:', statusCode);\n    // console.log('HEADERS:', JSON.stringify(headers));\n\n    const bitbar = globalRequire('bitbar');\n    var content = [];\n\n    content.push({\n      text: 'GitLab',\n      color: bitbar.darkMode ? 'white' : 'black',\n      dropdown: true\n    });\n\n    content.push(bitbar.separator);\n\n    var projects = JSON.parse(body);\n\n    for(var p in projects) {\n\n      var project = projects[p];\n      var ta = timeago();\n      var last_activity = ta.ago(project.last_activity_at);\n\n      content.push({\n        text: project.name + ' ⤏ ' + 'Last activity: ' + last_activity + ' | href=\"' + project.web_url + '/activity' + '\" size=' + font_size\n      });\n\n      content.push({\n        text: project.name + ' ⤏ ' + project.open_issues_count + ' issue' + (project.open_issues_count \u003e 1 ? 's' : '') + ' | alternate=true href=\"' + project.web_url + '/issues\" size=' + font_size\n      });\n\n      // Uncomment if you want a separator after each project.\n      //content.push(bitbar.separator);\n    }\n\n    // Execute the dispaly.\n    bitbar(content);\n\n\n});\n\n/* Source : https://github.com/digplan/time-ago */\nfunction timeago() {\n\n  var o = {\n    second: 1000,\n    minute: 60 * 1000,\n    hour: 60 * 1000 * 60,\n    day: 24 * 60 * 1000 * 60,\n    week: 7 * 24 * 60 * 1000 * 60,\n    month: 30 * 24 * 60 * 1000 * 60,\n    year: 365 * 24 * 60 * 1000 * 60\n  };\n  var obj = {};\n\n  obj.ago = function(nd) {\n    var r = Math.round,\n      pl = function(v, n) {\n        return n + ' ' + v + (n \u003e 1 ? 's' : '') + ' ago'\n      },\n      ts = new Date().getTime() - new Date(nd).getTime(),\n      ii;\n      if(ts \u003c 0) {\n        return 'Just now';\n      }\n\n    for (var i in o) {\n      if (r(ts) \u003c o[i]) return pl(ii || 'm', r(ts / (o[ii] || 1)))\n      ii = i;\n    }\n    return pl(i, r(ts / o[i]));\n  }\n  return obj;\n}\n\n/**\n * Sets up the ability to require global node packages.\n *\n * @return     {object}  Returns the required node package object\n */\nfunction globalRequire(package){\n  var childProcess = require('child_process');\n  var path = require('path');\n  var fs = require('fs');\n  var env = Object.assign({}, process.env);\n  env.PATH = path.resolve(\"/usr/local/bin\") + ':' + env.PATH;\n\n\n  var globalNodeModulesDir = childProcess.execSync(npmBin() + ' root -g', {env: env}).toString().trim() + '/';\n  var packageDir = path.join(globalNodeModulesDir, package, '/');\n\n  //find package required by older versions of npm\n  if (!fs.existsSync(packageDir)){\n    packageDir = path.join(globalNodeModulesDir, 'npm/node_modules/', package);\n  }\n\n  // Package not found\n  if (!fs.existsSync(packageDir)){\n    throw new Error('Cannot find global module \\'' + package + '\\'');\n  }\n\n  var packageMeta = JSON.parse(fs.readFileSync(path.join(packageDir, 'package.json')).toString());\n  var main = path.join(packageDir, packageMeta.files[0]);\n\n  return require(main);\n}\n\n/**\n * Installs Bitbar node module if it doesn't exits.\n *\n * @see    BitBar node module on github    https://github.com/sindresorhus/bitbar\n */\nfunction installBitbarModule() {\n\n    // Allows one to run the npm command as if on the command line.\n    var childProcess = require('child_process');\n    var execSync = childProcess.execSync;\n    var path = require('path');\n    var fs = require('fs');\n\n    var env = Object.assign({}, process.env);\n    env.PATH = path.resolve(\"/usr/local/bin\") + ':' + env.PATH;\n\n    // Get the path to npm bin\n    var npm = npmBin();\n\n    // The install command\n    var cmd = npm + ' install -g bitbar';\n\n    console.log(\"Installing the BitBar Node module...\");\n\n    var output = execSync(cmd, {\n        cwd: process.cwd(),\n        env: env\n    }).toString('utf8').trim();\n\n    console.log(\"Installation complete.\");\n\n}\n\n/**\n * Gets the path to your npm executable.\n *\n * @return  {string}  The full path to your npm executable\n */\nfunction npmBin(){\n  var path = require('path');\n  var childProcess = require('child_process');\n  var execSync = childProcess.execSync;\n  var env = Object.assign({}, process.env);\n  env.PATH = path.resolve(\"/usr/local/bin\") + ':' + env.PATH;\n  var buffs = [];\n\n  // Get the path to npm bin\n  return execSync('which npm', {env: env}).toString('utf8').trim();\n}"
				}
			],
			"path": "Dev/Gitlab/gitlab_projects.js",
			"filename": "gitlab_projects.js",
			"dir": "Dev/Gitlab",
			"docsPlugin": "Dev/Gitlab/gitlab_projects.js.html",
			"docsCategory": "Dev/Gitlab.html",
			"pathSegments": [
				"Dev",
				"Gitlab"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Gitlab",
					"text": "Gitlab",
					"isLast": true
				}
			],
			"title": "GitLab Projects",
			"version": "v2.0",
			"author": "Shelton Koskie",
			"authors": [
				{
					"name": "Eighty Grit",
					"githubUsername": "eightygrit",
					"imageURL": "https://avatars.githubusercontent.com/u/50476396?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "List of your last active GitLab projects. Now supports API v4",
			"imageURL": "http://i.imgur.com/4X40XIK.png",
			"dependencies": [
				"node.js"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.919272Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github-ci.1m.php",
					"filename": "github-ci.1m.php",
					"content": "#!/usr/bin/env php\n\u003c?php\n/**\n * \u003cbitbar.title\u003eGithub CI Status\u003c/bitbar.title\u003e\n * \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n * \u003cbitbar.author\u003eJordan Andree\u003c/bitbar.author\u003e\n * \u003cbitbar.author.github\u003ejordanandree\u003c/bitbar.author.github\u003e\n * \u003cbitbar.desc\u003eDisplays Github Pull Request CI Check statuses\u003c/bitbar.desc\u003e\n * \u003cbitbar.dependencies\u003ephp\u003c/bitbar.dependencies\u003e\n * \u003cbitbar.abouturl\u003ehttps://github.com/jordanandree/bitbar-github-ci\u003c/bitbar.abouturl\u003e\n *\n * Icon sourced from feather icons: https://feathericons.com/\n *\n * To setup, create or edit your ~/.bitbarrc file with a new section:\n *\n * [github_ci]\n * access_token=xxx # Personal Access Token\n * username=jordanandree\n * repos[]=jordanandree/bitbar-github-ci\n * repos[]=jordanandree/dotfiles\n */\n\nclass GithubCIStatus\n{\n    /**\n     * Default config values\n     *\n     * @var array\n     */\n    protected $default_config = [\n        \"hostname\" =\u003e \"github.com\",\n    ];\n\n    /**\n     * Config options sourced from ~/.bitbarrc\n     *\n     * @var stdClass\n     */\n    protected $config;\n\n    /**\n     * Status line template for each check\n     *\n     * @var string\n     */\n    protected $status_line = \"%s %s | href=%s\";\n\n    /**\n     * State of CI checks\n     *\n     * @var string\n     */\n    protected $state = \"success\";\n\n    /**\n     * Lock param for mutating state\n     *\n     * @var bool\n     */\n    protected $state_lock = false;\n\n    /**\n     * Menu bar icon\n     *\n     * @var string\n     */\n    protected $icon = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAABDtpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgICAgICAgICAgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIj4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoTWFjaW50b3NoKTwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8eG1wTU06RG9jdW1lbnRJRD54bXAuZGlkOjVEMzE5OTBGREQzRTExRTdCNjU1Q0M4MUYwMENBMTNDPC94bXBNTTpEb2N1bWVudElEPgogICAgICAgICA8eG1wTU06RGVyaXZlZEZyb20gcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICA8c3RSZWY6aW5zdGFuY2VJRD5hZG9iZTpkb2NpZDpwaG90b3Nob3A6ODMzYTI0NjgtMjVhOC0xMTdiLTkxNzEtZjU1MDA2YWFhMDcyPC9zdFJlZjppbnN0YW5jZUlEPgogICAgICAgICAgICA8c3RSZWY6ZG9jdW1lbnRJRD5hZG9iZTpkb2NpZDpwaG90b3Nob3A6ODMzYTI0NjgtMjVhOC0xMTdiLTkxNzEtZjU1MDA2YWFhMDcyPC9zdFJlZjpkb2N1bWVudElEPgogICAgICAgICA8L3htcE1NOkRlcml2ZWRGcm9tPgogICAgICAgICA8eG1wTU06SW5zdGFuY2VJRD54bXAuaWlkOjVEMzE5OTBFREQzRTExRTdCNjU1Q0M4MUYwMENBMTNDPC94bXBNTTpJbnN0YW5jZUlEPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K4XbDnwAAAxFJREFUWAnNl1uITlEUxweTonG/y2UYIsUUUSIP84zwIELNk9LwwpsXmhEvk8sTKZq8eBJJXqQUuV+SUJPmySXjEpM7g9//m73OrDnO/r75Lg9W/WatvfZa6+y9z977fFNVlS0NuD/BH+iAw1AHxUgNwdvhBnSDarVCHxnQp9XbOI+5qreZs1TgOLTBfJgNI2EUfIH38BwegAZ7AMaAlx80xsNH78yyVVAP7AJbCbVL4Td5r1zuSuxEBiZWrzEWc0hoXkRPhF3wIfj6qzTYNpgDO8BkqhnS1b4RbD8oFdEKHIRTsBO05Frmh9AJGthQGA1zYVGwT6BvgWRBj8r9jb32JEQB9graE295Rgvp9vr67C0/W3vEYozBoTHDnGVqbViTpWbE9BU6bLTNsaAi/ZrU91BXJ2FaLL8+BGkAes+DYoEl+HeTYxPbH8v3QY2xoBL9I8jT7DWI+7EaJ0OAgqbHgsrw3w71P1uN9CbUUTIpeFtZYBHa7hId25ykB6BbyyR9jZq/HO0nmKuTHsBLV32Ssytl2u5/bQXTA3hiHegVzq6EqbtgXCj01AqmB3DZOtBrnF0Jc60r4p/j3D3mdZSd1/X/9JbmmEDam1D3F7oWotJAjw1A34TV0cj+deg43wGreaw/aYdcghIvgL7jyfHBzie6QXX96ivqf09ojw2DgqK9cQRs1KZ1k90FzWIyeFHOXrgGXWA5pnW1T4FM2YxXH4t7sNxFrMNuByvitQboZRkN32+2BrMP7EeOz0ns01iWoFlqH5hoZlp+f00rdqMFBK1fUp1gdbQS22A4FJR5RFwFS36HPTOVtdD1a09kySacVqM1KyCfTxvnrCvwDHuWS9jg+rY6vzc1WxvAGd8Rs6tdRzf2FtDS1UMdPIZLoDMsn4leU5bofZtoQiWJrstHYDPJ0o15Klv8uTwxSZc2WFo02yWwB16kOyvdzhqAnvEVmkHnVue9Fpqg4uL3QKy4/quR6FquuMRWIOtBfoN5Ox37Mzi0igWlmJ3aQbUauAlHQacmSxT3DVrgbVbAf+X7C2311IYwO5eYAAAAAElFTkSuQmCC\";\n\n    /**\n     * Output the Pull Request checks\n     *\n     * @return string\n     */\n    public function run()\n    {\n        $lines = [];\n\n        try {\n            $pull_requests = $this-\u003esearchPullRequests();\n\n            if (empty($pull_requests)) {\n                $this-\u003esendOutput(\"No Pull Requests. Get to work!\");\n                exit;\n            }\n\n            foreach ($pull_requests as $pr) {\n                $repo_name = substr($pr-\u003erepository_url, strlen($this-\u003egetConfig()-\u003ebase_uri . \"repos/\"));\n\n                $pr_info = $this-\u003egetPullRequest($repo_name, $pr-\u003enumber);\n                $status  = $this-\u003egetCommitStatus($repo_name, $pr_info-\u003ehead-\u003esha);\n                $lines[] = $this-\u003eformatLine($status-\u003estate, $pr_info-\u003etitle, $pr_info-\u003ehtml_url);\n\n                if ($status-\u003estate !== $this-\u003estate \u0026\u0026 !$this-\u003estate_lock) {\n                    $this-\u003estate = $status-\u003estate;\n                    $this-\u003estate_lock = true;\n                }\n\n                foreach ($status-\u003estatuses as $check) {\n                    $lines[] = \"--\" . $this-\u003eformatLine($check-\u003estate, $check-\u003econtext, $check-\u003etarget_url);\n                }\n            }\n        } catch (RuntimeException $e) {\n            $this-\u003estate = \"failure\";\n            $this-\u003esendOutput($e-\u003egetMessage());\n            exit;\n        }\n\n        $this-\u003esendOutput($lines);\n    }\n\n    /**\n     * echo back output to bitbar\n     *\n     * @param string[]|string\n     *\n     * @return void\n     */\n    public function sendOutput($lines)\n    {\n        echo $this-\u003estatusIcon($this-\u003estate) . \" | templateImage=\" . $this-\u003eicon;\n        echo \"\\n---\\n\";\n\n        if (is_array($lines)) {\n            echo implode($lines, \"\\n\");\n        } else {\n            echo $lines . \"\\n\";\n        }\n    }\n\n    /**\n     * Format a line for output\n     *\n     * @param mixed ...$text\n     *\n     * @return string\n     */\n    public function formatLine(...$args)\n    {\n        $icon = $this-\u003estatusIcon($args[0]);\n        $args[0] = $icon;\n\n        return sprintf($this-\u003estatus_line, ...$args);\n    }\n\n    /**\n     * Get the memoized configuration struct or set it\n     *\n     * @return stdClass\n     *\n     * @throws RuntimeException\n     */\n    protected function getConfig()\n    {\n        if (is_null($this-\u003econfig)) {\n            $bitbarrc = getenv('HOME') . \"/.bitbarrc\";\n\n            if (!file_exists($bitbarrc)) {\n                throw new RuntimeException(\"~/.bitbarrc is missing\");\n            }\n\n            $config = parse_ini_file($bitbarrc, true);\n\n            if (!array_key_exists(\"github_ci\", $config)) {\n                throw new RuntimeException(\"[github_ci] section is missing in ~/.bitbarrc\");\n            }\n\n            $config = array_merge($this-\u003edefault_config, $config[\"github_ci\"]);\n            $config[\"base_uri\"] = \"https://\" . $config[\"hostname\"] . \"/api/v3/\";\n            $this-\u003econfig = (object) $config;\n        }\n\n        return $this-\u003econfig;\n    }\n\n    /**\n     * Send a Request to the Github API\n     *\n     * @param string $endpoint\n     * @param array $options\n     *\n     * @return stdClass\n     *\n     * @throws RuntimeException\n     */\n    protected function sendRequest($endpoint, $params = [])\n    {\n        $url = $this-\u003egetConfig()-\u003ebase_uri . $endpoint;\n        $params[\"access_token\"] = $this-\u003egetConfig()-\u003eaccess_token;\n        $url .= \"?\" . http_build_query($params);\n\n        $headers = null;\n        $body = null;\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HEADER, true);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        $response = curl_exec($ch);\n\n        if (!empty($response)) {\n            list($headers, $body) = explode(\"\\r\\n\\r\\n\", $response, 2);\n        }\n\n        curl_close($ch);\n\n        if (is_null($body)) {\n            throw new RuntimeException(\"Error making request to the Github API. Check your configuration.\");\n        } else {\n            return json_decode($body);\n        }\n    }\n\n    /**\n     * Get a single Pull Request\n     *\n     * @param string $repo\n     * @param int $id\n     *\n     * @return stdClass\n     */\n    protected function getPullRequest($repo, $id)\n    {\n        return $this-\u003esendRequest(\"repos/$repo/pulls/$id\");\n    }\n\n    /**\n     * Get the status of a single Commit\n     *\n     * @param string $repo\n     * @param string $sha\n     *\n     * @return stdClass\n     */\n    protected function getCommitStatus($repo, $sha)\n    {\n        return $this-\u003esendRequest(\"repos/$repo/commits/$sha/status\");\n    }\n\n    /**\n     * Perform search for open issues by the author in the repos\n     *\n     * @return stdClass\n     */\n    protected function searchPullRequests()\n    {\n        $q = \"state:open author:\" . $this-\u003egetConfig()-\u003eusername;\n        foreach ($this-\u003egetConfig()-\u003erepos as $repo) {\n          $q .= \" repo:$repo\";\n        }\n\n        return $this-\u003esendRequest(\"search/issues\", [\n            \"q\" =\u003e $q,\n        ])-\u003eitems;\n    }\n\n    /**\n     * Get the icon for the status\n     *\n     * @param string $status\n     *\n     * @return string\n     */\n    protected function statusIcon($status)\n    {\n        $map = [\n            \"success\" =\u003e \"\\033[0;32m●\\033[0m\",\n            \"failure\" =\u003e \"\\033[0;31m●\\033[0m\",\n            \"pending\" =\u003e \"\\033[0;34m●\\033[0m\",\n            \"warning\" =\u003e \"\\033[0;33m●\\033[0m\",\n        ];\n\n        return $map[$status];\n    }\n}\n\necho (new GithubCIStatus())-\u003erun();\n"
				}
			],
			"path": "Dev/GitHub/github-ci.1m.php",
			"filename": "github-ci.1m.php",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github-ci.1m.php.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github CI Status",
			"version": "v1.0",
			"author": "Jordan Andree",
			"authors": [
				{
					"name": "Jordan Andree",
					"githubUsername": "jordanandree",
					"imageURL": "https://avatars.githubusercontent.com/u/235503?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays Github Pull Request CI Check statuses",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"php"
			],
			"aboutURL": "https://github.com/jordanandree/bitbar-github-ci",
			"lastUpdated": "2021-03-08T15:21:48.293876Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github-contribution.10m.rb",
					"filename": "github-contribution.10m.rb",
					"content": "#!/usr/bin/env ruby\n# frozen_string_literal: true\n\n# \u003cbitbar.title\u003eGithub Contribution\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.0.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emizoR\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emizoR\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://user-images.githubusercontent.com/1257116/34550684-37da7286-f156-11e7-9299-5873b6bb2fd7.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n#\n# To setup, create or edit your ~/.bitbarrc file with a new section:\n#\n# [github_contribution]\n# username = mizoR\n# max_contributions = 10\n\nrequire 'erb'\nrequire 'date'\nrequire 'open-uri'\n\nmodule BitBar\n  class INIFile\n    Error = Class.new(StandardError)\n\n    INIFileNotFound = Class.new(Error)\n\n    SectionNotFound = Class.new(Error)\n\n    def self.load(file = \"#{ENV['HOME']}/.bitbarrc\")\n      raise INIFileNotFound if !File.exist?(file)\n\n      parse(open(file) { |f| f.read })\n    end\n\n    def self.parse(source)\n      # XXX: This implementation isn't correct, but will work in most cases.\n      #      (Probably `StringScanner` will make code correct and clean.)\n      sections = {}\n\n      section = nil\n\n      source.each_line do |line|\n        if line =~ /^ *;/\n          # comment\n          next\n        end\n\n        if line =~ /^\\[(.+)\\]$/\n          section = sections[$1.to_sym] = {}\n          next\n        end\n\n        next unless section\n\n        if line =~ /(.+)=(.+)/\n          name  = $1.strip.to_sym\n          value = $2.strip\n\n          section[name] = value[/^\"(.*)\"$/, 1] || value[/^'(.*)'$/, 1] || value\n          next\n        end\n      end\n\n      new(sections: sections)\n    end\n\n    def initialize(sections:)\n      @sections = sections\n    end\n\n    def fetch(name)\n      @sections.fetch(name.to_sym)\n    rescue KeyError\n      raise SectionNotFound\n    end\n  end\n\n  module GitHubContribution\n    ConfigurationError = Class.new(StandardError)\n\n    class Contribution \u003c Struct.new(:username, :contributed_on, :count)\n      RE_CONTRIBUTION = %r|\u003crect .+ class=\"ContributionCalendar-day\" .+ data-count=\"(\\d+)\" data-date=\"(\\d\\d\\d\\d-\\d\\d-\\d\\d)\" .+\u003e|\n      def self.find_all_by(username:)\n        [].tap do |contributions|\n          today = Date.parse(DateTime.now.to_s).to_s\n          year = today.split(\"-\")[0];\n          html = URI.send(:open, \"https://github.com/users/#{username}/contributions?to=#{today}#year-link-#{year}\") { |f| f.read };\n          html.scan(RE_CONTRIBUTION) do |count, date|\n            contributions \u003c\u003c Contribution.new(username, Date.parse(date), count.to_i)\n            break if Date.parse(date) == Date.parse(DateTime.now.to_s)\n          end\n        end\n      end\n\n      def color\n        count \u003c= 0 ? 'brown' : 'green'\n      end\n\n      def icon\n        case count\n        when 0    then ':poop:'\n        when 1..3 then ':seedling:'\n        when 4..9 then ':herb:'\n        else           ':deciduous_tree:'\n        end\n      end\n    end\n\n    class View\n      TEMPLATE = \u003c\u003c-EOT.gsub(/^ */, '')\n        \u003c%= @contribution.icon %\u003e\u003c%= @contribution.count %\u003e | color=\u003c%= @contribution.color %\u003e\n        ---\n        \u003c% @contributions.each do |c| -%\u003e\n        \u003c%= @helper.link_to(@helper.contribution_text_for(c), @helper.contribution_activity_for(c)) %\u003e\n        \u003c% end -%\u003e\n      EOT\n\n      class Helper\n        def link_to(text, href)\n          if text =~ / | /\n            \"#{text} href=#{href}\"\n          else\n            \"#{text} | href=#{href}\"\n          end\n        end\n\n        def contribution_text_for(contribution)\n          \"#{contribution.icon} #{contribution.contributed_on.strftime('%Y-%m-%d (%a)')}   \\t#{contribution.count} | color=#{contribution.color}\"\n        end\n\n        def contribution_activity_for(contribution)\n          query    = \"to=#{contribution.contributed_on}\"\n          fragment = \"year-link-#{contribution.contributed_on.year}\"\n          \n          \"https://github.com/#{contribution.username}?#{query}##{fragment}\"\n        end\n      end\n\n      def initialize(contributions:)\n        @contribution  = contributions.fetch(0)\n        @contributions = contributions\n        @helper        = Helper.new\n      end\n\n      def render\n        puts ERB.new(TEMPLATE, nil, '-').result(binding)\n      end\n    end\n\n    class App\n      DEFAULT_CONFIG = { max_contributions: 10 }\n\n      def initialize(config = {})\n        config = cast_config(DEFAULT_CONFIG.merge(config))\n\n        @username, @max_contributions = config.values_at(:username, :max_contributions)\n      end\n\n      def run\n        # (DateTime.now-7).to_s\n        contributions = Contribution.find_all_by(username: @username)\n                                    .sort_by(\u0026:contributed_on)\n                                    .select{|l| l.contributed_on \u003c DateTime.now}\n                                    .reverse\n                                    .slice(0, @max_contributions)\n        View.new(contributions: contributions).render\n      end\n\n      private\n\n      def cast_config(config)\n        username          = config[:username].to_s\n        max_contributions = config[:max_contributions].to_i\n\n        if username.empty?\n          raise ConfigurationError, 'GitHub username is not given.'\n        end\n\n        if !max_contributions.positive?\n          raise ConfigurationError,\n            \"Max contributions should be positive integer, but it was #{max_contributions}\"\n        end\n\n        { username: username, max_contributions: max_contributions }\n      end\n    end\n  end\nend\n\nif __FILE__ == $0\n  begin\n    config = BitBar::INIFile.load.fetch(:github_contribution)\n\n    BitBar::GitHubContribution::App.new(config).run\n  rescue BitBar::INIFile::Error\n    puts \u003c\u003c-EOM.gsub(/^ */, '')\n      ⚠️\n      ---\n      To setup, create or edit your ~/.bitbarrc file with a new section:\n      |\n      ;# ~/.bitbarrc\n      [github_contribution]\n      username = \u003cGITHUB_USERNAME\u003e\n      max_contributions = 10\n    EOM\n  rescue BitBar::GitHubContribution::ConfigurationError =\u003e e\n    puts \u003c\u003c-EOM.gsub(/^ */, '')\n      ⚠️\n      ---\n      #{e.message}\n    EOM\n  end\nend"
				}
			],
			"path": "Dev/GitHub/github-contribution.10m.rb",
			"filename": "github-contribution.10m.rb",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github-contribution.10m.rb.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github Contribution",
			"version": "v0.0.2",
			"author": "mizoR",
			"authors": [
				{
					"name": "Ryutaro Mizokami",
					"githubUsername": "mizoR",
					"imageURL": "https://avatars.githubusercontent.com/u/1257116?v=4",
					"bio": "Software developer",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://user-images.githubusercontent.com/1257116/34550684-37da7286-f156-11e7-9299-5873b6bb2fd7.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.298112Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/pull-requests.5m.js",
					"filename": "pull-requests.5m.js",
					"content": "#!/usr/bin/env node\n// jshint esversion: 6, asi: true\n\n// \u003cbitbar.title\u003eGithub Pull requests\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eNoam Knispel\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003enoamknispel\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eGet list of pull requests from Github for multiple repositories\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js request co bluebird\u003c/bitbar.dependencies\u003e\n\n// EDIT YOUR INFO BELOW:\nconst username = ''\nconst token = ''\nvar repos = [\n//owner/repo\n]\n// DO NOT EDIT BELOW THIS POINT\n\nvar bluebird = require(\"bluebird\")\nvar request = bluebird.promisifyAll(require(\"request\"))\nvar co = require(\"co\")\n\nco(function* () {\n  var results = yield repos.map(function(repo) { //jshint ignore:line\n    var options = {\n      url: 'https://api.github.com/repos/' + repo + '/pulls',\n      headers: {\n        'User-Agent': username + ' - bitbar'\n      },\n      auth: {\n        user: username,\n        password: token\n      }\n    }\n    return request.getAsync(options);\n  })\n\n  var totalCount = 0\n  var strings = results.reduce( (acc, response) =\u003e {\n    var info = JSON.parse(response.body)\n    if(info.length \u003e 0) {\n      totalCount += info.length\n      acc.push(info[0].base.repo.name + \" | color=#0000ff\")\n      info.forEach(function(pr) {\n        acc.push(\"#\" + pr.number + \" \" + pr.title + \" (\" + pr.user.login + \") | href=\" + pr.html_url)\n      })\n    }\n    return acc\n  }, ['---'] )\n\n  strings.unshift(`${totalCount} Pull Request`)\n  for( var string of strings)\n    console.log(string)\n}).catch(function() {});\n"
				}
			],
			"path": "Dev/GitHub/pull-requests.5m.js",
			"filename": "pull-requests.5m.js",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/pull-requests.5m.js.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github Pull requests",
			"version": "v2.0",
			"author": "Noam Knispel",
			"authors": [
				{
					"name": "Noam Knispel",
					"githubUsername": "noamknispel",
					"imageURL": "https://avatars.githubusercontent.com/u/6729694?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Get list of pull requests from Github for multiple repositories",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"node.js request co bluebird"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.661976Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/repo-issues.5m.js",
					"filename": "repo-issues.5m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eGithub Repository Issues\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eTom Genoni\u003c/bitbar.author\u003e\n// \u003cbitbar.desc\u003eLists all pull requests and issues, up to 100 total.\u003c/bitbar.desc\u003e\n// \u003cbitbar.author.github\u003etomgenoni\u003c/bitbar.author.github\u003e\n// \u003cbitbar.dependencies\u003enode.js\u003c/bitbar.dependencies\u003e\n\n$HOSTNAME = \"\"; // For enterprise Github accounts, e.g., github.tinderforcats.com/api/v3\n$ORG = \"matryer\";\n$REPOSITORY = \"bitbar\";\n$BITBAR_TITLE = \"bitbar\";\n$GITHUB_ACCESS_TOKEN = \"\";\n\n// ----------- Ignore below this line ---------------\n\nvar https = require('https');\n\nvar options = {\n  host: $HOSTNAME || 'api.github.com',\n  headers: {'user-agent': 'Mozilla/5.0'},\n  path: '/repos/'+$ORG+'/'+$REPOSITORY+'/issues?GITHUB_ACCESS_TOKEN=' + $GITHUB_ACCESS_TOKEN + '\u0026per_page=100'\n};\n\nhttps.get(options, function(res) {\n  var body = '';\n  res.on('data', function(data) {\n    body += data;\n  });\n  res.on('end', function() {\n    handleResponse(JSON.parse(body));\n  });\n});\n\nfunction fixedIssues(body) {\n\n  var arr = [];\n\n  var closeTerms = ['close', 'closes', 'closed', 'fix', 'fixes', 'fixed', 'resolve', 'resolves', 'resolved'];\n\n  body.map(function(issues){\n    if ( issues.pull_request ) {\n      var comments = issues.body;\n\n      closeTerms.forEach(function(term) {\n        var regex = new RegExp(term + \" #([0-9]+)\", \"ig\");\n        var matches = comments.match(regex);\n        if (matches) {\n          matches.forEach(function(match) {\n            var num = match.split(\"#\")[1];\n            arr.push(num);\n          });\n        }\n      });\n    }\n  });\n\n  return arr;\n}\n\nfunction allIssues(body) {\n\n  var fixed = fixedIssues(body);\n\n  var issues = body.map(function(issues){\n    if ( issues.pull_request ) {\n      return [issues.title, ' - #', issues.number, ' | href=', issues.html_url,'\\n'].join('');\n    }\n  }).join('\\n');\n\n  var prs = body.map(function(issues){\n    var color = \"\";\n    if ( !issues.pull_request ) {\n      if ( fixed.indexOf(issues.number.toString()) \u003e -1 ) {\n        color = \"color=#aaaaaa\";\n      }\n      return [issues.title, ' - #', issues.number,' (', issues.user.login, ') | href=', issues.html_url, ' ', color, '\\n'].join('');\n    }\n  }).join('\\n');\n\n  return [issues, prs];\n}\n\nfunction issueCount(body) {\n  var p = 0;\n  body.map(function(issues){\n    if ( issues.pull_request ) {\n      p++;\n    }\n  });\n  var i = body.length - p;\n  return [i, p];\n}\n\nfunction handleResponse(body) {\n  var countPRs = issueCount(body)[1];\n  var countIssues = issueCount(body)[0];\n  var listIssues = allIssues(body)[1];\n  var listPRs = allIssues(body)[0];\n\n  console.log($BITBAR_TITLE + \" \" + countPRs + \"/\" + countIssues);\n\n  console.log(\"---\");\n  console.log(\"Pull Requests \" + countPRs);\n  console.log(listPRs);\n\n  console.log(\"---\");\n  console.log(\"Issues \" + countIssues);\n  console.log(listIssues);\n\n}\n"
				}
			],
			"path": "Dev/GitHub/repo-issues.5m.js",
			"filename": "repo-issues.5m.js",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/repo-issues.5m.js.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github Repository Issues",
			"version": "v1.0",
			"author": "Tom Genoni",
			"authors": [
				{
					"name": "Tom Genoni",
					"githubUsername": "tomgenoni",
					"imageURL": "https://avatars.githubusercontent.com/u/1171072?v=4",
					"bio": "Design Systems at Thumbtack",
					"primary": true
				}
			],
			"desc": "Lists all pull requests and issues, up to 100 total.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"node.js"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.689832Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github-trending.1h.rb",
					"filename": "github-trending.1h.rb",
					"content": "#!/usr/bin/env ruby\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eGithub Trending\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emfks17\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emfks17\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGithub Daily Trending Viewer\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/mfks17/bitbar-plugin-github-trending/Screenshots/01.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby, nokogiri\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/mfks17/bitbar-plugins-github-trending\u003c/bitbar.abouturl\u003e\n\nrequire 'open-uri'\nrequire 'json'\nrequire 'nokogiri'\n\nLANG = 'swift'.freeze # your favorite language\n# LANG = 'java'.freeze\n\nurl = 'https://github.com/trending/' + LANG + '?since=daily'\nBASE_URL = 'https://github.com/'.freeze\n\ncharset = nil\nhtml = open(url) do |f|\n  charset = f.charset\n  f.read\nend\n\nhash = {}\n\nputs LANG.capitalize\nputs '---'\n\ndoc = Nokogiri::HTML.parse(html, nil, charset)\ndoc.xpath('//li[@class=\"repo-list-item\"]').each do |node|\n  node.xpath('./h3[@class=\"repo-list-name\"]/a').attribute('href').value.each_line do |s|\n    s.slice!(0)\n    hash = { name: s, url: BASE_URL + s }\n\n    api = 'https://api.github.com/repos/' + s\n    begin\n      res = open(api)\n      code, message = res.status\n    rescue =\u003e _\n      puts '🙅Github Api Limits🙅'\n      exit\n    end\n\n    if code == '200'\n      result = JSON.parse(res.read)\n      puts hash.fetch(:name) + ' ⭐️ Daily: ' + node.xpath('./p[@class=\"repo-list-meta\"]').text.split(\"\\n\")[5].split(' ')[0] + ' - Total: ' + result.fetch('stargazers_count').to_s + '| sizes=14 href=' + hash.fetch(:url)\n    else\n      puts \"OMG!! #{code} #{message}\"\n    end\n  end\nend\n"
				}
			],
			"path": "Dev/GitHub/github-trending.1h.rb",
			"filename": "github-trending.1h.rb",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github-trending.1h.rb.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github Trending",
			"version": "v0.1.2",
			"author": "mfks17",
			"authors": [
				{
					"name": "mfks17",
					"githubUsername": "mfks17",
					"imageURL": "https://avatars.githubusercontent.com/u/1155040?v=4",
					"bio": "programmer 📱 ",
					"primary": true
				}
			],
			"desc": "Github Daily Trending Viewer",
			"imageURL": "https://raw.githubusercontent.com/mfks17/bitbar-plugin-github-trending/Screenshots/01.png",
			"dependencies": [
				"ruby",
				"nokogiri"
			],
			"aboutURL": "https://github.com/mfks17/bitbar-plugins-github-trending",
			"lastUpdated": "2021-03-08T15:21:48.533463Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/github-review-requests.5m.py",
					"filename": "github-review-requests.5m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eGithub review requests\u003c/bitbar.title\u003e\n# \u003cbitbar.desc\u003eShows a list of PRs that need to be reviewed\u003c/bitbar.desc\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAdam Bogdał\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebogdal\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://github-bogdal.s3.amazonaws.com/bitbar-plugins/review-requests.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\n# ----------------------\n# ---  BEGIN CONFIG  ---\n# ----------------------\n\n# https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/\nACCESS_TOKEN = ''\n\nGITHUB_LOGIN = ''\n\n# (optional) PRs with this label (e.g 'in progress') will be grayed out on the list\nWIP_LABEL = ''\n\n# (optional) Filter the PRs by an organization, labels, etc. E.g 'org:YourOrg -label:dropped'\nFILTERS = ''\n\n# --------------------\n# ---  END CONFIG  ---\n# --------------------\n\nimport datetime\nimport json\nimport os\nimport sys\ntry:\n    # For Python 3.x\n    from urllib.request import Request, urlopen\nexcept ImportError:\n    # For Python 2.x\n    from urllib2 import Request, urlopen\n\n\nDARK_MODE = os.environ.get('BitBarDarkMode')\n\nquery = '''{\n  search(query: \"%(search_query)s\", type: ISSUE, first: 100) {\n    issueCount\n    edges {\n      node {\n        ... on PullRequest {\n          repository {\n            nameWithOwner\n          }\n          author {\n            login\n          }\n          createdAt\n          number\n          url\n          title\n          labels(first:100) {\n            nodes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}'''\n\n\ncolors = {\n    'inactive': '#b4b4b4',\n    'title': '#ffffff' if DARK_MODE else '#000000',\n    'subtitle': '#586069'}\n\n\ndef execute_query(query):\n    headers = {\n        'Authorization': 'bearer ' + ACCESS_TOKEN,\n        'Content-Type': 'application/json'}\n    data = json.dumps({'query': query}).encode('utf-8')\n    req = Request(\n        'https://api.github.com/graphql', data=data, headers=headers)\n    body = urlopen(req).read()\n    return json.loads(body)\n\n\ndef search_pull_requests(login, filters=''):\n    search_query = 'type:pr state:open review-requested:%(login)s %(filters)s' % {\n        'login': login, 'filters': filters}\n    response = execute_query(query % {'search_query': search_query})\n    return response['data']['search']\n\n\ndef parse_date(text):\n    date_obj = datetime.datetime.strptime(text, '%Y-%m-%dT%H:%M:%SZ')\n    return date_obj.strftime('%B %d, %Y')\n\n\ndef print_line(text, **kwargs):\n    params = ' '.join(['%s=%s' % (key, value) for key, value in kwargs.items()])\n    print('%s | %s' % (text, params) if kwargs.items() else text)\n\n\nif __name__ == '__main__':\n    if not all([ACCESS_TOKEN, GITHUB_LOGIN]):\n        print_line('⚠ Github review requests', color='red')\n        print_line('---')\n        print_line('ACCESS_TOKEN and GITHUB_LOGIN cannot be empty')\n        sys.exit(0)\n\n    response = search_pull_requests(GITHUB_LOGIN, FILTERS)\n\n    print_line('#%s' % response['issueCount'])\n    print_line('---')\n\n    for pr in [r['node'] for r in response['edges']]:\n        labels = [l['name'] for l in pr['labels']['nodes']]\n        title = '%s - %s' % (pr['repository']['nameWithOwner'], pr['title'])\n        title_color = colors.get('inactive' if WIP_LABEL in labels else 'title')\n        subtitle = '#%s opened on %s by @%s' % (\n            pr['number'], parse_date(pr['createdAt']), pr['author']['login'])\n        subtitle_color = colors.get('inactive' if WIP_LABEL in labels else 'subtitle')\n\n        print_line(title, size=16, color=title_color, href=pr['url'])\n        print_line(subtitle, size=12, color=subtitle_color)\n        print_line('---')\n"
				}
			],
			"path": "Dev/GitHub/github-review-requests.5m.py",
			"filename": "github-review-requests.5m.py",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/github-review-requests.5m.py.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Github review requests",
			"version": "v0.1",
			"author": "Adam Bogdał",
			"authors": [
				{
					"name": "Adam Bogdał",
					"githubUsername": "bogdal",
					"imageURL": "https://avatars.githubusercontent.com/u/1451824?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows a list of PRs that need to be reviewed",
			"imageURL": "https://github-bogdal.s3.amazonaws.com/bitbar-plugins/review-requests.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.311914Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Gitlab/gitlab_ci.1m.py",
					"filename": "gitlab_ci.1m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eGitlab CI\u003c/bitbar.title\u003e\n# \u003cbitbar.desc\u003eShows currently running pipelines from your GitLab in your bar. Interested in more advanced GitLab bar integration? Let me know (martin@kluska.cz). This implementation is just quick solution.\u003c/bitbar.desc\u003e\n# \u003cbitbar.version\u003ev0.21\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMartin Kluska\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003epionl\u003c/bitbar.author.github\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/pionl/bitbar-gitlab-ci/master/gitlab_ci.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/pionl/bitbar-gitlab-ci\u003c/bitbar.abouturl\u003e\n#\n\nimport json\n\ntry:\n    # For Python 3.0 and later\n    from urllib.request import urlopen\nexcept ImportError:\n    # Fall back to Python 2's urllib2\n    from urllib2 import urlopen\n\n# Your private key for accessing gitlab: User -\u003e Settings -\u003e Access tokens -\u003e add personal access token with api scope\nPRIVATE_TOKEN = 'token'\n# Gitlab URL\nURL = 'https://gitlab.example.com'\n# Define your server and projects (name: id)\n# To get id go to project -\u003e Settings -\u003e General -\u003e General project settings\nPROJECTS ={\"React\": 3}\n\npipelines = []\n\n# Converts the gitlab status to emoji\ndef stateIcon(status):\n    return {\n        \"created\": \"💤\",\n        \"pending\": \"💤\",\n        \"running\": \"🚀\",\n        \"failed\": \"❗\",\n        \"success\": \"✔️\",\n        \"skipped\": \"🚀\",\n        \"manual\": \"💤\"\n    }[status]\n\n# Calls gitlab API endpoint with private_token\ndef api (method):\n    url = URL + \"/api/v4/\" + method\n    param = 'private_token=' + PRIVATE_TOKEN\n    # Detect if method has query string (we need to append private token)\n    url = url + (('\u0026') if \"?\" in url else ('?')) + param\n    body = urlopen(url).read()\n    return json.loads(body.decode('utf-8'))\n\n# Project details\nclass Project:\n    def __init__ (self, name, id):\n        self.name = name\n        self.id = id\n\n# Pipile job\nclass Job:\n    def __init__ (self, json):\n        self.name = json[\"stage\"] + (\": \" + json[\"name\"] if json[\"name\"] != json[\"stage\"] else \"\" )\n        self.status = json[\"status\"]\n        self.duration = 0 if json[\"duration\"] is None or self.status == 'running' else int(json[\"duration\"])\n        self.commit = json['commit']['title']\n\n    # Jobs name with duration\n    def displayName(self):\n        return self.name + (' ' + str(self.duration) + 's' if self.duration \u003e 0 else '')\n    \n# Pipile\nclass Pipeline:\n    def __init__ (self, projectName, projectId, json):\n        self.project = Project(projectName, projectId)\n        self.id = json[\"id\"]\n        self.jobs = []\n        self.runningJobs = []\n        self.ref = str(json[\"ref\"])\n        self.commit = None\n\n    # Display name with current running jobs\n    def displayName(self):\n        jobsString = '💤'\n\n        # Get running jobs and append the name\n        if len(self.runningJobs) \u003e 0:\n            strings = []\n            for job in self.runningJobs:\n                strings.append(job.displayName()) \n\n            jobsString = ', '.join(strings)\n\n        return self.project.name + ' - ' + self.ref + ' (' + jobsString + ')'\n\n    # Add jobs array json\n    def addJobs(self, jobsArray):\n        for jobJson in jobsArray:\n            # Parse the job\n            job = Job(jobJson)\n            # Add the jobs array\n            self.jobs.append(job)\n\n            # Get the commit from the first job\n            if self.commit is None:\n                self.commit = job.commit\n\n            # Check if the job is running for running jobs array\n            if job.status == 'running':\n                self.runningJobs.append(job)\n\n\n# Loop the projects and get thy jobs\nfor name, project in PROJECTS.iteritems():\n    runningPipelines = api(\"projects/\"+str(project)+\"/pipelines?scope=running\")\n\n    for pipelineJson in runningPipelines:\n        pipeline = Pipeline(name, project, pipelineJson)\n        jobsArray = api(\"projects/\"+str(project)+\"/pipelines/\"+str(pipeline.id)+\"/jobs\")\n        if jobsArray.count \u003e 0:\n            pipeline.addJobs(jobsArray)\n            pipelines.append(pipeline)\n\npipelineCount = len(pipelines)\nif pipelineCount == 0:\n    print \"💤\"\n    exit\n\n\n## Render the pipelines names (bitbar will loop)\nfor index, pipeline in enumerate(pipelines):\n    print '🚀 ',\n\n    if pipelineCount \u003e 1:\n        print str(index + 1) + '/' + str(pipelineCount) + ' ',\n\n    print pipeline.displayName()\n\n\n## Start menu\nprint \"---\"\n\nfor pipeline in pipelines:\n    print '🚀 ' + pipeline.project.name + ' - ' + pipeline.ref + '| color=black'\n    print '-- commit: ' + pipeline.commit + '| color=black'\n    print '---'\n    for job in pipeline.jobs:\n        print stateIcon(job.status) + \" \",\n\n        style = ''\n        if job.status == 'success':\n            style = '| color=green'\n        elif job.status == 'running':\n            style = '| color=blue'\n\n        print job.displayName() + style\n\n        "
				}
			],
			"path": "Dev/Gitlab/gitlab_ci.1m.py",
			"filename": "gitlab_ci.1m.py",
			"dir": "Dev/Gitlab",
			"docsPlugin": "Dev/Gitlab/gitlab_ci.1m.py.html",
			"docsCategory": "Dev/Gitlab.html",
			"pathSegments": [
				"Dev",
				"Gitlab"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Gitlab",
					"text": "Gitlab",
					"isLast": true
				}
			],
			"title": "Gitlab CI",
			"version": "v0.21",
			"author": "Martin Kluska",
			"authors": [
				{
					"name": "Martin Kluska",
					"githubUsername": "pionl",
					"imageURL": "https://avatars.githubusercontent.com/u/1878831?v=4",
					"bio": "I make stuff (web, mobile, apps and ☕️ )",
					"primary": true
				}
			],
			"desc": "Shows currently running pipelines from your GitLab in your bar. Interested in more advanced GitLab bar integration? Let me know (martin@kluska.cz). This implementation is just quick solution.",
			"imageURL": "https://raw.githubusercontent.com/pionl/bitbar-gitlab-ci/master/gitlab_ci.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/pionl/bitbar-gitlab-ci",
			"lastUpdated": "2021-03-08T15:21:48.698363Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Gitlab/gitlab_status.10m.sh",
					"filename": "gitlab_status.10m.sh",
					"content": "#!/usr/bin/env bash\n# \u003cbitbar.title\u003eGitlab status plugin\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBrett Jones\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eblockloop\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://dl.dropbox.com/s/r4st2fnfhy7tcsv/gitlab-status-screenshot-bitbar.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eShows the current status of status.gitlab.com. Find out if Gitlab is having DDOS problems which will affect pushes/pulls.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n\nrawfeed=\"$(curl -SsL https://status.gitlab.com/ | grep OK)\"\nfeed=\"$(echo \"$rawfeed\" | sed 's/\u003ch5\u003e\u003cspan class=\"label label-.*\"\u003e//g' | sed 's/\u003c\\/span\u003e//g' | sed 's/\u003c\\/h5\u003e//g')\"\n\nif [[ $rawfeed == *\"label-error\"* ]]; then\n    echo \"✕ | color=red image=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\"\nelif [[ $rawfeed == *\"label-warning\"* ]]; then\n    echo \"✕ | color=orange image=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\"\nelse\n    echo \"✓ | font='PilGi Regular' image=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\"\nfi\n\necho \"---\"\nwhile read -r l; do\n    echo \"$l\"\ndone \u003c\u003c\u003c \"$feed\"\necho \"status.gitlab.com | href=https://status.gitlab.com/\"\n"
				}
			],
			"path": "Dev/Gitlab/gitlab_status.10m.sh",
			"filename": "gitlab_status.10m.sh",
			"dir": "Dev/Gitlab",
			"docsPlugin": "Dev/Gitlab/gitlab_status.10m.sh.html",
			"docsCategory": "Dev/Gitlab.html",
			"pathSegments": [
				"Dev",
				"Gitlab"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Gitlab",
					"text": "Gitlab",
					"isLast": true
				}
			],
			"title": "Gitlab status plugin",
			"version": "v0.1",
			"author": "Brett Jones",
			"authors": [
				{
					"name": "Brett Jones",
					"githubUsername": "blockloop",
					"imageURL": "https://avatars.githubusercontent.com/u/3022496?v=4",
					"bio": "I think I am a Pyrrhonist, but I’m not sure",
					"primary": true
				}
			],
			"desc": "Shows the current status of status.gitlab.com. Find out if Gitlab is having DDOS problems which will affect pushes/pulls.",
			"imageURL": "https://dl.dropbox.com/s/r4st2fnfhy7tcsv/gitlab-status-screenshot-bitbar.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.003745Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/gosquared-now.30s.py",
					"filename": "gosquared-now.30s.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eGoSquared Visitors Online Now Count\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDavid Barker\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edavidbarker\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThe total of all the sites you list is displayed. Drop-down menu shows individual visitor count for each site. Clicking on a menu option opens the relevant GoSquared stats page for that site in your browser.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/04lL6Ox.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://www.gosquared.com/\u003c/bitbar.abouturl\u003e\n\n\n# Change these variables (required)\n# You can create/view your API key(s) at https://www.gosquared.com/settings/api\napi_key = 'demo'\nsite_keys = {\n    'Official Team Fortress Wiki': 'GSN-106863-S',\n    'Poolga': 'GSN-181546-E'\n}\n\n# Change this variable (optional)\ncount_suffix = '☻'\n\n\n# You probably don't need to change anything below this line\nimport json\nimport urllib2\n\ndef get_visitors(site_token):\n    try:\n        request = urllib2.Request('https://api.gosquared.com/now/v3/overview?api_key=%s\u0026site_token=%s' % (api_key, site_token))\n        response = urllib2.urlopen(request)\n        response = json.load(response)\n        return response['visitors']\n    except Exception:\n        print 'Unable to load visitors. Check your site key(s).'\n\nsites = []\nfor site_name, site_token in site_keys.iteritems():\n    visitors = get_visitors(site_token)\n    sites.append({'name': site_name, 'token': site_token, 'visitors': visitors})\n\nsites = sorted(sites, key=lambda site: site['name'])\nsites = sorted(sites, key=lambda site: site['visitors'], reverse=True)\n\nformatted_sites = []\nfor site in sites:\n    formatted_sites.append((u'%s (%s)| href=https://www.gosquared.com/now/%s' % (site['name'], site['visitors'], site['token'])).encode('utf-8'))\n\nprint '%s %s' % (sum(site['visitors'] for site in sites), count_suffix)\nprint '---'\nprint '\\n' . join(formatted_sites)\nprint '---'\n"
				}
			],
			"path": "Dev/gosquared-now.30s.py",
			"filename": "gosquared-now.30s.py",
			"dir": "Dev",
			"docsPlugin": "Dev/gosquared-now.30s.py.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "GoSquared Visitors Online Now Count",
			"version": "v1.0.0",
			"author": "David Barker",
			"authors": [
				{
					"name": "David Barker",
					"githubUsername": "davidbarker",
					"imageURL": "https://avatars.githubusercontent.com/u/1597139?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "The total of all the sites you list is displayed. Drop-down menu shows individual visitor count for each site. Clicking on a menu option opens the relevant GoSquared stats page for that site in your browser.",
			"imageURL": "http://i.imgur.com/04lL6Ox.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://www.gosquared.com/",
			"lastUpdated": "2021-03-08T15:21:51.516965Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/gulpLauncher.1h.js",
					"filename": "gulpLauncher.1h.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n\n/* jshint esversion: 6 */\n/* jshint asi: true */\n\n/*\n * \u003cbitbar.title\u003eGulp Launcher\u003c/bitbar.title\u003e\n * \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n * \u003cbitbar.author\u003eAaron Crawford\u003c/bitbar.author\u003e\n * \u003cbitbar.author.github\u003eaaroncrawford\u003c/bitbar.author.github\u003e\n * \u003cbitbar.image\u003ehttps://i.imgur.com/RAxo5tG.png\u003c/bitbar.image\u003e\n * \u003cbitbar.desc\u003eQuickly launch gulp processes on projects.  Useful for agency developers with a lot of projects.  Editing of file required to list your projects.\u003c/bitbar.desc\u003e\n * \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n */\n\n// EDIT ME\nvar file = '/path/to/_projects.json'\n// Example _projects.json file : (you can just create an array in this file, but our file was huge so we decided to store in a separate file)\n/*\n\n[\n  {\n    \"name\": \"Project 1\",\n    \"path\": \"/path/to/readable/file/project1/src\"\n  },\n  {\n    \"name\": \"Project 2\",\n    \"path\": \"/path/to/readable/file/project2/src\"\n  }\n]\n\n*/\n\n\nvar fs = require('fs')\n\nfs.readFile(file, 'utf8', (e, data) =\u003e {\n\tconsole.log('🥤')\n\tconsole.log('---')\n\n\tvar projects = JSON.parse(data)\n\n\tprojects.map((d) =\u003e {\n\t\tvar path = d.path.replace(\" \", \"\\\\\\\\ \")\n\t\t// Currently just goes to the directory and runs 'gulp'.  If you want to modify this process, edit this line\n\t\tconsole.log(`${d.name}|bash=\"cd ${path} \u0026\u0026 gulp\" terminal=true`)\n\t})\t\n})\n\n\n"
				}
			],
			"path": "Dev/gulpLauncher.1h.js",
			"filename": "gulpLauncher.1h.js",
			"dir": "Dev",
			"docsPlugin": "Dev/gulpLauncher.1h.js.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Gulp Launcher",
			"version": "v1.0",
			"author": "Aaron Crawford",
			"authors": [
				{
					"name": "Aaron Crawford",
					"githubUsername": "aaroncrawford",
					"imageURL": "https://avatars.githubusercontent.com/u/3203500?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Quickly launch gulp processes on projects.  Useful for agency developers with a lot of projects.  Editing of file required to list your projects.",
			"imageURL": "https://i.imgur.com/RAxo5tG.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:51.560166Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Hosting/Heroku/heroku.1m.rb",
					"filename": "heroku.1m.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eHeroku\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDeluan Quintao\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edeluan\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eCurrently this plugin displays Heroku service status and open issues\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/B7A1wvm.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n\nrequire 'json'\nrequire 'open-uri'\n\nHEROKU_CMD=\"/usr/local/bin/heroku\"\n\nICON=\"iVBORw0KGgoAAAANSUhEUgAAABQAAAAWCAYAAADAQbwGAAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAA3RJREFUOBGVVL9rFEEUfm9m93Y3xp/RQlGCiiBpBDs7ISRWsQtGELGwUNsoNkpOMGIRa/UfCMZgIShoFAkIESsrY6edFlGDJmfuZndm/N7s3ZkLCeq72915M+998837MUyrZHj4oSaax/N32f5xt1888IUXFsjNzlaLdTw8rzP531MtEPn6kcE7+5zzfcwO6NoKmlKKvbctO7LQlFNe1hzZBOqnqZdXP4gOYa5WqwqPE21kYGIyjtPTeVHPsRZhj7ARMXn8yjEWxA9rRaQrUeHMOxV19U8+vbQoIVPv3/eJIQkwKdqtVSxqHOmY4yglrSJ4gyYr/LAaJZhPxCaCLnvuybneJRMLC/OsZBCkirenFetAzlNurbltisaQtcUsoMh7Z523zhT1azIPo1esxN0v6UYeQrBrV5//AyhLXqhgV6bYOX48NTP6BPTmlYqEqWbiZ1MzV8aNbbyB0SG4iHRURQdguR42I9auR3RoEcBC2Dy552f7b/UkOp5EOPblRQMWwuCPrANYLrYyCbaZMLQ2/4xcnDQ6fh1H2SASV7DkZo1sCFiwK3f2fG+5sTjAho4YZc+hkM6bYuURkgTaIqFAyiHeGwCy18R1sfKWvqLWUl/hc0nBBx/MjM6Ri64jST/KiuBQry3E5i6lGpIWhh6txGdODU5cAtgJrZIsS7bQcv3bOywfjWKzZK1eQva3QkeYQ9UEzw5A75mlguUfV7KzYCGxI5RSUTfLYlsTL89awqFhJqaI5C+ZDrLmyBIPaQRvTV5bdK6Q+sOcdyEBzXDlpmhilSCr3x2AYAiOkjmpZHUdRX0vdJnoIs206ijUb0gxXgLelg5A2OPEaFrmCrzfPnhx+SIYzknDBaYIqHhqVnJddQC1ENuAYzTmIWgGaTNvmOxhXBbjMDyGGOLIMMUJxNEwh/svUJQQrZJ2Um5UbzDPdaNh0cvkV8DzplK6F/0r5nWkJcN3/8iJibtkSbKblp1SshYjkTbDanUMu/OWtNKNXku2punmXq1jXDspVeIsk29S2bR3c7bzQnfacxo3zo6k0iX8eqyNA025baLp6eFm7iRAE09qtW/bcfClwppwfslTaAbZGklvmJocNwCA9TYMX9MKfRd2x4+TawVAviE+Q0P3u7Y1frbmxW5DqZsaT8+OoTbL2K41/CeQtU5Nve37GzcPb+4ia8bVAAAAAElFTkSuQmCC\"\n\ndef status_icon(icon=\"\", ok=true)\n  if icon.respond_to?('each')\n    msg = \"\"\n    icon.each do |i|\n      msg += \"#{i} | image=#{ICON} dropdown=false\\n\"\n    end\n  else\n    msg = \"#{icon} | image=#{ICON} dropdown=false\\n\"\n    msg += \"#{icon} | image=#{ICON} dropdown=false color=red\\n\" unless ok\n  end\n  msg + \"---\"\nend\n\ndef status\n  begin\n    @status ||= (content = URI(\"https://status.heroku.com/api/v3/current-status\").read; JSON.parse(content))\n  rescue =\u003e e\n    puts status_icon \":interrobang:\", false\n    puts \"Error: #{e} | color=red\"\n    puts \"---\"\n    puts \"Refresh... | refresh=true\"\n    exit\n  end\nend\n\ndef issues\n  @issues ||= [].tap do |resp|\n    status[\"issues\"].each do |issue|\n      href = issue[\"full_url\"]\n      title = issue[\"title\"]\n      color = issue[\"status_prod\"]\n      resp \u003c\u003c \"#{title} | color=#{color} href=#{href}\"\n    end\n  end\nend\n\nif status[\"status\"][\"Production\"] != \"green\"\n  puts status_icon [\":grey_exclamation:\", \":exclamation:\"], false\nelse\n  puts status_icon\nend\n\nputs \"---\"\nif issues.size \u003e 0\n  issues.each do |issue|\n    puts issue\n  end\nelse\n  puts \"All good. Relax | href=https://status.heroku.com/ color=green\"\nend\n\nputs \"---\"\nputs \"Refresh... | refresh=true\"\n"
				}
			],
			"path": "Dev/Hosting/Heroku/heroku.1m.rb",
			"filename": "heroku.1m.rb",
			"dir": "Dev/Hosting/Heroku",
			"docsPlugin": "Dev/Hosting/Heroku/heroku.1m.rb.html",
			"docsCategory": "Dev/Hosting/Heroku.html",
			"pathSegments": [
				"Dev",
				"Hosting",
				"Heroku"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Hosting",
					"text": "Hosting",
					"isLast": false
				},
				{
					"path": "Dev/Hosting/Heroku",
					"text": "Heroku",
					"isLast": true
				}
			],
			"title": "Heroku",
			"version": "v0.2",
			"author": "Deluan Quintao",
			"authors": [
				{
					"name": "Deluan Quintão",
					"githubUsername": "deluan",
					"imageURL": "https://avatars.githubusercontent.com/u/331353?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Currently this plugin displays Heroku service status and open issues",
			"imageURL": "http://i.imgur.com/B7A1wvm.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.079697Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Hosting/Heroku/listapps.5m.sh",
					"filename": "listapps.5m.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eHeroku List List\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eCody Brumfield\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecody1213\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eLists Heroku apps with links to both the live version and, while holding ALT/OPTION, the Heroku dashboard page).\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eheroku-toolbelt\u003c/bitbar.dependencies\u003e\n\n#If your Heroku Toolbelt command isn't /usr/local/bin/heroku, change it here:\nheroku_cmd=\"/usr/local/bin/heroku\"\n\n#If you have a custom URL system like https://instance-name.mydomain.com, you can change the default Heroku URLs below to match your system. \n#If your URLs don't use the instance name, you could replace this with a function to parse the output of heroku domains -a instance-name\nurlprefix=\"https://\" #part of URL before your instance name\nurlsuffix=\".herokuapp.com\" #part of URL after your instance name\n\nfunction prepLine {\n  # This function preps the lines for each instance and can be used to show different info or customize the URLs\n  echo \"$1 | href=$urlprefix$1$urlsuffix\"\n  echo \"$1 on Heroku | alternate=true href=https://dashboard.heroku.com/apps/$1\"\n  count=$((count+1));\n}\n\necho \"| templateImage=iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAAXNSR0IArs4c6QAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABYlAAAWJQFJUiTwAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAADzUlEQVRoBe2YuYsUQRjFvQ+8EFHEI1lcDwzFQIw0UvAPUGMRjA3ExEQwMjAVM9mNBE0UwcDIQDxBVJAFQRDFAzzwvt9vu99S9PY0PVU9PYH9wes6uo73vq+qpnpmzOis80Dngc4D/5sHZkqwkaKdMaJtTnTPrOOskv5/S+qKVbH9iuMkl1O8VyZiKIQg8kdYJRwXlgjfheXCLeGMgCG2GB333a53R4SvAmMtFF4Jp4TPgtspOzibnQ+9WSlEQ9wIpi16Pozi5UI/xhgP+oZtg+pmsxYyqmHfCZDAi6RXBFtRyNz8xW6ltCUSRIT8W2FEwKL2bXGybKh6T7zm/sW0OALvf+aVx/KUskmzHJ8KOOmX0Io5Ihs12wcBj37L06tKbRZH2dE4qDztIetosK/83mOravDmyeoKcftNovZRQIjxQ3k2PmYxWanPp0PbZ7fazcOTa0S9xgRHcbHy14XbQrj0VGzH7OFRTWdSZUsLD4fLqxe7Rk6opiMSkvLmRsA8YZGAuC/CJ8GG2N8uxKZNCWHNY6x5bK2wQ9gmbBXWC8sEhCJiQrgojAuIIMrJYjRGX1a2tBCAmCfCBeF1Xvam7pVeUjsihdVZhlnLhp6hkPcaE5J4kx+4kDDi2DssMdfTjusM9RzB1PtKMzQhG0TCQiALIGmCJk/KO/ZGWOcoEr01Aha91KM7ZvNOrWu8GXr0mcr3hbvCI+GFwA/gauGEsFPwwbBS+S0CbVynbH+WIgTvhuv7scrXctxR+kYo2gNVQBwhoS0NCzH5FCFEgPsRV4wx4aYQHqsqTi4Ve5m5iApHcOMWI8TH5HOx2SXwHWGDtA8D2oUXQA4DzMKyUkPPGCEmg3eBybPUIBuSV3HKLIB2jVusEMhADJDvRV6v2rFYIbCzZ522w7jHLOGR2aNJZTUiUseonKDuyxQSjib7whu87ryNt4sR4j7rxOakgCBOKAtTtn0zqX5m9unDfemocD7vzIYfmpgYITnvyaOWfz8OCGfzSsQMZZmlCKGvo3NY+XO5GJZZyrj5MP0lqRO6Pz+Mh4TT+fScZhaZVw02MZHUWfjLk+s4/yBi/qHMSi08Uzcn3xTYS2GfcE9gj/g+pmw7liIEsisEbrx7BK7o3Gz5iKoy3wToT+QQ7rqqfpXvUpYW3yITwl6hrgjILOAhmy/4hCOPRe+rmIj4Os6/hvsFxECobiQeqi3/nvDpiyPhwBhY60sy9Jy9mlGpfob9ii2r3hXbTiundKYvHu3Xi2VzJu+RskGnqR1ARXHeZCED4NgN2Xmg80DngQF64B9GCddbdS0DAwAAAABJRU5ErkJggg==\"\necho \"---\"\ncount=0;\n\nfor x in $(\"$heroku_cmd\" apps --all | awk '{if(NR\u003e1)print}'); do prepLine \"$x\"; done\necho \"---\"\necho \"$count instances | href=https://dashboard.heroku.com/\"\n"
				}
			],
			"path": "Dev/Hosting/Heroku/listapps.5m.sh",
			"filename": "listapps.5m.sh",
			"dir": "Dev/Hosting/Heroku",
			"docsPlugin": "Dev/Hosting/Heroku/listapps.5m.sh.html",
			"docsCategory": "Dev/Hosting/Heroku.html",
			"pathSegments": [
				"Dev",
				"Hosting",
				"Heroku"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Hosting",
					"text": "Hosting",
					"isLast": false
				},
				{
					"path": "Dev/Hosting/Heroku",
					"text": "Heroku",
					"isLast": true
				}
			],
			"title": "Heroku List List",
			"version": "v1.0",
			"author": "Cody Brumfield",
			"authors": [
				{
					"name": "Cody Brumfield",
					"githubUsername": "cody1213",
					"imageURL": "https://avatars.githubusercontent.com/u/1279978?v=4",
					"bio": "Modern JavaScript, DevOps, Data Viz, and start-up management.",
					"primary": true
				}
			],
			"desc": "Lists Heroku apps with links to both the live version and, while holding ALT/OPTION, the Heroku dashboard page).",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"heroku-toolbelt"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.302593Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Hosting/Heroku/herokuappserrors.1h.rb",
					"filename": "herokuappserrors.1h.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eHeroku apps:errors\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJosh Beckman\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eandjosh\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays Heroku errors for a given app. You must be logged in via heroku-cli.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/tAHBNUO.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.dependencies\u003eheroku-toolbelt\u003c/bitbar.dependencies\u003e\n\nrequire 'json'\n\nHEROKU_CMD=\"/usr/local/bin/heroku\"\n\n# Configuration options\napp = \"appname\" # Which app?\nhours = 24      # how many hours should the error window contain?\n\n\n# Heroku Error Glossary\nglossary = {\n\"H10\" =\u003e \"App crashed\",\n\"H11\" =\u003e \"Backlog too deep\",\n\"H12\" =\u003e \"Request timeout\",\n\"H13\" =\u003e \"Connection closed without response\",\n\"H14\" =\u003e \"No web dynos running\",\n\"H15\" =\u003e \"Idle connection\",\n\"H16\" =\u003e \"Redirect to herokuapp.com\",\n\"H17\" =\u003e \"Poorly formatted HTTP response\",\n\"H18\" =\u003e \"Server Request Interrupted\",\n\"H19\" =\u003e \"Backend connection timeout\",\n\"H20\" =\u003e \"App boot timeout\",\n\"H21\" =\u003e \"Backend connection refused\",\n\"H22\" =\u003e \"Connection limit reached\",\n\"H23\" =\u003e \"Endpoint misconfigured\",\n\"H24\" =\u003e \"Forced close\",\n\"H25\" =\u003e \"HTTP Restriction\",\n\"H26\" =\u003e \"Request Error\",\n\"H27\" =\u003e \"Client Request Interrupted\",\n\"H28\" =\u003e \"Client Connection Idle\",\n\"H80\" =\u003e \"Maintenance mode\",\n\"H81\" =\u003e \"Blank app\",\n\"H82\" =\u003e \"Free dyno quota exhausted\",\n\"H99\" =\u003e \"Platform error\",\n\"R10\" =\u003e \"Boot timeout\",\n\"R12\" =\u003e \"Exit timeout\",\n\"R13\" =\u003e \"Attach error\",\n\"R14\" =\u003e \"Memory quota exceeded\",\n\"R15\" =\u003e \"Memory quota vastly exceeded\",\n\"R16\" =\u003e \"Detached\",\n\"R17\" =\u003e \"Checksum error\",\n\"R99\" =\u003e \"Platform error\",\n\"L10\" =\u003e \"Drain buffer overflow\",\n\"L11\" =\u003e \"Tail buffer overflow\",\n\"L12\" =\u003e \"Local buffer overflow\",\n\"L13\" =\u003e \"Local delivery error\",\n\"L14\" =\u003e \"Certificate validation error\",\n\"L15\" =\u003e \"Tail buffer temporarily unavailable\"}\ntotal = 0\ncopy = \"\"\nstatus = `#{HEROKU_CMD} apps:errors -a #{app} --json --hours #{hours}`\nstatus = JSON.parse(status)\n\nstatus.keys.each do |level|\n    status[level].keys.each do |type|\n        if status[level][type].is_a? Numeric\n            # router errors\n            total += status[level][type]\n            copy += \"#{type}: #{status[level][type]} (#{glossary[type]})\\n\"\n        else\n            status[level][type].keys.each do |error|\n                # dyno errors\n                total += status[level][type][error]\n                copy += \"#{error}: #{status[level][type][error]} (#{glossary[error]})\\n\"\n            end\n        end\n    end\nend\n\nputs \"#{total} #{app} errors\"\nputs \"---\"\nputs \"In the last #{hours} hours\"\nputs copy\nputs \"Refresh... | refresh=true\"\n"
				}
			],
			"path": "Dev/Hosting/Heroku/herokuappserrors.1h.rb",
			"filename": "herokuappserrors.1h.rb",
			"dir": "Dev/Hosting/Heroku",
			"docsPlugin": "Dev/Hosting/Heroku/herokuappserrors.1h.rb.html",
			"docsCategory": "Dev/Hosting/Heroku.html",
			"pathSegments": [
				"Dev",
				"Hosting",
				"Heroku"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Hosting",
					"text": "Hosting",
					"isLast": false
				},
				{
					"path": "Dev/Hosting/Heroku",
					"text": "Heroku",
					"isLast": true
				}
			],
			"title": "Heroku apps:errors",
			"version": "v0.1",
			"author": "Josh Beckman",
			"authors": [
				{
					"name": "Josh Beckman",
					"githubUsername": "andjosh",
					"imageURL": "https://avatars.githubusercontent.com/u/2358584?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin displays Heroku errors for a given app. You must be logged in via heroku-cli.",
			"imageURL": "http://i.imgur.com/tAHBNUO.png",
			"dependencies": [
				"heroku-toolbelt"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.279635Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Tutorial/config.sh",
					"filename": "config.sh",
					"content": "#!/usr/local/bin/bash\n# shellcheck disable=SC2154\n\n# \u003cbitbar.title\u003eHome Config\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKodie Grantham\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekodie\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eExample of how to mimic the functionality of the home-config npm module in a bash BitBar plugin\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash4\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/kodie/bitbar-home-config\u003c/bitbar.abouturl\u003e\n\ntypeset -A cfg\ncfg[home_config,color]=\"red\"\ncfg[home_config,text]=\"Try editing $HOME/.bitbarrc\"\n\ncfgFile=\"$HOME/.bitbarrc\"\nif [ ! -e \"$cfgFile\" ]; then touch \"$cfgFile\"; fi\nwhile read -r cfgLine; do\n  if [[ -z $cfgLine ]]; then continue; fi\n  if [[ ${cfgLine:0:1} == '[' ]]; then cfgKey=${cfgLine:1:-1};\n  else IFS='='; cfgVar=($cfgLine); unset IFS; cfg[$cfgKey,${cfgVar[0]}]=${cfgVar[1]}; fi\ndone \u003c \"$cfgFile\"\n\necho \"Config Example | dropdown=false color=${cfg[home_config,color]}\"\necho \"---\"\necho \"${cfg[home_config,text]}\"\n"
				}
			],
			"path": "Dev/Tutorial/config.sh",
			"filename": "config.sh",
			"dir": "Dev/Tutorial",
			"docsPlugin": "Dev/Tutorial/config.sh.html",
			"docsCategory": "Dev/Tutorial.html",
			"pathSegments": [
				"Dev",
				"Tutorial"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Tutorial",
					"text": "Tutorial",
					"isLast": true
				}
			],
			"title": "Home Config",
			"version": "v1.0",
			"author": "Kodie Grantham",
			"authors": [
				{
					"name": "Kodie Grantham",
					"githubUsername": "kodie",
					"imageURL": "https://avatars.githubusercontent.com/u/603949?v=4",
					"bio": "Lead Engineer/Systems Administrator for @itsahappymedium",
					"primary": true
				}
			],
			"desc": "Example of how to mimic the functionality of the home-config npm module in a bash BitBar plugin",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash4"
			],
			"aboutURL": "https://github.com/kodie/bitbar-home-config",
			"lastUpdated": "2021-03-08T15:21:50.280195Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Homebrew/homebrewcask.1d.sh",
					"filename": "homebrewcask.1d.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eHomebrew Cask Updater\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSrdgh\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esrdgh\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eList out-of-date apps i.e. apps for whch a newer Homebrew cask exists. Click menu item to install cask.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/kBf90TB.png?1\u003c/bitbar.image\u003e\n\n#I've taken the next six lines from the brew update plugin.\nexit_with_error() {\n  echo \"err | color=red\";\n  exit 1;\n}\n\n/usr/local/bin/brew update \u0026\u003e /dev/null || exit_with_error; \n\nbrewcasklist=$(/usr/local/bin/brew cask ls -1 | sed 's_(!)__g' | xargs /usr/local/bin/brew cask info | grep -A 1 'Not installed' | sed -e 's_Not installed__g' -e 's_From: https://github\\.com/caskroom/homebrew-cask/blob/master/Casks/__g' -e 's_\\.rb__g');\n\nbrewcasknum=$(for line in $brewcasklist; do echo \"$line\" | grep \"[a-z]\" ; done | wc -w | xargs);\n\nif [[ \"${brewcasknum}\" != \"0\" ]]; then\nif [[ \"${brewcasknum}\" == \"1\" ]]; then\necho \"🍺\"\necho \"---\"\necho \"$brewcasknum cask to update\"\nelse\necho \"🍻\"\necho \"---\"\necho \"$brewcasknum casks to update\"\nfi\nfor line in $brewcasklist; do echo \"$line\" | grep \"[a-z]\" | sed 's_\\(.*\\)_\u0026 | bash=brew param1=cask param2=install param3=\u0026 terminal=true refresh=_g' ; done\nfi\nif [[ \"${brewcasknum}\" == \"0\" ]]; then\necho \"🍹\"\necho \"---\"\necho \"No casks to update\"\nfi\necho \"---\"\n# Uncomment following lines to add the commands to the drop-down menu\n# echo \"Brew Update | bash=brew param1=update terminal=true refresh=\"\necho \"Brew Upgrade | bash=brew param1=upgrade terminal=true refresh=\"\n# echo \"Brew Cleanup | bash=brew param1=cleanup terminal=true refresh=\"\n# echo \"Brew Cask Cleanup | bash=brew param1=cask param2=cleanup terminal=true refresh=\"\necho \"Refresh | refresh=\"\n"
				}
			],
			"path": "Dev/Homebrew/homebrewcask.1d.sh",
			"filename": "homebrewcask.1d.sh",
			"dir": "Dev/Homebrew",
			"docsPlugin": "Dev/Homebrew/homebrewcask.1d.sh.html",
			"docsCategory": "Dev/Homebrew.html",
			"pathSegments": [
				"Dev",
				"Homebrew"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Homebrew",
					"text": "Homebrew",
					"isLast": true
				}
			],
			"title": "Homebrew Cask Updater",
			"version": "v0.1",
			"author": "Srdgh",
			"authors": [
				{
					"name": "Srdgh",
					"githubUsername": "srdgh",
					"imageURL": "https://avatars.githubusercontent.com/u/7290027?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "List out-of-date apps i.e. apps for whch a newer Homebrew cask exists. Click menu item to install cask.",
			"imageURL": "http://i.imgur.com/kBf90TB.png?1",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.076474Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Homebrew/brew-updates.1h.sh",
					"filename": "brew-updates.1h.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eHomebrew Updates\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003ekillercup\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekillercup\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eList available updates from Homebrew (OS X)\u003c/bitbar.desc\u003e\n\nexit_with_error() {\n  echo \"err | color=red\";\n  exit 1;\n}\n\n/usr/local/bin/brew update \u003e /dev/null || exit_with_error;\n\nPINNED=$(/usr/local/bin/brew list --pinned);\nOUTDATED=$(/usr/local/bin/brew outdated --quiet);\n\nUPDATES=$(comm -13 \u003c(for X in \"${PINNED[@]}\"; do echo \"${X}\"; done) \u003c(for X in \"${OUTDATED[@]}\"; do echo \"${X}\"; done))\n\nUPDATE_COUNT=$(echo \"$UPDATES\" | grep -c '[^[:space:]]');\n\necho \"↑$UPDATE_COUNT | dropdown=false\"\necho \"---\";\nif [ -n \"$UPDATES\" ]; then\n  echo \"Upgrade all | bash=/usr/local/bin/brew param1=upgrade terminal=false refresh=true\"\n  echo \"$UPDATES\" | awk '{print $0 \" | terminal=false refresh=true bash=/usr/local/bin/brew param1=upgrade param2=\" $1}'\nfi\n"
				}
			],
			"path": "Dev/Homebrew/brew-updates.1h.sh",
			"filename": "brew-updates.1h.sh",
			"dir": "Dev/Homebrew",
			"docsPlugin": "Dev/Homebrew/brew-updates.1h.sh.html",
			"docsCategory": "Dev/Homebrew.html",
			"pathSegments": [
				"Dev",
				"Homebrew"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Homebrew",
					"text": "Homebrew",
					"isLast": true
				}
			],
			"title": "Homebrew Updates",
			"version": "",
			"author": "killercup",
			"authors": [
				{
					"name": "Pascal Hertleif",
					"githubUsername": "killercup",
					"imageURL": "https://avatars.githubusercontent.com/u/20063?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "List available updates from Homebrew (OS X)",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.050129Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/icinga2.24m.py",
					"filename": "icinga2.24m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*- \n#\n# \u003cbitbar.title\u003eIcinga2 Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMario Mann\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emariomann\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays the amount of Service with state OK, WARNING, CRITICAL and UNKNOWN\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/mariomann/pictures/master/icinga2-api.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython, icinga2, icinga2-api\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://docs.icinga.org/icinga2/snapshot/doc/module/icinga2/chapter/icinga2-api\u003c/bitbar.abouturl\u003e\n\nimport requests, json\n\nOK = '\\033[92m'\nWARNING = '\\033[93m'\nCRITICAL = '\\033[91m'\nUNKNOWN='\\033[95m'\nENDC = '\\033[0m'\n\nclass State:\n    HOST     = \"localhost\"\n    PORT     = \"5665\"\n    USER     = \"root\"\n    PASSWORD = \"icinga\"\n    msg  = \"\"\n    \n    def getHostCount(self, value):\n        requests.packages.urllib3.disable_warnings()\n        count = \"n/a\"\n        \n        try:\n            url = \"https://\" + self.HOST + \":\" + self.PORT + \"/v1/objects/hosts\"\n            headers = { 'Accept': 'application/json', 'X-HTTP-Method-Override': 'GET' }\n            data = { \"attrs\": [ \"name\", \"state\" ], \"filter\": \"match(\\\"\" + str(value) + \"\\\", host.state)\" }\n        \n            result = requests.post(url, headers=headers, auth=(self.USER, self.PASSWORD), data=json.dumps(data), verify=False)\n    \n            if (result.status_code == 200):\n                data = json.loads(json.dumps(result.json()))\n                count = str(len(data['results']))\n    \n        except Exception, e:\n                self.msg = str(e.message)\n                \n        return count\n        \n    \n    def getServiceCount(self, value):\n        requests.packages.urllib3.disable_warnings()\n        count = \"n/a\"\n        \n        try:\n            url = \"https://\" + self.HOST + \":\" + self.PORT + \"/v1/objects/services\"\n            headers = { 'Accept': 'application/json', 'X-HTTP-Method-Override': 'GET' }\n            data = { \"attrs\": [ \"name\", \"state\" ], \"filter\": \"match(\\\"\" + str(value) + \"\\\", service.state)\" }\n        \n            result = requests.post(url, headers=headers, auth=(self.USER, self.PASSWORD), data=json.dumps(data), verify=False)\n\n            if (result.status_code == 200):\n                data = json.loads(json.dumps(result.json()))\n                count = str(len(data['results']))\n        except Exception, e:\n            self.msg = str(e.message)\n            \n        return count\n\n    def getMessage(self):\n        return self.msg\n\ns = State()\nprint ('🌐 | size=16')\nprint '---'\nprint 'Host UP:\\t\\t' + s.getHostCount(0)\nprint \"Host DOWN:\\t\\t\" + s.getHostCount(1)\nprint '---'\nprint \"Service OK:\\t\\t\\t\" + s.getServiceCount(0)\nprint \"Service WARNING:\\t\" + s.getServiceCount(1)\nprint \"Service CRITICAL:\\t\" + s.getServiceCount(2)\nprint \"Service UNKNOWN:\\t\" + s.getServiceCount(3)\nif (s.getMessage() != \"\"):\n    print '---'\n    print s.getMessage()"
				}
			],
			"path": "Dev/icinga2.24m.py",
			"filename": "icinga2.24m.py",
			"dir": "Dev",
			"docsPlugin": "Dev/icinga2.24m.py.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Icinga2 Status",
			"version": "v1.0",
			"author": "Mario Mann",
			"authors": [
				{
					"name": "Mario Mann",
					"githubUsername": "mariomann",
					"imageURL": "https://avatars.githubusercontent.com/u/3458678?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays the amount of Service with state OK, WARNING, CRITICAL and UNKNOWN",
			"imageURL": "https://raw.githubusercontent.com/mariomann/pictures/master/icinga2-api.png",
			"dependencies": [
				"python",
				"icinga2",
				"icinga2-api"
			],
			"aboutURL": "http://docs.icinga.org/icinga2/snapshot/doc/module/icinga2/chapter/icinga2-api",
			"lastUpdated": "2021-03-08T15:21:51.655209Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Tutorial/is_bitbar.sh",
					"filename": "is_bitbar.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eIs BitBar?\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eMat Ryer and Tyler Bunnell\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ematryer\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eExample script showing use of $BITBAR environment variable\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/TcZJI06.png\u003c/bitbar.image\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n#\n# Example script showing how to let your scripts determine\n# whether they are expected to deliver BitBar output or not.\n#\n# Put this script in your BitBar plugins folder and notice\n# it says \"In BitBar\", but run it directly in Terminal, and it\n# says \"In Terminal\".\nBitBar=${BitBar}\n\nif [ \"$BitBar\" ]; then\n  # this script is being called from within\n  # BitBar.\n  echo \"In BitBar\"\nelse\n  # this script is being called from within\n  # Terminal.\n  echo \"In Terminal\"\nfi\n"
				}
			],
			"path": "Dev/Tutorial/is_bitbar.sh",
			"filename": "is_bitbar.sh",
			"dir": "Dev/Tutorial",
			"docsPlugin": "Dev/Tutorial/is_bitbar.sh.html",
			"docsCategory": "Dev/Tutorial.html",
			"pathSegments": [
				"Dev",
				"Tutorial"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Tutorial",
					"text": "Tutorial",
					"isLast": true
				}
			],
			"title": "Is BitBar?",
			"version": "1.0",
			"author": "Mat Ryer and Tyler Bunnell",
			"authors": [
				{
					"name": "Mat Ryer",
					"githubUsername": "matryer",
					"imageURL": "https://avatars.githubusercontent.com/u/101659?v=4",
					"bio": "Building pace.dev and firesearch.dev - Gopher, developer, speaker, author (Go Programming Blueprints) - BitBar app getbitbar.com - Co-creator Gopherize.me",
					"primary": true
				}
			],
			"desc": "Example script showing use of $BITBAR environment variable",
			"imageURL": "https://i.imgur.com/TcZJI06.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.483639Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Tutorial/is_darkmode.sh",
					"filename": "is_darkmode.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eIs Dark Mode?\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDave Wikoff\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ederimagia\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eExample script showing how to let your scripts determine whether OSX is in Dark Mode so you can adjust appearance. Must restart Bitbar after changing setting.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/2ark3Bq.png\u003c/bitbar.image\u003e\nBitBarDarkMode=${BitBarDarkMode}\n\nif [ \"$BitBarDarkMode\" ]; then\n  # OSX has Dark Mode enabled.\n  echo \"Dark | color=white\"\nelse\n  # OSX does not have Dark Mode\n  echo \"Light | color=black\"\nfi\n"
				}
			],
			"path": "Dev/Tutorial/is_darkmode.sh",
			"filename": "is_darkmode.sh",
			"dir": "Dev/Tutorial",
			"docsPlugin": "Dev/Tutorial/is_darkmode.sh.html",
			"docsCategory": "Dev/Tutorial.html",
			"pathSegments": [
				"Dev",
				"Tutorial"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Tutorial",
					"text": "Tutorial",
					"isLast": true
				}
			],
			"title": "Is Dark Mode?",
			"version": "v1.0",
			"author": "Dave Wikoff",
			"authors": [
				{
					"name": "Dave Wikoff",
					"githubUsername": "derimagia",
					"imageURL": "https://avatars.githubusercontent.com/u/999489?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Example script showing how to let your scripts determine whether OSX is in Dark Mode so you can adjust appearance. Must restart Bitbar after changing setting.",
			"imageURL": "http://i.imgur.com/2ark3Bq.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.499365Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Jenkins/jenkins-all-jobs.status.1m.py",
					"filename": "jenkins-all-jobs.status.1m.py",
					"content": "#!/usr/bin/env python\n\n# \u003cbitbar.title\u003eJenkins All Build Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDan Rassi\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edrassi\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow current status of *all* jobs on a Jenkins instance, colors indicating status of each build and overall status. Clicks navigate to console output of last build.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/ARJHMjy.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython,requests\u003c/bitbar.dependencies\u003e\n\nimport sys\nimport requests\nimport collections\n\n# Credentials to your jenkins instance\nCREDS = {\n    'USER' : 'user',\n    'PASS' : 'pass',\n'BASE_URL' : 'jenkins-url.com',\n  'SCHEMA' : 'https',\n}\n\n# Text prefix for in-progress builds\nIS_BUILDING_PREFIX = '*'\n# Suffix appended to build URLs on click\nURL_SUFFIX = 'lastBuild/console'\n# Text displayed in the OSX menu bar\nBAR_TEXT = 'build'\n\n# Color defs @ https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/model/BallColor.java\ncolor_map = collections.OrderedDict([\n    ('grey'    , 'lightgray'),\n    ('disabled', 'lightgray'),\n    ('aborted' , 'lightgray'),\n    ('notbuilt', 'lightgray'),\n    ('blue'    ,  None), # leave default unspecified - black is picked in light mode, and white in dark mode\n    ('yellow'  , 'yellow'),\n    ('red'     , 'red'),\n])\n\nURL='{SCHEMA}://{USER}:{PASS}@{BASE_URL}/api/json?pretty=true'.format(**CREDS)\n\nreq = requests.get(URL)\n\nif req.status_code != requests.codes.ok:\n    sys.exit('error %d from jenkins!' % req.status_code)\n\noutput = ''\nnotify_val = 0\n\ndef get_color(job):\n    is_building = '_anime' in job['color']\n    color_val = color_map.keys().index(job['color'].replace('_anime',''))\n    color = color_map.values()[color_val]\n    return color, color_val, is_building\n\ndef get_color_def(color):\n    return ('color=%s' % color) if color is not None else ''\n\nfor job in req.json()['jobs']:\n    color, color_val, is_building = get_color(job)\n    output += '%s%s|%s href=%s\\n' % (IS_BUILDING_PREFIX if is_building else '',\n                                     job['name'], get_color_def(color), job['url'] + URL_SUFFIX)\n    notify_val = max(notify_val, color_val)\n\nbar_color = color_map.values()[notify_val]\n\nprint BAR_TEXT, '|', get_color_def(bar_color)\nprint '---'\nprint output\n"
				}
			],
			"path": "Dev/Jenkins/jenkins-all-jobs.status.1m.py",
			"filename": "jenkins-all-jobs.status.1m.py",
			"dir": "Dev/Jenkins",
			"docsPlugin": "Dev/Jenkins/jenkins-all-jobs.status.1m.py.html",
			"docsCategory": "Dev/Jenkins.html",
			"pathSegments": [
				"Dev",
				"Jenkins"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Jenkins",
					"text": "Jenkins",
					"isLast": true
				}
			],
			"title": "Jenkins All Build Status",
			"version": "v1.0",
			"author": "Dan Rassi",
			"authors": [
				{
					"name": "dan rassi",
					"githubUsername": "drassi",
					"imageURL": "https://avatars.githubusercontent.com/u/129646?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show current status of *all* jobs on a Jenkins instance, colors indicating status of each build and overall status. Clicks navigate to console output of last build.",
			"imageURL": "http://i.imgur.com/ARJHMjy.png",
			"dependencies": [
				"python",
				"requests"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.426483Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Jenkins/jenkins-latest-build-status.1m.rb",
					"filename": "jenkins-latest-build-status.1m.rb",
					"content": "#!/usr/bin/env ruby\n\n# Jenkins Build Status\n# by Tony Mai (thetonymai@gmail.com)\n\n# \u003cbitbar.title\u003eJenkins Build Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTony Mai\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etonymai\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows the latest builds of a Jenkins project. Result, Build ID, Timestamp, Duration.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/tonymai/jenkins-bitbar-plugin/master/screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/tonymai/jenkins-bitbar-plugin\u003c/bitbar.abouturl\u003e\n\nrequire 'net/http'\nrequire 'json'\n\n# Variables To Fill Out\n\nUSERNAME = 'username'.freeze\nAUTH_TOKEN = 'auth_token'.freeze\nURL = 'https://url/'.freeze # must have trailing slash '/'\nNAME = 'Jenkins'.freeze\n\n# Information Requests\n\ndef get(url)\n  uri = URI(url)\n  Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|\n    request = Net::HTTP::Get.new(uri)\n    request.basic_auth(USERNAME, AUTH_TOKEN)\n    response = http.request(request)\n    JSON.parse(response.body)\n  end\nend\n\ndef latest_builds(limit = 5)\n  json = get(URL + 'api/json')\n  return unless json.key?('builds')\n\n  json['builds'].take(limit).map { |build| get(build['url'] + 'api/json') }\nend\n\n# Pretty Display Formatters\n\ndef format_status(status)\n  case status\n  when 'SUCCESS' then \"\\u{2714}\"\n  when 'FAILURE' then \"\\u{2718}\"\n  else \"\\u{2022}\"\n  end\nend\n\ndef format_color(status)\n  case status\n  when 'SUCCESS' then 'green'\n  when 'FAILURE' then 'red'\n  else 'yellow'\n  end\nend\n\ndef format_timestamp(timestamp)\n  Time.at(timestamp / 1000).strftime('%b %e %I:%M%P')\nend\n\ndef format_duration(time_in_ms)\n  time_in_sec = time_in_ms / 1000\n  minutes = time_in_sec / 60\n  seconds = time_in_sec % 60\n  \"#{minutes}m #{seconds}s\"\nend\n\n# Print Helpers\n\ndef print_build_details(build)\n  puts \"Last Build (##{build['id']})\"\n  build['actions'].each do |action|\n    next unless action['causes']\n\n    action['causes'].each do |cause|\n      puts cause['shortDescription'] if cause['shortDescription']\n    end\n  end\nend\n\ndef print_builds_summary(builds)\n  puts 'Latest Builds'\n  builds.each do |build|\n    id = build['id']\n    status = format_status(build['result'])\n    time = format_timestamp(build['timestamp'])\n    duration = format_duration(build['duration'])\n    url = build['url']\n    color = format_color(build['result'])\n    puts \"#{status} ##{id}: #{time} (#{duration}) | href=#{url} color=#{color}\"\n  end\nend\n\n# Driver Code\n\ndef run\n  builds = latest_builds\n  return puts 'No builds executing' unless builds\n\n  last = builds.first\n  puts format_status(last['result']) + ' ' + NAME\n  puts '---'\n  print_build_details(last)\n  puts '---'\n  print_builds_summary(builds)\n  puts '---'\n  puts 'Open In Browser | href= ' + URL\nend\n\nrun\n"
				}
			],
			"path": "Dev/Jenkins/jenkins-latest-build-status.1m.rb",
			"filename": "jenkins-latest-build-status.1m.rb",
			"dir": "Dev/Jenkins",
			"docsPlugin": "Dev/Jenkins/jenkins-latest-build-status.1m.rb.html",
			"docsCategory": "Dev/Jenkins.html",
			"pathSegments": [
				"Dev",
				"Jenkins"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Jenkins",
					"text": "Jenkins",
					"isLast": true
				}
			],
			"title": "Jenkins Build Status",
			"version": "v1.0",
			"author": "Tony Mai",
			"authors": [
				{
					"name": "Tony Mai",
					"githubUsername": "tonymai",
					"imageURL": "https://avatars.githubusercontent.com/u/9425367?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows the latest builds of a Jenkins project. Result, Build ID, Timestamp, Duration.",
			"imageURL": "https://raw.githubusercontent.com/tonymai/jenkins-bitbar-plugin/master/screenshot.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/tonymai/jenkins-bitbar-plugin",
			"lastUpdated": "2021-03-08T15:21:49.431203Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Jira/jira-issues.10m.py",
					"filename": "jira-issues.10m.py",
					"content": "#!/usr/local/bin/python3\n\n# \u003cbitbar.title\u003eJira issues\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eStefano Teodorani\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eteopost\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow your jira issues\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.ibb.co/3SZ6D30/Schermata-2019-11-23-alle-19-26-24.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://www.stefanoteodorani.it/\u003c/bitbar.abouturl\u003e\n\n\nimport requests\nimport json\nimport base64\n\nfrom urllib.parse import quote\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nclass Jira:\n    base_url = \"\"\n    juser = \"\"\n    jpwd = \"\"\n    s = \"\"\n    issue_count = 0\n    issue_results = \"\"\n    max_results = 50\n    active_jql = \"\"\n\n    def __init__(self, BaseUrl, UserName, Password):\n        self.base_url = BaseUrl\n        self.juser = UserName\n        self.jpwd = Password\n\n        self.s = requests.Session()\n\n        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\n    def Query(self, jql):\n        self.active_jql = jql\n        #expansion = 'summary,issuetype,status,assignee,renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations'\n        expansion = 'summary,issuetype,status,assignee'\n        payload = {'jql' : jql, 'maxResults' : self.max_results, 'fields' : expansion}\n        # renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations\n        r = self.s.get(self.base_url + \"/rest/api/2/search\", params=payload, verify=False, auth=(self.juser, self.jpwd))\n        parsed = json.loads(r.text)\n        self.issue_count, self.issue_results = parsed['total'],parsed['issues']\n\n    def PrintIssues(self, filter, assignee=''):\n        # print gray title\n        print(filter)\n        for issue in self.issue_results:\n            #print(issue)\n            status = issue['fields']['status']['name']\n            summary = issue['fields']['summary'].replace('|', '-')\n\n            if filter.upper() == 'DEBUG':\n                print('DEBUG: ' + status + '-' + summary)\n\n            try:\n                assignee = \" ▸\" + issue['fields']['assignee']['name']\n            except:\n                assignee = \"\"\n\n            assignee = \"\"\n            iconurl = issue['fields']['issuetype']['iconUrl']\n            key = issue['key']\n\n            line = key + ': ' + summary + assignee + ' | href=' + self.base_url + '/browse/' + key + ' image=' + self.render_icon_string(iconurl)\n            if status.upper() != 'DEBUG':\n                if status.upper() == filter.upper():\n                    if assignee == '':\n                        print(line)\n                    elif assignee == assignee:\n                        print(line)\n\n    def render_icon_string(self, iconurl):\n        if 'viewavatar' in iconurl:\n            retvalue = iconurl + '\u0026format=png'\n            retvalue = retvalue.replace('size=medium', 'size=xsmall')\n        else:\n            retvalue = iconurl\n        return str(base64.b64encode(self.s.get(retvalue).content))[2:-1]\n\ndef print_title(toprint):\n    print(toprint)\n    print('---')\n\ndef print_separator():\n    print('---')\n\n# ====\n# MAIN\n# ====\nif __name__ == '__main__':\n\n    QUERY_NAME = \"Issues\"\n\n    JIRAURL = \"\u003center-jira-url\u003e\"\n    USERNAME = \"\u003cput here usernema\u003e\"\n    PASSWORD = \"\u003cput here password\u003e\"\n    JQL = \"resolution = Unresolved\"\n\n    Cloud = Jira(JIRAURL, USERNAME, PASSWORD)\n    Cloud.Query(JQL)\n\n    tot_count=str(Cloud.issue_count)\n\n    if tot_count == 0:\n        print_title(QUERY_NAME)\n    else:\n        print_title(QUERY_NAME + \": \" + tot_count)\n\n    Cloud.PrintIssues('Triage')\n    Cloud.PrintIssues('Riaperta')\n    Cloud.PrintIssues('Waiting for support')\n    Cloud.PrintIssues('Waiting for customer')\n    Cloud.PrintIssues('In corso')\n    # Add here your preferrend jira workflow steps\n\n    print_separator()\n\n    print(\"▸ Go to Jira...\" + ' | href=' + Cloud.base_url + '/issues/?jql=' + quote(Cloud.active_jql, ''))\n"
				}
			],
			"path": "Dev/Jira/jira-issues.10m.py",
			"filename": "jira-issues.10m.py",
			"dir": "Dev/Jira",
			"docsPlugin": "Dev/Jira/jira-issues.10m.py.html",
			"docsCategory": "Dev/Jira.html",
			"pathSegments": [
				"Dev",
				"Jira"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Jira",
					"text": "Jira",
					"isLast": true
				}
			],
			"title": "Jira issues",
			"version": "v1.0",
			"author": "Stefano Teodorani",
			"authors": [
				{
					"name": "Stefano Teodorani",
					"githubUsername": "teopost",
					"imageURL": "https://avatars.githubusercontent.com/u/2573389?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show your jira issues",
			"imageURL": "https://i.ibb.co/3SZ6D30/Schermata-2019-11-23-alle-19-26-24.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://www.stefanoteodorani.it/",
			"lastUpdated": "2021-03-08T15:21:49.486823Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Kubernetes/kubecontext.1s.py",
					"filename": "kubecontext.1s.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eKubeconfig Context Changer\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eChris Opland\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecopland\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays active kubeconfig context and allows you to easily change contexts.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython,kubectl\u003c/bitbar.dependencies\u003e\n\nfrom collections import namedtuple\nfrom distutils import spawn\nimport os\nimport subprocess\n\nContext = namedtuple('Context', ['name', 'active'])\n\nos.environ['PATH'] = '/usr/local/bin:/usr/bin:%s' % os.getenv('PATH')\nKUBECTL_PATH = spawn.find_executable('kubectl')\n\n\ndef get_active(contexts):\n    return next((x for x in contexts if x.active), 'CONTEXT_NOT_SET')\n\n\ndef load_contexts():\n    cmd = [\n        KUBECTL_PATH,\n        'config',\n        'get-contexts',\n        '--no-headers'\n    ]\n    out = subprocess.check_output(cmd)\n    lines = out.split('\\n')\n    contexts = []\n    for line in lines:\n        columns = line.split()\n        if columns == []:\n            continue\n        elif columns[0] == \"*\":\n            contexts.append(Context(columns[1], True))\n        else:\n            contexts.append(Context(columns[0], False))\n    return contexts\n\n\ndef display(contexts):\n    active = get_active(contexts)\n    print(active.name)\n    print('---')\n    for context in sorted(contexts, key=lambda x: x.name):\n        vardict = {\n            'context': context.name,\n            'kubectl': KUBECTL_PATH\n        }\n        print(\"{context} | bash={kubectl} param1=config param2=use-context param3={context} terminal=false\".format(**vardict))\n\n\nif __name__ == '__main__':\n    CONTEXTS = load_contexts()\n    display(CONTEXTS)\n"
				}
			],
			"path": "Dev/Kubernetes/kubecontext.1s.py",
			"filename": "kubecontext.1s.py",
			"dir": "Dev/Kubernetes",
			"docsPlugin": "Dev/Kubernetes/kubecontext.1s.py.html",
			"docsCategory": "Dev/Kubernetes.html",
			"pathSegments": [
				"Dev",
				"Kubernetes"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Kubernetes",
					"text": "Kubernetes",
					"isLast": true
				}
			],
			"title": "Kubeconfig Context Changer",
			"version": "v1.0",
			"author": "Chris Opland",
			"authors": [
				{
					"name": "Chris Opland",
					"githubUsername": "copland",
					"imageURL": "https://avatars.githubusercontent.com/u/1004715?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays active kubeconfig context and allows you to easily change contexts.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"python",
				"kubectl"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.715174Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Hosting/Linode/Linode.5m.php",
					"filename": "Linode.5m.php",
					"content": "#!/usr/bin/php\n\n\u003c?php\n// \u003cbitbar.title\u003eLinode Status\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eBrendon Cheves\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003emisfitius\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eUses linode-cli to check the status of your Linodes.\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003elinode-cli,php\u003c/bitbar.dependencies\u003e\n\n$status = true;\n$json = shell_exec('/usr/local/bin/linode list -j');\n$servers = json_decode($json);\n$output = '---' . \"\\n\";\nforeach($servers as $server)\n{\n\t$status \u0026= ($server-\u003estatus == 'running');\n\t$output .= $server-\u003elabel . ' : ' . $server-\u003estatus . '|color=' . ($server-\u003estatus == 'running' ? 'green' : 'red') . \"\\n\";\n}\n$output .= 'Go to Linode account|href=https://manager.linode.com';\n\necho 'Linode|color=' . ($status ? 'green' : 'red') . \"\\n\" . $output;\n?\u003e"
				}
			],
			"path": "Dev/Hosting/Linode/Linode.5m.php",
			"filename": "Linode.5m.php",
			"dir": "Dev/Hosting/Linode",
			"docsPlugin": "Dev/Hosting/Linode/Linode.5m.php.html",
			"docsCategory": "Dev/Hosting/Linode.html",
			"pathSegments": [
				"Dev",
				"Hosting",
				"Linode"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Hosting",
					"text": "Hosting",
					"isLast": false
				},
				{
					"path": "Dev/Hosting/Linode",
					"text": "Linode",
					"isLast": true
				}
			],
			"title": "Linode Status",
			"version": "v1.0",
			"author": "Brendon Cheves",
			"authors": [
				{
					"name": "Brendon Cheves",
					"githubUsername": "misfitius",
					"imageURL": "https://avatars.githubusercontent.com/u/181826?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Uses linode-cli to check the status of your Linodes.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"linode-cli",
				"php"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.30158Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Kubernetes/k-get-pods.30s.sh",
					"filename": "k-get-pods.30s.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eList some running Kubernetes things\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRobert Prince\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003erobertp\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSimple plugin that shows running Kubernetes pods, services, deployments, ...\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebrew,kubectl\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/sH9yhBW.png\u003c/bitbar.image\u003e\n\nexport PATH=/usr/local/bin:\"${PATH}\"\n\nnumpods=$(kubectl get pods -A 2\u003e /dev/null | grep -v NAME | wc -l | sed 's/ //g')\nnumsvc=$(kubectl get services -A 2\u003e /dev/null | grep -v NAME | wc -l | sed 's/ //g')\nnumdeps=$(kubectl get deployments -A 2\u003e /dev/null | grep -v NAME | wc -l | sed 's/ //g')\n\n# if [[ \"$numpods\" -eq \"0\" \u0026\u0026 \"$numsvc\" -eq \"0\" \u0026\u0026 \"$numdeps\" -eq \"0\" ]]; then echo \"no k8s\"; exit; fi\n\nif [[ \"$numpods\" -eq \"0\" \u0026\u0026 \"$numsvc\" -eq \"0\" \u0026\u0026 \"$numdeps\" -eq \"0\" ]]; then exit; fi\n\necho \"[$numpods pods / $numsvc services / $numdeps deployments]\"\n\necho \"---\"\necho \"==== PODS ====\"\nkubectl get pods -A | while read -r line; do echo \"${line} | font=Menlo\"; done\necho \"---\"\necho \"==== SERVICES ====\"\nkubectl get services -A | while read -r line; do echo \"${line} | font=Menlo\"; done\necho \"---\"\necho \"==== DEPLOYMENTS ====\"\nkubectl get deployments -A | while read -r line; do echo \"${line} | font=Menlo\"; done\n"
				}
			],
			"path": "Dev/Kubernetes/k-get-pods.30s.sh",
			"filename": "k-get-pods.30s.sh",
			"dir": "Dev/Kubernetes",
			"docsPlugin": "Dev/Kubernetes/k-get-pods.30s.sh.html",
			"docsCategory": "Dev/Kubernetes.html",
			"pathSegments": [
				"Dev",
				"Kubernetes"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Kubernetes",
					"text": "Kubernetes",
					"isLast": true
				}
			],
			"title": "List some running Kubernetes things",
			"version": "v1.0",
			"author": "Robert Prince",
			"authors": [
				{
					"name": "Robert Prince",
					"githubUsername": "robertp",
					"imageURL": "https://avatars.githubusercontent.com/u/57381?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple plugin that shows running Kubernetes pods, services, deployments, ...",
			"imageURL": "https://i.imgur.com/sH9yhBW.png",
			"dependencies": [
				"brew",
				"kubectl"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.690914Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/mac-mux.sh",
					"filename": "mac-mux.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eMac-Mux\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/7vjC2UU.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.author\u003eetopiei\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eetopiei\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin makes it wasy to manage tmux from the menu bar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n\n# shellcheck source=/dev/null\nsource ~/.bash_profile\nif [ \"$1\" = 'opensession' ]; then\n\t\tcommand='tmux attach -t '\"$2\"''\n\t\tosascript -e 'tell application \"Terminal\" to do script \"'\"$command\"'\"'\n\t\tosascript -e 'set window 1 of application \"Terminal\" to frontmost'\nfi\n\nif [ \"$1\" = 'newsession' ]; then\n\t\tosascript -e 'tell application \"Terminal\" to do script \"tmux\"'\n\t\tosascript -e 'tell application \"Terminal\" activate'\nfi\n\noutput=$(tmux list-sessions \u0026\u003e /dev/null \u0026\u0026 tmux list-session | wc -l || echo \"0\")\nnumber=$(echo \"$output\" | xargs)\n\nif [ \"$number\" != '0' ]; then\n\t# here get all the session names in an array\n\tIFS=\" \" read -r -a nameArray \u003c\u003c\u003c \"$(tmux list-sessions | awk 'BEGIN{FS=\":\"}{print $1}')\"\n\techo \"mac-mux ($number)\"\n\techo \"---\"\n\techo \"$number Running tmux sessions | color=white\"\n\techo \"---\"\n\tfor i in \"${nameArray[@]}\"\n\tdo\n\t\t\techo \"Open session: $i | bash='$0' param1=opensession param2=$i terminal=false\"\n\tdone\n\techo \"---\"\n\techo \"Start new tmux session | bash='$0' param1=newsession terminal=false\"\n\texit\nfi\n\necho \"mac-mux\"\necho \"---\"\necho \"Start a tmux session | bash='$0' param1=newsession terminal=false\"\n"
				}
			],
			"path": "Dev/mac-mux.sh",
			"filename": "mac-mux.sh",
			"dir": "Dev",
			"docsPlugin": "Dev/mac-mux.sh.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Mac-Mux",
			"version": "v0.1",
			"author": "etopiei",
			"authors": [
				{
					"name": "etopiei",
					"githubUsername": "etopiei",
					"imageURL": "https://avatars.githubusercontent.com/u/17671663?v=4",
					"bio": "Software Engineer",
					"primary": true
				}
			],
			"desc": "This plugin makes it wasy to manage tmux from the menu bar.",
			"imageURL": "https://i.imgur.com/7vjC2UU.jpg",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:51.737248Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/machinebox.1m.sh",
					"filename": "machinebox.1m.sh",
					"content": "#!/bin/bash\n\n# ----------------------------------------------------------------\n# TODO: insert your MB_KEY here.\n# Get your key from https://machinebox.io/account\n# For more help, see https://machinebox.io/docs/setup/box-key\nMB_KEY=\"\"\n# ----------------------------------------------------------------\n\n# \u003cbitbar.title\u003eMachine Box\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMachina\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emachinabot\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eEasily start and stop Machine Box boxes.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/gkOYSWH.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash,jq,docker\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://machinebox.io/?source=bitbar\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"$PATH:/usr/local/bin\"\ncommand -v jq \u003e/dev/null 2\u003e\u00261 || { echo \u003e\u00262 \"Click to install jq command... | href=https://stedolan.github.io/jq/?source=bitbar\"; exit 0; }\ncommand -v docker \u003e/dev/null 2\u003e\u00261 || { echo \u003e\u00262 \"Click to install Docker... | href=https://machinebox.io/out/docker/install?source=bitbar\"; exit 0; }\n\nif [ \"$#\" -gt 1 ]; then\n    if [ \"$1\" = \"start\" ]; then\n        if [ \"$MB_KEY\" = \"\" ]; then\n            osascript -e 'display notification \"You need to configure your MB_KEY environment variable\" with title \"Machine Box\" subtitle \"Failed to start box\"' \n            exit 0\n        fi\n        osascript -e 'display notification \"Go to http://localhost:8080/\" with title \"Machine Box\" subtitle \"Downloading and starting...\"' \n        docker run -d -p 8080:8080 -e \"MB_KEY=$MB_KEY\" \"machinebox/$2\"\n        open http://localhost:8080\n        exit 0\n    fi\n    if [ \"$1\" = \"stop\" ]; then\n        echo \"stopping $2...\"\n        osascript -e 'display notification \"Stopping...\" with title \"Machine Box\"' \n        docker stop \"$(docker ps -q --filter ancestor=\"machinebox/$2\")\"\n        osascript -e 'display notification \"Box has been stopped\" with title \"Machine Box\" subtitle \"Stopped\"' \n        exit 0\n    fi\nfi\n\necho \" | image=\"\n\nif ! docker ps \u003e/dev/null 2\u003e\u00261; then \n    echo \"---\"\n    echo \"Docker daemon isn't running\"\n    echo \"---\"\n    echo \"Learn more about running Docker... | href=https://machinebox.io/docs/setup/docker?source=bitbar\"\n    exit 0\nfi\n\nif [ \"$MB_KEY\" = \"\" ]; then\n    echo \"---\"\n    echo \"You need to Setup MB_KEY\"\n    echo \"by editing the machinebox.sh plugin file\"\n    echo \"---\"\n    echo \"Get a free MB_KEY... | href=https://machinebox.io/account?source=bitbar\"\n    exit 1\nfi\n\n# list running boxes at the top\nRUNNING_BOXES=$(docker ps --format '{{.Image}}' | grep machinebox)\n\nrunning=\"\"\nif [[ \"$RUNNING_BOXES\" = \"\" ]]; then \n    running=\"\"\nelse\n    running=\"yes\"\nfi\n\necho \"---\"\n\nboxes=$(curl --silent 'https://machinebox.io/api/boxes?source=bitbar' | jq -r '.boxes[].name')\n\nfor box in $boxes; do\n    if [ \"$(docker ps | grep -c \"machinebox/$box\")\" = 1 ]; then\n        echo \"$box\"\n        echo \"--Open console... | href=http://localhost:8080\"\n        echo \"--Stop $box | bash=$0 refresh=true terminal=false param1=stop param2=$box\"\n    else\n        if [[ \"$running\" = \"yes\" ]]; then\n            echo \"Start $box\"\n        else\n            echo \"Start $box | bash=$0 refresh=true terminal=false param1=start param2=$box\"\n        fi\n    fi\ndone\n\necho \"---\"\necho \"Open machinebox.io... | href=https://machinebox.io/account?source=bitbar\"\n"
				}
			],
			"path": "Dev/machinebox.1m.sh",
			"filename": "machinebox.1m.sh",
			"dir": "Dev",
			"docsPlugin": "Dev/machinebox.1m.sh.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Machine Box",
			"version": "v1.0",
			"author": "Machina",
			"authors": [
				{
					"name": "Machina",
					"githubUsername": "machinabot",
					"imageURL": "https://avatars.githubusercontent.com/u/26853250?v=4",
					"bio": "I'm Machina, the Machine Box mascot.",
					"primary": true
				}
			],
			"desc": "Easily start and stop Machine Box boxes.",
			"imageURL": "http://i.imgur.com/gkOYSWH.png",
			"dependencies": [
				"bash",
				"jq",
				"docker"
			],
			"aboutURL": "https://machinebox.io/?source=bitbar",
			"lastUpdated": "2021-03-08T15:21:51.75392Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/meta_package_manager.7h.py",
					"filename": "meta_package_manager.7h.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eMeta Package Manager\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.5.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKevin Deldycke\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekdeldycke\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eList outdated packages and manage upgrades.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython,mpm\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/CiQpQ42.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/kdeldycke/meta-package-manager\u003c/bitbar.abouturl\u003e\n\n\"\"\"\nBitbar plugin for Meta Package Manager (a.k.a. the :command:`mpm` CLI).\n\nDefault update cycle is set to 7 hours so we have a chance to get user's\nattention once a day. Higher frequency might ruin the system as all checks are\nquite resource intensive, and Homebrew might hit GitHub's API calls quota.\n\"\"\"\n\nfrom __future__ import print_function, unicode_literals\n\nimport json\nimport os\nimport sys\nfrom operator import itemgetter\nfrom subprocess import PIPE, Popen\n\nPY2 = sys.version_info[0] == 2\n\n\nFLAT_LAYOUT = True\n\"\"\" Define the rendering mode of outdated packages list.\n\nSet this constant to ``False`` to replace the default flat layout with an\nalternative structure where all upgrade actions are put into submenus, one for\neach manager.\n\"\"\"\n\n\n# Make it easier to change font, sizes and colors of the output\n# See https://github.com/matryer/bitbar#writing-plugins for details\n# An alternate \"good looking\" font is \"font=NotoMono size=13\" (not installed\n# on MacOS by default though) that matches the system font quite well.\nFONTS = {\n    'normal':  '',                              # Use default system font\n    'summary': '',                              # Package summary\n    'package': '',                              # Indiviual packages\n    'error':   'color=red font=Menlo size=12',  # Errors\n}\n# Use a monospaced font when using submenus\nif not FLAT_LAYOUT:\n    FONTS['summary'] = 'font=Menlo size=12'\n\n\ndef fix_environment():\n    \"\"\"Tweak environment variable to find non-default system-wide binaries.\n\n    macOS does not put ``/usr/local/bin`` or ``/opt/local/bin`` in the ``PATH``\n    for GUI apps. For some package managers this is a problem. Additioanlly\n    Homebrew and Macports are using different pathes. So, to make sure we can\n    always get to the necessary binaries, we overload the path. Current\n    preference order would equate to Homebrew, Macports, then system.\n    \"\"\"\n    os.environ['PATH'] = ':'.join([\n        '/usr/local/bin',\n        '/usr/local/sbin',\n        '/opt/local/bin',\n        '/opt/local/sbin',\n        os.environ.get('PATH', '')])\n\n    # Python 3 Surrogate Handling. See:\n    # https://click.pocoo.org/6/python3/#python-3-surrogate-handling\n    os.environ['LC_ALL'] = os.environ['LANG'] = 'en_US.UTF-8'\n\n\ndef run(*args):\n    \"\"\"Run a shell command, return error code, output and error message.\"\"\"\n    assert isinstance(args, tuple)\n    try:\n        process = Popen(args, stdout=PIPE, stderr=PIPE)\n    except OSError:\n        return None, None, \"`{}` executable not found.\".format(args[0])\n    output, error = process.communicate()\n    return (\n        process.returncode,\n        output.decode('utf-8') if output else None,\n        error.decode('utf-8') if error else None)\n\n\ndef echo(message):\n    \"\"\"Print message to the output.\n\n    Not unlike ``click.echo()``, this method is required to support\n    discrepencies in the way strings are handled in different Python versions\n    and platforms.\n    \"\"\"\n    if PY2:\n        message = message.encode('utf-8')\n    print(message)\n\n\ndef print_error_header():\n    \"\"\"Generic header for blockng error.\"\"\"\n    echo(\"❌ | dropdown=false\")\n    echo(\"---\")\n\n\ndef print_error(message, submenu=\"\"):\n    \"\"\"Print a formatted error line by line.\n\n    A red, fixed-width font is used to preserve traceback and exception layout.\n    \"\"\"\n    for line in message.strip().split(\"\\n\"):\n        echo(\n            \"{}{} | {f_error} trim=false emojize=false\"\n            \"\".format(submenu, line, f_error=FONTS['error']))\n\n\ndef print_package_items(packages, submenu=\"\"):\n    \"\"\"Print a menu entry for each outdated packages available for upgrade.\"\"\"\n    for pkg_info in packages:\n        echo(\n            \"{}{name} {installed_version} → {latest_version} | {upgrade_cli}\"\n            \" terminal=false refresh=true {f_package} emojize=false\".format(\n                submenu, f_package=FONTS['package'], **pkg_info))\n\n\ndef print_upgrade_all_item(manager, submenu=\"\"):\n    \"\"\"Print the menu entry to upgrade all outdated package of a manager.\"\"\"\n    if manager.get('upgrade_all_cli'):\n        if not FLAT_LAYOUT:\n            echo(\"-----\")\n        echo(\n            \"{}Upgrade all | {} terminal=false refresh=true {f_normal}\".format(\n                submenu, manager['upgrade_all_cli'], f_normal=FONTS['normal']))\n\n\ndef print_menu():\n    \"\"\"Print menu structure using BitBar's plugin API.\n\n    See: https://github.com/matryer/bitbar#plugin-api\n\n    .. todo\n\n        Add minimal requirement on ``meta-package-manager`` module in the\n        invoked ``pip`` command.\n    \"\"\"\n    # Search for generic mpm CLI on system.\n    code, _, error = run('mpm')\n    # mpm CLI hasn't been found on the system. Propose to the user to install\n    # or upgrade it.\n    if code or error:\n        print_error_header()\n        print_error(error)\n        echo(\"---\")\n        echo(\n            \"Install / upgrade `mpm` CLI. | bash=pip param1=install \"\n            \"param2=--upgrade param3=meta-package-manager terminal=true \"\n            \"refresh=true {f_error}\".format(f_error=FONTS['error']))\n        return\n\n    # Fetch list of all outdated packages from all package manager available on\n    # the system.\n    _, output, error = run(\n        'mpm', '--output-format', 'json', 'outdated', '--cli-format', 'bitbar')\n\n    # Bail-out immediately on errors related to mpm self-execution or if mpm is\n    # not able to produce any output.\n    if error or not output:\n        print_error_header()\n        print_error(error)\n        return\n\n    # Sort outdated packages by manager's name.\n    managers = sorted(json.loads(output).values(), key=itemgetter('name'))\n\n    # Print menu bar icon with number of available upgrades.\n    total_outdated = sum([len(m['packages']) for m in managers])\n    total_errors = sum([len(m.get('errors', [])) for m in managers])\n    echo(\"↑{}{} | dropdown=false\".format(\n        total_outdated,\n        \" ⚠️{}\".format(total_errors) if total_errors else \"\"))\n\n    # Print a full detailed section for each manager.\n    submenu = \"--\" if not FLAT_LAYOUT else \"\"\n\n    if not FLAT_LAYOUT:\n        # Compute maximal manager's name length.\n        label_max_length = max([len(m['name']) for m in managers])\n        max_outdated = max([len(m['packages']) for m in managers])\n\n    if not FLAT_LAYOUT:\n        echo(\"---\")\n\n    for manager in managers:\n        if FLAT_LAYOUT:\n            echo(\"---\")\n\n        package_label = \"package{}\".format(\n            's' if len(manager['packages']) != 1 else '')\n\n        if FLAT_LAYOUT:\n            echo(\"{0} outdated {1} {2} | {f_summary} emojize=false\".format(\n                len(manager['packages']),\n                manager['name'],\n                package_label,\n                f_summary=FONTS['summary']))\n\n        else:\n            # Non-flat layout use a compact table-like rendering of manager\n            # summary.\n            echo(\n                \"{error}{0:\u003c{max_length}} {1:\u003e{max_outdated}} {2:\u003c8} | \"\n                \"{f_summary} emojize=false\".format(\n                    manager['name'] + ':',\n                    len(manager['packages']),\n                    package_label,\n                    error=\"⚠️ \" if manager.get('errors', None) else '',\n                    max_length=label_max_length + 1,\n                    max_outdated=len(str(max_outdated)),\n                    f_summary=FONTS['summary']))\n\n        print_package_items(manager['packages'], submenu)\n\n        print_upgrade_all_item(manager, submenu)\n\n        for error_msg in manager.get('errors', []):\n            echo(\"---\" if FLAT_LAYOUT else \"-----\")\n            print_error(error_msg, submenu)\n\n\nif __name__ == '__main__':\n    fix_environment()\n    print_menu()\n"
				}
			],
			"path": "Dev/meta_package_manager.7h.py",
			"filename": "meta_package_manager.7h.py",
			"dir": "Dev",
			"docsPlugin": "Dev/meta_package_manager.7h.py.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Meta Package Manager",
			"version": "v2.5.0",
			"author": "Kevin Deldycke",
			"authors": [
				{
					"name": "Kevin Deldycke",
					"githubUsername": "kdeldycke",
					"imageURL": "https://avatars.githubusercontent.com/u/159718?v=4",
					"bio": "VP, Engineering Manager, Founding Engineer - Billing, Payments \u0026 IAM.\r\n",
					"primary": true
				}
			],
			"desc": "List outdated packages and manage upgrades.",
			"imageURL": "https://i.imgur.com/CiQpQ42.png",
			"dependencies": [
				"python",
				"mpm"
			],
			"aboutURL": "https://github.com/kdeldycke/meta-package-manager",
			"lastUpdated": "2021-03-08T15:21:51.843708Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Kubernetes/minikube.5s.sh",
					"filename": "minikube.5s.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eMinikube GUI\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eCole Brumley\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecolebrumley\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eA BitBar controller for minikube\u003cbitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/Vulc3pu.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eminikube, kubectl\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/colebrumley/bitbar-minikube\u003c/bitbar.abouturl\u003e\n\nMINIKUBE_LOGO_COLOR=''\nMINIKUBE_LOGO_BW=''\n\nLANG=\"en_US.UTF-8\"\n# You may need to update the PATH to include minikube and kubectl\n#PATH=\"/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\nexport LANG PATH\n\nif [[ $(minikube status | head -n 1) =~ Running ]]; then\n    echo \"|image=$MINIKUBE_LOGO_COLOR\"\nelse\n    echo \"|image=$MINIKUBE_LOGO_BW\"\n    exit 0\nfi\necho ---\n\nwhile read -r STATUS; do\n    if [[ $STATUS =~ Running ]]; then\n        echo \"$STATUS | color=green\"\n    else\n        echo \"$STATUS | color=red\"\n    fi\ndone \u003c \u003c(minikube status)\n\necho ---\necho \"IP: $(minikube ip) | color=black\"\necho \":bar_chart: Dashboard | bash=minikube param1=dashboard\"\necho ---\n\necho Addons\nwhile read -r STATUS; do\n    PRETTY_STATUS=${STATUS//\"- \"}\n    if [[ $STATUS =~ enabled ]]; then\n        echo \"-- $PRETTY_STATUS | color=green bash=minikube param1=addons param2=disable param3=${PRETTY_STATUS//\": enabled\"} refresh=true\"\n    else\n        echo \"-- $PRETTY_STATUS | color=red bash=minikube param1=addons param2=enable param3=${PRETTY_STATUS//\": disabled\"} refresh=true\"\n    fi\ndone \u003c \u003c(minikube addons list | sort)\n\necho Config\nwhile read -r CONF; do\n    echo \"-- ${CONF//\"- \"} | color=black\"\ndone \u003c \u003c(minikube config view | sort)\n"
				}
			],
			"path": "Dev/Kubernetes/minikube.5s.sh",
			"filename": "minikube.5s.sh",
			"dir": "Dev/Kubernetes",
			"docsPlugin": "Dev/Kubernetes/minikube.5s.sh.html",
			"docsCategory": "Dev/Kubernetes.html",
			"pathSegments": [
				"Dev",
				"Kubernetes"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Kubernetes",
					"text": "Kubernetes",
					"isLast": true
				}
			],
			"title": "Minikube GUI",
			"version": "v1.0",
			"author": "Cole Brumley",
			"authors": [
				{
					"name": "Cole Brumley",
					"githubUsername": "colebrumley",
					"imageURL": "https://avatars.githubusercontent.com/u/5015139?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "http://i.imgur.com/Vulc3pu.png",
			"dependencies": [
				"minikube",
				"kubectl"
			],
			"aboutURL": "https://github.com/colebrumley/bitbar-minikube",
			"lastUpdated": "2021-03-08T15:21:49.818514Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Jenkins/jenkins-multiple-projects-status.1m.sh",
					"filename": "jenkins-multiple-projects-status.1m.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eMultiple Jenkins Status\u003c/bitbar.title\u003e\n# \u003cbitbar.desc\u003eCheck status of multiple Jenkins projects\u003c/bitbar.desc\u003e\n# \u003cbitbar.author\u003eNocolas Roger\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003enicolasroger17\u003c/bitbar.author.github\u003e\n# \u003cbitbar.version\u003e1\u003c/bitbar.version\u003e\n\n\nSCHEMA=\"https\"\nBASE_URL=\"jenkins-address.com\"\nUSER=\"username\"\nTOKEN=\"token\" #prefer tokens to passwords (passwords can still be used here), get it from $SCHEMA://$BASE_URL/user/$USER/configure -\u003e Show API Token\nPROJECTS=(\"project1\" \"project2\")\n\nfunction displaytime {\n  local T=$1/1000\n  local D=$((T/60/60/24))\n  local H=$((T/60/60%24))\n  local M=$((T/60%60))\n  local S=$((T%60))\n  local output=\"\"\n\n  if [[ $D -gt 0  || $H -gt 0 || $M -gt 10 ]]\n  then\n    output+=\"\u003e10mn\"\n  else\n    output+=\"${M}mn ${S}s\"\n  fi\n\n  echo \"${output} ago\"\n}\n\n# beginning of display\necho \"Jenkins Status\"\necho \"---\"\n\nfor project in \"${PROJECTS[@]}\"\ndo\n  output=\"${project}: \"\n  url=\"${SCHEMA}://${USER}:${TOKEN}@${BASE_URL}/job/${project// /'%20'}/lastBuild/api/json?pretty=true\"\n  query=$(curl --insecure --silent \"${url}\")\n\n  success=$(echo \"${query}\" | grep '\"result\"' | awk '{print $3}') # grep the \"result\" line\n\n  if [[ $success == *\"SUCCESS\"* ]]\n  then\n    output+='🔵 '\n  else\n    output+='🔴 '\n  fi\n\n  timestamp=$(echo \"${query}\" | grep \"timestamp\" | awk '{print $3}') # grep the \"timestamp\" line\n  timestamp=${timestamp%?} # remove the trailing ','\n  currentTime=$(($(date +'%s * 1000 + %-N / 1000000'))) # generate a timestamp\n  output+=\" $(displaytime $(( currentTime - timestamp )))\"\n  echo \"${output}\"\ndone\n"
				}
			],
			"path": "Dev/Jenkins/jenkins-multiple-projects-status.1m.sh",
			"filename": "jenkins-multiple-projects-status.1m.sh",
			"dir": "Dev/Jenkins",
			"docsPlugin": "Dev/Jenkins/jenkins-multiple-projects-status.1m.sh.html",
			"docsCategory": "Dev/Jenkins.html",
			"pathSegments": [
				"Dev",
				"Jenkins"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Jenkins",
					"text": "Jenkins",
					"isLast": true
				}
			],
			"title": "Multiple Jenkins Status",
			"version": "1",
			"author": "Nocolas Roger",
			"authors": [
				{
					"name": "Nicolas",
					"githubUsername": "nicolasroger17",
					"imageURL": "https://avatars.githubusercontent.com/u/3426302?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Check status of multiple Jenkins projects",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.465561Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Nagios/nagios.30s.sh",
					"filename": "nagios.30s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eNagios Prod\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRob DeSanno\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003erdesanno\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eNagios status summary\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/JWl2pXx.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n\n## set variables\n\nURL=\"{set your nagios url here}\"  \t\t\t# ie nagios.example.com\nNAME=\"{username}\" \t\t\t\t\t# username\nPASSWORD=\"{password}\"\t\t\t\t\t# password\n\nTEMP_FILE=\"/tmp/nagios.out\"\nTAC=\"tac.cgi\"\nSTATUS=\"status.cgi\"\nDOWN=\"?hostgroup=all\u0026style=hostdetail\u0026hoststatustypes=4\u0026hostprops=42\"\nCRITICAL=\"?host=all\u0026style=detail\u0026servicestatustypes=16\"\nWARNING=\"?host=all\u0026style=detail\u0026servicestatustypes=4\"\nUNKNOWN=\"?host=all\u0026style=detail\u0026servicestatustypes=8\"\nOK=\"?host=all\u0026style=detail\u0026servicestatustypes=2\"\n\ncurl -s -u \"$NAME:$PASSWORD\" \"https://$URL/nagios/cgi-bin/$TAC\" \u003e $TEMP_FILE\n\ndown=$(grep \"$DOWN\" $TEMP_FILE | grep Down | cut -d\\\u003e -f3 | cut -d\\\u003c -f1)\ncritial=$(grep \"$CRITICAL\" $TEMP_FILE | grep Critical | cut -d\\\u003e -f3 | cut -d\\\u003c -f1)\nwarning=$(grep \"$WARNING\" $TEMP_FILE | grep Warning | cut -d\\\u003e -f3 | cut -d\\\u003c -f1)\nunknown=$(grep \"$UNKNOWN\" $TEMP_FILE | grep Unknown | cut -d\\\u003e -f3 | cut -d\\\u003c -f1)\nok=$(grep \"$OK\" $TEMP_FILE | grep Ok | cut -d\\\u003e -f3 | cut -d\\\u003c -f1)\n\necho \"$down | color=purple href=https://$URL/nagios/cgi-bin/$STATUS/$DOWN\"\necho \"$critial | color=red href=https://$URL/nagios/cgi-bin/$STATUS/$CRITICAL\"\necho \"$warning | color=brown href=https://$URL/nagios/cgi-bin/$STATUS/$WARNING\"\necho \"$unknown | color=orange href=https://$URL/nagios/cgi-bin/$STATUS/$UNKNOWN\"\necho \"$ok | color=green href=https://$URL/nagios/cgi-bin/$STATUS/$OK\"\n"
				}
			],
			"path": "Dev/Nagios/nagios.30s.sh",
			"filename": "nagios.30s.sh",
			"dir": "Dev/Nagios",
			"docsPlugin": "Dev/Nagios/nagios.30s.sh.html",
			"docsCategory": "Dev/Nagios.html",
			"pathSegments": [
				"Dev",
				"Nagios"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Nagios",
					"text": "Nagios",
					"isLast": true
				}
			],
			"title": "Nagios Prod",
			"version": "v1.0",
			"author": "Rob DeSanno",
			"authors": [
				{
					"name": "Rob DeSanno",
					"githubUsername": "rdesanno",
					"imageURL": "https://avatars.githubusercontent.com/u/3912993?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Nagios status summary",
			"imageURL": "http://i.imgur.com/JWl2pXx.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.817113Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Docker/numContainers.5s.sh",
					"filename": "numContainers.5s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eNumContainers\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ecghamburg\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecghamburg\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePrint number of running Docker containers with whale unicode char\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003edocker\u003c/bitbar.dependencies\u003e\n\nCONTAINERS=$(/usr/local/bin/docker ps --format '{{.Names}}' | sort)\nNUM_CONTAINERS=0\nif [ -n \"$CONTAINERS\" ]\nthen\n\tNUM_CONTAINERS=$(echo \"${CONTAINERS}\" | wc -l | tr -d '[:space:]')\nfi\necho \"$(printf \"🐳 %.0f \\n\" \"${NUM_CONTAINERS}\") | size=13\"\necho \"---\"\necho \"${CONTAINERS}\"\n"
				}
			],
			"path": "Dev/Docker/numContainers.5s.sh",
			"filename": "numContainers.5s.sh",
			"dir": "Dev/Docker",
			"docsPlugin": "Dev/Docker/numContainers.5s.sh.html",
			"docsCategory": "Dev/Docker.html",
			"pathSegments": [
				"Dev",
				"Docker"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Docker",
					"text": "Docker",
					"isLast": true
				}
			],
			"title": "NumContainers",
			"version": "v1.0",
			"author": "cghamburg",
			"authors": [
				{
					"name": "cghamburg",
					"githubUsername": "cghamburg",
					"imageURL": "https://avatars.githubusercontent.com/u/2742203?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Print number of running Docker containers with whale unicode char",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"docker"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.091876Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/PhpStormXdebugStatus.3s.sh",
					"filename": "PhpStormXdebugStatus.3s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003ePHPstorm debugger status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eHarings Rob\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eharingsrob\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows the current status of phpstorm debugger\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/haringsrob/\u003c/bitbar.abouturl\u003e\n\nif lsof -i :9000 | grep -q phpstorm; then\n    echo 'Xdebug on | color=#008000'\nelse\n    echo 'Xdebug off | color=#FF0000'\nfi\n"
				}
			],
			"path": "Dev/PhpStormXdebugStatus.3s.sh",
			"filename": "PhpStormXdebugStatus.3s.sh",
			"dir": "Dev",
			"docsPlugin": "Dev/PhpStormXdebugStatus.3s.sh.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "PHPstorm debugger status",
			"version": "v1.0",
			"author": "Harings Rob",
			"authors": [
				{
					"name": "Harings Rob",
					"githubUsername": "haringsrob",
					"imageURL": "https://avatars.githubusercontent.com/u/866743?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows the current status of phpstorm debugger",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/haringsrob/",
			"lastUpdated": "2021-03-08T15:21:50.088836Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Git/get_pull_requests_bitbar.1h.rb",
					"filename": "get_pull_requests_bitbar.1h.rb",
					"content": "#!/usr/bin/env ruby\n# frozen_string_literal: true\n\n# \u003cbitbar.title\u003ePR Counts for Github and Bitbucket\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMarco Cabazal\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eMarcoCabazal\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGets Pull Request Counts for Github and Bitbucket Repos\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://marcocabazal.github.io/images/gpr_snap.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby \u003e= 2\u003c/bitbar.dependencies\u003e\n\n###### README\n# Please secure the app-specific password/personal access token from either Bitbucket or Github.\n# These tokens are necessary to raise request limits and for the script to have read access to\n# private repositories.\n#\n# For Bitbucket: From your profile page, click on Bitbucket Settings -\u003e App Passwords\n# For Github: Click on your avatar, then go to Settings -\u003e Personal Access Tokens\n#\n#\n# Run frequency of this script is defined by the filename, i.e., for\n# the default get_pull_requests_bitbar.1h.rb, frequency is every hour.\n#\n# You may rename this script with the following options to fine-tune.\n# Options: {n}s for seconds\n#          {n}m for minutes\n#          {n}h for hours\n#          {n}d for days\n#\n#\n###### EXTRA\n# When run from bitbar or if filename contains the word bitbar, output is\n# multiline (click menu item to see details), otherwise, it just outputs\n# the total PR counts (good for use with BetterTouchTool). To use with BetterTouchTool,\n# just create a symlink to this script without the word bitbar and refer to that link instead.\n\n###### BEGIN_CONFIG\nREPOS_YAML = File.expand_path \"~/.repos.yaml\"\n###### Sample YAML config\n# repos:\n#   - name: \"Bitbar Plugins\"\n#     service: \"github\"\n#     repo: \"matryer/bitbar-plugins\"\n#\n#   - name: \"Bitbar Plugins\"\n#     service: \"github\"\n#     repo: \"matryer/bitbar-plugins\"\n#     username: \"your-github-username-not-your-email\"\n#     app_password: \"personal-access-token\"\n#\n# should_monitor_on_weekends: true\n\n###### END_CONFIG\n\nSERVICES = {\n  bitbucket: {\n    api_prefix: \"https://api.bitbucket.org/2.0/repositories\",\n    api_suffix: \"pullrequests\",\n    human_prefix: \"https://bitbucket.org\",\n    human_suffix: \"pull-requests\"\n  },\n  github: {\n    api_prefix: \"https://api.github.com/repos\",\n    api_suffix: \"pulls?state=open\u0026type=pr\u0026per_page=1\",\n    human_prefix: \"https://github.com\",\n    human_suffix: \"pulls\"\n  }\n}.freeze\n\nrequire \"net/http\"\nrequire \"net/https\"\nrequire \"json\"\nrequire \"base64\"\nrequire \"yaml\"\n\nclass GetPullRequests\n  def do_it!\n    return if $PROGRAM_NAME != __FILE__\n    parse_yaml_config\n    if !should_monitor_on_weekends? \u0026\u0026 its_a_weekend?\n      puts \"0 PRs.\"\n      return\n    end\n\n    retrieve_pr_counts\n  end\n\n  private\n\n  def should_monitor_on_weekends?\n    @should_monitor_on_weekends\n  end\n\n  def its_a_weekend?\n    now = Time.now\n    now.saturday? || now.sunday?\n  end\n\n  def called_by_bitbar?\n    $PROGRAM_NAME =~ /bitbar/i\n  end\n\n  def parse_yaml_config\n    if !File.exist? REPOS_YAML\n      puts \"Please configure at least one repo in ~/.repos.yaml. See source for example.\"\n      exit\n    end\n    config = YAML.load_file REPOS_YAML\n    @should_monitor_on_weekends = config[\"should_monitor_on_weekends\"] || false\n\n    @repos = []\n    config[\"repos\"].each do |repo|\n      repo_hash = { name: repo[\"name\"], service: repo[\"service\"], repo: repo[\"repo\"] }\n      repo_hash[:username] = repo[\"username\"] if !repo[\"username\"].nil?\n      repo_hash[:app_password] = repo[\"app_password\"] if !repo[\"app_password\"].nil?\n      @repos \u003c\u003c repo_hash\n    end\n  end\n\n  def call_api(http_method, endpoint, token = nil)\n    uri = URI endpoint\n\n    begin\n      http = Net::HTTP.new(uri.host, uri.port)\n      http.use_ssl = true\n      http.verify_mode = OpenSSL::SSL::VERIFY_PEER\n\n      request = Net::HTTP.const_get(http_method.downcase.capitalize).new(uri)\n      request.add_field \"Authorization\", \"Basic #{token}\" if !token.nil?\n      request.add_field \"Content-Type\", \"application/json\"\n      response = http.request(request)\n\n      yield(response)\n    rescue StandardError =\u003e error\n      puts \"? PRs\"\n      if called_by_bitbar?\n        puts \"---\"\n        puts \"Got Error: #{error.message}\"\n      end\n    end\n  end\n\n  def retrieve_pr_counts\n    total_pr_count = 0\n    repo_counts = [\"---\"]\n\n    @repos.each do |repo|\n      if repo[:app_password]\n        token = Base64.encode64(\"#{repo[:username]}:#{repo[:app_password]}\").chomp if repo[:service] == \"bitbucket\"\n        token = repo[:app_password] if repo[:service] == \"github\"\n      end\n\n      service = SERVICES[repo[:service].to_sym]\n      endpoint = \"#{service[:api_prefix]}/#{repo[:repo]}/#{service[:api_suffix]}\"\n      human_url = \"#{service[:human_prefix]}/#{repo[:repo]}/#{service[:human_suffix]}\"\n\n      call_api 'GET', endpoint, token do |response|\n        pr_count = pr_count_for_bitbucket(response) if repo[:service] == \"bitbucket\"\n        pr_count = pr_count_for_github(response) if repo[:service] == \"github\"\n        total_pr_count += pr_count\n\n        repo_counts \u003c\u003c \"#{repo[:name]}: #{pr_count} | href=#{human_url}\" if called_by_bitbar?\n      end\n    end\n\n    if total_pr_count.positive?\n      puts \"#{total_pr_count} PR#{total_pr_count \u003e 1 ? 's' : ''}\"\n    else\n      puts called_by_bitbar? ? \"0 PRs | color=lightgray size=12\" : \"0 PRs\"\n    end\n    puts repo_counts.join(\"\\n\") if called_by_bitbar?\n  end\n\n  def pr_count_for_github(response)\n    links = {}\n    if response[\"Link\"]\n      header_links = response[\"Link\"].split(',')\n      header_links.each do |link|\n        (page, rel) = link.match(/\u0026page=(.*)\u003e; rel=\"(.*)\"/).captures\n        links[rel] = page\n      end\n      links[\"last\"].to_i\n    else\n      result = JSON.parse(response.body)\n      result.count.to_i\n    end\n  end\n\n  def pr_count_for_bitbucket(response)\n    result = JSON.parse(response.body)\n    result[\"size\"].to_i\n  end\nend\n\nGetPullRequests.new.do_it!\n"
				}
			],
			"path": "Dev/Git/get_pull_requests_bitbar.1h.rb",
			"filename": "get_pull_requests_bitbar.1h.rb",
			"dir": "Dev/Git",
			"docsPlugin": "Dev/Git/get_pull_requests_bitbar.1h.rb.html",
			"docsCategory": "Dev/Git.html",
			"pathSegments": [
				"Dev",
				"Git"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Git",
					"text": "Git",
					"isLast": true
				}
			],
			"title": "PR Counts for Github and Bitbucket",
			"version": "v1.1.1",
			"author": "Marco Cabazal",
			"authors": [
				{
					"name": "Marco Cabazal",
					"githubUsername": "MarcoCabazal",
					"imageURL": "https://avatars.githubusercontent.com/u/918909?v=4",
					"bio": "swift (ios, macos), ruby (rails), js (react, react-native, express)",
					"primary": true
				}
			],
			"desc": "Gets Pull Request Counts for Github and Bitbucket Repos",
			"imageURL": "https://marcocabazal.github.io/images/gpr_snap.png",
			"dependencies": [
				"ruby \u003e= 2"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:48.227994Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/pantheon-list-sites.1h.php",
					"filename": "pantheon-list-sites.1h.php",
					"content": "#!/usr/bin/php\n\u003c?php\n\n// \u003cbitbar.title\u003ePantheon - List Sites\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eDave Wikoff\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003ederimagia\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eList and manage all of your sites you are on in Pantheon.\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003ephp, terminus\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.image\u003ehttps://i.imgur.com/VYBizXY.png\u003c/bitbar.image\u003e\n// \u003cbitbar.abouturl\u003ehttps://github.com/derimagia/pantheon-bitbar\u003c/bitbar.abouturl\u003e\n\ndefine('TERMINUS_PATH', '/usr/local/bin/terminus');\ndefine('CONFIG_PATH', '/tmp/pantheon-list-sites-config.json');\ndefine('DEBUG_MODE', false);\n\n$php = PHP_BINARY;\n$script = escapeshellarg($argv[0]);\n$directory = dirname(__FILE__);\n$html_filename = pathinfo(__FILE__, PATHINFO_FILENAME) . '.dynamic.html';\n$html_filepath = $directory . '/' . $html_filename;\n$config = get_config();\n$env_id = $config-\u003eenv_id ? $config-\u003eenv_id : 'dev';\n\nif (!empty($argv[1]) \u0026\u0026 function_exists($argv[1])) {\n  $args = $argv;\n  // Shift the first 2 arguments\n  array_shift($args);\n  array_shift($args);\n  call_user_func_array($argv[1], $args);\n  exit(0);\n}\n\n$sites = terminus(\"sites list --cached\");\n\nif (!is_array($sites)) {\n  echo 'Could not get site list. Did you auth using Terminus?';\n  exit();\n}\n\n$symbolMap = [\n  'dev' =\u003e '🔵',\n  'test' =\u003e '⚫',\n  'live' =\u003e '🔴',\n];\n\n$symbol = isset($symbolMap[$env_id]) ? $symbolMap[$env_id] : '';\n\n$items = array(\n  ['title'  =\u003e \"Environment: $env_id -- $symbol\", 'bash' =\u003e $php, 'param1' =\u003e $script, 'param2' =\u003e 'pantheon_switch_environment', 'param3' =\u003e $env_id, 'terminal' =\u003e 'false', 'refresh' =\u003e 'true'],\n  '---',\n);\n\nforeach ($sites as $site) {\n  $items[] = ['title' =\u003e $site-\u003ename, 'bash' =\u003e $php, 'param1' =\u003e $script, 'param2' =\u003e 'pantheon_open_site', 'param3' =\u003e $site-\u003ename, 'param4' =\u003e $env_id, 'terminal' =\u003e 'false'];\n  if ($site-\u003eframework === 'drupal') {\n    $items[] = ['title' =\u003e \"$site-\u003ename -- 🔒\", 'alternate' =\u003e 'true', 'bash' =\u003e $php, 'param1' =\u003e $script, 'param2' =\u003e 'drush_user_login', 'param3' =\u003e $site-\u003ename, 'param4' =\u003e $env_id, 'terminal' =\u003e 'true'];\n  }\n  $items[] = ['title' =\u003e '└ Pantheon Dashboard -- ⚡', 'bash' =\u003e $php, 'param1' =\u003e $script, 'param2' =\u003e 'pantheon_open_dashboard', 'param3' =\u003e $site-\u003ename, 'param4' =\u003e $env_id, 'terminal' =\u003e 'true'];\n  $items[] = '---';\n}\n\necho \"⚡\\n\";\necho \"---\\n\";\n\nforeach ($items as $item) {\n  if (is_array($item)) {\n    $parts = [];\n    foreach ($item as $param =\u003e $value) {\n      $parts[] = $param . '=\"' . $value . '\"';\n    }\n    $item = $item['title'] . ' | ' . implode(' ', $parts);\n  }\n\n  echo $item . \"\\n\";\n}\nexit(0);\n\n/**\n * Open the dashboard for a site\n */\nfunction pantheon_open_dashboard($site_id) {\n  return browser_open(terminus(\"site dashboard --print\", $site_id));\n}\n\n/**\n * Login to the site as User 1 for Drupal\n */\nfunction drush_user_login($site_id, $env_id) {\n  $login_url = drush($site_id, $env_id, \"user-login 1\");\n  return browser_open($login_url);\n}\n\n/**\n * Switch the environment\n */\nfunction pantheon_switch_environment($current_env_id) {\n  global $script, $env_id, $config;\n\n  $environments = ['dev', 'test', 'live'];\n\n  foreach ($environments as $env) {\n    if ($env == $current_env_id) {\n      break;\n    }\n  }\n\n  $next_env = current($environments) ? current($environments) : 'dev';\n\n  $config-\u003eenv_id = $next_env;\n  save_config($config);\n}\n\n/**\n * Returns the domain for a pantheon site.\n */\nfunction pantheon_open_site($site_id, $env_id) {\n  $alias = drush_get_alias($site_id, $env_id);\n\n  $url = sprintf('%s://%s', 'https', $alias['uri']);\n\n  return browser_open($url);\n}\n\n/**\n * Gets a Drush Alias for a Site ID / Env ID\n *\n * @return bool|array\n */\nfunction drush_get_alias($site_id, $env_id) {\n  $phpcode = terminus('sites aliases --print', NULL, NULL, FALSE);\n  /* @var $aliases array[] */\n  eval($phpcode);\n\n  if (empty($aliases[$site_id . '.' . $env_id])) {\n    echo 'Invalid Alias';\n    exit(1);\n  }\n\n  return $aliases[$site_id . '.' . $env_id];\n}\n\n/**\n * Get a list of Pantheon Environments\n */\nfunction pantheon_get_envs($site_id) {\n  return terminus('site environments', $site_id);\n}\n\n/**\n * Opens a URL in the browser\n */\nfunction browser_open($url) {\n  passthru(\"open $url\", $return_var);\n  return $return_var;\n}\n\n/**\n * Run a terminus command\n * @return object\n */\nfunction terminus($command, $site_id = null, $env_id = null, $json = TRUE) {\n  $extras = ' --yes';\n  if (!empty($json)) $extras .= ' --format=json';\n  if (!empty($site_id)) $extras .= ' --site=' . $site_id;\n  if (!empty($env_id)) $extras .= ' --env=' . $env_id;\n\n  $command = TERMINUS_PATH . \" {$command}{$extras}\";\n\n  $output = passthrough_return($command);\n  return $json ? json_decode($output) : $output;\n}\n\n/**\n * We need to manually call drush because we need to add custom SSH options that terminus doesn't support.\n *\n * @return bool\n */\nfunction drush($site_id, $env_id, $drush_command) {\n  $alias = drush_get_alias($site_id, $env_id);\n  $remote_host = $alias['remote-host'];\n  $remote_user = $alias['remote-user'];\n  $ssh_options = $alias['ssh-options'] . ' -o \"StrictHostKeyChecking=no\" -o \"UserKnownHostsFile=/dev/null\"';\n\n  $command = escapeshellarg('drush ' . $drush_command);\n  $command = 'ssh -T ' . $remote_user . '@' . $remote_host . ' ' . $ssh_options . ' ' . $command;\n\n  return passthrough_return($command);\n}\n\n/**\n * Pass's the command through and returns it\n */\nfunction passthrough_return($command) {\n  ob_start();\n\n  if (!DEBUG_MODE) {\n    $command = $command . ' 2\u003e/dev/null';\n  }\n\n  passthru($command);\n  $output = ob_get_clean();\n\n  if (DEBUG_MODE) {\n    echo \"----- DEBUG [$command] -----\\n\";\n    echo \"OUTPUT:\\n\";\n    var_dump($output);\n    echo \"\\n\";\n  }\n\n  return $output;\n}\n\n/**\n * Gets the config for this plugin\n */\nfunction get_config() {\n  if (file_exists(CONFIG_PATH)) {\n    $config = json_decode(file_get_contents(CONFIG_PATH));\n  }\n  return !empty($config) ? $config : new stdClass();\n}\n\n/**\n * Saves the config for this plugin\n */\nfunction save_config($config) {\n  return file_put_contents(CONFIG_PATH, json_encode($config));\n}\n"
				}
			],
			"path": "Dev/pantheon-list-sites.1h.php",
			"filename": "pantheon-list-sites.1h.php",
			"dir": "Dev",
			"docsPlugin": "Dev/pantheon-list-sites.1h.php.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Pantheon - List Sites",
			"version": "v1.0",
			"author": "Dave Wikoff",
			"authors": [
				{
					"name": "Dave Wikoff",
					"githubUsername": "derimagia",
					"imageURL": "https://avatars.githubusercontent.com/u/999489?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "List and manage all of your sites you are on in Pantheon.",
			"imageURL": "https://i.imgur.com/VYBizXY.png",
			"dependencies": [
				"php",
				"terminus"
			],
			"aboutURL": "https://github.com/derimagia/pantheon-bitbar",
			"lastUpdated": "2021-03-08T15:21:51.89923Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/rabbitmq-status.1m.php",
					"filename": "rabbitmq-status.1m.php",
					"content": "#!/usr/bin/env  php\n\u003c?php\n# \u003cbitbar.title\u003eRabbitMQ Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eYann Milin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eymilin\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eKeep an eye on your RabbitMQ server status from your menu bar !\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/Gz8FCJL.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ephp \u003e= 5.4.0\u003c/bitbar.dependencies\u003e\n# \n# RabbitMQ management plugin must be activated on server https://www.rabbitmq.com/management.html\n# RabbitMQ Management HTTP API documentation https://raw.githack.com/rabbitmq/rabbitmq-management/rabbitmq_v3_6_0/priv/www/api/index.html\n\n// Config\n$baseUrl = \"http://example.com\";\n$port = \"15672\";\n$user = \"guest\";\n$password = \"guest\";\n$queuedMessageCountErrorLimit = 1000; // alert if queued messages higher than this, 0 = not active\n// Config end\n\n$statusBlackCircle = \"⚫️\";\n$statusRedCircle = \"🔴\";\n$statusWarning = \"⚠️\";\n$colorBlack = \"#333333\";\n$colorRed = \"#FF0000\";\n\n$headers = [\n    \"Authorization: Basic \" . base64_encode(\"$user:$password\"),\n    \"content-type: application/json\",\n    \"Accept: application/json\",\n    \"Cache-Control: no-cache\",\n    \"Pragma: no-cache\",\n];\n$ch = curl_init();\n$errors = [];\n\n$uriOverview = \"/api/overview\";\n$uriNodes = \"/api/nodes\";\n$uriQueues = \"/api/queues\";\n\ncurl_setopt($ch, CURLOPT_PORT, $port);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($ch, CURLOPT_TIMEOUT, 60);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n/**\n * Executes a GET request and returns response body in array format\n *\n * @param $ch\n * @param $url\n * @return mixed\n */\n$curl_exec = function (\u0026$ch, $url) {\n    curl_setopt($ch, CURLOPT_URL, $url);\n    return json_decode(curl_exec($ch), true);\n};\n\n/**\n * Handles error message from the api, stopping the script on errors\n *\n * @param $ch\n * @param $response\n */\n$curlHandleResponseError = function (\u0026$ch, $response) {\n    global $statusWarning, $colorRed;\n    if (!$response) {\n        $error = curl_error($ch);\n        echo \"$statusWarning Error |color=$colorRed\\n\";\n        echo \"---\\n\";\n        echo \"$error | color=$colorRed\\n\";\n        exit;\n    }\n    if (array_key_exists('error', $response)) {\n        echo \"$statusWarning Error |color=$colorRed\\n\";\n        echo \"---\\n\";\n        echo \"error: {$response['error']}, reason: {$response['reason']} | color=$colorRed\\n\";\n        exit;\n    }\n};\n\n// api calls\n$responseOverview = $curl_exec($ch, $baseUrl . $uriOverview);\n$curlHandleResponseError($ch, $responseOverview);\n$responseNodes = $curl_exec($ch, $baseUrl . $uriNodes);\n$curlHandleResponseError($ch, $responseNodes);\n$responseQueues = $curl_exec($ch, $baseUrl . $uriQueues);\n$curlHandleResponseError($ch, $responseQueues);\n\n// Extract values from responses\n$messagesReady = $responseOverview['queue_totals']['messages_ready'];\n$messagesUnacked = $responseOverview['queue_totals']['messages_unacknowledged'];\n$messagesTotal = $responseOverview['queue_totals']['messages'];\n$connections = $responseOverview['object_totals']['connections'];\n$channels = $responseOverview['object_totals']['channels'];\n$exchanges = $responseOverview['object_totals']['exchanges'];\n$queuesCount = $responseOverview['object_totals']['queues'];\n$consumers = $responseOverview['object_totals']['consumers'];\n$rabbitMqVersion = $responseOverview['rabbitmq_version'];\n$erlangVersion = $responseOverview['erlang_version'];\n\n$statusIcon = $statusBlackCircle;\n$nodes = [];\nforeach ($responseNodes as $responseNode) {\n    $nodes[] = [\n        'name' =\u003e $responseNode['name'],\n        'running' =\u003e $responseNode['running'],\n    ];\n\n    if (!$responseNode['running']) {\n        $statusIcon = $statusRedCircle;\n        $errors[] = \"RabbitMQ is reporting that node {$responseNode['name']} is not running correctly, known VPN issue on server.\";\n    }\n}\n\n$queues = [];\nforeach ($responseQueues as $responseQueue) {\n    $queues[] = [\n        'name' =\u003e $responseQueue['name'],\n        'state' =\u003e $responseQueue['state'],\n    ];\n\n    if ($responseQueue['state'] !== \"running\") {\n        $statusIcon = $statusRedCircle;\n        $errors[] = \"RabbitMQ is reporting that queue {$responseQueue['name']} is not running correctly.\";\n    }\n}\n\n\nif ($queuedMessageCountErrorLimit \u0026\u0026 intval($messagesReady) \u003e $queuedMessageCountErrorLimit) {\n    $statusIcon = $statusRedCircle;\n    $errors[] = \"Number of message in queue higher than $queuedMessageCountErrorLimit, please check consumers status.\";\n}\n\n// Top menu : status icon + count message ready\necho $statusIcon . \" \" . $messagesReady . \"|color=$colorBlack\\n\";\necho \"---\\n\";\n// Error messages\nforeach ($errors as $error) {\n    echo \"$error | color=$colorRed\\n\";\n}\nif ($errors) {\n    echo \"---\\n\";\n}\n// Message count detail\necho \"Queued messages\\n\";\necho \"Ready: $messagesReady | color=$colorBlack\\n\";\necho \"Unacked: $messagesUnacked | color=$colorBlack\\n\";\necho \"Total: $messagesTotal | color=$colorBlack\\n\";\necho \"---\\n\";\n// Global count for Connections, Channels, Exchanges, Queues, Consumers:\necho \"Global counts\\n\";\necho \"Connections: $connections | color=$colorBlack\\n\";\necho \"Channels: $channels | color=$colorBlack\\n\";\necho \"Exchanges: $exchanges | color=$colorBlack\\n\";\necho \"Queues: $queuesCount | color=$colorBlack\\n\";\necho \"Consumers: $consumers | color=$colorBlack\\n\";\necho \"---\\n\";\n// Nodes status\necho \"Nodes\\n\";\nforeach ($nodes as $node) {\n    $nodeStatus = $node['running'] ? \"ok\" : \"error\";\n    $nodeStatusColor = $node['running'] ? $colorBlack : $colorRed;\n    echo \"{$node['name']} status $nodeStatus | color=$nodeStatusColor\\n\";\n}\necho \"---\\n\";\necho \"Queues\\n\";\nforeach ($queues as $queue) {\n    $queueStatusColor = $queue['state'] === \"running\" ? $colorBlack : $colorRed;\n    echo \"{$queue['name']} status {$queue['state']} | color=$queueStatusColor\\n\";\n}\necho \"---\\n\";\n// manual refresh + RabbitMQ version TAG + management interface link\necho \"RabbitMQ v$rabbitMqVersion, Erlang $erlangVersion\\n\";\necho \"$baseUrl:$port | href=$baseUrl:$port \\n\";\necho \"Refresh | refresh=true \\n\";\n\ncurl_close($ch);\n"
				}
			],
			"path": "Dev/rabbitmq-status.1m.php",
			"filename": "rabbitmq-status.1m.php",
			"dir": "Dev",
			"docsPlugin": "Dev/rabbitmq-status.1m.php.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "RabbitMQ Status",
			"version": "1.0",
			"author": "Yann Milin",
			"authors": [
				{
					"name": "Yann Milin",
					"githubUsername": "ymilin",
					"imageURL": "https://avatars.githubusercontent.com/u/3737075?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Keep an eye on your RabbitMQ server status from your menu bar !",
			"imageURL": "http://i.imgur.com/Gz8FCJL.png",
			"dependencies": [
				"php \u003e= 5.4.0"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:52.039991Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/redmine-show-my-task.1m.rb",
					"filename": "redmine-show-my-task.1m.rb",
					"content": "#!/usr/bin/env ruby\n# coding: utf-8\n\n# \u003cbitbar.title\u003eRedmine Show My Task\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ehikouki\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ehikouki\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow Redmine open ticket for mine\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/hikouki/bitbar-redmine/master/preview.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/hikouki\u003c/bitbar.abouturl\u003e\n\nrequire 'net/http'\nrequire 'uri'\nrequire 'json'\n\n# a6140cbf6e84a0bAffb0cX49138fc5687310b518\n#   or\n# launchctl setenv REDMINE_ACCESS_TOKEN a6140cbf6e84a0bAffb0cX49138fc5687310b518\ntoken = ENV[\"REDMINE_ACCESS_TOKEN\"] || ''\n# https://redmine.xxxx.com\n#   or\n# launchctl setenv REDMINE_URL https://redmine.xxxx.com\nredmine_url = ENV[\"REDMINE_URL\"] || ''\n\nuri = URI.parse(\"#{redmine_url}/issues.json?key=#{token}\u0026limit=100\u0026status_id=open\u0026assigned_to_id=me\")\n\nbegin\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = true if(uri.scheme == 'https')\n  res = http.start {\n    http.get(uri.request_uri)\n  }\n\n  raise \"error #{res.code} #{res.message}\" if res.code != '200'\n\n  result = JSON.parse(res.body, symbolize_names: true)\n  issues = result[:issues]\n\n  projects = Hash.new do | h, k |\n    h[k] = {\n      issues_count: 0,\n      trackers: Hash.new do | h1, k1 |\n        h1[k1] = {\n          name: \"tracker name.\",\n          issues: Hash.new {| h2, k2 | h2[k2] = []}\n        }\n      end\n    }\n  end\n\n  dark_mode = `defaults read -g AppleInterfaceStyle 2\u003e/dev/null`\n  if dark_mode.include? \"Dark\" then\n    main_color = \"#FFFFFF\"\n    project_color = \"#FEFEFE\"\n    issue_color = \"#CCCCCC\"\n    tracker_color = \"#33BFDB\"\n    status_color = \"#58BE89\"\n  else\n    main_color = \"black\"\n    project_color = \"black\"\n    issue_color = \"black\"\n    tracker_color = \"#33BFDB\"\n    status_color = \"#58BE89\"\n  end\n\n  last_issue_id = 0\n\n  issues.each do | v |\n    last_issue_id = v[:id] if last_issue_id == 0 \n    project_id   = v[:project][:id]\n    project_name = v[:project][:name]\n    status_id    = v[:status][:id]\n    tracker_id   = v[:tracker][:id]\n    tracker_name = v[:tracker][:name]\n    projects[project_id][:issues_count] += 1\n    projects[project_id][:id] = project_id\n    projects[project_id][:name] = project_name\n    projects[project_id][:trackers][tracker_id][:name] = tracker_name\n    projects[project_id][:trackers][tracker_id][:issues][status_id].push(v)\n  end\n\n  issue_total_count = result[:total_count] \u003e 99 ? '99+' : result[:total_count]\n  issue_last = last_issue_id != 0 ? \" - ##{last_issue_id}\" : \"\"\n  puts issues.empty? ? \"✦ | color=#7d7d7d\" : \"✦ #{issue_total_count}#{issue_last}\"\n  puts \"---\"\n  puts \"Redmine | color=#{main_color} href=#{redmine_url}\"\n  puts \"---\"\n\n  projects.each do | _, project |\n    puts \"#{project[:name]}: #{project[:issues_count]} | color=#{project_color} size=11\"\n    project[:trackers].each do | _, tracker |\n      puts \"➠ #{tracker[:name]} | color=#{tracker_color} size=11\"\n      tracker[:issues].each do | _, status |\n        puts \"[#{status.first[:status][:name]}] | color=#{status_color} size=11\"\n        status.each do | issue |\n          prefix = status.last == issue ? \"└\" : \"├\"\n          puts \"#{prefix} ##{issue[:id]} #{issue[:subject]} | color=#{issue_color} href=#{redmine_url}/issues/#{issue[:id]} size=11\"\n        end\n      end\n    end\n    puts \"---\"\n  end\nrescue\n  puts \"✦ ! | color=#ECB935\"\n  puts \"---\"\n  puts \"Exception: #{$!}\"\nend\n"
				}
			],
			"path": "Dev/redmine-show-my-task.1m.rb",
			"filename": "redmine-show-my-task.1m.rb",
			"dir": "Dev",
			"docsPlugin": "Dev/redmine-show-my-task.1m.rb.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Redmine Show My Task",
			"version": "v1.0.1",
			"author": "hikouki",
			"authors": [
				{
					"name": "Kouki Higashikawa",
					"githubUsername": "hikouki",
					"imageURL": "https://avatars.githubusercontent.com/u/15326035?v=4",
					"bio": ":airplane:",
					"primary": true
				}
			],
			"desc": "Show Redmine open ticket for mine",
			"imageURL": "https://raw.githubusercontent.com/hikouki/bitbar-redmine/master/preview.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/hikouki",
			"lastUpdated": "2021-03-08T15:21:52.146697Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Tutorial/refresh.sh",
					"filename": "refresh.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eRefresh Me\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKarl Piper\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eKarlPiper\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eHow to refresh just one plugin, or restart BitBar entirely.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/KarlPiper/Plugins-for-Bitbar/master/images/refresh.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n\nif [[ \"$1\" = \"restart\" ]]; then\nosascript \u003c\u003cEOD\n\ttell application \"BitBar\" to quit\n\tdelay 1\n\ttell application \"BitBar\" to activate\nEOD\nfi\n\necho \"↻\"\necho \"---\"\necho \"Refresh Me| terminal=false refresh=true\"\necho \"Restart Bitbar| bash='$0' param1=restart terminal=false\";"
				}
			],
			"path": "Dev/Tutorial/refresh.sh",
			"filename": "refresh.sh",
			"dir": "Dev/Tutorial",
			"docsPlugin": "Dev/Tutorial/refresh.sh.html",
			"docsCategory": "Dev/Tutorial.html",
			"pathSegments": [
				"Dev",
				"Tutorial"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Tutorial",
					"text": "Tutorial",
					"isLast": true
				}
			],
			"title": "Refresh Me",
			"version": "v1.0",
			"author": "Karl Piper",
			"authors": [
				{
					"name": "☟",
					"githubUsername": "KarlPiper",
					"imageURL": "https://avatars.githubusercontent.com/u/9043540?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "How to refresh just one plugin, or restart BitBar entirely.",
			"imageURL": "https://raw.githubusercontent.com/KarlPiper/Plugins-for-Bitbar/master/images/refresh.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.523585Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/rescuetime.1h.py",
					"filename": "rescuetime.1h.py",
					"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 python3\n# \u003cbitbar.title\u003eRescueTime\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ePaul Traylor\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekfdm\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow your RescueTime productivity pulse in the status bar\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n# To install, you will want to generate an API key for rescue time and then store the\n# key in ~/Library/RescueTime.com/api.key\n# https://www.rescuetime.com/anapi/manage\nimport datetime\nimport json\nimport os\nimport urllib\nfrom urllib.request import urlopen\n\nAPI_KEY = os.path.expanduser('~/Library/RescueTime.com/api.key')\n\nMAPPING = {\n    2: 'Very Productive',\n    1: 'Productive',\n    0: 'Neutral',\n    -1: 'Distracting',\n    -2: 'Very Distracting'\n}\n\n\ndef get(url, params):\n    '''Simple function to mimic the signature of requests.get'''\n    params = urllib.parse.urlencode(params)\n    result = urlopen(url + '?' + params).read()\n    return json.loads(result)\n\nif not os.path.exists(API_KEY):\n    print('X')\n    print('---')\n    print('Missing API Key')\n    exit()\n\nwith open(API_KEY) as fp:\n    key = fp.read().strip()\n    date = datetime.date.today().strftime('%Y-%m-%d')\n    result = get('https://www.rescuetime.com/anapi/data', params={\n        'format': 'json',\n        'key': key,\n        'resolution_time': 'day',\n        'restrict_begin': date,\n        'restrict_end': date,\n        'restrict_kind': 'productivity',\n    })\n    pulse = get('https://www.rescuetime.com/anapi/current_productivity_pulse.json', params={\n        'key': key,\n    })\n\nprint('%s | color=%s' % (pulse['pulse'], pulse['color']))\nprint('---')\nprint('Rescue Time | href=https://www.rescuetime.com/dashboard?src=bitbar')\nfor rank, seconds, people, productivty in result['rows']:\n    print('%s %s' % (MAPPING[productivty], round(seconds / 60, 2)))\n"
				}
			],
			"path": "Dev/rescuetime.1h.py",
			"filename": "rescuetime.1h.py",
			"dir": "Dev",
			"docsPlugin": "Dev/rescuetime.1h.py.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "RescueTime",
			"version": "v1.0",
			"author": "Paul Traylor",
			"authors": [
				{
					"name": "Paul Traylor",
					"githubUsername": "kfdm",
					"imageURL": "https://avatars.githubusercontent.com/u/89725?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show your RescueTime productivity pulse in the status bar",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:52.144825Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Shell/run-fastlane.rb",
					"filename": "run-fastlane.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eRun fastlane\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRishabh Tayal\u003c/bitbar.author\u003e\n# \u003cbitbar.desc\u003eRun fastlane from menu bar\u003c/bitbar.desc\u003e\n# \u003cbitbar.author.github\u003erishabhtayal\u003c/bitbar.author.github\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n\n# ------------- Modify the config below -------------\nconfigs = [\n  {\n    'lane_name' =\u003e 'YOUR_LANE_NAME',\n    'path' =\u003e 'YOUR_PROJECT_PATH',\n    'use_bundle' =\u003e true\n  },\n  {\n    'lane_name' =\u003e 'YOUR_LANE_NAME',\n    'path' =\u003e 'YOUR_ANOTHER_PROJECT_PATH',\n    'use_bundle' =\u003e true\n  }\n  # YOU CAN ADD MORE CONFIG MAPS HERE\n]\n\n# ------------ Ignore below this line ---------------\n\nrequire 'pathname'\n\nputs 'run-fastlane'\n\nputs '---'\n\nconfigs.each do |item|\n  command = \"cd #{item['path']} \u0026\u0026 \"\n  command \u003c\u003c if item['use_bundle']\n               'bundle exec fastlane'\n             else\n               'fastlane'\n             end\n  command \u003c\u003c ' ' + item['lane_name']\n\n  project_name = Pathname.new(item['path']).split.last.to_s\n  puts \"#{project_name}: #{item['lane_name']} | bash=\\\"#{command}\\\"\"\nend\n"
				}
			],
			"path": "Dev/Shell/run-fastlane.rb",
			"filename": "run-fastlane.rb",
			"dir": "Dev/Shell",
			"docsPlugin": "Dev/Shell/run-fastlane.rb.html",
			"docsCategory": "Dev/Shell.html",
			"pathSegments": [
				"Dev",
				"Shell"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Shell",
					"text": "Shell",
					"isLast": true
				}
			],
			"title": "Run fastlane",
			"version": "v1.0",
			"author": "Rishabh Tayal",
			"authors": [
				{
					"name": "Rishabh Tayal",
					"githubUsername": "rishabhtayal",
					"imageURL": "https://avatars.githubusercontent.com/u/2100166?v=4",
					"bio": "iOS Developer at Sears\r\n\r\nhttps://resume.github.io/?rishabhtayal",
					"primary": true
				}
			],
			"desc": "Run fastlane from menu bar",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.116649Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/SshMenu.sh",
					"filename": "SshMenu.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eSSH Menu\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eChristopher Haen\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eChrisischris\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eProvides a simple menu of ssh hosts when clicked on opens a new ssh session in terminal\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003e\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\necho \"ssh | color='white'\"\necho \"---\"\n#Enter list of servers below give it a name and an address\necho \"ServerName(Edit script file) | bash='ssh user@server'\"\n#^Copy to add more servers\n#After adding or changing refresh plugins\n"
				}
			],
			"path": "Dev/SshMenu.sh",
			"filename": "SshMenu.sh",
			"dir": "Dev",
			"docsPlugin": "Dev/SshMenu.sh.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "SSH Menu",
			"version": "v1.0",
			"author": "Christopher Haen",
			"authors": [
				{
					"name": "Christopher Haen",
					"githubUsername": "Chrisischris",
					"imageURL": "https://avatars.githubusercontent.com/u/11304350?v=4",
					"bio": "Computer Science Student at Rochester Institute of Technology",
					"primary": true
				}
			],
			"desc": "Provides a simple menu of ssh hosts when clicked on opens a new ssh session in terminal",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.194275Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/project-list.5m.js",
					"filename": "project-list.5m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eSemaphore CI\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eGoran Gajic\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003egorangajic\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eList your project and their statuses, from semaphoreci.com\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.image\u003ehttp://i.imgur.com/tRd1clI.png\u003c/bitbar.image\u003e\n\nvar https = require('https');\nvar AUTH_TOKEN = ''; // YOUR AUTH TOKEN\nvar url = 'https://semaphoreci.com/api/v1/projects?auth_token='+AUTH_TOKEN;\nvar icon = '✅';\n\nfunction status(result) {\n    if (result === 'passed') {\n        return '✅';\n    }\n\n    if (result === 'pending') {\n        return '🌀';\n    }\n    return '🔴';\n}\n\nfunction color(result) {\n    if (result === 'passed') {\n        return 'green';\n    }\n    if (result === 'pending') {\n        return 'orange';\n    }\n\n    return 'red';\n}\n\nfunction branchesOutput(branches) {\n    return branches.map(function (branch){\n        if (branch.result === 'failed') {\n            icon = '🔴';\n        }\n        return ['- ', branch.branch_name,' ',status(branch.result), ' | color=', color(branch.result), ' href=', branch.build_url].join('');\n    }).join('\\n');\n}\n\nfunction handleResponse(body) {\n    var output = body.map(function(project){\n        return [project.owner, '/', project.name, ' | href=', project.html_url,'\\n', branchesOutput(project.branches)].join('');\n    }).join('\\n---\\n');\n    console.log(icon + '\\n---\\n ⚙ Semaphoreci | href=https://semaphoreci.com/ \\n---\\n' + output);\n}\n\nhttps.get(url, function(res) {\n    var body = '';\n    res.on('data', function(data) {\n        body += data;\n    });\n    res.on('end', function() {\n        handleResponse(JSON.parse(body));\n    });\n});\n\n"
				}
			],
			"path": "Dev/project-list.5m.js",
			"filename": "project-list.5m.js",
			"dir": "Dev",
			"docsPlugin": "Dev/project-list.5m.js.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Semaphore CI",
			"version": "v1.0",
			"author": "Goran Gajic",
			"authors": [
				{
					"name": "Goran Gajic",
					"githubUsername": "gorangajic",
					"imageURL": "https://avatars.githubusercontent.com/u/249310?v=4",
					"bio": "Full Stack Developer \r\n- \r\nNode.js, React, React-Native",
					"primary": true
				}
			],
			"desc": "List your project and their statuses, from semaphoreci.com",
			"imageURL": "http://i.imgur.com/tRd1clI.png",
			"dependencies": [
				"node.js"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:52.03557Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/sentry.5m.js",
					"filename": "sentry.5m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eSentry\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eTommy Brunn\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003enevon\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eShows your most recent error reports from Sentry (https://getsentry.com)\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.image\u003ehttp://i.imgur.com/GdEXQfY.png\u003c/bitbar.image\u003e\n\n// jshint asi:true\nvar https = require('https')\n\n/* EDIT HERE */\nvar AUTH_TOKEN = ''\nvar ORGANIZATION = ''\nvar PROJECT = ''\nvar ISSUE_COUNT = 5\n/* DON'T EDIT BELOW */\n\nvar API_URL = 'https://' + AUTH_TOKEN + ':@app.getsentry.com/api/0/'\nvar PROJECT_URL = 'https://app.getsentry.com/' + ORGANIZATION + '/' + PROJECT\nvar TITLE = [ORGANIZATION + '/' + PROJECT, '@', 'Sentry'].join(' ')\n\nfunction statusColor (issue) {\n  var status = issue.status\n  var isAssigned = issue.assignedTo !== null\n  if (status === 'resolved' || status === 'muted') {\n    return 'green'\n  }\n  if (status === 'unresolved' \u0026\u0026 isAssigned) {\n    return 'orange'\n  }\n\n  return 'red'\n}\n\nfunction timeSince (date) {\n  if (typeof date !== 'object') {\n    date = new Date(date)\n  }\n\n  var seconds = Math.floor((new Date() - date) / 1000)\n  var intervalType\n\n  var interval = Math.floor(seconds / 31536000)\n  if (interval \u003e= 1) {\n    intervalType = 'year'\n  } else {\n    interval = Math.floor(seconds / 2592000)\n    if (interval \u003e= 1) {\n      intervalType = 'month'\n    } else {\n      interval = Math.floor(seconds / 86400)\n      if (interval \u003e= 1) {\n        intervalType = 'day'\n      } else {\n        interval = Math.floor(seconds / 3600)\n        if (interval \u003e= 1) {\n          intervalType = 'hour'\n        } else {\n          interval = Math.floor(seconds / 60)\n          if (interval \u003e= 1) {\n            intervalType = 'minute'\n          } else {\n            interval = seconds\n            intervalType = 'second'\n          }\n        }\n      }\n    }\n  }\n\n  if (interval \u003e 1 || interval === 0) {\n    intervalType += 's'\n  }\n\n  return interval + ' ' + intervalType\n}\n\nfunction trimString (str, n) {\n  n = n || 72\n  return (str.length \u003e n) ? str.substr(0, n - 1) + '…' : str\n}\n\nfunction formatTitle (issue) {\n  return [trimString(issue.title), ' | href=', issue.permalink, ' size=11', ' color=' + statusColor(issue)].join('')\n}\n\nfunction formatCulprit (issue) {\n  return [trimString(issue.culprit), '| size=10'].join('')\n}\n\nfunction formatCount (count) {\n  var str = (count === 1) ? 'occurrence' : 'occurrences'\n  return [count, str, '| size=10'].join(' ')\n}\n\nfunction formatTimes (issue) {\n  var lastSeen = timeSince(new Date(issue.lastSeen)) + ' ago'\n  var firstSeen = timeSince(new Date(issue.firstSeen)) + ' old'\n  return [lastSeen, '-', firstSeen, '| size=10'].join(' ')\n}\n\nfunction formatIssue (issue) {\n  return [\n    formatTitle(issue),\n    formatCulprit(issue),\n    formatTimes(issue),\n    formatCount(issue.count)\n  ].join('\\n')\n}\n\nfunction handleResponse (body) {\n  var output = body.map(formatIssue).join('\\n---\\n')\n  console.log('Sentry' + '\\n---\\n' + TITLE + ' | href=' + PROJECT_URL + '\\n---\\n' + output)\n}\n\nhttps.get(API_URL + 'projects/' + ORGANIZATION + '/' + PROJECT + '/issues/?query=is%3Aunresolved\u0026limit=' + ISSUE_COUNT + '\u0026sort=date\u0026statsPeriod=24h', function (res) {\n  var body = ''\n  res.on('data', function (data) {\n    body += data\n  })\n  res.on('end', function () {\n    handleResponse(JSON.parse(body))\n  })\n})\n"
				}
			],
			"path": "Dev/sentry.5m.js",
			"filename": "sentry.5m.js",
			"dir": "Dev",
			"docsPlugin": "Dev/sentry.5m.js.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Sentry",
			"version": "v1.0",
			"author": "Tommy Brunn",
			"authors": [
				{
					"name": "Tommy Brunn",
					"githubUsername": "nevon",
					"imageURL": "https://avatars.githubusercontent.com/u/83586?v=4",
					"bio": "Open source maintainer and lead engineer for developer services at Klarna",
					"primary": true
				}
			],
			"desc": "Shows your most recent error reports from Sentry (https://getsentry.com)",
			"imageURL": "http://i.imgur.com/GdEXQfY.png",
			"dependencies": [
				"node.js"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:52.146295Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Tutorial/ansi.sh",
					"filename": "ansi.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eShow ANSI colors\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKent Karlsson\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003evogonistic\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eExample of how to use ANSI color codes\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/kGVgf6y.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/Tutorial/ansi.sh\u003c/bitbar.abouturl\u003e\n\necho -e \"\\033[34mA\\033[32mN\\033[31mS\\033[33mI\\033[0m | ansi=true\"\necho \"---\"\n\nT='gYw'   # The test text\necho -e \"                 40m     41m     42m     43m\\\n     44m     45m     46m     47m | ansi=true font=courier trim=false\";\n\nfor FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \\\n           '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \\\n           '  36m' '1;36m' '  37m' '1;37m';\n  do FG=${FGs// /}\n  echo -en \" $FGs \\033[$FG  $T  \"\n  for BG in 40m 41m 42m 43m 44m 45m 46m 47m;\n    do echo -en \"$EINS \\033[$FG\\033[$BG  $T  \\033[0m\";\n  done\n  echo \" | ansi=true font=courier trim=false\";\ndone\necho \"---\"\necho \"Open color codes in browser… | href=http://misc.flogisoft.com/bash/tip_colors_and_formatting#colors\"\necho \"Refresh | refresh=true\"\n"
				}
			],
			"path": "Dev/Tutorial/ansi.sh",
			"filename": "ansi.sh",
			"dir": "Dev/Tutorial",
			"docsPlugin": "Dev/Tutorial/ansi.sh.html",
			"docsCategory": "Dev/Tutorial.html",
			"pathSegments": [
				"Dev",
				"Tutorial"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Tutorial",
					"text": "Tutorial",
					"isLast": true
				}
			],
			"title": "Show ANSI colors",
			"version": "v1.0",
			"author": "Kent Karlsson",
			"authors": [
				{
					"name": "Kent Karlsson",
					"githubUsername": "vogonistic",
					"imageURL": "https://avatars.githubusercontent.com/u/159568?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Example of how to use ANSI color codes",
			"imageURL": "http://i.imgur.com/kGVgf6y.png",
			"dependencies": null,
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/Tutorial/ansi.sh",
			"lastUpdated": "2021-03-08T15:21:50.23964Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Tutorial/emoji.sh",
					"filename": "emoji.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eShow emoji\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKent Karlsson\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003evogonistic\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eExample of how to use emojis\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/z4T9X6G.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/Tutorial/emoji.sh\u003c/bitbar.abouturl\u003e\n\necho \":sparkles: :coffee: :mushroom:\"\necho \"---\"\n\necho \"Random emojis:exclamation:\"\necho \":smile: :smile_cat: :smiley: :smiley_cat: :smiling_imp:\"\necho \":tent: :thought_balloon: :thumbsdown: :thumbsup: :ticket:\"\necho \":pig: :dolphin: :elephant: :honeybee: :horse:\"\necho \"No :coffee: | emojize=false\"\n\necho \"---\"\necho \"Open emoji cheat sheet in browser… | href=http://www.emoji-cheat-sheet.com/\"\necho \"Refresh | refresh=true\"\n"
				}
			],
			"path": "Dev/Tutorial/emoji.sh",
			"filename": "emoji.sh",
			"dir": "Dev/Tutorial",
			"docsPlugin": "Dev/Tutorial/emoji.sh.html",
			"docsCategory": "Dev/Tutorial.html",
			"pathSegments": [
				"Dev",
				"Tutorial"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Tutorial",
					"text": "Tutorial",
					"isLast": true
				}
			],
			"title": "Show emoji",
			"version": "v1.0",
			"author": "Kent Karlsson",
			"authors": [
				{
					"name": "Kent Karlsson",
					"githubUsername": "vogonistic",
					"imageURL": "https://avatars.githubusercontent.com/u/159568?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Example of how to use emojis",
			"imageURL": "http://i.imgur.com/z4T9X6G.png",
			"dependencies": null,
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/Tutorial/emoji.sh",
			"lastUpdated": "2021-03-08T15:21:50.46543Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Tutorial/images.sh",
					"filename": "images.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eShow templateImages and images\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eStefan Rakel\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eibutra\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eExample of how to use the templateImage and image parameter\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/Rva36NL.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/Tutorial/images.sh\u003c/bitbar.abouturl\u003e\n#\n# Images defined in the templateImage parameter are used as NSImage with template set to true, allowing Mac OS X to apply appropriate styling for the Menubar to them. This is the recommended way of defining an image for BitBar.\n# Images defined in the image parameter are used as normal Images and can contain colors because no automatic styling is applied by Mac OS X. Note though this can lead to artifacts and other discolorization if the image is used in the statusbar of Mac OS X. Colored Images are not a problem if used in the dropdown menu.\n# Both parameters accept imagefileformat natively supported by Mac OS X encoded as Base64 string.\n# The recommended size for images in the statusbar and dropdown is 16x16 pixels.\n\n# Showing only a gear in the statusbar. Text is not required but can by set\necho \"| templateImage=iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGAAAA6hpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgICAgICAgICAgeG1sbnM6ZXhpZj0iaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC8iPgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAxNi0wMi0yOVQxOTowMjo5MDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+UGl4ZWxtYXRvciAzLjQuMTwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpDb21wcmVzc2lvbj41PC90aWZmOkNvbXByZXNzaW9uPgogICAgICAgICA8dGlmZjpSZXNvbHV0aW9uVW5pdD4yPC90aWZmOlJlc29sdXRpb25Vbml0PgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+NzI8L3RpZmY6WFJlc29sdXRpb24+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lvbj4xNjwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOkNvbG9yU3BhY2U+MTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MTY8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KwQ4XHwAAARpJREFUOBGdk01qAkEQhUcJhFzAJIugAYWAF3ClMQbMtaLuXWnIFVwJ7tTEOZYYTfK9oWsox1988KxXr6t6up2aKDqMZ5aW8Ae+wL3IZ9ySyxvoa3gF686vBt9ZUZQjG8I/OIb3cBpyeXN4Bz+C9028gSmKKBUaf50+5OkkWxiRWfGpONjqDMkD0T95Qx4HStumqtF1UtRQ73AGrUgNb9Ag7Tf5Iu/AlgpW0BotxlrIYEFu6xaXeo060qVIxqBJt47jn5C9Qpt1fwW91h6Un+IWde6f+Jh2OWFDYvc7FieuL5EVfn2DP4n5Wa/sN9HM69WoWENSgLqnNcdojfdn8PrEHWiTJ+d20baBtKFk4lR8pWAN9UknA7Ov4R8hZntCEmAk1wAAAABJRU5ErkJggg==\"\necho \"---\"\n\n# While 16x16 pixel is recommended bigger images can be used in the dropdown\necho \"Some option | image=iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGAAAA6hpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgICAgICAgICAgeG1sbnM6ZXhpZj0iaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC8iPgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAxNi0wMi0yOVQxOTowMjo5NTwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+UGl4ZWxtYXRvciAzLjQuMTwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpDb21wcmVzc2lvbj41PC90aWZmOkNvbXByZXNzaW9uPgogICAgICAgICA8dGlmZjpSZXNvbHV0aW9uVW5pdD4yPC90aWZmOlJlc29sdXRpb25Vbml0PgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+NzI8L3RpZmY6WFJlc29sdXRpb24+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lvbj4zMjwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOkNvbG9yU3BhY2U+MTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzI8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KpnVfGQAAAqZJREFUWAntV0trE1EUPneaGmcSFR9bVxqfoCA+UFD8CYK4cSPBunAhKFi1SVtG2qSouBBBsEoRN4ILXbgQsSuFLKQgIqi4UhChiAsfvS3G5vidO50hJkPGjDFxkQs3c889j++755w7Q4g6PJTg2wO8W1l0E8tNbeLzmon6ZguqZAkgwF082gUukBtxcsEkQwDPfSK0eRhMn0CizeACZzB9Ah3A9yB9AlMdYPBGMA0BXaA96MrDkN/J5j8e04h/XL+lrYJjCDiD5krc0V9pg2I6g/0vomzx0KRoRPfSWsxxO0MnJb5XAqZrTp4fpNO0dKaoLvVUaA0xXYW+3AISFcSYoF7K6FE1bJdpGeakUnRBYpsXEcAFSLpyGsBZXVQPRZkc5AzIXITVAZFjjEd4x/TPjKiX4mvn+SAAx7FcgTmvCypRS0DsSE6vF6EUrpoTcfEA77UUXQaRHSL/wXiBUvYjm4+N7WlOOUm6gvXRKl9DwL8FVftYKjrhlGkqleMtopgbU091kXYtNOr7342rJKYPAM6ixtt8cGR3eypJz2FVDR44hRPw1JtZ0TM7x6eQEmRKMd7d0qjrIZyFSdCoIPYNcl7P0joA30LmKuSylcrzOeyXoM94Iet/w0tQbzeJJjqiXfXRVy1xedX8DxpGtnoswH0fU598HWq9GuvbCL7f3wt5NuiBEGtsfcZJjiEL98PV3i7ADwH4OqTljeyga9AD4Z4rEfgeanqD0FR1Ji6noZuAzV3oosAD90Y9EBjVLPqkqZwhDm4ETr0TTSuNlq2xjRRjfQVNU1Wo5OTYRQ9ApPOYsWLFclo4VgLgo5FHjDCIU4KIkM2puwS6Gehm4L/JwM/mbm9LrA2mn4EnLQnZXBCDaQgwvufwfdWc/19Zy59Twez8+AXiUsCy5F/nsAAAAABJRU5ErkJggg==\"\n\n# The templateImage parameter can also be used in the dropdown to allow Mac OS X to style the image\necho \"Another option | templateImage=iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGAAAA6hpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgICAgICAgICAgeG1sbnM6ZXhpZj0iaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC8iPgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAxNi0wMi0yOVQxOTowMjowNjwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+UGl4ZWxtYXRvciAzLjQuMTwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpDb21wcmVzc2lvbj41PC90aWZmOkNvbXByZXNzaW9uPgogICAgICAgICA8dGlmZjpSZXNvbHV0aW9uVW5pdD4yPC90aWZmOlJlc29sdXRpb25Vbml0PgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+NzI8L3RpZmY6WFJlc29sdXRpb24+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lvbj4zMjwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOkNvbG9yU3BhY2U+MTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzI8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KFjb9CQAAAPRJREFUWAljYBjpgBE5ADir/0sD+XuAgqpAmpHhPxCDACOY/vufgSH2eyvjcrAYlQgmZHOAtnkDsQZQjBmImcAWQywHKWMGyk3nqfwvCuJQC6A44P9/Bm4CBvP/Y2JoJaCGJGkUBxCpM5m76r8zkWoJKoPEMVAZMP6DgZxpQKYYQV0QBf+IVIeu7DUwLWUD09JakAQ8BICWNwP5xFoO0wvSTyoWh9oFMgPhACBbEyxCHwJuFzwE6GMvpi2jDhgNgdEQGA2B0RAYDYHREBgNgdEQQA6B65gNJpqJwO2COwDYVK4HWveaZlYiDAY1y0F2jQJwCAAAjiMg07cwzdIAAAAASUVORK5CYII=\""
				}
			],
			"path": "Dev/Tutorial/images.sh",
			"filename": "images.sh",
			"dir": "Dev/Tutorial",
			"docsPlugin": "Dev/Tutorial/images.sh.html",
			"docsCategory": "Dev/Tutorial.html",
			"pathSegments": [
				"Dev",
				"Tutorial"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Tutorial",
					"text": "Tutorial",
					"isLast": true
				}
			],
			"title": "Show templateImages and images",
			"version": "v1.0",
			"author": "Stefan Rakel",
			"authors": [
				{
					"name": "Stefan Rakel",
					"githubUsername": "ibutra",
					"imageURL": "https://avatars.githubusercontent.com/u/2822422?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Example of how to use the templateImage and image parameter",
			"imageURL": "http://i.imgur.com/Rva36NL.png",
			"dependencies": null,
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/Tutorial/images.sh",
			"lastUpdated": "2021-03-08T15:21:50.468847Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Tutorial/submenus.sh",
					"filename": "submenus.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eSubmenus\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eiosdeveloper\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eiosdeveloper\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eExample of how to include multiple levels of menu items in v1.8 and later.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/9zJJHns.png\u003c/bitbar.image\u003e\n\necho \"Submenu Tutorial\"\necho \"---\"\n\necho \"Places\"\necho \"--London\"\necho \"--Paris\"\necho \"--Tokyo\"\necho \"Fruit\"\necho \"--Apple\"\necho \"--Orange\"\necho \"--Melon\"\necho \"----Watermelon\"\necho \"----Honeydew\"\n"
				}
			],
			"path": "Dev/Tutorial/submenus.sh",
			"filename": "submenus.sh",
			"dir": "Dev/Tutorial",
			"docsPlugin": "Dev/Tutorial/submenus.sh.html",
			"docsCategory": "Dev/Tutorial.html",
			"pathSegments": [
				"Dev",
				"Tutorial"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Tutorial",
					"text": "Tutorial",
					"isLast": true
				}
			],
			"title": "Submenus",
			"version": "v1.0",
			"author": "iosdeveloper",
			"authors": [
				{
					"name": "iosdeveloper",
					"githubUsername": "iosdeveloper",
					"imageURL": "https://avatars.githubusercontent.com/u/655921?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Example of how to include multiple levels of menu items in v1.8 and later.",
			"imageURL": "http://i.imgur.com/9zJJHns.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.584028Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Nagios/thruk.py",
					"filename": "thruk.py",
					"content": "#! /usr/bin/env PYTHONIOENCODING=utf8 PYTHONUNBUFFERED=1 /usr/local/bin/python3\n\n# \u003cbitbar.title\u003eThruk\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eBrian Hartvigsen\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etresni\u003c/bitbar.author.github\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.image\u003ehttps://monosnap.com/file/nFJPVlGURwBi7b8bU3ZFG8SVma7gEc.png\u003c/bitbar.image\u003e\n\nfrom urllib.parse import quote_plus\nimport sys\n\nimport requests\n\nNAGIOS_HOST = ''\nNAGIOS_USERNAME = ''\nNAGIOS_PASSWORD = ''\nONLY_NEW = False\n\n# Leave them all blank to get everything (can be seriously slow...)\nchecks = {\n    'hosts': [],\n    'hostgroups': [],\n    'servicegroups': [],\n    'services': []\n}\n\n# STOP EDITING HERE!\n\nSTATE_OK = 0\nSTATE_WARNING = 1\nSTATE_CRITICAL = 2\nSTATE_UNKNOWN = 3\nSTATE_PENDING = -1\n\nparams = {\n    'view_mode': 'json',\n    'style': 'detail',\n}\n\n\ndef errOut(msg):\n    print(\"💥 Thruk Error\")\n    print(msg, file=sys.stderr)  # noqa\n    sys.exit(1)\n\n\ndef getData(key, value):\n    p = {key: value}\n    p.update(params)\n    r = requests.get(\"%s/thruk/cgi-bin/status.cgi\" % NAGIOS_HOST, params=p, auth=(NAGIOS_USERNAME, NAGIOS_PASSWORD))\n    return r.json()\n\nif not NAGIOS_HOST or not NAGIOS_USERNAME or not NAGIOS_PASSWORD:\n    errOut('You must edit %s and enter your Nagios credentials' % sys.argv[0])\n\nif not checks['hosts'] and not checks['hostgroups'] and not checks['services'] and not checks['servicegroups']:\n    checks['hosts'].append(\"all\")\n\nhosts = {}\nservices = []\nfor group, values in checks.items():\n    for v in values:\n        try:\n            jsondata = getData(group[:-1], v)\n        except requests.exceptions.ConnectionError:\n            errOut(\"Unable to connect to %s\" % NAGIOS_HOST)\n        for service in jsondata:\n            dns_name = service['host_name'].split('.')\n            dns_name.reverse()\n            dns_name = '.'.join(dns_name)\n            if dns_name not in hosts:\n                hosts[dns_name] = {\n                    'services': {},\n                    'notifications': service['host_notifications_enabled'],\n                    'offline': service['host_state'] == 1,\n                    'disabled': service['host_checks_enabled'] == 0,\n                    'name': service['host_name']\n                }\n            hosts[dns_name]['services'][service['display_name']] = service\n\nfor info in hosts.values():\n    if not ONLY_NEW:\n        info[STATE_OK] = len(list(filter(lambda x: info['services'][x]['state'] == 0, info['services'])))\n        info[STATE_WARNING] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_WARNING,\n                                              info['services'])))\n        info[STATE_CRITICAL] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_CRITICAL,\n                                               info['services'])))\n        info[STATE_UNKNOWN] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_UNKNOWN,\n                                              info['services'])))\n    else:\n        info[STATE_OK] = 0\n        info[STATE_WARNING] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_WARNING and\n                                              info['services'][x]['checks_enabled'] and\n                                              info['services'][x]['notifications_enabled'] and\n                                              not info['services'][x]['acknowledged'] and\n                                              not info['disabled'] and\n                                              not info['notifications'],\n                                              info['services'])))\n        info[STATE_CRITICAL] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_CRITICAL and\n                                               info['services'][x]['checks_enabled'] and\n                                               info['services'][x]['notifications_enabled'] and\n                                               not info['services'][x]['acknowledged'] and\n                                               not info['disabled'] and\n                                               not info['notifications'],\n                                               info['services'])))\n        info[STATE_UNKNOWN] = len(list(filter(lambda x: info['services'][x]['state'] == STATE_UNKNOWN and\n                                              info['services'][x]['checks_enabled'] and\n                                              info['services'][x]['notifications_enabled'] and\n                                              not info['services'][x]['acknowledged'] and\n                                              not info['disabled'] and\n                                              not info['notifications'],\n                                              info['services'])))\n\n\nprint('%s%s%s%s%d%s %s%d%s %s%d%s ' % (\n    '\\033[1;32m' if not ONLY_NEW else '',\n    sum([hosts[x][STATE_OK] for x in hosts]) if not ONLY_NEW else '',\n    '\\033[0m ' if not ONLY_NEW else '',\n\n    '\\033[1;33m',\n    sum([hosts[x][STATE_WARNING] for x in hosts]),\n    '\\033[0m',\n\n    '\\033[1;31m',\n    sum([hosts[x][STATE_CRITICAL] for x in hosts]),\n    '\\033[0m',\n\n    '\\033[1;30m',\n    sum([hosts[x][STATE_UNKNOWN] for x in hosts]),\n    '\\033[0m',\n))\n\nprint('---')\n\nfor k in sorted(hosts.keys()):\n    info = hosts[k]\n    host = info['name']\n    print('%s%s%s %s%d %s%d %s%d %s%d%s %s%s| ansi=true' % (\n        '\\033[1;31m' if info['offline'] else '',\n        host,\n        '\\033[0m' if info['offline'] else '',\n        '\\033[1;32m',\n        info[STATE_OK],\n        '\\033[1;33m',\n        info[STATE_WARNING],\n        '\\033[1;31m',\n        info[STATE_CRITICAL],\n        '\\033[1;30m',\n        info[STATE_UNKNOWN],\n        '\\033[0m',\n        ':no_bell:' if not info['notifications'] else '',\n        '❌' if info['disabled'] else ''\n    ))\n    print('-- View host in Nagios |  href=\"%s/thruk/#cgi-bin/status.cgi?host=%s\"' % (NAGIOS_HOST, host))\n    for s in info['services'].values():\n        status = '✅'\n        if s['state'] == STATE_WARNING:\n            status = '⚠️'\n        elif s['state'] == STATE_CRITICAL:\n            status = '❗️'\n        elif s['state'] == STATE_OK and not s['has_been_checked']:\n            status = '❔'\n\n        if not s['notifications_enabled']:\n            status += ' :no_bell:'\n\n        if s['acknowledged']:\n            status += ' :+1:'\n\n        print('-- %s %s | href=\"%s/thruk/#cgi-bin/extinfo.cgi?host=%s\u0026service=%s\u0026type=2\"' % (\n            status,\n            s['display_name'],\n            NAGIOS_HOST,\n            host,\n            quote_plus(s['display_name'])\n        ))\n\n\nprint(\"refresh | refresh=true\")\n"
				}
			],
			"path": "Dev/Nagios/thruk.py",
			"filename": "thruk.py",
			"dir": "Dev/Nagios",
			"docsPlugin": "Dev/Nagios/thruk.py.html",
			"docsCategory": "Dev/Nagios.html",
			"pathSegments": [
				"Dev",
				"Nagios"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Nagios",
					"text": "Nagios",
					"isLast": true
				}
			],
			"title": "Thruk",
			"version": "1.0",
			"author": "Brian Hartvigsen",
			"authors": [
				{
					"name": "Brian Hartvigsen",
					"githubUsername": "tresni",
					"imageURL": "https://avatars.githubusercontent.com/u/210250?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://monosnap.com/file/nFJPVlGURwBi7b8bU3ZFG8SVma7gEc.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.858713Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/travis-check.2m.py",
					"filename": "travis-check.2m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eTravisCI Check\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.3\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eChris Tomkins-Tinch\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etomkinsc\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays the build status of repositories listed on TravisCI.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/53064/12126193/a775fada-b3bd-11e5-9ae2-091c9c38b1da.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\n# Chris Tomkins-Tinch\n# github.com/tomkinsc\n\n# Keith Cirkel\n# github.com/keithamus\n\n# version history\n# 1.0\n#   initial commit\n# 1.1\n#   refactor by @keithamus to remove travispy dependency\n# 1.2\n#   additions by @seripap, adding an 'in progress' view, fixed missing status levels, added global TLD config\n# 1.3\n#   additions by @seripap, Fixed canceled builds\n\n# Dependencies:\n#   travis API key\n\nimport json\nimport urllib2\n\n# You need to set your TRAVIS_KEY to an API key for travis.\n# -- Please note that this IS NOT the 'Token' listed on the Travis CI website\n# -- Again, this is NOT the token on https://travis-ci.org/profile/your-name\n# The easiest way to get this key is to use the official travis client\n# (`gem install travis`), and run `travis_token`.\nTRAVIS_KEY = 'YOUR TRAVIS TOKEN (Run `travis token` to retreive it)'\n\n# If you don't want to check all repos, then specify the ones you do wish to\n# check here, and this plugin will only get the details of these repos.\n# If you do not specify the `repos_to_check` option - it will fetch all repos\n# available in your account.\n# If you do not include the 'branches' key, then only the master branch\n# will be checked.\n# repos_to_check = [\n#     {'name':'account/repo-name', 'branches':['master', 'some-feature']},\n# ]\n\n# If you set INCLUDE_PULL_REQUESTS to `True`, then this script will get the\n# status of both pull requests and commits. By default, it only gets the status\n# of commits (pushes).\nINCLUDE_PULL_REQUESTS = False\n\n# SUPER SECRET FEATURE!\n# Instead of listing the repos you want to check in an array above, you can\n# use a hidden feature of Travis v3 - stars. Repositories can be starred,\n# and if SECRET_FILTER_BY_STAR is set to `True` then this script will only\n# show the starred repositories.\n# How do you star a repository? As of writing Travis has no UI for it (check\n# their roadmap (http://next.travis-ci.com/) to see when it might be\n# implemented). The only way to star a repository right now, is to curl the\n# v3 api, like so:\n# curl -X POST https://api.travis-ci.org/repo/ACCOUNT%2FREPO/star -H \"Accept: application/vnd.travis-ci.3+json\" -H \"Authorization: token YOUR_TOKEN\"\n# (Pay particular attention to the headers, and replace\n# ACCOUNT, REPO and YOUR_TOKEN as necessary)\nSECRET_FILTER_BY_STAR = False\n\n# For enterprise travis, change the .org/ to .com/\nTRAVIS_TLD = '.org/'\n\nTRAVIS_URL = 'https://api.travis-ci' + TRAVIS_TLD\n\n# ======================================\n\nSYMBOLS = {\n    'passed': u'✔︎',\n    'created': u'⛬',\n    'starting': u'⛬',\n    'started': u'⛬',\n    'failed': u'✘',\n    'queued': u'⚠',\n    'errored': u'⚠',\n    'canceled': u' ⃠',\n}\nCOLORS = {\n    'passed': 'green',\n    'created': 'yellow',\n    'starting': 'yellow',\n    'started': 'yellow',\n    'failed': 'red',\n    'queued': 'yellow',\n    'errored': 'yellow',\n    'canceled': 'gray',\n}\nNO_SYMBOL = u'❂'\n\n\ndef request(uri):\n    request = urllib2.Request(TRAVIS_URL + uri, headers={\n        'Authorization': 'token ' + TRAVIS_KEY,\n        'Accept': 'application/vnd.travis-ci.3+json'\n    })\n    try:\n        response = urllib2.urlopen(request)\n        return json.load(response)\n\n    except:\n        print(\"travis-check error\")\n        print(\"---\")\n        print(\"Maybe you need to edit the plugin and set your access token?\")\n        print(\" (could also be an API/HTTP error)\")\n        exit(1)\n\ndef get_all_repos_for_account():\n    url = 'repos?repository.active=true\u0026sort_by=name\u0026limit=200'\n    if SECRET_FILTER_BY_STAR:\n        url += '\u0026starred=true'\n    repos = request(url)\n    all_repos = []\n    for repo in repos['repositories']:\n        if repo and 'slug' in repo:\n            all_repos.append({'name': repo['slug']})\n\n    return all_repos\n\n\ndef update_statuses(repos):\n    output = []\n    fail_count = 0\n    currently_building = 0\n    canceled = 0\n\n    output.append(u'{} | color=green'.format(SYMBOLS['passed']))\n    output.append('---')\n\n    for repo in repos:\n        if 'branches' in repo and len(repo['branches']):\n            branch_list = repo['branches']\n        else:\n            branch_list = ['master']\n\n        for branch_name in branch_list:\n            url = 'repo/' + urllib2.quote(repo['name'], safe='') + '/builds?limit=1\u0026branch.name=' + branch_name\n            if not INCLUDE_PULL_REQUESTS:\n                url += '\u0026event_type=push'\n            build = request(url)\n            if 'builds' in build and len(build['builds']):\n                build = build['builds'][0]\n                color = 'color={}'.format(COLORS[build['state']]) if COLORS.get(build['state']) else ''\n                symbol = SYMBOLS[build['state']] or NO_SYMBOL\n                href = 'href=https://travis-ci' + TRAVIS_TLD + '{}/builds/{}'.format(repo['name'], build['id'])\n                output_msg = u'{symbol} {repo_name} ({branch_name}) {status}'.format(symbol=symbol, repo_name=repo['name'], branch_name=branch_name, status=build['state'])\n                output.append(u'{} | {} {}'.format(output_msg, href, color))\n\n                if build['state'] == \"started\" or build['state'] == \"starting\" or build['state'] == \"queued\" or build['state'] == \"created\":\n                    currently_building += 1\n                elif build['state'] == \"failed\":\n                    fail_count += 1\n                elif build['state'] == \"canceled\":\n                    canceled += 1\n\n    if fail_count \u003e 0:\n        output[0] = u'{}{} | color=red'.format(SYMBOLS['failed'], fail_count)\n\n    if currently_building \u003e 0:\n        output[0] = u'{}{} | color=yellow'.format(SYMBOLS['started'], currently_building)        \n\n    if canceled \u003e 0:\n        output[0] = u'{}{} | color=gray'.format(SYMBOLS['canceled'], canceled)\n\n    for line in output:\n        print line.encode('utf-8')\n\n\nif __name__ == '__main__':\n    try:\n        repos_to_check\n    except NameError:\n        repos_to_check = get_all_repos_for_account()\n\n    update_statuses(repos_to_check)\n"
				}
			],
			"path": "Dev/travis-check.2m.py",
			"filename": "travis-check.2m.py",
			"dir": "Dev",
			"docsPlugin": "Dev/travis-check.2m.py.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "TravisCI Check",
			"version": "v1.3",
			"author": "Chris Tomkins-Tinch",
			"authors": [
				{
					"name": "Chris Tomkins-Tinch",
					"githubUsername": "tomkinsc",
					"imageURL": "https://avatars.githubusercontent.com/u/53064?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin displays the build status of repositories listed on TravisCI.",
			"imageURL": "https://cloud.githubusercontent.com/assets/53064/12126193/a775fada-b3bd-11e5-9ae2-091c9c38b1da.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:52.468726Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/GitHub/swift-trending.15m.swift",
					"filename": "swift-trending.15m.swift",
					"content": "#!/usr/bin/swift\n\n// # \u003cbitbar.title\u003eTrending Swift on GitHub\u003c/bitbar.title\u003e\n// # \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// # \u003cbitbar.author\u003eReda Lemeden\u003c/bitbar.author\u003e\n// # \u003cbitbar.author.github\u003ekaishin\u003c/bitbar.author.github\u003e\n// # \u003cbitbar.desc\u003eList Swift repositories tending on GitHub in a given period.\u003c/bitbar.desc\u003e\n// # \u003cbitbar.image\u003ehttps://github.com/kaishin/swift-trending-bitbar/raw/master/screenshot.png\u003c/bitbar.image\u003e\n// # \u003cbitbar.dependencies\u003eswift\u003c/bitbar.dependencies\u003e\n// # \u003cbitbar.abouturl\u003ehttps://github.com/kaishin/swift-trending-bitbar\u003c/bitbar.abouturl\u003e\n\nimport Foundation\n\n// PREFERENCES (Feel free to change these to your liking)\n\nvar displayCount = 15 // Min: 10, Max: 25\nvar maxSubtitleLineLength = 70\nvar trendingPeriod = \"daily\" // Possible values: \"daily\", \"weekly\", \"monthly\"\n\n// Try not to edit the code below.\n\nlet icon = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAuBJREFUWAm1l1uITlEUx8c9GmmIKR4UXsjtgZGaeHBLlEYpD0p5EZLMA0nJg0TzRKI8KJ6IlHiYKKE0D5PEvEgyLil3ocn98vvrW1/Lts85+3zzWfWbvfbaa62zzv725UxDQ32liXRLy6QcWMY5wfcdPvNhZ4Lvf3MZSeZX0JHyhEEFTpMY11uVka84N8KuSnulTPCAwHka/ZWBLaU7HicV8gu2pQSYTyuKptDLbjpt3pCon8FPBfyA5IU5GOfj0AwmQ1C6YbUZEttV+KkA8RzGQZJMxasHpjjv2eh9sMbZitQRONjPoCLOFwX48S10XsAcZ9yD/h3WOluRegcHmwW1C4sC/PhFOh9hWcWon6cLVMT6iq2oOYeDL0A/ZbKMwfMpfAN74ET0t/ATNEtFchIHX4D0lqIgP76Ajt5YgftB23QFqADZ9kKeHGMwLOBoXkBsTL+9JbmAPgr2Odsp9KEQkyMYLdba19jC8yYWW7XpvugES3AffRZcdrYb6LFtdtb5WLza6VBKRuPdC5ZEW7IdHjub1ss88HKTjsX4dpN3StVn4qhd4ROF2+wL4z75m8DfYrU2ahLdC7YoLVmsPY3fXIiNyXYVapYNRGYl9vbPOX73an56JXBHTnJfRJb+rL8FKP5gP4rQ4q2KTrxapYPArLfMs9/yD9TlshlKHQ4uwQH0vIfFxk64+D/qJf52Q2s4kNgvuya2h3nHYngEqlbfcIshdUZ0S26ETxB725hNV30T/CUz6H0AC3iIrulVMToJvUygo2taC/EJWEyZ9jBx/8hyLLp+Y4m0r99DykEUiw9tmrHm8LP8AcYeaANNrRf1h4Eup3qI8r3MSqRjtBfCquvd78wqQPZGOAT6rK7Hg/UdoBnWhWX5MmcAn6q0oF0HCyrbXiPWb2990NgpqmKSZRGemjL/BnnF3MVX/xtkyToG+lL3uk+in2YJ6K0mg47y4aBVrfv/NuhrqQuKZOtv52B4+dBxxIcAAAAASUVORK5CYII=\"\nlet templateImage = \"|templateImage=\\(icon)\"\n\n// Mark: - Regex\n\ninfix operator =~\n\nfunc =~ (value: String, pattern: String) -\u003e RegexResult {\n  var error: NSError?\n  let string = value as NSString\n  let options = NSRegularExpression.Options(rawValue: 0)\n  let regex: NSRegularExpression?\n\n  do {\n    regex = try NSRegularExpression(pattern: pattern, options: options)\n  } catch let error1 as NSError {\n    error = error1\n    regex = nil\n  }\n\n  if error != nil { return RegexResult(results: []) }\n\n  let all = NSRange(location: 0, length: string.length)\n  let matchingOptions = NSRegularExpression.MatchingOptions(rawValue: 0)\n  var matches: [String] = []\n\n  regex?.enumerateMatches(in: value, options: matchingOptions, range: all) { result, _, _ in\n    guard let result = result else { return }\n    let subString = string.substring(with: result.range)\n    matches.append(subString)\n  }\n\n  return RegexResult(results: matches)\n}\n\nstruct RegexResult {\n  let isMatching: Bool\n  let matches: [String]\n\n  init(results: [String]) {\n    matches = results\n    isMatching = matches.count \u003e 0\n  }\n}\n\n// Mark: - Foundation Extensions\n\nextension String {\n  func matches(pattern: String) -\u003e [String] {\n    let regexResult = (self =~ pattern)\n\n    if regexResult.isMatching {\n      return regexResult.matches\n    } else {\n      return []\n    }\n  }\n\n  func condenseWhitespace() -\u003e String {\n    let components = self.components(separatedBy: NSCharacterSet.whitespacesAndNewlines)\n    return components.filter { !$0.isEmpty }.joined(separator: \" \")\n  }\n\n  func trunc(length: Int, trailing: String = \"…\") -\u003e String {\n    return (self.count \u003e length) ? self.prefix(length) + trailing : self\n  }\n}\n\nextension Array {\n  func chunk(_ chunkSize: Int) -\u003e [[Element]] {\n    return stride(from: 0, to: self.count, by: chunkSize).map({ (startIndex) -\u003e [Element] in\n      let endIndex = (startIndex.advanced(by: chunkSize) \u003e self.count) ? self.count-startIndex : chunkSize\n      return Array(self[startIndex..\u003cstartIndex.advanced(by: endIndex)])\n    })\n  }\n}\n\n// Mark: - Repository\n\nstruct Repository {\n  let authorName: String\n  let projectName: String\n  let description: String\n  let starCount: Int\n  let newStarCount: Int\n\n  init?(string: String) {\n    let properties = string.split(separator: \"|\")\n    if properties.count != 4 { return nil }\n\n    self.authorName = String(describing: properties[0].split(separator: \"/\").first ?? \"\").trimmingCharacters(in: .whitespacesAndNewlines)\n    self.projectName = String(describing: properties[0].split(separator: \"/\").last ?? \"\").trimmingCharacters(in: .whitespacesAndNewlines)\n    self.description = String(describing: properties[1])\n      .trimmingCharacters(in: .whitespacesAndNewlines)\n      .replacingOccurrences(of: \"\u0026amp;\", with: \"\u0026\")\n\n    let stars = String(describing: properties[2]\n      .split(separator: \" \").first?.replacingOccurrences(of: \",\", with: \"\") ?? \"0\")\n    self.starCount = Int(stars) ?? 0\n\n    let newStarsString = String(describing: properties[3]\n      .split(separator: \" \").first?.replacingOccurrences(of: \",\", with: \"\") ?? \"0\")\n\n    self.newStarCount = Int(newStarsString) ?? 0\n  }\n\n  var gitHubURL: String {\n    return \"https://github.com/\\(authorName)/\\(projectName)/\"\n  }\n\n  var firstLine: String {\n    return \"\\(projectName) (by \\(authorName))\" + \"| href=\\(gitHubURL)\"\n  }\n\n  var secondLine: String {\n    return \"★\\(starCount) (+\\(newStarCount)) — \\(description)\" + \"| size=12 length=\\(maxSubtitleLineLength)\"\n  }\n\n  func multiLineDescription(wordCount count: Int) -\u003e String {\n    let fullDescriptionWords = description.split(separator: \" \")\n    let chunkedDescription = fullDescriptionWords.chunk(count).map { chunk in\n      return chunk.joined(separator: \" \")\n    }\n\n    return  chunkedDescription.joined(separator: \"| size=12 \\n\")\n  }\n}\n\nenum Period: String {\n  case daily, weekly, monthly\n\n  var title: String {\n    switch self {\n    case .daily:\n      return \"today\"\n    case .weekly:\n      return \"this week\"\n    default:\n      return \"this month\"\n    }\n  }\n}\n\n// Mark: - Free Functions\n\nfunc trendingRepositories(html: String) -\u003e [Repository] {\n  let repos = html.matches(pattern: \"\u003col class=\\\"repo-list\\\"\u003e(.|\\n)*?\u003c/ol\u003e\")[0]\n  let repoList = repos.matches(pattern: \"\u003cli class=(.|\\n)*?\u003c/li\u003e\")\n\n  return repoList.flatMap { repo in\n    let sanitizedString = repo.replacingOccurrences(of: \"\u003c[^\u003e]+\u003e\", with: \"\", options: .regularExpression)\n      .replacingOccurrences(of: \"\\n    Star|Built by\\n|\\n          Swift\", with: \"|\", options: .regularExpression)\n      .condenseWhitespace()\n\n    return Repository(string: sanitizedString)\n  }\n}\n\nfunc printOutput(responseHTML html: String) {\n  print(templateImage)\n  print(\"---\")\n\n  guard let period = Period(rawValue: trendingPeriod) else {\n    fatalError(\"Frequency specified should be one of the following options: 'daily', 'weekly', 'monthly'.\")\n  }\n\n  print(\"Trending Swift \\(period.title.capitalized)\")\n  print(\"---\")\n\n  let count = max(min(displayCount, 25), 10)\n\n  for repo in trendingRepositories(html: html)[0..\u003ccount] {\n    print(repo.firstLine)\n    print(repo.secondLine)\n  }\n}\n\n// Mark: - Output\n\nlet url = URL(string: \"https://github.com/trending/swift?since=\\(trendingPeriod)\")!\nlet html = try? String(contentsOf: url)\n\nprintOutput(responseHTML: html!)\n\n"
				}
			],
			"path": "Dev/GitHub/swift-trending.15m.swift",
			"filename": "swift-trending.15m.swift",
			"dir": "Dev/GitHub",
			"docsPlugin": "Dev/GitHub/swift-trending.15m.swift.html",
			"docsCategory": "Dev/GitHub.html",
			"pathSegments": [
				"Dev",
				"GitHub"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/GitHub",
					"text": "GitHub",
					"isLast": true
				}
			],
			"title": "Trending Swift on GitHub",
			"version": "v1.0",
			"author": "Reda Lemeden",
			"authors": [
				{
					"name": "Reda Lemeden",
					"githubUsername": "kaishin",
					"imageURL": "https://avatars.githubusercontent.com/u/519433?v=4",
					"bio": "Developer/Designer based in Stockholm.",
					"primary": true
				}
			],
			"desc": "List Swift repositories tending on GitHub in a given period.",
			"imageURL": "https://github.com/kaishin/swift-trending-bitbar/raw/master/screenshot.png",
			"dependencies": [
				"swift"
			],
			"aboutURL": "https://github.com/kaishin/swift-trending-bitbar",
			"lastUpdated": "2021-03-08T15:21:48.691601Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/utimerobot.30s.py",
					"filename": "utimerobot.30s.py",
					"content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# \u003cbitbar.title\u003eUptimeRobot Monitor\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRodrigo Brito\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003erodrigo-brito\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow UptimeRobot status\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/rodrigobrito/uptimerobot-bitbar\u003c/bitbar.abouturl\u003e\n#\n# by Rodrigo Brito\n\nimport requests\nimport json\nimport sys\nimport os\n\nreload(sys)\nsys.setdefaultencoding('utf8')\n\n# Set your API Key here!\n# Get your API Key in https://uptimerobot.com/dashboard.php#mySettings\napi_key = 'CHANGE_HERE!!'\n\nurl = 'https://api.uptimerobot.com/v2/getMonitors'\n\nstatus = {\n    0: {'text': 'PAUSED', 'color': 'white'},\n    1: {'text': 'NOT CHECKED', 'color': 'white'},\n    2: {'text': 'UP', 'color': 'green'},\n    8: {'text': 'SEEMS DOWN', 'color': 'yellow'},\n    9: {'text': 'DOWN', 'color': 'red'}\n}\n\npayload = \"api_key=%s\u0026format=json\u0026logs=0\" % api_key\nheaders = {\n    'content-type': \"application/x-www-form-urlencoded\",\n    'cache-control': \"no-cache\"\n}\n\n# Request uptime robot API\nresponse = requests.request('POST', url, data=payload, headers=headers)\ndata = json.loads(response.text)\n\n# Get monitors status count (up, total)\ndef status_count(monitors):\n    up = 0\n    for monitor in monitors:\n        if monitor.get('status') \u003c= 2:\n            up += 1\n    return up, len(monitors)\n\nif data.get('monitors'):\n    print \"%d / %d\" % (status_count(data.get('monitors')))\n    print \"---\"\n    for monitor in data.get('monitors'):\n        st = status.get(monitor.get('status'))\n        print  \"%s - %s | href='%s' color='%s'\" % (st.get('text'),\n        monitor.get('friendly_name').encode('utf-8'), monitor.get('url'), st.get('color'))\nelse:\n    print \"No monitor! | color='red'\"\n    print \"Click here to configure | href='file://%s'\" % os.path.abspath('uptimerobot.30s.py')\n\nprint \"---\"\nprint \"Open UptimeRobot | href='https://uptimerobot.com/dashboard'\" "
				}
			],
			"path": "Dev/utimerobot.30s.py",
			"filename": "utimerobot.30s.py",
			"dir": "Dev",
			"docsPlugin": "Dev/utimerobot.30s.py.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "UptimeRobot Monitor",
			"version": "v1.0",
			"author": "Rodrigo Brito",
			"authors": [
				{
					"name": "Rodrigo Brito",
					"githubUsername": "rodrigo-brito",
					"imageURL": "https://avatars.githubusercontent.com/u/7620947?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show UptimeRobot status",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/rodrigobrito/uptimerobot-bitbar",
			"lastUpdated": "2021-03-08T15:21:52.444162Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/vso-pull-requests.1m.js",
					"filename": "vso-pull-requests.1m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eVSO Pullrequests\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eJelle Kralt\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003ejellekralt\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eLists open pull requests from VSO\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.image\u003ehttp://i.imgur.com/b3KTgcg.png\u003c/bitbar.image\u003e\n\nvar https = require('https');\n\nvar USERNAME = 'vso_username';\nvar PASSWORD = 'vso_password';\nvar DOMAIN = 'vso_domain';\nvar COLLECTION = 'vso_collection';\nvar REPO = 'repository_id';\n\n/**\n * Makes an HTTP GET call\n * @param {string} path\n */\nfunction get(path) {\n    // Use native promise in favor of library so there is no dependency\n    return new Promise( function (resolve, reject) {\n        var options = {\n            host: DOMAIN,\n            path: path,\n            auth: USERNAME + ':' + PASSWORD,\n            json: true\n        };\n\n        return https.get(options, function (res) {\n            var body = '';\n            res.on('data', function (data) {\n                body += data;\n            });\n            res.on('end', function () {\n                resolve(JSON.parse(body));\n            });\n            res.on('error', function (err) {\n                reject(err);\n            });\n        });\n    });\n\n}\n\n/**\n * Handles API calls response\n * @param {Object} repo - Repository data\n * @param {Object} pullRequests - Pull requests data\n */\nfunction handleResponse(repo, pullRequests) {\n    console.log('↓⤸ ' + pullRequests.length + ' | dropdown=false');\n    console.log('---');\n    pullRequests.forEach(function(pr) {\n        console.log(pr.pullRequestId + ': ' + pr.title + ' | href=' + repo._links.web.href + '/pullrequest/' + pr.pullRequestId);\n    });\n    console.log('---');\n    console.log('✚ Create PR | href=' + repo._links.web.href + '/pullrequests?_a=createnew');\n}\n\n// Use native promise in favor of library so there is no dependency\nPromise.all([\n    get('/' + COLLECTION + '/_apis/git/repositories/' + REPO),\n    get('/' + COLLECTION + '/_apis/git/repositories/' + REPO + '/pullrequests')\n]).then(function(data) {\n    handleResponse(data[0], data[1].value);\n});\n\n"
				}
			],
			"path": "Dev/vso-pull-requests.1m.js",
			"filename": "vso-pull-requests.1m.js",
			"dir": "Dev",
			"docsPlugin": "Dev/vso-pull-requests.1m.js.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "VSO Pullrequests",
			"version": "v1.0",
			"author": "Jelle Kralt",
			"authors": [
				{
					"name": "Jelle Kralt",
					"githubUsername": "jellekralt",
					"imageURL": "https://avatars.githubusercontent.com/u/214558?v=4",
					"bio": "Frontend Engineering Manager @codezilla-nl. Love JavaScript, Angular, Node.js, CSS and more",
					"primary": true
				}
			],
			"desc": "Lists open pull requests from VSO",
			"imageURL": "http://i.imgur.com/b3KTgcg.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:52.527171Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Vagrant/vagrant.2m.pl",
					"filename": "vagrant.2m.pl",
					"content": "#!/usr/bin/perl\n# \u003cbitbar.title\u003eVagrant\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author.github\u003eaxeloz\u003c/bitbar.author.github\u003e\n# \u003cbitbar.author\u003eAxel\u003c/bitbar.author\u003e\n# \u003cbitbar.desc\u003eVagrant status checker.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eperl,vagrant\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/Yzrcz9k.png\u003c/bitbar.image\u003e\n\nuse strict;\nuse Cwd 'abs_path';\n\nmy @output;\nmy @found;\nmy $machinePath;\nmy $readablePath;\nmy $me = abs_path($0);\nmy $content;\nmy $vagrant;\nmy $running = 0;\nmy $total = 0;\n\n# HACK as $PATH is incorrect when Bitbar run the script\n# Must add /usr/local/bin manually\nmy $path = $ENV{PATH}.':/usr/local/bin';\n\n# This function allows me to run Apple Scripts\nsub osascript($) { system 'osascript', map { ('-e', $_) } split(/\\n/, $_[0]); }\n\n# Locating the Vagrant binary\nforeach $a (split(/:/, $path)) {\n\tif (-x $a.\"/vagrant\") {\n\t\t$vagrant = $a.\"/vagrant\";\n\t\tlast;\n\t}\n}\n\n# If Vagrant could not be found\nif (! defined $vagrant) {\n\tprint \"⚠️\\n\";\n\tprint \"---\\n\";\n\tprint \"Vagrant binary could not be found in paths. Is it installed?\";\n\texit 1;\n}\n\n# When script is called with arguments\n# $ARGV[0] : the action (up, halt, suspend, resume, ssh)\n# $ARGV[1] : the path of the Vagrant environment\n# $ARGV[2] : the ID of the VM\nif ( ($#ARGV + 1) == 3) {\n\n\tmy $title = \"Vagrant machine #$ARGV[2]\";\n\tmy $description = \"\";\n\tmy $newstatus = \"unknown\";\n\n\t# Running the SSH action\n\tif ($ARGV[0] eq 'ssh') {\n\t\t$ARGV[1] =~ s/\\\\/\\\\\\\\/g; # extra escape; escape from osascript and do script\n\t\t\u0026osascript ('\n\t\t\ttell application \"Terminal\"\n\t\t\t\tif (count of windows) is 0 then reopen\n\t\t\t  activate\n\t\t\t  do script \"cd '.$ARGV[1].' \u0026\u0026 vagrant ssh\"\n\t\t\tend tell\n\t\t');\n\t\t$description = \"You are now connected to your Vagrant machine\";\n\t}\n\telse {\n\t\tif ($ARGV[0] eq \"up\" || $ARGV[0] eq \"resume\") {\n\t\t\t$newstatus = \"running\";\n\t\t}\n\t\telsif  ($ARGV[0] eq \"halt\" || $ARGV[0] eq \"suspend\") {\n\t\t\t$newstatus = \"stopped\";\n\t\t}\n\t\telsif ($ARGV[0] eq \"reload\") {\n\t\t\t$newstatus = \"reloaded\";\n\t\t}\n\n\t\tsystem(\"export PATH=$path \u0026\u0026 cd $ARGV[1] \u0026\u0026 $vagrant $ARGV[0]\");\n\t\t$description = \"Vagrant virtual machine status is now \".$newstatus;\n\t}\n\t\n\t# Checking the result of the action\n\tif ($? eq 0) {\n\t\t\u0026osascript (\n\t\t 'display notification \"'.$description.'\" with title \"'.$title.'\"'\n\t\t);\n\t\texit 0;\n\t}\n\telse {\n\t\t\u0026osascript (\n\t\t 'display notification \"Could not execute operation\" with title \"'.$title.'\"'\n\t\t);\n\t\texit 1;\n\t}\n\t# Not needed, just safer...\n\texit 0\n}\n\n# Getting the list of all Vagrant VMs\n@output = `$vagrant global-status |tail -n +3`;\n\n# Checking whether there is at least one VM\n# TODO: clean this\nforeach $a (@output) {\n\tif ($a =~ \"There are no active\") {\n\t\tprint \"⚠️\\n\";\n\t\tprint \"---\\n\";\n\t\tprint \"There is no Vagrant VM yet.\";\n\t\texit 1;\t\t\n\t}\n}\n\n\n# Looping in the list\nforeach $a (@output) {\n\t# Triming spaces\n\t$a =~ s/^\\s+|\\s+$//g;\n\t# Removing excessive spaces\n\t$a =~ s/ {1,}/ /g;\n\n\t# Cutting output on first empty line as Vagrant is too verbose\n\tlast if ($a eq '');\n\t\n\t# Counting total\n\t$total ++;\n\n\t# Exploding row on spaces\n\t@found = split / /, $a;\n\n\t$machinePath  = join(\"\\\\ \", @found[4..$#found]);\n\t$readablePath = join(\" \", @found[4..$#found]);\n\n\t# This VM is currently running\n\tif ($found[3] eq 'running') {\n\t\t# Counting the running VMs\n\t\t$running ++;\n\n\t\t$content .= \"✅ Machine #$found[0] is running | size=14 color=green\\n\";\n\t\t$content .= \" $readablePath | size=11 \\n\";\n\t\t$content .= \"  | size=14 color=black \\n\";\n\n\t\t$content .= \"#️⃣ SSH $found[0] | size=12 bash=\\\"$me\\\" param1=ssh param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=false \\n\";\n\t\t$content .= \"🔄 Reload $found[0] | size=12 bash=\\\"$me\\\" param1=reload param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t\t$content .= \"🔽 Suspend $found[0] | size=12 bash=\\\"$me\\\" param1=suspend param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t\t$content .= \"⏬ Stop $found[0] | size=12 bash=\\\"$me\\\" param1=halt param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t}\n\t# This VM is currently saved\n\telsif ($found[3] eq 'saved' || $found[3] eq 'suspended') {\n\t\t$content .= \"📴 Machine #$found[0] is suspended | size=14 color=orange\\n\";\n\t\t$content .= \" $readablePath | size=11 \\n\";\n\t\t$content .= \"  | size=14 color=black \\n\";\n\t\t$content .= \"▶️ Resume $found[0] | size=12 bash=\\\"$me\\\" param1=resume param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t\t$content .= \"⏬ Stop $found[0] | size=12 bash=\\\"$me\\\" param1=halt param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t}\n\t# This VM is currently powered off\n\telsif ($found[3] eq 'poweroff' || $found[3] eq 'aborted' || ($found[3] eq 'not' \u0026\u0026 $found[4] eq \"running\")) {\n\t\tif ($found[3] eq 'not' \u0026\u0026 $found[4] eq \"running\") {\n\t\t\t$machinePath  = join(\"\\\\ \", @found[5..$#found]);\n\t\t\t$readablePath = join(\" \", @found[5..$#found]);\n\t\t}\n\t\t$content .= \"🚫 Machine #$found[0] is stopped | size=14 color=red\\n\";\n\t\t$content .= \" $readablePath | size=11 \\n\";\n\t\t$content .= \"  | size=14 color=black \\n\";\n\t\t$content .= \"▶️ Start $found[0] | size=12 bash=\\\"$me\\\" param1=up param2=\\\"\".$machinePath.\"\\\" param3=\\\"\".$found[0].\"\\\" terminal=false refresh=true \\n\";\n\t}\n\t# This VM is in an unknown state\n\telse {\n\t\t$content .= \"❓ Machine #$found[0] is \".$found[3].\" | size=14 color=red\\n\";\n\t\t$content .= \" $machinePath | size=11 \\n\";\n\t\t$content .= \"  | size=14 color=black \\n\";\n\t\t$content .= \"This is an unknown state\\n\";\n\t}\n\n\t# Adding the terminal separator\n\t$content .= \"---\\n\";\n}\n\n# Adding the menu title with the number of running VMs\nprint \"V [$running/$total]\\n\";\nprint \"---\\n\";\nprint $content unless !defined $content;\nexit 0;\n"
				}
			],
			"path": "Dev/Vagrant/vagrant.2m.pl",
			"filename": "vagrant.2m.pl",
			"dir": "Dev/Vagrant",
			"docsPlugin": "Dev/Vagrant/vagrant.2m.pl.html",
			"docsCategory": "Dev/Vagrant.html",
			"pathSegments": [
				"Dev",
				"Vagrant"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Vagrant",
					"text": "Vagrant",
					"isLast": true
				}
			],
			"title": "Vagrant",
			"version": "v1.0",
			"author": "Axel",
			"authors": [
				{
					"name": "Axel",
					"githubUsername": "axeloz",
					"imageURL": "https://avatars.githubusercontent.com/u/1597611?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Vagrant status checker.",
			"imageURL": "https://i.imgur.com/Yzrcz9k.png",
			"dependencies": [
				"perl",
				"vagrant"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.632207Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Vagrant/vagrant.30s.pl",
					"filename": "vagrant.30s.pl",
					"content": "#!/usr/bin/env perl\n# \u003cbitbar.title\u003eVagrant Global Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAlexandre Espinosa Menor\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ealexandregz\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow vagrant images running, from vagrant global-status command\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/4YAFZC6.png\u003c/bitbar.image\u003e\n#\n# \"running\" line run command \"vagrant suspend\"\n# \"saved, poweroff, aborted\" line run command \"vagrant up\"\n#\n\nuse strict;\n\n$ENV{'PATH'} = $ENV{'PATH'}.':/usr/local/bin'; \n\nif ($#ARGV \u003e= 1) {\n        exit exec_sub_command(@ARGV);\n}\n\n# action =\u003e [status1 from machine, status2, ...]\nmy $actions_from_status = {\n        up =\u003e [\"saved\", \"poweroff\", \"aborted\"],\n        suspend =\u003e [\"running\"],\n        resume =\u003e [\"suspended\"]\n};\n\nmy $status = `vagrant global-status`;\n\nif($status =~ /^\\-{10,}\\n(.*)\\n\\s+\\n/sm) {\n        my @images = split(/\\n/, $1);\n\n        print \"🇻\"; print \"(\".scalar(@images).\")\" if(@images);\n        print \"\\n\";\n        print \"---\\n\";\n\n        foreach my $i(@images) {\n                my @data_image = split(/\\s+/, $i);\n                my $i_id = $data_image[0];\n                my $i_image = $data_image[1];\n                my $i_provider = $data_image[2];\n                my $i_status = $data_image[3];\n                my $i_path = $data_image[4];\n\n                my $color = \"black\";\n                $color = \"green\" if($i_status eq 'running');\n                $color = \"red\" if($i_status eq 'saved');\n\n                print \"$i_id - $i_image ($i_provider) | color=black\\n\";\n                print \"   $i_path | bash=$0 param1=path_copy param2=$i_path color=gray trim=false terminal=false\\n\";\n\n                print \"$i_status | color=$color \";\n                foreach my $action(keys(%{$actions_from_status})) {\n                        print \"bash=vagrant param1=$action param2=$i_id terminal=true\" if(grep $_ eq $i_status, @{$actions_from_status-\u003e{$action}});\n                }\n                print \"\\n\";\n                print \"---\\n\";\n        }\n}\nelse{\n        #print \"Without Vagrant images running?\";\n        print \"🇻(0)\";\n}\n\nsub exec_sub_command {\n        my ($sub_command, @args) = @_;\n        my $sub_command_methods = {\n                'path_copy' =\u003e \\\u0026sub_command_path_copy,\n        };\n        if (!defined $sub_command_methods-\u003e{$sub_command}) {\n                die \"Undefined sub command: $sub_command\";\n        }\n        return $sub_command_methods-\u003e{$sub_command}(@args);\n}\n\nsub sub_command_path_copy {\n        my $path = shift;\n        open my $fh, '|/usr/bin/pbcopy' or die $!;\n        print $fh $path;\n        close $fh;\n        return;\n}\n"
				}
			],
			"path": "Dev/Vagrant/vagrant.30s.pl",
			"filename": "vagrant.30s.pl",
			"dir": "Dev/Vagrant",
			"docsPlugin": "Dev/Vagrant/vagrant.30s.pl.html",
			"docsCategory": "Dev/Vagrant.html",
			"pathSegments": [
				"Dev",
				"Vagrant"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Vagrant",
					"text": "Vagrant",
					"isLast": true
				}
			],
			"title": "Vagrant Global Status",
			"version": "1.1",
			"author": "Alexandre Espinosa Menor",
			"authors": [
				{
					"name": "Alexandre Espinosa Menor",
					"githubUsername": "alexandregz",
					"imageURL": "https://avatars.githubusercontent.com/u/1374718?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show vagrant images running, from vagrant global-status command",
			"imageURL": "http://i.imgur.com/4YAFZC6.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:50.663267Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/vigil-check.5m.js",
					"filename": "vigil-check.5m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n/*\n  \u003cbitbar.title\u003eVigil Website Monitoring\u003c/bitbar.title\u003e\n  \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n  \u003cbitbar.author\u003eCameron Rye\u003c/bitbar.author\u003e\n  \u003cbitbar.author.github\u003ecameronrye\u003c/bitbar.author.github\u003e\n  \u003cbitbar.desc\u003eDisplays the status of hosts being monitered by Vigil.\u003c/bitbar.desc\u003e\n  \u003cbitbar.image\u003ehttps://cameronrye.com/img/vigil-check.png\u003c/bitbar.image\u003e\n  \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n\n  Vigil Website Monitoring\n  by Cameron Rye (@cameronrye)\n\n  Auth token can be scraped from the status board url @ http://client.vigil-app.com/?p=integrations\u0026t=sb\n\n*/\n\n'use strict';\n\nvar https = require('https'),\n    AUTH_TOKEN = 'YOUR AUTH TOKEN',\n    url = 'https://api.vigil-app.com/v1/user/' + AUTH_TOKEN + '/host?populateHostMonitors';\n\nfunction createBar(data) {\n  var isDown = false,\n      hosts = '',\n      bitbar = '';\n\n  hosts = data.hosts.map(function(host) {\n    var vigil = '',\n        protocol = '',\n        method = '',\n        time = '',\n        params = '';\n\n    if (!host.hostMonitors[0].lastMonitorResult.resultCode) isDown = true;\n\n    time = new Date(host.hostMonitors[0].lastMonitorResult.endTimestamp);\n\n    params = host.hostMonitors[0].parameters.map(function(param) {\n      switch (param.monitorParameterName) {\n        case 'monitors.webpage.protocol':\n          protocol = (param.value === 'https') ? 'https://' : 'http://';\n          break;\n        case 'monitors.webpage.method':\n          method = param.value;\n          break;\n      }\n    });\n\n    vigil  = host.hostMonitors[0].lastMonitorResult.resultCode ? ' ▲ ':' ▼ ';\n    vigil += host.hostMonitors[0].name + '| href=' + protocol + host.hostName + '\\n';\n    vigil += method + '\\u00A0\\u00A0\\u00A0' + protocol + host.hostName + '/\\n';\n    vigil += 'Status Code: ' + host.hostMonitors[0].lastMonitorResult.resultProperties['monitors.webpage.statusCode'];\n    vigil += ' (' + getStatus(host.hostMonitors[0].lastMonitorResult.resultProperties['monitors.webpage.statusCode']) + ')\\n';\n    vigil += 'Response Time: ' + (host.hostMonitors[0].lastMonitorResult.resultProperties['monitors.webpage.stats.totalSeconds'] * 1000) + 'ms\\n';\n    vigil += 'Avg Response: ' + (host.hostMonitors[0].uptime.responseTimeMean * 1000) + 'ms\\n';\n    vigil += 'Uptime: ' + host.hostMonitors[0].uptime.uptimePercent + '%\\n';\n    vigil += time + '| size: 10';\n\n    return vigil;\n\n  }).join('\\n---\\n');\n\n  bitbar  = isDown ? '▼':'▲';\n  bitbar += '| dropdown=false\\n---\\n';\n  bitbar += ' ▬\\n---\\n';\n  bitbar += hosts;\n  bitbar += '\\n---\\n ⚙ Vigil Website Monitoring | href=https://client.vigil-app.com/ \\n---\\n';\n\n  console.log(bitbar);\n}\n\nfunction getStatus(code) {\n  var status = '';\n  switch (code) {\n    case '100':\n      status = 'Continue';\n      break;\n    case '101':\n      status = 'Switching Protocol';\n      break;\n    case '200':\n      status = 'OK';\n      break;\n    case '201':\n      status = 'Created';\n      break;\n    case '202':\n      status = 'Accepted';\n      break;\n    case '203':\n      status = 'Non-Authoritative Information';\n      break;\n    case '204':\n      status = 'No Content';\n      break;\n    case '205':\n      status = 'Reset Content';\n      break;\n    case '206':\n      status = 'Partial Content';\n      break;\n    case '300':\n      status = 'Multiple Choice';\n      break;\n    case '301':\n      status = 'Moved Permanently';\n      break;\n    case '302':\n      status = 'Found';\n      break;\n    case '303':\n      status = 'See Other';\n      break;\n    case '304':\n      status = 'Not Modified';\n      break;\n    case '305':\n      status = 'Use Proxy';\n      break;\n    case '306':\n      status = 'Unused';\n      break;\n    case '307':\n      status = 'Temporary Redirect';\n      break;\n    case '308':\n      status = 'Permanent Redirect';\n      break;\n    case '400':\n      status = 'Bad Request';\n      break;\n    case '401':\n      status = 'Unauthorized';\n      break;\n    case '402':\n      status = 'Payment Required';\n      break;\n    case '403':\n      status = 'Forbidden';\n      break;\n    case '404':\n      status = 'Not Found';\n      break;\n    case '405':\n      status = 'Method Not Allowed';\n      break;\n    case '406':\n      status = 'Not Acceptable';\n      break;\n    case '407':\n      status = 'Proxy Authentication Required';\n      break;\n    case '408':\n      status = 'Request Timeout';\n      break;\n    case '409':\n      status = 'Conflict';\n      break;\n    case '410':\n      status = 'Gone';\n      break;\n    case '411':\n      status = 'Length Required';\n      break;\n    case '412':\n      status = 'Precondition Failed';\n      break;\n    case '413':\n      status = 'Payload Too Large';\n      break;\n    case '414':\n      status = 'URI Too Long';\n      break;\n    case '415':\n      status = 'Unsupported Media Type';\n      break;\n    case '416':\n      status = 'Requested Range Not Satisfiable';\n      break;\n    case '417':\n      status = 'Expectation Failed';\n      break;\n    case '418':\n      status = 'I\\'m a teapot';\n      break;\n    case '421':\n      status = 'Misdirected Request';\n      break;\n    case '426':\n      status = 'Upgrade Required';\n      break;\n    case '428':\n      status = 'Precondition Required';\n      break;\n    case '429':\n      status = 'Too Many Requests';\n      break;\n    case '431':\n      status = 'Request Header Fields Too Large';\n      break;\n    case '500':\n      status = 'Internal Server Error';\n      break;\n    case '501':\n      status = 'Not Implemented';\n      break;\n    case '502':\n      status = 'Bad Gateway';\n      break;\n    case '503':\n      status = 'Service Unavailable';\n      break;\n    case '504':\n      status = 'Gateway Timeout';\n      break;\n    case '505':\n      status = 'HTTP Version Not Supported';\n      break;\n    case '506':\n      status = 'Variant Also Negotiates';\n      break;\n    case '507':\n      status = 'Variant Also Negotiates';\n      break;\n    case '511':\n      status = 'Network Authentication Required';\n      break;\n  }\n  return status;\n}\n\nhttps.get(url, function(res) {\n  var json = '';\n  res.on('data', function(data) {\n    json = data;\n  });\n  res.on('end', function() {\n    createBar(JSON.parse(json));\n  });\n});\n"
				}
			],
			"path": "Dev/vigil-check.5m.js",
			"filename": "vigil-check.5m.js",
			"dir": "Dev",
			"docsPlugin": "Dev/vigil-check.5m.js.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Vigil Website Monitoring",
			"version": "v1.0",
			"author": "Cameron Rye",
			"authors": [
				{
					"name": "Cameron Rye",
					"githubUsername": "cameronrye",
					"imageURL": "https://avatars.githubusercontent.com/u/47811?v=4",
					"bio": "Lamps in video games use real electricity ✩◝(◍⌣̎◍)◜✩",
					"primary": true
				}
			],
			"desc": "Displays the status of hosts being monitered by Vigil.",
			"imageURL": "https://cameronrye.com/img/vigil-check.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:52.434785Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/xcode-version.1h.sh",
					"filename": "xcode-version.1h.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eXcode Version\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eFlorian Hirschmann\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ehirschfl\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows the Xcode version that is currently selected with xcode-select.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003excodebuild\u003c/bitbar.dependencies\u003e\n\nxcodebuild -version | head -1\n"
				}
			],
			"path": "Dev/xcode-version.1h.sh",
			"filename": "xcode-version.1h.sh",
			"dir": "Dev",
			"docsPlugin": "Dev/xcode-version.1h.sh.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "Xcode Version",
			"version": "v1.0",
			"author": "Florian Hirschmann",
			"authors": [
				{
					"name": "Florian Hirschmann",
					"githubUsername": "hirschfl",
					"imageURL": "https://avatars.githubusercontent.com/u/6018375?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows the Xcode version that is currently selected with xcode-select.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"xcodebuild"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:52.53673Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/Jira/jira.1m.sh",
					"filename": "jira.1m.sh",
					"content": "#!/bin/bash\n\n# bitbar plugins for devs that use https://www.atlassian.com/software/jira\n#\n# gets all assigned tasks and displays them on different sorting behaviors.\n# also shows when there are open blockers\n#\n# metadata\n# \u003cbitbar.title\u003ejira\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eNicolas Gehlert\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003engehlert\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003edisplay all tasks that are assigned to you. There are currently two sorting options. Either by type (e.g. Task, Story, Block) or by status (in progress, resolved, ...).\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/HwBF2JX.png\u003c/bitbar.image\u003e\n\nUSER=\"\"\nPASSWORD=\"\"\nJIRA_BASE_URL=\"https://example.com/jira\"\nPROJECT=\"PROJECT\"\nCOOKIE_LOCATION=\"$HOME/.jira-cookie\"\nORDER_BY=\"TYPE\" # available options are [TYPE, STATUS]\n# I think those are the default values, however you should still check your jira configuration\n# Also they are only needed if you want to order by `STATUS`\nSTATUSES=(\"to do\" \"in progress\" \"resolved\" \"done\" \"closed\")\n\nfunction getJsonValue() {\n  KEY=$1\n  num=$2\n  awk -F\"[,:}]\" '{for(i=1;i\u003c=NF;i++){if($i~/'\"$KEY\"'\\042/){print $(i+1)}}}' | tr -d '\"' | sed -n \"${num}\"p\n}\n# stupid hack because json parsing in bash sucks :D find better solution later\nfunction getTextWithCommaJsonValue() {\n  KEY=$1\n  num=$2\n  awk -F\"[:}]\" '{for(i=1;i\u003c=NF;i++){if($i~/'\"$KEY\"'\\042/){print $(i+1)}}}' | tr -d '\"' | sed -n \"${num}\"p\n}\n\nfunction echoAllIssues() {\n  json=$1\n  numberOfTasks=$2\n  color=$3\n  i=\"1\"\n  while [ $i -le \"$numberOfTasks\" ]\n  do\n    issues=$(echo \"$json\" | getTextWithCommaJsonValue summary $i)\n    key=$(echo \"$json\" | getJsonValue key $i)\n    url=\"${JIRA_BASE_URL}/browse/${key}\"\n    echo \"$key: $issues | bash='$0' param1=$url terminal=false color=$color\"\n    ((i+=1))\n  done\n}\n\nfunction jqlEscape() {\n  param=$*\n  echo \"\\\"${param/ /%20}\\\"\"\n}\n\nfunction login() {\n  curl --insecure --silent -X POST -H \"Content-Type: application/json\" -H \"X-Atlassian-Token: nocheck\" -c \"${COOKIE_LOCATION}\" --data \"{\\\"username\\\":\\\"${USER}\\\",\\\"password\\\":\\\"${PASSWORD}\\\"}\" \"${JIRA_BASE_URL}/rest/auth/1/session\"\n}\n\nfunction runType() {\n  recursive=$1\n  blocker=$(curl --insecure --silent -X GET -b \"${COOKIE_LOCATION}\" -H \"Content-Type: application/json\" $JIRA_BASE_URL/rest/api/2/search?jql=sprint%20in%20openSprints\\(\\)AND%20priority=Blocker%20AND%20project=${PROJECT}%20AND%20status\\!=done\\\u0026fields=summary)\n\n  assignedTasks=$(curl --insecure --silent -X GET -b \"${COOKIE_LOCATION}\" -H \"Content-Type: application/json\" $JIRA_BASE_URL/rest/api/2/search?jql=assignee%20in\\(currentUser\\(\\)\\)AND%20sprint%20in%20openSprints\\(\\)AND%20status\\!=done\\\u0026fields=summary)\n\n  stories=$(curl  --insecure --silent -X GET -b \"${COOKIE_LOCATION}\" -H \"Content-Type: application/json\" $JIRA_BASE_URL/rest/api/2/search?jql=sprint%20in%20openSprints\\(\\)%20AND%20issuetype=story%20AND%20project=${PROJECT}%20AND%20status\\!=done\\\u0026fields=summary)\n\n  totalBlocker=$(echo \"$blocker\" | getJsonValue total 1)\n  totalAssignedTasks=$(echo \"$assignedTasks\" | getJsonValue total 1)\n  totalStories=$(echo \"$stories\" | getJsonValue total 1)\n  if [[ -z \"$totalBlocker\" || -z \"$totalAssignedTasks\" || -z \"$totalStories\" ]]\n    then\n      # if data loading failed on the second attempt there is probably a bigger issue\n      if [[ \"$recursive\" = true ]]\n        then\n          echo There seems to be a problem with the jira login. Check your configuration\n          exit\n      fi\n      # token is expired. login again and try to load data\n      login\n      runType true\n  fi\n\n  if [ \"$totalBlocker\" -gt 0 ]\n    then\n      echo \"Blocker: ${totalBlocker} | color=#F44336\"\n    else\n      echo \"Tasks assigned: ${totalAssignedTasks} | color=#333333\"\n  fi\n\n  echo \"---\"\n\n  echo \"Blocker: ${totalBlocker} | color=#333333\"\n  echoAllIssues \"$blocker\" \"$totalBlocker\" \"#F44336\"\n  echo \"---\"\n\n  echo \"Tasks assigned: ${totalAssignedTasks} | color=#333333\"\n  echoAllIssues \"$assignedTasks\" \"$totalAssignedTasks\" \"#333333\"\n  echo \"---\"\n\n  echo \"Open Stories: ${totalStories} | color=#333333\"\n  echoAllIssues \"$stories\" \"$totalStories\" \"#333333\"\n\n  exit\n}\n\nfunction runStatus() {\n  recursive=$1\n  blocker=$(curl --insecure --silent -X GET -b \"${COOKIE_LOCATION}\" -H \"Content-Type: application/json\" $JIRA_BASE_URL/rest/api/2/search?jql=sprint%20in%20openSprints\\(\\)AND%20priority=Blocker%20AND%20project=${PROJECT}%20AND%20status\\!=done\\\u0026fields=summary)\n\n  assignedTasks=$(curl --insecure --silent -X GET -b \"${COOKIE_LOCATION}\" -H \"Content-Type: application/json\" $JIRA_BASE_URL/rest/api/2/search?jql=assignee%20in\\(currentUser\\(\\)\\)AND%20sprint%20in%20openSprints\\(\\)AND%20status\\!=done\\\u0026fields=summary)\n  totalBlocker=$(echo \"$blocker\" | getJsonValue total 1)\n  totalAssignedTasks=$(echo \"$assignedTasks\" | getJsonValue total 1)\n  if [[ -z \"$totalBlocker\" || -z \"$totalAssignedTasks\" ]]\n    then\n      # if data loading failed on the second attempt there is probably a bigger issue\n      if [[ \"$recursive\" = true ]]\n        then\n          echo There seems to be a problem with the jira login. Check your configuration\n          exit\n      fi\n      # token is expired. login again and try to load data\n      login\n      runStatus true\n  fi\n\n  if [ \"$totalBlocker\" -gt 0 ]\n    then\n      echo \"Blocker: ${totalBlocker} | color=#F44336\"\n    else\n      echo \"Tasks assigned: ${totalAssignedTasks} | color=#333333\"\n  fi\n\n  echo \"---\"\n  echo \"Blocker: ${totalBlocker} | color=#333333\"\n  echoAllIssues \"$blocker\" \"$totalBlocker\" \"#F44336\"\n  echo \"---\"\n  for index in ${!STATUSES[*]}\n  do\n    status=${STATUSES[$index]}\n    ecapedStatus=$(jqlEscape \"$status\")\n\n    statusResponse=$(curl  --insecure --silent -X GET -b \"${COOKIE_LOCATION}\" -H \"Content-Type: application/json\" $JIRA_BASE_URL/rest/api/2/search?jql=assignee%20in\\(currentUser\\(\\)\\)AND%20sprint%20in%20openSprints\\(\\)%20AND%20project=${PROJECT}%20AND%20status=\"${ecapedStatus}\"\\\u0026fields=summary)\n    totalTasks=$(echo \"$statusResponse\" | getJsonValue total 1)\n\n    echo \"${status}: ${totalTasks} | color=#333333\"\n    echoAllIssues \"$statusResponse\" \"$totalTasks\" \"#333333\"\n    echo \"---\"\n  done\n  exit\n}\n\n# the program starts here\n\n# opens jira issue page if one entry was clicked\nif [[ \"$1\" == http* ]]; then\n  open \"$1\"\n  exit\nfi\n\n# only login if there is not already a auth token\nif [ ! -f \"${COOKIE_LOCATION}\" ]\n  then\n    login\nfi\n\nif [[ \"${ORDER_BY}\" == \"TYPE\" ]]; then\n  runType\nelif [[ \"${ORDER_BY}\" == \"STATUS\" ]]; then\n  runStatus\nfi\n"
				}
			],
			"path": "Dev/Jira/jira.1m.sh",
			"filename": "jira.1m.sh",
			"dir": "Dev/Jira",
			"docsPlugin": "Dev/Jira/jira.1m.sh.html",
			"docsCategory": "Dev/Jira.html",
			"pathSegments": [
				"Dev",
				"Jira"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": false
				},
				{
					"path": "Dev/Jira",
					"text": "Jira",
					"isLast": true
				}
			],
			"title": "jira",
			"version": "v1.1",
			"author": "Nicolas Gehlert",
			"authors": [
				{
					"name": "Nicolas Gehlert",
					"githubUsername": "ngehlert",
					"imageURL": "https://avatars.githubusercontent.com/u/8989483?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "display all tasks that are assigned to you. There are currently two sorting options. Either by type (e.g. Task, Story, Block) or by status (in progress, resolved, ...).",
			"imageURL": "http://i.imgur.com/HwBF2JX.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:49.670598Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/process-monitoring.1s.sh",
					"filename": "process-monitoring.1s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eprocess-monitoring\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eOlivier Tille\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eoliviernt\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eMonitors CPU and Memory usage for a certain process\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/ApLSN8L.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/oliviernt/bitbar-plugins/blob/monitoring/Dev/Monitoring/process-monitoring.1s.sh\u003c/bitbar.abouturl\u003e\n\nPROCESS=\"BitBar.app\"\n\n# shellcheck disable=SC2009\nid=$(ps aux | grep -i \"${PROCESS}\" | grep -v grep | awk '{print $2}')\necho -n \"${PROCESS}: \"\ntop -l 1 -pid \"$id\" -stats cpu,mem | tail -1 | awk '{print \"CPU: \" $1 \" - MEM: \" $2}'\necho \"---\"\ntop -l 1 -pid \"$id\"\n"
				}
			],
			"path": "Dev/process-monitoring.1s.sh",
			"filename": "process-monitoring.1s.sh",
			"dir": "Dev",
			"docsPlugin": "Dev/process-monitoring.1s.sh.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "process-monitoring",
			"version": "v0.1.0",
			"author": "Olivier Tille",
			"authors": [
				{
					"name": "Olivier Tille",
					"githubUsername": "oliviernt",
					"imageURL": "https://avatars.githubusercontent.com/u/162120?v=4",
					"bio": "Software Developer at @lexoffice, Loving the WWW. \r\nPGP: https://keybase.io/oliviernt ",
					"primary": true
				}
			],
			"desc": "Monitors CPU and Memory usage for a certain process",
			"imageURL": "http://i.imgur.com/ApLSN8L.png",
			"dependencies": [],
			"aboutURL": "https://github.com/oliviernt/bitbar-plugins/blob/monitoring/Dev/Monitoring/process-monitoring.1s.sh",
			"lastUpdated": "2021-03-08T15:21:51.957614Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Dev/tail.5s.sh",
					"filename": "tail.5s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003etail\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMat Ryer\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ematryer\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTails a text file. Perfect for tailing logs in the menu bar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/101659/12247623/b65b6f1e-b8ac-11e5-8ec2-6d9d885bfb6f.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/Dev/Logs/tail.5s.sh\u003c/bitbar.abouturl\u003e\n\n# \u003cxbar.var\u003estring(VAR_FILE=\"\"): The file to tail.\u003c/xbar.var\u003e\n# \u003cxbar.var\u003enumber(VAR_LINES=15): The number of lines to show.\u003c/xbar.var\u003e\n\n# If you're using xbar, use the app to install this and set the preferences\n# in the UI.\n\n# For old BitBar builds, set the values by uncommenting these lines:\n# VAR_FILE=/path/to/file\n# VAR_LINES=15\n\necho -n \"↧ \"\nbasename \"$VAR_FILE\"\necho ---\ntail -n \"$VAR_LINES\" \"$VAR_FILE\"\n"
				}
			],
			"path": "Dev/tail.5s.sh",
			"filename": "tail.5s.sh",
			"dir": "Dev",
			"docsPlugin": "Dev/tail.5s.sh.html",
			"docsCategory": "Dev.html",
			"pathSegments": [
				"Dev"
			],
			"categoryPathSegments": [
				{
					"path": "Dev",
					"text": "Dev",
					"isLast": true
				}
			],
			"title": "tail",
			"version": "v2.0",
			"author": "Mat Ryer",
			"authors": [
				{
					"name": "Mat Ryer",
					"githubUsername": "matryer",
					"imageURL": "https://avatars.githubusercontent.com/u/101659?v=4",
					"bio": "Building pace.dev and firesearch.dev - Gopher, developer, speaker, author (Go Programming Blueprints) - BitBar app getbitbar.com - Co-creator Gopherize.me",
					"primary": true
				}
			],
			"desc": "Tails a text file. Perfect for tailing logs in the menu bar.",
			"imageURL": "https://cloud.githubusercontent.com/assets/101659/12247623/b65b6f1e-b8ac-11e5-8ec2-6d9d885bfb6f.png",
			"dependencies": [],
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/Dev/Logs/tail.5s.sh",
			"lastUpdated": "2021-03-08T15:21:52.285698Z",
			"vars": [
				{
					"type": "string",
					"name": "VAR_FILE",
					"default": "",
					"desc": "The file to tail.",
					"options": null
				},
				{
					"type": "number",
					"name": "VAR_LINES",
					"default": "15",
					"desc": "The number of lines to show.",
					"options": null
				}
			]
		}
	]
}