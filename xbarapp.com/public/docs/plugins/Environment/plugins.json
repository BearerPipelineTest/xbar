{
	"plugins": [
		{
			"files": [
				{
					"path": "Environment/conda-envs.15m.py",
					"filename": "conda-envs.15m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eAnaconda Environments\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDarius Morawiec\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003enok\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eUseful BitBar plugin to list all created conda environments and to open a new session with a chosen environment.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://github.com/nok/conda-envs/blob/master/themes/dark.png?raw=true\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003econda\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/nok/conda-envs\u003c/bitbar.abouturl\u003e\n\n\nimport os\nimport subprocess as subp\n\n\n# User settings:\nCONDA_PATH = '~/anaconda/bin/conda'\nCHECK_VERSION = True\nCHECK_SIZE = True\n\n# BitBar related constants:\nLINE = '---'  # cutting line\n\n\nclass Color:\n    GREEN = '#3bb15c'\n    BLUE = '#4a90f3'\n\n\nclass Env:\n    def __init__(self, name, path):\n        conda = os.path.expanduser(CONDA_PATH)\n        cmd = [conda, 'env', 'export', '-n', name]\n        deps = subp.check_output(cmd, stderr=subp.STDOUT).strip()\n\n        self.name = name\n\n        if CHECK_SIZE:\n            du = ['du', '-hs', path]\n            size = subp.check_output(du, stderr=subp.STDOUT).strip().split()[0]\n            name += ' (%s)' % size\n\n        version = None\n        if CHECK_VERSION:\n            for dep in deps.splitlines():\n                if '- python=' in dep:\n                    version = dep.split('=')[1]\n                    name += ' (%s)' % version\n                    break\n\n        self.meta = name\n        self.version = version\n\n    @property\n    def color(self):\n        \"\"\"\n        Return the color to the used Python version.\n\n        Python 2.X: #3bb15c\n        Python 3.X: #4a90f3\n\n        :return: string: The color in hexadecimal format.\n        \"\"\"\n        return Color.GREEN if self.version.startswith('2') else Color.BLUE\n\n    def __str__(self):\n        \"\"\"\n        Return the environment settings in BitBar format.\n\n        :return: string: The environment settings in BitBar format.\n        \"\"\"\n        cmd = '{meta} | bash=source param1=activate param2={name} ' + \\\n              'terminal=true refresh=false'\n        meta = self.__dict__\n        if self.version is not None:\n            cmd += ' color={color}'\n            meta.update({'color': self.color})\n        return cmd.format(**meta)\n\n\ndef is_conda_installed():\n    \"\"\"\n    Check whether conda is installed locally.\n\n    :return: bool: Check whether conda is installed locally.\n    \"\"\"\n    conda = os.path.expanduser(CONDA_PATH)\n    try:\n        subp.check_output([conda], stderr=subp.STDOUT).strip()\n    except:\n        print(LINE)\n        print('Download Aanaconda | href=https://www.continuum.io/downloads')\n        exit(-1)\n\n\ndef get_conda_envs():\n    \"\"\"\n    Create a list of all parsed environments.\n\n    :return: list: The list of environment instances.\n    \"\"\"\n    conda = os.path.expanduser(CONDA_PATH)\n    cmd = [conda, 'env', 'list']\n    out = subp.check_output(cmd, stderr=subp.STDOUT).strip()\n    envs = []\n    for env in out.splitlines():\n        if not env.strip().startswith('#'):\n            tuple = env.split()\n            name = tuple[0]\n            path = tuple[1]\n            try:\n                env = Env(name, path)\n                envs.append(env)\n            except:\n                pass\n    return envs\n\n\ndef print_menu(envs):\n    \"\"\"\n    Print the BitBar menu.\n\n    :param envs: The parsed environment instances.\n    \"\"\"\n    if len(envs) \u003e 0:\n        print(LINE)\n        for idx, env in enumerate(envs):\n            print(env)\n        if CHECK_VERSION:\n            print(LINE)\n            print('Python 2 | color=%s' % Color.GREEN)\n            print('Python 3 | color=%s' % Color.BLUE)\n    print(LINE)\n    conda = os.path.expanduser(CONDA_PATH)\n    cmd = [conda, '--version']\n    ver = subp.check_output(cmd, stderr=subp.STDOUT).strip()\n    print(ver)\n\n\ndef main():\n    print('ùóî')  # Print always the letter 'A' of 'Anaconda'\n    is_conda_installed()\n    envs = get_conda_envs()\n    print_menu(envs)\n\n\nif __name__ == \"__main__\":\n    main()\n"
				}
			],
			"path": "Environment/conda-envs.15m.py",
			"filename": "conda-envs.15m.py",
			"dir": "Environment",
			"docsPlugin": "Environment/conda-envs.15m.py.html",
			"docsCategory": "Environment.html",
			"pathSegments": [
				"Environment"
			],
			"categoryPathSegments": [
				{
					"path": "Environment",
					"text": "Environment",
					"isLast": true
				}
			],
			"title": "Anaconda Environments",
			"version": "v1.2",
			"author": "Darius Morawiec",
			"authors": [
				{
					"name": "Darius Morawiec",
					"githubUsername": "nok",
					"imageURL": "https://avatars.githubusercontent.com/u/670641?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Useful BitBar plugin to list all created conda environments and to open a new session with a chosen environment.",
			"imageURL": "https://github.com/nok/conda-envs/blob/master/themes/dark.png?raw=true",
			"dependencies": [
				"conda"
			],
			"aboutURL": "https://github.com/nok/conda-envs",
			"lastUpdated": "2021-03-08T15:21:53.069451Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Environment/CO2-Signal.10m.py",
					"filename": "CO2-Signal.10m.py",
					"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 /usr/local/bin/python3\n\n# \u003cbitbar.title\u003eCO2Signal API\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMartin Jobke\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003epygoner\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays the current carbon (gC02equivalent) emmissions per kWh of produced electric energy in the requested country/region \u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython, CO2 Signal\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://docs.co2signal.com/\u003c/bitbar.abouturl\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/pygoner/Plugin-Bitbar/main/Bitbar%20C02%20Signal%20Plugin%20Image.png\u003c/bitbar.image\u003e\n\nimport requests\nimport sys\n\n# user settings \n# get your C02Signal API token at https://www.co2signal.com/\n# insert your specific country code from this list http://api.electricitymap.org/v3/zones\n# have fun ^^\n\nmyapitoken = ''\nmyCountrycode = ''\n\nclass CO2Signal:\n\n    def __init__(self, authToken, countryCode):\n        self.authToken = authToken\n        self.countryCode = countryCode\n\n    def requestC02Signal(self):\n        url = 'http://api.co2signal.com/v1/latest?countryCode=' + self.countryCode\n        headers = {'auth-token': self.authToken}\n        self.resDict = requests.get(url, params=headers).json()\n\n    def displayResponse(self):\n        try:\n            print(self.resDict['error'])\n            self.dropdownMenu('', 'error')\n            return\n        except KeyError:\n            stringToDisplay = self.countryFlag(self.countryCode)\n            try:\n                self.resDict['message']\n                # if the API key is used more than 30 times an hour or wrong\n                # the CO2 Signal return just a json containing 'message'\n                self.dropdownMenu(stringToDisplay, 'APILimit')\n                return\n            except KeyError:\n                # if the country live data is currently unavialable the\n                # fossilFuelPercentage is null/none\n                if (self.resDict['data']['fossilFuelPercentage']):\n                    stringToDisplay += str(round(self.resDict['data']['carbonIntensity'], 1))\n                    stringToDisplay += ' | color=' + self.color(self.resDict['data']['carbonIntensity'])\n                    self.dropdownMenu(stringToDisplay, 'normal')\n                else:\n                    stringToDisplay += ':-( | color=#e62e00'     # red sad smiley\n                    self.dropdownMenu(stringToDisplay, 'noLiveData')\n\n    def dropdownMenu(self, stringToDisplay, mode):\n        print(stringToDisplay)\n        if (mode == 'normal'):\n            print('---')\n            ffp = round(self.resDict['data']['fossilFuelPercentage'], 1)\n            # creating a smiley face which reflects the mood of\n            # an environmental caring person ^^\n            if (ffp \u003c 20):\n                ffp = str(ffp) + ' :heart_eyes:'\n            else:\n                if(ffp \u003c 30):\n                    ffp = ffp = str(ffp) + ' :grinning:'\n                else:\n                    if(ffp \u003c 50):\n                        ffp = ffp = str(ffp) + ' :neutral_face:'\n                    else:\n                        ffp = ffp = str(ffp) + ' :poop:'\n            print('fossil fuel percentage: ' + ffp)\n            print('-- percentage of electricity')\n            print('-- generated by coal, gas or oil')\n        \n        if (mode == 'APILimit'):\n            print('---')\n            print(self.resDict['message'])\n            if ('Invalid' in self.resDict['message']):\n                print('Get a API key at https://www.co2signal.com/')\n\n        if (mode == 'noLiveData'):\n            print('---')\n            print('No data currently avialable!')\n\n        if (mode == 'error'):\n            print('---')\n\n        print('API Website (CO2 Signal)| href=https://www.co2signal.com/')\n        print('electricityMap Website | href=https://electricitymap.org') \n\n    def countryFlag(self, countryCode='WhiteFlag'):\n        # https://www.unicode.org/charts/PDF/U1F100.pdf\n        # see regional indicator symbols\n        if (countryCode == 'WhiteFlag'):\n            return 'üè≥ '\n        start = 0x1F1E6\n        # unicode start for letter 'A' in regional Symbols\n        letterOffset1 = ord(countryCode[0]) - ord('A')\n        letterOffset2 = ord(countryCode[1]) - ord('A')\n        # calculation of number which is added\n        # e.g. 'D' as regional letter = 'A' as regional letter + 3\n        letter1 = start + letterOffset1\n        letter2 = start + letterOffset2\n        return (chr(letter1) + chr(letter2))\n\n    def rgb_to_hex(self, rgb):\n        # https://www.codespeedy.com/convert-rgb-to-hex-color-code-in-python/\n        return '%02x%02x%02x' % rgb\n\n    def linearGradient(self, col1, col2, splitFactor):\n        # this function returns the color which is in between those two colors and\n        # is splits those two colors according to the split factor\n        # e.g. col1 = (0, 0, 0); col2 = (40, 60, 80); SF = 0.4\n        # linearGradient(col1, col2, SF) -\u003e 0.4*((40, 60, 80) - (0, 0, 0))\n        # similar to finding a point on straight between two points\n        dif = (col1[0] - col2[0], col1[1] - col2[1], col1[2] - col2[2])\n        dif = (dif[0]*splitFactor, dif[1]*splitFactor, dif[2]*splitFactor)\n        result = (col1[0] - dif[0], col1[1] - dif[1], col1[2] - dif[2])\n        result = (int(result[0]), int(result[1]), int(result[2]))\n        return result\n     \n    def color(self, carbonIntensity):\n        # this function should determine a color given the carbon intensity\n        # low intensity -\u003e more green\n        # middle intensity -\u003e yellow\n        # high intensity -\u003e brown\n        # similar to the color scale at: electricitymap.org\n\n        maximum = 800\n        ratio = carbonIntensity / maximum\n\n        colors = ((42, 163, 100), (162, 206, 86), (240, 225, 75),\n                (222, 191, 68), (205, 158, 61), (188, 124, 53),\n                (171, 91, 46), (143, 61, 35), (82, 39, 12), (56, 29, 2))\n        splitLenght = 1 / 9\n\n        # the color scale is split up nine times\n        # each time there is a linear gradient betwenn the colors of the colors tuple\n\n        k = int(ratio // splitLenght)\n        splitFactor = (ratio % splitLenght) / splitLenght\n        if (ratio \u003e= 0.999999):\n            return('#' + self.rgb_to_hex(colors[10]))\n        else:\n            carbonColor = self.linearGradient(colors[k], colors[k+1], splitFactor)\n            carbonColor = self.rgb_to_hex(carbonColor)\n            return('#' + carbonColor)\n\n\nmyCO2Signal = CO2Signal(myapitoken, myCountrycode)\nmyCO2Signal.requestC02Signal()\nmyCO2Signal.displayResponse()"
				}
			],
			"path": "Environment/CO2-Signal.10m.py",
			"filename": "CO2-Signal.10m.py",
			"dir": "Environment",
			"docsPlugin": "Environment/CO2-Signal.10m.py.html",
			"docsCategory": "Environment.html",
			"pathSegments": [
				"Environment"
			],
			"categoryPathSegments": [
				{
					"path": "Environment",
					"text": "Environment",
					"isLast": true
				}
			],
			"title": "CO2Signal API",
			"version": "v1.0",
			"author": "Martin Jobke",
			"authors": [
				{
					"name": "Martin Jobke",
					"githubUsername": "pygoner",
					"imageURL": "https://avatars.githubusercontent.com/u/22852467?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin displays the current carbon (gC02equivalent) emmissions per kWh of produced electric energy in the requested country/region ",
			"imageURL": "https://raw.githubusercontent.com/pygoner/Plugin-Bitbar/main/Bitbar%20C02%20Signal%20Plugin%20Image.png",
			"dependencies": [
				"python",
				"CO2 Signal"
			],
			"aboutURL": "https://docs.co2signal.com/",
			"lastUpdated": "2021-03-08T15:21:53.069041Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Environment/covid-19_stats.15m.sh",
					"filename": "covid-19_stats.15m.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eCOVID-19 Stats\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eWilson Goode\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ewilsongoode\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays stats of US COVID-19 cases, with a submenu for user-defineable States. Can also be configured to show the top n states.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://github.com/wilsongoode/covid-bitbar/raw/master/screens/covid-19_top15_states.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ejq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/wilsongoode/covid-bitbar\u003c/bitbar.abouturl\u003e\n\n# Setting my Bitbar path to include /usr/local/bin. Systems may vary\nPATH=/usr/local/bin:${PATH}\nexport PATH\nLANG=en_US.UTF-8 # needed in BitBar env for awk to format numbers\nexport LANG\n\n# ==============================DEPENDENCIES=================================\n# This script requires jq for manipulating JSON data.\n# Requires: https://stedolan.github.io/jq/\n# Install via brew:  `brew install jq`\n# ===========================================================================\n\n# ===============================DATA SOURCE=================================\n# This script curls JSON data from the NovelCOVID API, available at:\n# https://corona.lmao.ninja\n# GitHub: https://github.com/novelcovid/api\n# There are a few other APIs or tools for pulling COVID-19 data, several of\n# which point back to this one. v1.0 of this script used a node.js-based CLI\n# to pull data, leading to formatting issues across systems and some\n# inconsistencies in iTerm/Terminal and in the BitBar output.\n# ===========================================================================\n\n\n# ==============================CONFIGURATION================================\n# READ THIS SECTION:\n# Set these variables to configure the output to your liking.\n#\n# Choose which states you want stats for. Any states you add here will\n# be shown within the dropdown menu. Be sure to separate each state in\n# its own parentheses with a space between each string.\n# Example:\n# STATES=(\"North Carolina\" \"New York\" \"California\")\nSTATES=(\"North Carolina\" \"New York\" \"California\")\n#\n# ALTERNATIVE TOP STATES MODE:\n# Instead of choosing states, you can choose to have the top n states ranked\n# by number of cases, where n is a number you set with the variable N_STATES.\n# Comment/uncomment one of the next two lines to set your preference.\nTOP_N=true     # Sets the script to show the top states\n# TOP_N=false    # Sets the script to show user-selected states\n#\n# Set the number of states you want to see when TOP_N is true. The data\n# source has 57 entries, including Puerto Rice, US Virgin Islands, and the\n# Diamond Princess cruise. In case the maintainers add more entries, set the\n# number to something much higher (it won't effect performance)\nN_STATES=500\n# ===========================================================================\n# ==============================SCRIPT BELOW=================================\n\n\n# Modifies settings based on TOP_N configuration\nif [[ $TOP_N = \"true\" ]]; then\n    MOD_STATES=\"$\" # Select every line\n    GREP_LIMIT=\"-m$((2 + N_STATES))\" # Off-by-2 due to header and divider\n    TOP_CONFIG=\"Showing the top $N_STATES states\"\nelse\n    MOD_STATES=\"State\\|---\" # Select header and divider\n    GREP_LIMIT=\"\" # No limit\n    TOP_CONFIG=\"Showing user-selected states\"\n    for state in \"${STATES[@]}\"\n        # Adds each user-selected state to the grep call\n        do\n            MOD_STATES=\"$MOD_STATES\\\\|$state\"\n        done\nfi\n\n# Setting ANSI colors for output with awk.\nRED='\\033[01;31m'\nGREEN='\\033[01;32m'\nYELLOW='\\033[01;33m'\nBLUE='\\033[01;36m'\nNONE='\\033[0m'\n\n# USA data for the menu bar line\ncurl -s https://corona.lmao.ninja/countries/USA |\n    # Manipulates data and exports tab-delimited (tsv)\n    jq -r '. | [.country, .cases, .todayCases, .deaths, .todayDeaths] | @tsv' |\n    # Removes quotes\n    sed -E 's/\"//g' |\n    # Prints numbers with comma as thousands place separators\n    awk -F'\\t' '{ printf \"%s\\t%\\047d\\t%\\047d\\t%\\047d\\t%\\047d\\n\",\n        $1, $2, $3, $4, $5 }' |\n    # Pretty-prints with colors and spacing and emojis\n    awk -v \"r=$RED\" -v \"y=$YELLOW\" -v \"g=$GREEN\" -v \"b=$BLUE\" -v \"n=$NONE\" -F'\\t' \\\n        '{ printf (\"%15s %15s %15s %15s %15s |font=AndaleMono\\n\",\n            n$1, \"üò∑\"b$2, g\"(\"$3\"‚ñ≤)\", \"üíÄ\"r$4, y\"(\"$5\"‚ñ≤)\") }'\necho \"---\"\n\n# STATES data for the submenu\n# HINT: you can change the sort order to one of the following:\n# cases, todayCases, deaths, todayDeaths, recovered, active, critical,\n# casesPerOneMillion, deathsPerOneMillion\n# As the data source updates, it is possible more sort options will be added\ncurl -s https://corona.lmao.ninja/states\\?sort=cases |\n    # Manipulates data and exports tab-delimited (tsv)\n    jq -r '[\"State\", \"Cases\", \"Cases (today)\", \"Deaths\", \"Deaths (today)\"],\n        [\"---\"],\n        (.[] | [.state, .cases, .todayCases, .deaths, .todayDeaths]) | @tsv' |\n    # Removes quotes, shortens a few of the longer names\n    sed -E 's/\"//g;\n        s/District Of Columbia/Washington D.C./;\n        s/Northern Mariana Islands/N. Mariana Islands/;\n        s/United States Virgin Islands/US Virgin Islands/;\n        s/Diamond Princess Cruise/Diamond Princess Cr./' |\n    # Grabs specific states/lines or every line, depending on configuration\n    grep $GREP_LIMIT \"$MOD_STATES\" |\n    # Prints numbers with comma as thousands place separators\n    awk -F'\\t' '{ if ($0 ~ \"State\") { print $0 } else\n        if ($0 ~ \"---\") { print $0 } else\n        { printf \"%s\\t%\\047d\\t%\\047d\\t%\\047d\\t%\\047d\\n\",\n            $1, $2, $3, $4, $5 } }' |\n    # Pretty-prints with colors and spacing\n    awk -v \"r=$RED\" -v \"y=$YELLOW\" -v \"g=$GREEN\" -v \"b=$BLUE\" -v \"n=$NONE\" -F'\\t' \\\n        '{if ($0 ~ \"---\" ) { print $0 } else\n        { printf \"%-30s %20s %30s %20s %30s |font=AndaleMono size=12\\n\",\n            y$1, b$2, g$3\"‚ñ≤\", r$4, y$5\"‚ñ≤\" }}'\necho \"---\"\n\n# WORLD totals for the submenu\ncurl -s https://corona.lmao.ninja/all |\n    # Manipulates data and exports tab-delimited (tsv)\n    jq -r '. | [\"World\", .cases, .todayCases, .deaths, .todayDeaths] | @tsv' |\n    # Removes quotes\n    sed -E 's/\"//g' |\n    # Prints numbers with comma as thousands place separators\n    awk -F'\\t' '{ printf \"%s\\t%\\047d\\t%\\047d\\t%\\047d\\t%\\047d\\n\",\n        $1, $2, $3, $4, $5 }' |\n    # Pretty-prints with colors and spacing\n    awk -v \"r=$RED\" -v \"y=$YELLOW\" -v \"g=$GREEN\" -v \"b=$BLUE\" -v \"n=$NONE\" -F'\\t' \\\n        '{ printf \"%-30s %20s %30s %20s %30s |font=AndaleMono size=12\\n\",\n            y$1, b$2, g$3\"‚ñ≤\", r$4, y$5\"‚ñ≤\"}'\necho \"---\"\necho \"Configuration: $TOP_CONFIG\"\necho \"Refresh | refresh=true\"\n"
				}
			],
			"path": "Environment/covid-19_stats.15m.sh",
			"filename": "covid-19_stats.15m.sh",
			"dir": "Environment",
			"docsPlugin": "Environment/covid-19_stats.15m.sh.html",
			"docsCategory": "Environment.html",
			"pathSegments": [
				"Environment"
			],
			"categoryPathSegments": [
				{
					"path": "Environment",
					"text": "Environment",
					"isLast": true
				}
			],
			"title": "COVID-19 Stats",
			"version": "v1.1",
			"author": "Wilson Goode",
			"authors": [
				{
					"name": "Wilson",
					"githubUsername": "wilsongoode",
					"imageURL": "https://avatars.githubusercontent.com/u/45737196?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays stats of US COVID-19 cases, with a submenu for user-defineable States. Can also be configured to show the top n states.",
			"imageURL": "https://github.com/wilsongoode/covid-bitbar/raw/master/screens/covid-19_top15_states.png",
			"dependencies": [
				"jq"
			],
			"aboutURL": "https://github.com/wilsongoode/covid-bitbar",
			"lastUpdated": "2021-03-08T15:21:53.222393Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Environment/covid-19_today.15m.sh",
					"filename": "covid-19_today.15m.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eCOVID-19 Today\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eCartoonChess\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecartoonchess\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays changes in daily and average COVID-19 cases for a given country.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://user-images.githubusercontent.com/43363630/93694795-da7d0700-fb4a-11ea-875b-02f29152e929.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash,jq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/cartoonchess/bitbar-covid-19-today\u003c/bitbar.abouturl\u003e\n\n# ==============================CONFIGURATION================================\n# Set these variables to configure the output to your liking.\n# The country must be a two- or three-letter country code.\nCOUNTRY=\"kr\"\nSHOW_CASES_TODAY_BESIDE_ICON=true\n# ===========================================================================\n\n\n\n# ==============================DEPENDENCIES=================================\n# This script requires jq for manipulating JSON data.\n# Requires: https://stedolan.github.io/jq/\n# Install via brew:  `brew install jq`\n# ===========================================================================\n\n# ===============================DATA SOURCE=================================\n# This script curls JSON data from disease.sh, the Open Disease API:\n# https://disease.sh/\n# GitHub: https://github.com/disease-sh/api\n# ===========================================================================\n\n# ================================PRIOR ART==================================\n# This script is a modified version of:\n# covid-bitbar\n# https://github.com/wilsongoode/covid-bitbar\n# by Wilson Good\n# Check there for a version with detailed stats for the US.\n# Many thanks!\n# ===========================================================================\n\n\n\n# Setting my Bitbar path to include /usr/local/bin. Systems may vary\n# jq fails without this\nPATH=/usr/local/bin:${PATH}\nexport PATH\nLANG=en_US.UTF-8 # needed in BitBar env for awk to format numbers\nexport LANG\n\n\n\n# Test for jq\n\nJSON_PARSER=\"jq\"\nif [ ! $(command -v $JSON_PARSER) ]; then\n    echo \"‚ö†\"\n    echo \"---\"\n    echo \"$JSON_PARSER Not Installed\"\n    echo \"Install ${JSON_PARSER}‚Ä¶ | href=https://stedolan.github.io/${JSON_PARSER}/download/\"\n    echo \"---\"\n    echo \"Refresh | refresh=true\"\n    exit\nfi\n\n\n\n# Methods\n\n# Return the singular or plural form of a word based on some count\n# Usage:\n# COUNT=15\n# echo \"I have $COUNT $(plural $COUNT 'bee' 'bees')\"\n# Output: I have 15 bees\nplural() {\n    COUNT=$1\n    SINGULAR=$2\n    PLURAL=$3\n    if [ $COUNT = 1 ]; then\n        echo $SINGULAR\n    else\n        echo $PLURAL\n    fi\n}\n\n# Return number with comma as thousands place separator\n# Usage:\n# BIG_NUM=1500\n# echo \"I have $(commas $BIG_NUM) bees\"\n# Output: I have 1,500 bees\ncommas() {\n    echo $(awk 'BEGIN{printf \"%\\047d\\n\", '$1'}')\n}\n\n\n\n# Get the three-letter country code to link to a detailed graph\n\nCOUNTRY_DATA=$(curl -s https://disease.sh/v3/covid-19/countries/$COUNTRY)\n\n# Maybe the server is down?\nif [ -z \"$COUNTRY_DATA\" ]; then\n    echo \"‚ö†\"\n    echo \"---\"\n    echo \"No Information\"\n    echo \"Refresh | refresh=true\"\n    exit\nfi\n\nCOUNTRY_CODE=$(echo $COUNTRY_DATA |\n    jq '.countryInfo.iso3' |\n    sed -E 's/\"//g'\n    )\n\n# If there's no country code, there's a problem with the data\n# jq returns a literal string \"null\", NOT a null value\nif [ $COUNTRY_CODE = \"null\" ]; then\n    echo \"‚ö†\"\n    echo \"---\"\n    echo \"Invalid Country Code\"\n    echo \"Use a two- or three-letter code in the script\"\n    echo \"Open Plugin Folder‚Ä¶ | href=file://${0%/*}/\"\n    echo \"---\"\n    echo \"Refresh | refresh=true\"\n    exit\nfi\n\n    \n\n# Fetch various numbers\n# Somehow this data seems more reliable than the data above.\n# Namely, it often reports zero new cases when that simply isn't true.\n\nHISTORICAL_DATA=$(curl -s https://disease.sh/v3/covid-19/historical/$COUNTRY\\?lastdays=3)\nCOUNTRY_NAME=$(echo $HISTORICAL_DATA |\n    jq '.country' |\n    # Remove quotation marks\n    sed -E 's/\"//g'\n    )\n\nCASES_TODAY=$(echo $HISTORICAL_DATA |\n    jq '[.timeline.cases[]] | sort | .[-1] - .[-2]'\n    )\n    \nCASES_YESTERDAY=$(echo $HISTORICAL_DATA |\n    jq '[.timeline.cases[]] | sort | .[-2] - .[-3]'\n    )\n    \nTOTAL_CASES=$(\n    echo $HISTORICAL_DATA |\n    jq '[.timeline.cases[]] | sort | .[-1]'\n    )\n   \n   \n    \n# Calculate daily stats\n\nTODAY=$(date +%s)\n# Data begins at 2020-01-22\n# Mac-specific formatting; Linux would require a change\nDAY_ONE=$(date -jf \"%Y-%m-%d\" \"2020-01-22\" +%s)\nTOTAL_DAYS=$((($TODAY-$DAY_ONE)/(3600*24)))\nDAILY_AVERAGE=$(($TOTAL_CASES/$TOTAL_DAYS))\n\nTODAY_VS_YESTERDAY=$(($CASES_TODAY-$CASES_YESTERDAY))\nTODAY_VS_AVERAGE=$(($CASES_TODAY-$DAILY_AVERAGE))\n\n\n\n# Determine differences and format strings\n\n# Absolute value of difference between new cases today and yesterday\nif [ $TODAY_VS_YESTERDAY = 0 ]; then\n    DAILY_DIFFERENCE=\"‚ñ∂ No more\" # ‚Äî\nelif [ $TODAY_VS_YESTERDAY -lt 0 ]; then\n    DAILY_DIFFERENCE=$((-$TODAY_VS_YESTERDAY))\n    # awk prints numbers with comma as thousands place separators\n    DAILY_DIFFERENCE=$(commas $DAILY_DIFFERENCE)\n    DAILY_DIFFERENCE=\"‚ñº $DAILY_DIFFERENCE fewer\"\nelse\n    DAILY_DIFFERENCE=$(commas $TODAY_VS_YESTERDAY)\n    DAILY_DIFFERENCE=\"‚ñ≤ $DAILY_DIFFERENCE more\"\nfi\n\n# Absolute value of difference between total cases today and daily average\nif [ $TODAY_VS_AVERAGE = 0 ]; then\n    AVERAGE_DIFFERENCE=\"‚¶µ No more\" # ‚Äî‚Éù\nelif [ $TODAY_VS_AVERAGE -lt 0 ]; then\n    AVERAGE_DIFFERENCE=$((-$TODAY_VS_AVERAGE))\n    AVERAGE_DIFFERENCE=$(commas $AVERAGE_DIFFERENCE)\n    AVERAGE_DIFFERENCE=\"‚ÄîÃ• $AVERAGE_DIFFERENCE fewer\" # ‚èÅ‚ÄîÃ•‚Éù\nelse\n    AVERAGE_DIFFERENCE=$(commas $TODAY_VS_AVERAGE)\n    AVERAGE_DIFFERENCE=\"‚ÄîÃä $AVERAGE_DIFFERENCE more\" # ‚èÇ‚ÄîÃä‚Éù\nfi\n\n\n\n# Show menu bar item\n# TODO: What about \"break even\" icons??\n\n# ‚§â‚§à‚§í‚§ì ‚ñºÃÖ‚ñºÃ≤‚ñ≤ÃÖ‚ñ≤Ã≤ ‚§â‚Éù‚§à‚Éù‚§í‚Éù‚§ì‚Éù ‚ñºÃÖ‚Éù‚ñºÃ≤‚Éù‚ñ≤ÃÖ‚Éù‚ñ≤Ã≤‚Éù\nif [ $TODAY_VS_YESTERDAY = 0 ]; then\n    if [ $TODAY_VS_AVERAGE = 0 ]; then\n        ICON=\"‚¶µ\"\n    elif [ $TODAY_VS_AVERAGE -lt 0 ]; then\n        ICON=\"‚ÄîÃ•\"\n    else\n        ICON=\"‚ÄîÃä\"\n    fi\nelif [ $TODAY_VS_YESTERDAY -lt 0 ]; then\n    if [ $TODAY_VS_AVERAGE = 0 ]; then\n        # This and its upward equivalent render without strikethrough without other text\n        # i.e. If not showing daily count, only the triangle appears\n        ICON=\"‚ñΩÃ∂\"\n    elif [ $TODAY_VS_AVERAGE -lt 0 ]; then\n        ICON=\"‚§à\"\n    else\n        ICON=\"‚§ì\"\n    fi\nelse\n    if [ $TODAY_VS_AVERAGE = 0 ]; then\n        ICON=\"‚ñ≥Ã∂\"\n    elif [ $TODAY_VS_AVERAGE -lt 0 ]; then\n        ICON=\"‚§í\"\n    else\n        ICON=\"‚§â\"\n    fi\nfi\n\nCASES_TODAY_FORMATTED=$(commas $CASES_TODAY)\nif [ $SHOW_CASES_TODAY_BESIDE_ICON = true ]; then\n    ICON=\"$ICON $CASES_TODAY_FORMATTED\"\nfi\n\necho $ICON\necho \"---\"\n\n\n\n# Show dropdown details\n\n# Total new cases today\n# Add \"s\" for plural, if plural\necho \"$CASES_TODAY_FORMATTED new $(plural $CASES_TODAY 'case' 'cases') today in $COUNTRY_NAME | href=https://ourworldindata.org/coronavirus-data-explorer?interval=daily\u0026country=$COUNTRY_CODE\"\n\necho $DAILY_DIFFERENCE\" new $(plural $TODAY_VS_YESTERDAY 'case' 'cases') than yesterday\"\necho $AVERAGE_DIFFERENCE\" daily $(plural $TODAY_VS_AVERAGE 'case' 'cases') than average\"\n\n\n\n# Options\n\necho \"---\"\necho \"Update | refresh=true\"\necho \"Settings\"\necho \"-- Edit the plugin directly to:\"\necho \"-- ‚Ä¢ Change the country\"\necho \"-- ‚Ä¢ Show or hide daily cases beside icon\"\necho \"-----\"\necho \"-- Open Plugin Folder‚Ä¶ | href=file://${0%/*}/\"\n"
				}
			],
			"path": "Environment/covid-19_today.15m.sh",
			"filename": "covid-19_today.15m.sh",
			"dir": "Environment",
			"docsPlugin": "Environment/covid-19_today.15m.sh.html",
			"docsCategory": "Environment.html",
			"pathSegments": [
				"Environment"
			],
			"categoryPathSegments": [
				{
					"path": "Environment",
					"text": "Environment",
					"isLast": true
				}
			],
			"title": "COVID-19 Today",
			"version": "v1.0.0",
			"author": "CartoonChess",
			"authors": [
				{
					"name": "CartoonChess",
					"githubUsername": "cartoonchess",
					"imageURL": "https://avatars.githubusercontent.com/u/43363630?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays changes in daily and average COVID-19 cases for a given country.",
			"imageURL": "https://user-images.githubusercontent.com/43363630/93694795-da7d0700-fb4a-11ea-875b-02f29152e929.png",
			"dependencies": [
				"bash",
				"jq"
			],
			"aboutURL": "https://github.com/cartoonchess/bitbar-covid-19-today",
			"lastUpdated": "2021-03-08T15:21:53.251459Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Environment/corona.1h.sh",
					"filename": "corona.1h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eCorona info\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJoakim Ramer\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejramer\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows corona virus data from https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6 and alerts you when the corona virus comes to your country.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash, curl, jq, fping\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://github.com/jramer/bitbar-corona/raw/master/corona_info.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/jramer/bitbar-corona\u003c/bitbar.abouturl\u003e\n\nCOUNTRY='Sweden'\nCOUNTRY_FLAG='üá∏üá™'\nWARNING_THRESHOLD=0\n\nFPING_PATH=/usr/local/bin/fping\nCURL_PATH=/usr/bin/curl\nJQ_PATH=/usr/local/bin/jq\n\nAPI_URL='https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query'\nPARAMS='f=json\u0026where=1%3D1\u0026returnGeometry=false\u0026spatialRel=esriSpatialRelIntersects\u0026outFields=*\u0026orderByFields=Confirmed%20desc\u0026resultOffset=0\u0026resultRecordCount=250\u0026cacheHint=true'\n\n# Check internet\nCOUNT=6\nuntil (( COUNT == 0 ))\ndo\n  if $FPING_PATH -c1 -t300 8.8.8.8 2\u003e/dev/null 1\u003e/dev/null\n  then\n    break\n  fi\n\n  if (( --COUNT == 0 ))\n  then\n    echo \"-\"\n    exit\n  fi\n\n  sleep 10\ndone\n\nRESPONSE=$($CURL_PATH -s -X GET \"$API_URL?$PARAMS\" -H 'Accept: application/json')\nCONFIRMED=$(echo \"$RESPONSE\" | $JQ_PATH \"[.features[].attributes.Confirmed] | reduce .[] as \\$num (0; .+\\$num)\")\nDEATHS=$(echo \"$RESPONSE\" | $JQ_PATH \"[.features[].attributes.Deaths] | reduce .[] as \\$num (0; .+\\$num)\")\nRECOVERED=$(echo \"$RESPONSE\" | $JQ_PATH \"[.features[].attributes.Recovered] | reduce .[] as \\$num (0; .+\\$num)\")\nCOUNTRIES_INFECTED=$(echo \"$RESPONSE\" | $JQ_PATH \".features | length\")\n\nIN_COUNTRY=$(echo \"$RESPONSE\" | $JQ_PATH \"[.features[].attributes.Country_Region] | map(select(. == \\\"$COUNTRY\\\")) | if . == [] then \\\"false\\\" else \\\"true\\\" end\")\n\nif [ \"$IN_COUNTRY\" = '\"true\"' ]\nthen\n   COUNTRY_CONFIRMED=$(echo \"$RESPONSE\" | $JQ_PATH \"[.features[].attributes] | map(select(.Country_Region == \\\"$COUNTRY\\\")) | .[].Confirmed\")\n   COUNTRY_DEATHS=$(echo \"$RESPONSE\" | $JQ_PATH \"[.features[].attributes] | map(select(.Country_Region == \\\"$COUNTRY\\\")) | .[].Deaths\")\n   COUNTRY_RECOVERED=$(echo \"$RESPONSE\" | $JQ_PATH \"[.features[].attributes] | map(select(.Country_Region == \\\"$COUNTRY\\\")) | .[].Recovered\")\n\n   if [ \"$COUNTRY_CONFIRMED\" -gt \"$WARNING_THRESHOLD\" ]; then\n      echo \"$COUNTRY_FLAG üî¥ üò∑\"\n   else\n      echo \"$COUNTRY_FLAG üü¢\"\n  fi\n   echo \"---\"\n   echo \"$COUNTRY: | color=white\"\n   echo \"üò∑ $COUNTRY_CONFIRMED\"\n   echo \"‚ò†Ô∏è $COUNTRY_DEATHS | color=red\"\n   echo \"üòá $COUNTRY_RECOVERED | color=green\"\nelse\n   echo \"$COUNTRY_FLAG üü¢\"\nfi\n\necho \"---\"\necho \"The World: | color=white\"\necho \"üò∑ $CONFIRMED\"\necho \"‚ò†Ô∏è $DEATHS | color=red\"\necho \"üòá $RECOVERED | color=green\"\necho \"üó∫ $COUNTRIES_INFECTED\"\necho \"---\"\necho \"‚Üª - Refresh| terminal=false refresh=true\"\necho \"üåç Check data origin | href=https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\"\n"
				}
			],
			"path": "Environment/corona.1h.sh",
			"filename": "corona.1h.sh",
			"dir": "Environment",
			"docsPlugin": "Environment/corona.1h.sh.html",
			"docsCategory": "Environment.html",
			"pathSegments": [
				"Environment"
			],
			"categoryPathSegments": [
				{
					"path": "Environment",
					"text": "Environment",
					"isLast": true
				}
			],
			"title": "Corona info",
			"version": "v1.0",
			"author": "Joakim Ramer",
			"authors": [
				{
					"name": "Joakim Ramer",
					"githubUsername": "jramer",
					"imageURL": "https://avatars.githubusercontent.com/u/743717?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows corona virus data from https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6 and alerts you when the corona virus comes to your country.",
			"imageURL": "https://github.com/jramer/bitbar-corona/raw/master/corona_info.png",
			"dependencies": [
				"bash",
				"curl",
				"jq",
				"fping"
			],
			"aboutURL": "https://github.com/jramer/bitbar-corona",
			"lastUpdated": "2021-03-08T15:21:53.187228Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Environment/quake.1m.sh",
					"filename": "quake.1m.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eRecent Big Earthquake\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAaron Edell\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eaaronedell\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays the most significant earthquakes in the last 30 days from http://earthquake.usgs.gov \u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/lF8Qdpk.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eBash GNU AWK\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://earthquake.usgs.gov\u003c/bitbar.abouturl\u003e\n\n\n\necho 'üåé'\necho '---'\n\necho ; curl -s https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.csv | tail -n +2 | awk -F\",\" '{print $5\" \" $14$15}'\necho '---'\necho 'Data from http://earthquake.usgs.gov | color=green href=http://earthquake.usgs.gov'\n\n\n\n"
				}
			],
			"path": "Environment/quake.1m.sh",
			"filename": "quake.1m.sh",
			"dir": "Environment",
			"docsPlugin": "Environment/quake.1m.sh.html",
			"docsCategory": "Environment.html",
			"pathSegments": [
				"Environment"
			],
			"categoryPathSegments": [
				{
					"path": "Environment",
					"text": "Environment",
					"isLast": true
				}
			],
			"title": "Recent Big Earthquake",
			"version": "v1.1",
			"author": "Aaron Edell",
			"authors": [
				{
					"name": "AaronEdell",
					"githubUsername": "aaronedell",
					"imageURL": "https://avatars.githubusercontent.com/u/11819814?v=4",
					"bio": "Not a good developer",
					"primary": true
				}
			],
			"desc": "Displays the most significant earthquakes in the last 30 days from http://earthquake.usgs.gov ",
			"imageURL": "http://i.imgur.com/lF8Qdpk.png",
			"dependencies": [
				"Bash GNU AWK"
			],
			"aboutURL": "http://earthquake.usgs.gov",
			"lastUpdated": "2021-03-08T15:21:53.290565Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Environment/solaredge.5m.py",
					"filename": "solaredge.5m.py",
					"content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eSolarEdge Monitoring\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eShaun Grady\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eshaungrady\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays SolarEdge inverter power and energy generation data from your solar energy system. Also calculates system efficiency for the current day and total CO2 offset.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/W4ygbPd.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003esolaredge,python\u003c/bitbar.dependencies\u003e\n\n####################\n# User Configuration\n\nsolaredge_site_id = \"\"\nsolaredge_api_key = \"\"\n\n# Optional. Set to 0 to disable. Total panel DC watt capacity\nsystem_wattage = 0\n\n# Optional. Set to 0 to disable. Find CO2 lbs/MWh for your subregion in the PDF linked below.\n# (Use the \"Non-baseload output emission rates\" figure for your subregion)\n# https://www.epa.gov/sites/production/files/2015-10/documents/egrid2012_summarytables_0.pdf\nco2_lbs_per_MWh = 1018.87  # California\n\n# Optional. Set either as empty string to disable.\nawake_icon = \"‚òÄÔ∏é\"\nasleep_icon = \"‚òæ\"\n\n\n##############\n# Begin Script\n\ndef formatWatts (Wh, unit_suffix=\"\"):\n    Wh = float(Wh)\n\n    if Wh \u003c 900:\n        energy = Wh\n        unit = \"W\"\n    elif Wh \u003c 900000:\n        energy = Wh / 1000\n        unit = \"kW\"\n    elif Wh \u003c 900000000:\n        energy = Wh / 1000000\n        unit = \"MW\"\n    elif Wh \u003c 900000000000:\n        energy = Wh / 1000000000\n        unit = \"GW\"\n\n    if energy \u003c 10:\n        energy = round(energy, 2)\n    elif energy \u003c 100:\n        energy = round(energy, 1)\n    else:\n        energy = int(round(energy))\n\n    return str(energy) + \" \" + unit + unit_suffix\n\nif solaredge_site_id == \"\" or solaredge_api_key == \"\":\n    raise SystemExit(\"Site ID/API Key Required\")\n\nimport urllib2\nimport json\n\noverview = \"https://monitoringapi.solaredge.com/site/\" + solaredge_site_id + \"/overview?api_key=\" + solaredge_api_key\n\ntry:\n    result = urllib2.urlopen(overview, timeout = 10).read()\n    json = json.loads(result)\nexcept Exception, err:\n    print(asleep_icon + \" \u003cerr\u003e\")\n    print(\"---\")\n    raise SystemExit(err)\n\nraw_power = json['overview']['currentPower']['power']\nraw_energy = json['overview']['lastDayData']['energy']\n\nif system_wattage \u003e 0:\n    raw_efficiency = raw_energy / system_wattage\n\nraw_energy_mtd = json['overview']['lastMonthData']['energy']\nraw_energy_ytd = json['overview']['lastYearData']['energy']\nraw_energy_total = json['overview']['lifeTimeData']['energy']\n\n# Handle strange API bug where energy total can be much less than YTD\nif raw_energy_ytd \u003e raw_energy_total:\n    raw_energy_total = raw_energy_ytd\n\nenergy_mtd = formatWatts(raw_energy_mtd, \"h\")\nenergy_ytd = formatWatts(raw_energy_ytd, \"h\")\nenergy_total = formatWatts(raw_energy_total, \"h\")\n\nif co2_lbs_per_MWh \u003e 0:\n    offset = (float(raw_energy_total) / 1000000) * co2_lbs_per_MWh\n    unit = \"lbs\"\n    if offset \u003e 1900:\n        co2_offset = offset / 2000\n        unit = \"tons\"\n\n    if co2_offset \u003c 10:\n        co2_offset = round(co2_offset, 2)\n    elif co2_offset \u003c 100:\n        co2_offset = round(co2_offset, 1)\n    else:\n        o2_offset = \"{:,}\".format(int(round()))\n\n    co2_offset = str(co2_offset) + \" \" + unit\n\n# Human-friendly power, energy, efficiency strings\npower = formatWatts(raw_power)\nenergy = formatWatts(raw_energy, \"h\")\nif system_wattage \u003e 0:\n    efficiency = \"%.2f\" % raw_efficiency + \" Wh/W\"\n\n# Formulate output string\nif raw_energy == 0 and raw_power == 0:\n    toolbar_output = \"‚Äî Wh\"\nelif raw_power == 0:\n    toolbar_output = energy\nelse:\n    toolbar_output = energy + \" @ \" + power\n\n# Icon\nif raw_power == 0 and asleep_icon:\n    icon_prefix = asleep_icon + \" \"\nelif raw_power \u003e 0 and awake_icon:\n    icon_prefix = awake_icon + \" \"\nelse:\n    icon_prefix = \"\"\n\n\n# Print the data\nprint(icon_prefix + toolbar_output + \"| font='SF Compact Text Regular'\")\n\nif system_wattage \u003e 0:\n    print(\"---\")\n    print(efficiency + \" efficiency | href:https://monitoring.solaredge.com/\")\n\nprint(\"---\")\nprint(energy_mtd + \" this month | href:https://monitoring.solaredge.com/\")\nprint(energy_ytd + \" this year | href:https://monitoring.solaredge.com/\")\n# If YTD and lifetime energy are within 1 kWh, consider them equal and\n# suppress the total energy data from the dropdown menu\nif raw_energy_total - raw_energy_ytd \u003e 1000:\n    print(energy_total + \" lifetime | href:https://monitoring.solaredge.com/\")\n\nif co2_lbs_per_MWh \u003e 0:\n    print(\"---\")\n    print(co2_offset + \" CO‚ÇÇ offset | href:https://monitoring.solaredge.com/\")\n\n# print(\"---\")\n# print(json['overview']['lastUpdateTime'] + \" | size:11\")\n"
				}
			],
			"path": "Environment/solaredge.5m.py",
			"filename": "solaredge.5m.py",
			"dir": "Environment",
			"docsPlugin": "Environment/solaredge.5m.py.html",
			"docsCategory": "Environment.html",
			"pathSegments": [
				"Environment"
			],
			"categoryPathSegments": [
				{
					"path": "Environment",
					"text": "Environment",
					"isLast": true
				}
			],
			"title": "SolarEdge Monitoring",
			"version": "v1.1",
			"author": "Shaun Grady",
			"authors": [
				{
					"name": "Shaun Grady",
					"githubUsername": "shaungrady",
					"imageURL": "https://avatars.githubusercontent.com/u/52413?v=4",
					"bio": "Senior front end web developer, Angular enthusiast, design nerd. He/him.",
					"primary": true
				}
			],
			"desc": "Displays SolarEdge inverter power and energy generation data from your solar energy system. Also calculates system efficiency for the current day and total CO2 offset.",
			"imageURL": "http://i.imgur.com/W4ygbPd.png",
			"dependencies": [
				"solaredge",
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:53.314351Z",
			"vars": null
		}
	]
}