{
	"plugins": [
		{
			"files": [
				{
					"path": "Finance/currency-rates.1h.py",
					"filename": "currency-rates.1h.py",
					"content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# \u003cbitbar.title\u003eCurrency Rates\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eParvez\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eparvez\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays Currency Rates\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/Q1PuzbN.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/parvez/bitbar-plugins\u003c/bitbar.abouturl\u003e\n#\n# by Parvez\n\nimport urllib2\nrateRequest = urllib2.Request(url='http://wu-converter.apple.com/dgw?apptype=finance', data='\u003c?xml version=\"1.0\" encoding=\"utf8\"?\u003e\u003crequest app=\"YGoAppleCurrencyWidget\" appver=\"1.0\" api=\"finance\" apiver=\"1.0.0\"\u003e\u003cquery id=\"0\" type=\"convertcurrency\"\u003e\u003cfrom/\u003e\u003cto/\u003e\u003camount/\u003e\u003c/query\u003e\u003c/request\u003e',headers={'Content-Type': 'text/xml'})\nrateResponse = urllib2.urlopen(rateRequest).read()\n\nfrom xml.dom import minidom\nxmlResponse = minidom.parseString(rateResponse)\nxmlConversionList = xmlResponse.getElementsByTagName('conversion')\n\nlist = []\nfor item in xmlConversionList:\n    nValue1 = item.childNodes[1].firstChild.nodeValue\n    nValue2 = str(round(float(item.childNodes[3].firstChild.nodeValue), 2))\n    if nValue1 == \"INR\":\n        primaryValue = 'Rs ' + nValue2\n    elif nValue1 == \"USD\":\n        discard = ''\n    else:\n        list.append(nValue1 + ': ' + nValue2)\n\nprint primaryValue\nprint (\"---\")\n\nlist.sort()\nfor item in list:\n    print item + ' | font=Monaco size=11'\n"
				}
			],
			"path": "Finance/currency-rates.1h.py",
			"filename": "currency-rates.1h.py",
			"dir": "Finance",
			"docsPlugin": "Finance/currency-rates.1h.py.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Currency Rates",
			"version": "v1.0",
			"author": "Parvez",
			"authors": [
				{
					"name": "Parvez",
					"githubUsername": "parvez",
					"imageURL": "https://avatars.githubusercontent.com/u/126749?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays Currency Rates",
			"imageURL": "http://i.imgur.com/Q1PuzbN.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/parvez/bitbar-plugins",
			"lastUpdated": "2021-03-08T15:21:53.356435Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/currency-tracker.1h.py",
					"filename": "currency-tracker.1h.py",
					"content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eCurrency Tracker\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMaxime Bertheau\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emaxoumime\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eKeep an eye on the currencies you choose from your menu bar !\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://nothingreally.botler.me/bitbar.currency-tracker.png\u003c/bitbar.image\u003e\n\nimport urllib2\nimport json\n\n# Write here the currencies you want to see\n\n# Base comparaison currency\ncurrFrom = \"EUR\"\n# Array of tracked currencies\ncurrTo = [\"CAD\", \"USD\"]\n\nurlParamTo = currTo[0]\nif len(currTo) \u003e 1:\n    urlParamTo = \",\".join(currTo)\n\nurl = \"https://api.exchangeratesapi.io/latest?base=\" + currFrom + \"\u0026symbols=\" + urlParamTo\n\nresult = urllib2.urlopen(url).read()\n\njsonCurr = json.loads(result)\n\nrates = jsonCurr[\"rates\"]\nkeys = rates.keys()\n\nfor key in reversed(keys):\n\t# round down to four decimals\n\tprint key + \": \" + (\"%.4f\" % rates[key])\n\nprint \"---\"\nprint \"From: \" + currFrom\n"
				}
			],
			"path": "Finance/currency-tracker.1h.py",
			"filename": "currency-tracker.1h.py",
			"dir": "Finance",
			"docsPlugin": "Finance/currency-tracker.1h.py.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Currency Tracker",
			"version": "1.0",
			"author": "Maxime Bertheau",
			"authors": [
				{
					"name": "Maxime Bertheau",
					"githubUsername": "maxoumime",
					"imageURL": "https://avatars.githubusercontent.com/u/3897798?v=4",
					"bio": "Android Engineer @ FrontApp",
					"primary": true
				}
			],
			"desc": "Keep an eye on the currencies you choose from your menu bar !",
			"imageURL": "https://nothingreally.botler.me/bitbar.currency-tracker.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:53.469936Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/transferwise-currency-tracker.1m.py",
					"filename": "transferwise-currency-tracker.1m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eCurrency Tracker Transferwise\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAndrew Keating\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eandrewzk\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eKeep an eye on Transferwise currency exchange rates\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://andrewzk.github.io/gh-pages/transferwise.png\u003c/bitbar.image\u003e\n\nimport urllib2\nimport json\n\nTRANSFERWISE_KEY = \"dad99d7d8e52c2c8aaf9fda788d8acdc\"\n\n# Replace with desired currencies\ncurrency_from = 'USD'\ncurrency_to = 'DKK'\n\nurl = \"https://transferwise.com/api/v1/payment/calculate?amount=1\" \\\n      \"\u0026amountCurrency=source\u0026hasDiscount=false\u0026isFixedRate=false\" \\\n      \"\u0026isGuaranteedFixedTarget=false\" \\\n      \"\u0026sourceCurrency={}\u0026targetCurrency={}\".format(currency_from, currency_to)\n\nreq = urllib2.Request(url)\nreq.add_header('X-Authorization-key', TRANSFERWISE_KEY)\n\nresult = json.loads(urllib2.urlopen(req).read())['transferwiseRate']\n\nprint \"{}: {:.2f}\".format(currency_to, result)\nprint \"---\"\nprint \"From: {}\".format(currency_from)\n"
				}
			],
			"path": "Finance/transferwise-currency-tracker.1m.py",
			"filename": "transferwise-currency-tracker.1m.py",
			"dir": "Finance",
			"docsPlugin": "Finance/transferwise-currency-tracker.1m.py.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Currency Tracker Transferwise",
			"version": "1.0",
			"author": "Andrew Keating",
			"authors": [
				{
					"name": "Andrew Keating",
					"githubUsername": "andrewzk",
					"imageURL": "https://avatars.githubusercontent.com/u/2158864?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Keep an eye on Transferwise currency exchange rates",
			"imageURL": "http://andrewzk.github.io/gh-pages/transferwise.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:54.033863Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/exchange-rates.5m.sh",
					"filename": "exchange-rates.5m.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eExchange Rates\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMehmet Akif T√ºt√ºnc√º\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emakiftutuncu\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://github.com/makiftutuncu/exchange-bitbar/raw/master/Screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eThis is a BitBar plugin for showing exchange rates of currencies in your menu bar. See https://github.com/makiftutuncu/exchange-bitbar#configuration for configuration.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eshell,curl,jq\u003c/bitbar.dependencies\u003e\n#\n# Exchange Rates by Mehmet Akif T√ºt√ºnc√º\n#\n# This is a BitBar plugin for showing exchange rates of currencies in your menu bar.\n# See https://github.com/makiftutuncu/exchange-bitbar#configuration for configuration.\n\nexport PATH=\"/usr/local/bin:$PATH\"\n\n# Currency pairs for which rates will show as array\nCURRENCY_PAIRS=(\"USD-TRY\" \"EUR-TRY\")\n\nfor pair in \"${CURRENCY_PAIRS[@]}\";\ndo\n  URL=$(echo $pair | awk -F '-' '{print \"https://akifs-exchange-api.herokuapp.com/rates?source=\"$1\"\u0026target=\"$2}')\n  RESPONSE=$(curl -s -X GET $URL | jq -r '\"\\(.source),\\(.target),\\(.rate)\"')\n  echo $RESPONSE | awk -F ',' '{printf \"üíµ %s-%s: %0.3f\\n\", $1, $2, $3}'\ndone\n"
				}
			],
			"path": "Finance/exchange-rates.5m.sh",
			"filename": "exchange-rates.5m.sh",
			"dir": "Finance",
			"docsPlugin": "Finance/exchange-rates.5m.sh.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Exchange Rates",
			"version": "v1.0",
			"author": "Mehmet Akif T√ºt√ºnc√º",
			"authors": [
				{
					"name": "Mehmet Akif T√ºt√ºnc√º",
					"githubUsername": "makiftutuncu",
					"imageURL": "https://avatars.githubusercontent.com/u/1009191?v=4",
					"bio": "üë®üèª Computer Engineer, human of 1 (one) cat -\r\nüíª @numbrs, previously @sahibinden, @vngrs -\r\nüéì IZTECH",
					"primary": true
				}
			],
			"desc": "This is a BitBar plugin for showing exchange rates of currencies in your menu bar. See https://github.com/makiftutuncu/exchange-bitbar#configuration for configuration.",
			"imageURL": "https://github.com/makiftutuncu/exchange-bitbar/raw/master/Screenshot.png",
			"dependencies": [
				"shell",
				"curl",
				"jq"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:53.456927Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/ginmon.1d.sh",
					"filename": "ginmon.1d.sh",
					"content": "#!/bin/bash\n\n# Add your Ginmon account via `$ security add-generic-password -a \"\u003cusername\u003e\" -s ginmonbitbar -w \"\u003cpassword\u003e\"`\n# \u003cbitbar.title\u003eGinmon daily performance\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJonas Bach\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejbach\u003c/bitbar.author.github\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.desc\u003eShows daily performance of Ginmon funds. Add account via `$ security add-generic-password -a \"\u003cusername\u003e\" -s ginmonbitbar -w \"\u003cpassword\u003e\"`.\u003c/bitbar.desc\u003e\n\n# get user/pass from keychan\nSEC=$(security find-generic-password -s ginmonbitbar -g 2\u003e\u00261)\nUSER=$(echo \"$SEC\" | grep \"acct\" | cut -d \\\" -f 4)\nPASS=$(echo \"$SEC\" | grep \"password\" | cut -d \\\" -f 2)\n\nif [ -z \"$USER\" ] || [ -z \"$PASS\" ]; then\n\techo \"Account details missing | color=red\"\n\texit 0\nfi\n\n# create temporary file\nTMP=$(mktemp)\n\n# login\ncurl 'https://kundencenter.ginmon.de/login' --silent -L -A 'Mozilla/5.0' --cookie-jar \"$TMP\" \u003e/dev/null\nHTML=$(curl 'https://kundencenter.ginmon.de/login' --silent -L -A 'Mozilla/5.0' --data-urlencode \"_username=$USER\" --data-urlencode \"\u0026_password=$PASS\" --cookie \"$TMP\" | tr -d '\\040\\011\\012\\015')\n\n# get number\nPOSITIVE=$(echo \"$HTML\" | grep -o 'valuepercentpositive\"\u003e[[:digit:],]*' | cut -d '\u003e' -f 2)\nNEGATIVE=$(echo \"$HTML\" | grep -o 'valuepercentnegative\"\u003e[[:digit:],]*' | cut -d '\u003e' -f 2)\n\n# output\nif [ ! -z \"$POSITIVE\" ]; then\n\tSUM=$(echo \"$HTML\" | grep -o 'valuecurrency-eurpositive\"\u003e[\\.[:digit:],]*' | cut -d '\u003e' -f 2)\n\techo \"+$POSITIVE% | color=green\"\n\techo \"---\"\n\techo \"+$SUM‚Ç¨ |¬†color=green href=https://kundencenter.ginmon.de/uebersicht\"\n\texit 0\nfi\n\nif [ ! -z \"$NEGATIVE\" ]; then\n\tSUM=$(echo \"$HTML\" | grep -o 'valuecurrency-eurnegative\"\u003e[\\.[:digit:],]*' | cut -d '\u003e' -f 2)\n\techo \"-$NEGATIVE% | color=red\"\n\techo \"---\"\n\techo \"-$SUM‚Ç¨ |¬†color=red href=https://kundencenter.ginmon.de/uebersicht\"\n\texit 0\nfi\n\necho \"Offline | color=red\"\nexit 0"
				}
			],
			"path": "Finance/ginmon.1d.sh",
			"filename": "ginmon.1d.sh",
			"dir": "Finance",
			"docsPlugin": "Finance/ginmon.1d.sh.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Ginmon daily performance",
			"version": "v1.0",
			"author": "Jonas Bach",
			"authors": [
				{
					"name": "Jonas Bach",
					"githubUsername": "jbach",
					"imageURL": "https://avatars.githubusercontent.com/u/109169?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows daily performance of Ginmon funds. Add account via `$ security add-generic-password -a \"\u003cusername\u003e\" -s ginmonbitbar -w \"\u003cpassword\u003e\"`.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:53.58607Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/rbc.10m.sh",
					"filename": "rbc.10m.sh",
					"content": "#!/bin/bash\n# File: rbc.15.m.sh\n# Description: Plugin for BitBar (github.com/matryer/bitbar) displaying russian\n#              stock-market indicators from rbc.ru\n# Author: github.com/schmooser\n# Dependencies:\n#   jq - github.com/stedolan/jq\n#   pup - github.com/EricChiang/pup\n#   curl - curl.haxx.se\n# They should be added in PATH\n# \u003cbitbar.title\u003eRBC Stock/Currency tracker\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eschmooser\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eschmooser\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/480160/12206066/ee9db3be-b64f-11e5-96ae-11f7678cb905.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003erussian stock-market indicators from rbc.ru\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ejq,pup,curl\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n\nexport PATH=/usr/local/bin:~/Applications/go/bin:$PATH\njson=$(curl -s -L http://rbc.ru | pup '.indicators__items json{}')\n# shellcheck disable=2016\nout=$(echo \"$json\" | jq -r '.children | .[] as $c | \"\\(if $c.children | .[2] | .class | contains(\"green\") then \"‚ñ≤\" else \"‚ñº\" end) \\($c.title) - \\($c.children[1:] | map(.text) | join(\" \")) | color=\\(if $c.children | .[2] | .class | contains(\"green\") then \"green\" else \"red\" end) | href=\\($c.href)\"')\necho \"$out\" | grep Brent\necho \"---\"\necho \"$out\" | grep -v Brent | grep -v EUR/USD | grep USD | sed 's/color=green/color=111/;s/color=red/color=green/;s/color=111/color=red/'\necho \"$out\" | grep -v Brent | grep -v EUR/USD | grep EUR | sed 's/color=green/color=111/;s/color=red/color=green/;s/color=111/color=red/'\necho \"$out\" | grep EUR/USD\necho \"$out\" | grep -v Brent | grep -v USD | grep -v EUR\n"
				}
			],
			"path": "Finance/rbc.10m.sh",
			"filename": "rbc.10m.sh",
			"dir": "Finance",
			"docsPlugin": "Finance/rbc.10m.sh.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "RBC Stock/Currency tracker",
			"version": "1.0",
			"author": "schmooser",
			"authors": [
				{
					"name": "schmooser",
					"githubUsername": "schmooser",
					"imageURL": "https://avatars.githubusercontent.com/u/30776479?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "russian stock-market indicators from rbc.ru",
			"imageURL": "https://cloud.githubusercontent.com/assets/480160/12206066/ee9db3be-b64f-11e5-96ae-11f7678cb905.png",
			"dependencies": [
				"jq",
				"pup",
				"curl"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:53.687395Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/robinhood.1m.py",
					"filename": "robinhood.1m.py",
					"content": "#!/usr/local/bin/python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eRobinhood\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJonathan Grant\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejonathangrant\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows your total portfolio value.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython,Robinhood\u003c/bitbar.dependencies\u003e\n\n\nfrom Robinhood import Robinhood as R\n\nme = R()\nme.login(username=\"Your Username Here\", password=\"Your Password Here\")\ndata = me.portfolios()\nstart = data.get('equity_previous_close', '0')\nnow = data.get('equity', '0')\ncolor = 'white'\ndifference = float(now) - float(start)\nif difference \u003e 0:\n    color = 'green'\nelif difference \u003c 0:\n    color = 'red'\nprint('${:,.2f}|color={}'.format(float(now), color))\nprint('---')\nprint('Start of Day: ${:,.2f}|color={}'.format(float(start), 'white'))\nprint('Difference: ${:,.2f}|color={}'.format(float(difference), color))\n"
				}
			],
			"path": "Finance/robinhood.1m.py",
			"filename": "robinhood.1m.py",
			"dir": "Finance",
			"docsPlugin": "Finance/robinhood.1m.py.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Robinhood",
			"version": "v1.0",
			"author": "Jonathan Grant",
			"authors": [
				{
					"name": "Jonathan Allen Grant",
					"githubUsername": "jonathangrant",
					"imageURL": "https://avatars.githubusercontent.com/u/6880862?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows your total portfolio value.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"python",
				"Robinhood"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:53.696264Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/robinhood2.1m.py",
					"filename": "robinhood2.1m.py",
					"content": "#!/usr/local/bin/python3\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eRobinhood2\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAdam Jilling\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eajilling\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows your total portfolio value and daily change\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.ibb.co/SBY7NXy/bitbar-robinhood.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython,robin_stocks\u003c/bitbar.dependencies\u003e\n\nimport robin_stocks as rh\n\nlogin = rh.login('\u003cusername\u003e', '\u003cpassword\u003e')\n\nportfolio = rh.profiles.load_portfolio_profile()\ncurrent_value = portfolio['equity']\nopen_value = portfolio['equity_previous_close']\n\nchange = float(current_value) - float(open_value)\n\n# TODO: colors not working in Big Sur\ncolor = 'white'\nmove = ''\nif (change \u003e 0):\n    color = 'green'\n    move = '‚ñ≤'\nelif (change \u003c 0):\n    color = 'red'\n    move = '‚ñº'\n\noutput1 = '{:,.2f}'.format(float(current_value))\noutput2 = '  ' + move\noutput3 = '{:,.2f}'.format(abs(float(change)))\nprint(output1 + output2 + output3)\n"
				}
			],
			"path": "Finance/robinhood2.1m.py",
			"filename": "robinhood2.1m.py",
			"dir": "Finance",
			"docsPlugin": "Finance/robinhood2.1m.py.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Robinhood2",
			"version": "v1.0",
			"author": "Adam Jilling",
			"authors": [
				{
					"name": "Adam Jilling",
					"githubUsername": "ajilling",
					"imageURL": "https://avatars.githubusercontent.com/u/8919991?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows your total portfolio value and daily change",
			"imageURL": "https://i.ibb.co/SBY7NXy/bitbar-robinhood.png",
			"dependencies": [
				"python",
				"robin_stocks"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:53.730894Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/shiller-pe.4h.sh",
					"filename": "shiller-pe.4h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eShiller PE ratio\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eJ√∏rgen\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejtorvald\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGets the current Shiller PE ratio. Information is provided ‚Äòas is‚Äô and solely for informational purposes, not for trading purposes or advice, and may be delayed.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash, curl\u003c/bitbar.dependencies\u003e\n\nSHILLER_PE=$(curl -s https://www.multpl.com/shiller-pe | grep \"Current Shiller PE Ratio is\" | awk '{print $16}' | cut -d, -f1)\n\nif [ \"$(echo \"17 \u003e $SHILLER_PE\" | bc -l)\" -eq 1 ]; then\n\tICON=\"üí∏ \"\t\n\tCOLOR=green\nelif [ \"$(echo \"21 \u003e $SHILLER_PE\" | bc -l)\" -eq 1 ]; then\n\tICON=\"üíµ \"\n\tCOLOR=orange\nelse\n\tICON=\"\"\n\tCOLOR=black\nfi\n\necho \"${ICON}$SHILLER_PE | color=${COLOR}\"\necho \"---\"\necho \"Current Shiller PE ${SHILLER_PE} | color=${COLOR}\"\necho \"See chart | href=https://www.multpl.com/shiller-pe\"\n"
				}
			],
			"path": "Finance/shiller-pe.4h.sh",
			"filename": "shiller-pe.4h.sh",
			"dir": "Finance",
			"docsPlugin": "Finance/shiller-pe.4h.sh.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Shiller PE ratio",
			"version": "",
			"author": "J√∏rgen",
			"authors": [
				{
					"name": "J√∏rgen",
					"githubUsername": "jtorvald",
					"imageURL": "https://avatars.githubusercontent.com/u/1808131?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Gets the current Shiller PE ratio. Information is provided ‚Äòas is‚Äô and solely for informational purposes, not for trading purposes or advice, and may be delayed.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash",
				"curl"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:53.860066Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/stock.5s.sh",
					"filename": "stock.5s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eStock Info\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eclark\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eflyingtimes\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003euse baidu stock api to monitor stock price. the price only show up in market time.\u003c/bitbar.desc\u003e\n\nif [ \"$(date +%H)\" -lt 9 ]; then\n  echo \"not trade time|color=red\"\n  exit\nfi\nif [ \"$(date +%H)\" -gt 15 ]; then\n  echo \"not trade time|color=red\"\n  exit\nfi\nif [ \"$(date +%w)\" -gt 5 ]; then\n  echo \"not trade time|color=red\"\n  exit\nfi\nif [ \"$(date +%w)\" -eq 0 ]; then\n  echo \"not trade time|color=red\"\n  exit\nfi\n\n# change folloing code to select your stock\nstocknum=\"sz000410\"\n# apply for your own api key at http://apistore.baidu.com/apiworks/servicedetail/115.html\napikey=\"apikey:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\ncurl  --get --include  \"http://apis.baidu.com/apistore/stockservice/stock?stockid=$stocknum\u0026list=1\"  -H \"$apikey\" -s|grep \"{\"|awk -F \",\" '{print $4,$9,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36}'|awk -F \":| \" '{printf\"%s,%.2f,%.2fÔºÖ|color=red\\ns5:%.2f,%.0f|color=green\\ns4:%.2f,%.0f|color=green\\ns3:%.2f,%.0f|color=green\\ns2:%.2f,%.0f|color=green\\ns1:%.2f,%.0f|color=green\\nb1:%.2f,%.0f|color=red\\nb2:%.2f,%.0f|color=red\\nb3:%.2f,%.0f|color=red\\nb4:%.2f,%.0f|color=red\\nb5:%.2f,%.0f|color=red\\n\",$2,$4,$6,$46,$44,$42,$40,$38,$36,$34,$32,$30,$28,$10,$8,$14,$12,$18,$16,$22,$20,$26,$24}'\n"
				}
			],
			"path": "Finance/stock.5s.sh",
			"filename": "stock.5s.sh",
			"dir": "Finance",
			"docsPlugin": "Finance/stock.5s.sh.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Stock Info",
			"version": "1.0",
			"author": "clark",
			"authors": [
				{
					"name": "clark",
					"githubUsername": "flyingtimes",
					"imageURL": "https://avatars.githubusercontent.com/u/5668052?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "use baidu stock api to monitor stock price. the price only show up in market time.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:53.978679Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/stock-ticker.30s.py",
					"filename": "stock-ticker.30s.py",
					"content": "#!/usr/bin/python\n# \u003cbitbar.title\u003eStock Ticker\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRobert Kanter\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003erkanter\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eProvides a rotating stock ticker in your menu bar, with color and percentage changes\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/Nf4jiRd.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/rkanter\u003c/bitbar.abouturl\u003e\nimport urllib2\nimport json\n\n#-----------------------------------------------------------------------------\n# IMPORTANT: You will need an API Token.  Follow these steps\n# 1. Create a free account at https://iexcloud.io/cloud-login#/register/\n# 2. Select the free \"START\" tier\n# 3. Verify your email address\n# 4. Click \"API Tokens\" in the left menu\n# 5. Enter the \"Publishable\" Token in the quotes below (it should start with \"pk_\")\napi_token = \"\"\n\n# Enter your stock symbols here in the format: [\"symbol1\", \"symbol2\", ...]\nstock_symbols = [\"MSFT\", \"AAPL\", \"AMZN\"]\n#-----------------------------------------------------------------------------\n\nresponse = urllib2.urlopen(\"https://cloud.iexapis.com/stable/stock/market/batch?symbols=\" + ','.join(stock_symbols) + \"\u0026types=quote\u0026filter=symbol,latestPrice,change,changePercent\u0026displayPercent=true\u0026token=\" + api_token)\njson_data = json.loads(response.read())\n\nfor stock_symbol in stock_symbols:\n    stock_quote = json_data[stock_symbol][\"quote\"]\n    price_current = stock_quote[\"latestPrice\"]\n    price_changed = stock_quote[\"change\"]\n    price_percent_changed = stock_quote[\"changePercent\"]\n\n    if price_changed is not None:\n        color = \"red\" if float(price_changed) \u003c 0 else \"green\"\n        print(\"{} {:.2f} {:.2f} ({:.2f}%) | color={}\".format(stock_symbol, price_current, price_changed, price_percent_changed, color))\n    else:\n        color = \"black\"\n        print(\"{} {:.2f} | color={}\".format(stock_symbol, price_current, color))\n"
				}
			],
			"path": "Finance/stock-ticker.30s.py",
			"filename": "stock-ticker.30s.py",
			"dir": "Finance",
			"docsPlugin": "Finance/stock-ticker.30s.py.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Stock Ticker",
			"version": "1.0",
			"author": "Robert Kanter",
			"authors": [
				{
					"name": "Robert Kanter",
					"githubUsername": "rkanter",
					"imageURL": "https://avatars.githubusercontent.com/u/3588587?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Provides a rotating stock ticker in your menu bar, with color and percentage changes",
			"imageURL": "https://i.imgur.com/Nf4jiRd.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/rkanter",
			"lastUpdated": "2021-03-08T15:21:53.857816Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/moex.1m.rb",
					"filename": "moex.1m.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eThe Russian Ruble exchange rates\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRoman Krasavtsev\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eRomanKrasavtsev\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThe Russian Ruble exchange rates from Moscow Exchange\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.github.com/romankrasavtsev/moex-bitbar-plugin/master/moex_emoji.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/RomanKrasavtsev/moex-bitbar-plugin\u003c/bitbar.abouturl\u003e\n\nrequire \"nokogiri\"\nrequire \"open-uri\"\n\ndef get_exchange_rate emoji, *currencies\n  result_string = \"\"\n\n  currencies.each do |currency|\n    pair, sign = get_pair_sign emoji, currency\n\n    if pair\n      rate = Nokogiri::HTML(open(\"http://moex.com/ru/derivatives/currency-rate.aspx?currency=#{pair}\"))\n        .css(\"#ctl00_PageContent_tbxCurrentRate b\")\n        .to_s.gsub(/\u003cb\u003e/, \"\").gsub(/\u003c\\/b\u003e/, \"\")\n        .gsub(/–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:  /, \"\")\n        .slice(/\\d+,\\d./)\n    else\n      rate = \"Unknown sign\"\n    end\n\n    result_string += \"#{sign} #{rate}  \"\n  end\n\n  result_string\nend\n\ndef get_pair_sign emoji, currency\n  case currency\n  when \"USD\"\n    pair, sign  = [\"USD_RUB\", emoji ? \"üá∫üá∏\" : \"$\"]\n  when \"EUR\"\n    pair, sign = [\"EUR_RUB\", emoji ? \"üá™üá∫\" : \"‚Ç¨\"]\n  when \"CHF\"\n    pair, sign = [\"CHF_RUB\", emoji ? \"üá®üá≠\" : \"Fr\"]\n  when \"JPY\"\n    pair, sign = [\"JPY_RUB\", emoji ? \"üáØüáµ\" : \"J¬•\"]\n  when \"CNY\"\n    pair, sign = [\"CNY_RUB\", emoji ? \"üá®üá≥\" : \"C¬•\"]\n  when \"CAD\"\n    pair, sign = [\"CAD_RUB\", emoji ? \"üá®üá¶\" : \"C$\"]\n  when \"TRY\"\n    pair, sign  = [\"TRY_RUB\", emoji ? \"üáπüá∑\" : \"‚Ç∫\"]\n  else\n    pair, sign = [nil, \"\"]\n  end\n\n  [pair, sign]\nend\n\n# Supported currencies:\n# USD - United States dollar\n# EUR - Euro\n# CHF - Swiss franc\n# JPY - Japanese yen\n# CNY - Chinese yuan\n# CAD - Canadian dollar\n# TRY - Turkish lira\n\nemoji = true\nputs get_exchange_rate emoji, \"USD\", \"EUR\", \"CAD\"\n"
				}
			],
			"path": "Finance/moex.1m.rb",
			"filename": "moex.1m.rb",
			"dir": "Finance",
			"docsPlugin": "Finance/moex.1m.rb.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "The Russian Ruble exchange rates",
			"version": "v1.0",
			"author": "Roman Krasavtsev",
			"authors": [
				{
					"name": "Roman Krasavtsev",
					"githubUsername": "RomanKrasavtsev",
					"imageURL": "https://avatars.githubusercontent.com/u/12496512?v=4",
					"bio": "Passionate DevOps Engineer",
					"primary": true
				}
			],
			"desc": "The Russian Ruble exchange rates from Moscow Exchange",
			"imageURL": "https://raw.github.com/romankrasavtsev/moex-bitbar-plugin/master/moex_emoji.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/RomanKrasavtsev/moex-bitbar-plugin",
			"lastUpdated": "2021-03-08T15:21:53.629793Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/teller-track-spending.1h.sh",
					"filename": "teller-track-spending.1h.sh",
					"content": "#!/bin/sh\n#\n# Teller.io Banking via the OSX menu bar\n# Requires:\n# - a Teller.io account\n# - a UK Bank\n# - teller-cli: https://github.com/sebinsua/teller-cli#from-release\n# - pcregrep: `brew install pcre`\n#\n# \u003cbitbar.title\u003eTrack spending at UK banks with Teller\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.3.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSeb Insua\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebinsua\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTrack your spending with teller-cli and an account at Teller.io\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://camo.githubusercontent.com/e0215e6736172334f62effff36ff8df1ab38fed1/687474703a2f2f692e696d6775722e636f6d2f627638545a4c652e706e67\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eteller-cli, pcregrep\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/sebinsua/teller-cli\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin/:$PATH\";\n\nSPENDING_LIMIT='3000.00'; # Change this to a suitable spending limit.\n\nexit_if_zero() {\n  RETURN_CODE=$1;\n  ERROR_MESSAGE=$2;\n  if [ \"$ERROR_MESSAGE\" = \"\" ]; then\n    ERROR_MESSAGE=\"Offline\";\n  fi;\n  if [ \"$RETURN_CODE\" -ne 0 ]; then\n    echo \"$ERROR_MESSAGE|color=#7e7e7e\";\n    exit 1;\n  fi;\n}\n\n# If we're offline we shouldn't output junk in the menu bar.\ncurl --connect-timeout 5 www.google.com \u003e /dev/null 2\u003e /dev/null;\nexit_if_zero $? \"Offline\";\n\nCURRENT_OUTGOING=$(teller show outgoing current --hide-currency);\nexit_if_zero $? \"Error\";\n\nCURRENT_BALANCE=$(teller show balance current --hide-currency);\nexit_if_zero $? \"Error\";\n\nLAST_TRANSACTION=$(teller list transactions | tail -n 1 | pcregrep -o1 \"[0-9]+[ ]+(.*)\");\nexit_if_zero $? \"Error\";\n\nif [ \"$(echo \"$CURRENT_OUTGOING \u003e $SPENDING_LIMIT\" | bc)\" -ne 0 ]; then\n  OVERSPEND=$(echo \"scale=2; $CURRENT_OUTGOING - $SPENDING_LIMIT\" | bc);\n  echo \"üö® ¬£$OVERSPEND OVERSPENT|color=red\";\nelse\n  UNDERSPEND=$(echo \"scale=2; $SPENDING_LIMIT - $CURRENT_OUTGOING\" | bc);\n  if [ \"$(echo \"$UNDERSPEND \u003e ($SPENDING_LIMIT/2)\" | bc)\" -ne 0 ]; then\n    echo \"üè¶ ¬£$UNDERSPEND remaining|color=green\";\n  else\n    echo \"üè¶ ¬£$UNDERSPEND remaining|color=#ffbf00\";\n  fi;\nfi;\necho \"---\";\necho \"Current Account: ¬£$CURRENT_BALANCE\";\necho \"Current Outgoing: ¬£$CURRENT_OUTGOING\";\necho \"Last TX: $LAST_TRANSACTION\";\n"
				}
			],
			"path": "Finance/teller-track-spending.1h.sh",
			"filename": "teller-track-spending.1h.sh",
			"dir": "Finance",
			"docsPlugin": "Finance/teller-track-spending.1h.sh.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Track spending at UK banks with Teller",
			"version": "v1.3.1",
			"author": "Seb Insua",
			"authors": [
				{
					"name": "Seb Insua",
					"githubUsername": "sebinsua",
					"imageURL": "https://avatars.githubusercontent.com/u/152098?v=4",
					"bio": "üêö",
					"primary": true
				}
			],
			"desc": "Track your spending with teller-cli and an account at Teller.io",
			"imageURL": "https://camo.githubusercontent.com/e0215e6736172334f62effff36ff8df1ab38fed1/687474703a2f2f692e696d6775722e636f6d2f627638545a4c652e706e67",
			"dependencies": [
				"teller-cli",
				"pcregrep"
			],
			"aboutURL": "https://github.com/sebinsua/teller-cli",
			"lastUpdated": "2021-03-08T15:21:54.057115Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/yahoo_stock_ticker.10m.py",
					"filename": "yahoo_stock_ticker.10m.py",
					"content": "#!/usr/bin/env LC_ALL=en_US.UTF-8 /usr/local/bin/python3\n#\n# \u003cbitbar.title\u003eYahoo Stock Ticker\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eLong Do\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003elongpdo\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows major stock indices in the menu bar and stock symbols in the dropdown menu by pulling data from the Yahoo Finance API. Similar to finance.yahoo.com the prices are delayed, but no API key is necessary. You can also set price alarms for BUY/SELL limits, which will notify you when the limit is reached.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://github.com/longpdo/bitbar-plugins-custom/raw/master/images/yahoo-stock-ticker.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython3\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/longpdo/bitbar-plugins-custom/blob/master/README.md#yahoo-stock-ticker\u003c/bitbar.abouturl\u003e\n#\n# by longpdo (https://github.com/longpdo)\n\nfrom datetime import datetime\nimport json\nimport os\nimport re\nimport sys\nimport subprocess\n\n# ---------------------------------------------------------------------------------------------------------------------\n# Enter your stock symbols here in the format: [\"symbol1\", \"symbol2\", ...]\nsymbols = [\"FB\", \"AAPL\", \"AMZN\", \"NFLX\", \"GOOG\", \"BIDU\", \"BABA\", \"TCEHY\"]\n\n# Enter the order how you want to sort the stock list:\n# 'name'                     : Sort alphabetically by name from A to Z\n# 'market_change_winners'    : Sort by value from top winners to losers\n# 'market_change_losers'     : Sort by value from top losers to winners\n# 'market_change_volatility' : Sort by absolute value from top to bottom\n# '' or other values         : Sort by your custom order from the symbols array above\nsort_by = 'market_change_winners'\n# ---------------------------------------------------------------------------------------------------------------------\n\n# ---------------------------------------------------------------------------------------------------------------------\n# CODE STARTING BELOW HERE, DO NOT EDIT IF YOU ARE A REGULAR USER\n# Variables\nindices_dict = {\n    '^GSPC': 'üá∫üá∏ S\u0026P 500',\n    '^DJI': 'üá∫üá∏ DOW 30',\n    '^IXIC': 'üá∫üá∏ NASDAQ',\n    '^GDAXI': 'üá©üá™ DAX',\n    '^FTSE': 'üá¨üáß FTSE 100',\n    '^FCHI': 'üá´üá∑ CAC 40',\n    '^STOXX50E': 'üá™üá∫ EURO STOXX 50',\n}\nGREEN = '\\033[32m'\nRED = '\\033[31m'\nRESET = '\\033[0m'\nFONT = \"| font='Menlo'\"\n# ---------------------------------------------------------------------------------------------------------------------\n\n\n# macOS Alerts, Prompts and Notifications -----------------------------------------------------------------------------\n# Display a macOS specific alert dialog to get confirmation from user to continue\ndef alert(alert_title='', alert_text='', alert_buttons=['Cancel', 'OK']):\n    try:\n        d = locals()\n        user_input = subprocess.check_output(['osascript', '-l', 'JavaScript', '-e', '''\n            const app = Application.currentApplication()\n            app.includeStandardAdditions = true\n            const response = app.displayAlert('{alert_title}', {{\n                message: '{alert_text}',\n                as: 'critical',\n                buttons: ['{alert_buttons[0]}', '{alert_buttons[1]}'],\n                defaultButton: '{alert_buttons[1]}',\n                cancelButton: '{alert_buttons[0]}'\n            }})\n            response\n        '''.format(**d)]).decode('ascii').rstrip()\n        return user_input\n    except subprocess.CalledProcessError:\n        pass\n\n\n# Display a macOS specific prompt dialog to get text input from the user\ndef prompt(prompt_text=''):\n    try:\n        d = locals()\n        user_input = subprocess.check_output(['osascript', '-l', 'JavaScript', '-e', '''\n            const app = Application.currentApplication()\n            app.includeStandardAdditions = true\n            const response = app.displayDialog('{prompt_text}', {{\n                defaultAnswer: '',\n                buttons: ['Cancel', 'OK'],\n                defaultButton: 'OK'\n            }})\n            response.textReturned\n        '''.format(**d)]).decode('ascii').rstrip()\n        if user_input == '':\n            sys.exit()\n        return user_input\n    except subprocess.CalledProcessError:\n        pass\n\n\n# Display a macOS specific prompt dialog prompting user for a choice from a list\ndef prompt_selection(prompt_text='', choices=''):\n    try:\n        d = locals()\n        user_selection = subprocess.check_output(['osascript', '-l', 'JavaScript', '-e', '''\n            const app = Application.currentApplication()\n            app.includeStandardAdditions = true\n            var choices = {choices}\n            const response = app.chooseFromList(choices, {{\n                withPrompt: '{prompt_text}',\n                defaultItems: [choices[0]]\n            }})\n            response\n        '''.format(**d)]).decode('ascii').rstrip()\n        if user_selection == 'false':\n            sys.exit()\n        return user_selection\n    except subprocess.CalledProcessError:\n        pass\n\n\n# Display a macOS specific notification\ndef notify(text, title, subtitle, sound='Glass'):\n    cmd = 'osascript -e \\'display notification \"{}\" with title \"{}\" subtitle \"{}\" sound name \"{}\"\\''\n    os.system(cmd.format(text, title, subtitle, sound))\n# ---------------------------------------------------------------------------------------------------------------------\n\n\n# Methods to read, write, remove data from the hidden .db file --------------------------------------------------------\ndef read_data_file(data_file):\n    with open(data_file, 'r') as f:\n        content = f.readlines()\n    f.close()\n    content = [x.strip() for x in content]\n    return content\n\n\ndef write_data_file(data_file, imit_type, symbol, price):\n    with open(data_file, 'a') as f:\n        f.write(limit_type + ' ' + symbol + ' ' + price + '\\n')\n    f.close()\n\n\ndef remove_line_from_data_file(data_file, line_to_be_removed):\n    with open(data_file, 'r') as f:\n        content = f.readlines()\n    with open(data_file, 'w') as f:\n        for line in content:\n            if line.strip('\\n') != line_to_be_removed:\n                f.write(line)\n    f.close()\n# ---------------------------------------------------------------------------------------------------------------------\n\n\n# Curl the yahoo api for data\ndef get_stock_data(symbol):\n    # Building the curl command as a string\n    library = 'curl --silent '\n    api = 'https://query1.finance.yahoo.com/v7/finance/quote?'\n    fields = ['symbol', 'marketState', 'regularMarketTime', 'regularMarketPrice', 'regularMarketChangePercent',\n              'fullExchangeName', 'currency', 'regularMarketPreviousClose', 'regularMarketOpen', 'bid', 'ask',\n              'regularMarketDayRange', 'fiftyTwoWeekRange', 'fiftyDayAverage', 'twoHundredDayAverage', 'shortName',\n              'fiftyDayAverageChangePercent', 'twoHundredDayAverageChangePercent']\n    fields_string = 'fields=' + ','.join(fields)\n    cmd = library + \"'\" + api + fields_string + '\u0026symbols=' + symbol + \"'\"\n\n    # Popen to run the curl command and retrieve the output\n    output = os.popen(cmd).read()\n    # Jsonify the output from the curl command\n    json_output = json.loads(output)\n\n    # Check if a valid symbol was used\n    try:\n        stock_data = json_output['quoteResponse']['result'][0]\n    except IndexError:\n        alert('Error', 'Invalid stock symbol: ' + symbol)\n        sys.exit()\n\n    return stock_data\n\n\n# Check a given stock symbol against the price limit list\ndef check_price_limits(symbol_to_be_checked, current_price, price_limit_list, data_file):\n    for limit_entry in price_limit_list:\n        if symbol_to_be_checked in limit_entry:\n            # Get the limit price, limits are saved in the format: TYPE SYMBOL PRICE\n            limit_price = float(limit_entry.split()[2])\n            notification_text = 'Current price is: ' + str(current_price)\n            notification_title = 'Price Alarm'\n\n            # Notify user if current price is lower than the BUY limit, then remove the limit from list\n            if 'BUY' in limit_entry and current_price \u003c limit_price:\n                notification_subtitle = 'BUY Limit: ' + str(limit_price)\n                notify(notification_text, notification_title, notification_subtitle)\n                remove_line_from_data_file(data_file, limit_entry)\n\n            # Notify user if current price is higher than the SELL limit, then remove the limit from list\n            if 'SELL' in limit_entry and current_price \u003e limit_price:\n                notification_subtitle = 'SELL Limit: ' + str(limit_price)\n                notify(notification_text, notification_title, notification_subtitle)\n                remove_line_from_data_file(data_file, limit_entry)\n\n\n# Print the indices information in the menu bar\ndef print_index(index, name):\n    market_state = index['marketState']\n    change = index['regularMarketChangePercent']\n\n    # Setting color and emojis depending on the market state and the market change\n    if market_state != 'REGULAR':\n        # Set change with a moon emoji for closed markets\n        colored_change = 'üåõ' + '(' + '{:.2f}'.format(change) + '%) '\n    if market_state == 'REGULAR':\n        # Set color for positive and negative values\n        color = ''\n        if change \u003e 0:\n            color = GREEN + '‚ñ≤'\n        if change \u003c 0:\n            color = RED + '‚ñº'\n        # Format change to decimal with a precision of two and reset ansi color at the end\n        colored_change = color + '(' + '{:.2f}'.format(change) + '%) ' + RESET\n\n    # Print the index info only to the menu bar\n    print(name, colored_change, '| dropdown=false', sep=' ')\n\n\n# Print the stock info in the dropdown menu with additional info in the submenu\ndef print_stock(s):\n    market_state = s['marketState']\n    change = s['regularMarketChangePercent']\n\n    # Setting color and emojis depending on the market state and the market change\n    if market_state != 'REGULAR':\n        market = 'CLOSED'\n        # Set change with a moon emoji for closed markets\n        colored_change = 'üåõ' + '(' + '{:.2f}'.format(change) + '%) '\n    if market_state == 'REGULAR':\n        # Set color for positive and negative values\n        color = ''\n        market = 'OPEN'\n        if change \u003e 0:\n            color = GREEN + '‚ñ≤'\n        if change \u003c 0:\n            color = RED + '‚ñº'\n        # Format change to decimal with a precision of two and reset ansi color at the end\n        change_in_percent = '(' + '{:.2f}'.format(change) + '%)'\n        colored_change = color + change_in_percent + RESET\n\n    # Remove appending stock exchange symbol for foreign exchanges, e.g. Apple stock symbol in Frankfurt: APC.F -\u003e APC\n    symbol = s['symbol'].split('.')[0]\n    # Convert epoch to human readable time HH:MM:SS\n    time = datetime.fromtimestamp(s['regularMarketTime']).strftime('%X')\n    # Convert float values to decimals with a precision of two\n    fifty_day = '{:.2f}'.format(s['fiftyDayAverage'])\n    two_hundred_day = '{:.2f}'.format(s['twoHundredDayAverage'])\n    fifty_day_change = '(' + '{:.2f}'.format(s['fiftyDayAverageChangePercent'] * 100) + '%)'\n    two_hundred_day_change = '(' + '{:.2f}'.format(s['twoHundredDayAverageChangePercent'] * 100) + '%)'\n\n    # Print the stock info seen in the dropdown menu\n    stock_info = '{:\u003c5} {:\u003e10} {:\u003c10}' + FONT\n    print(stock_info.format(symbol, s['regularMarketPrice'], colored_change))\n    # Print additional stock info in the submenu\n    stock_submenu = '{:\u003c17} {:\u003c17}' + FONT\n    print('--' + s['shortName'] + FONT)\n    print('--' + s['fullExchangeName'] + ' - Currency in ' + s['currency'] + FONT)\n    print('--' + time + ' - Market is ' + market + FONT)\n    print('-----')\n    print(stock_submenu.format('--Previous Close:', s['regularMarketPreviousClose']))\n    print(stock_submenu.format('--Open:', s['regularMarketOpen']))\n    print(stock_submenu.format('--Bid:', s['bid']))\n    print(stock_submenu.format('--Ask:', s['ask']))\n    print(stock_submenu.format(\"--Day's Range:\", s['regularMarketDayRange']))\n    print(stock_submenu.format('--52 Week Range:', s['fiftyTwoWeekRange']))\n    print(stock_submenu.format('--50 MA:', fifty_day + ' ' + fifty_day_change))\n    print(stock_submenu.format('--200 MA:', two_hundred_day + ' ' + two_hundred_day_change))\n\n\n# Print the price limits in the dropdown menu\ndef print_price_limits(price_limit_list):\n    PARAMETERS = FONT + \" refresh=true terminal='false' bash='\" + __file__ + \"'\"\n\n    print('---')\n    print('Price Limits' + FONT)\n    # Print available price limits in the submenu\n    for limit_entry in price_limit_list:\n        # Split the limit entry, limits are saved in the format: TYPE SYMBOL PRICE\n        limit_type = limit_entry.split()[0]\n        symbol = limit_entry.split()[1]\n        limit_price = limit_entry.split()[2]\n        price_limit_submenu = '{:\u003c6} {:\u003c4} {:\u003c10}'\n        # Print the price limit data into the submenu\n        # onClick will rerun this script with parameters 'remove' and the {limit_entry} to remove clicked the limit\n        print(price_limit_submenu.format('--' + limit_type, symbol, limit_price + PARAMETERS + \" param1='remove' param2='\" + limit_entry + \"'\"))\n    print('-----')\n    print('--To remove a limit, click on it.' + FONT)\n    # Print the clickable fields to set new limits or clear all price limits\n    # onClick will rerun this script with parameters 'set' to set a new limit\n    print('Set new Price Limit...' + PARAMETERS + \" param1='set'\")\n    # onClick will rerun this script with parameters 'clear' to clear the hidden .db file\n    print('Clear all Price Limits...' + PARAMETERS + \" param1='clear'\")\n\n\nif __name__ == '__main__':\n    data_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), '.' + os.path.basename(__file__) + '.db')\n\n    # Normal execution by BitBar without any parameters\n    if len(sys.argv) == 1:\n        stocks = []\n\n        # Check if hidden .db file exists\n        try:\n            price_limit_list = read_data_file(data_file)\n        except FileNotFoundError:\n            price_limit_list = []\n\n        # Print the menu bar information\n        for symbol, name in indices_dict.items():\n            # For each symbol: curl the data, then print it\n            index = get_stock_data(symbol)\n            print_index(index, name)\n\n        # For each symbol: curl the data, check against the .db file for limits\n        for symbol in symbols:\n            stock = get_stock_data(symbol)\n            stocks.append(stock)\n            check_price_limits(symbol, stock['regularMarketPrice'], price_limit_list, data_file)\n\n        # Set order of stocks\n        if sort_by == 'name':\n            stocks = sorted(stocks, key=lambda k: k['shortName'])\n        if sort_by == 'market_change_winners':\n            stocks = sorted(stocks, key=lambda k: k['regularMarketChangePercent'], reverse=True)\n        if sort_by == 'market_change_losers':\n            stocks = sorted(stocks, key=lambda k: k['regularMarketChangePercent'])\n        if sort_by == 'market_change_volatility':\n            stocks = sorted(stocks, key=lambda k: abs(k['regularMarketChangePercent']), reverse=True)\n\n        # Print the stock information inside the dropdown menu\n        print('---')\n        for stock in stocks:\n            print_stock(stock)\n\n        # Print the price limit section inside the dropdown\n        print_price_limits(price_limit_list)\n\n    # Script execution with parameter 'set' to set new price limits\n    if len(sys.argv) == 2 and sys.argv[1] == 'set':\n        # Run this until user does not want to continue\n        while True:\n            # Get the user selection of whether he wants to set 'BUY' or 'SELL'\n            limit_type_prompt = 'Select the type of your limit: BUY (SELL) limits are triggered, when the price is lower (higher) than the limit.'\n            limit_type_choices = '[\"BUY\", \"SELL\"]'\n            limit_type = prompt_selection(limit_type_prompt, limit_type_choices)\n\n            # Get the user selection of all tracked symbols\n            symbol = prompt_selection('Select stock symbol:', symbols)\n\n            # Get the user input for a price limit, info message includes the current market price\n            price = prompt('Current price of ' + symbol + ' is ' + str(get_stock_data(symbol)['regularMarketPrice']) + '. Enter a value for your price limit.')\n            # Check if the user input are decimals with a precision of two\n            if not re.match(r'^\\d+(\\.\\d{1,2})?$', price):\n                # Alert the user on invalid value and stop the script\n                alert('Error', 'You entered an invalid value: ' + price + ' - valid values are decimals with a precision of 2, e.g 25.70!')\n                sys.exit()\n\n            # Write the limit to the hidden .db file\n            write_data_file(data_file, limit_type, symbol, price)\n\n            # Ask user if he wants to add another limit\n            add_another_limit = alert('Question', 'Do you want to add another price limit?', ['No', 'Yes'])\n            # If the user clicked the 'No' button, stop the script\n            if add_another_limit is None:\n                sys.exit()\n\n    # Script execution with parameter 'clear' to clear the .db file\n    if len(sys.argv) == 2 and sys.argv[1] == 'clear':\n        # Ask for user confirmation\n        warning = alert('Warning', 'This will clear your price limits! Do you want to continue?')\n        if warning is None:\n            sys.exit()\n\n        # Clear the file\n        open(data_file, 'w').close()\n\n    # Script execution with the parameters 'remove' and the line to be removed\n    if len(sys.argv) == 3 and sys.argv[1] == 'remove':\n        limit_to_be_removed = sys.argv[2]\n        remove_line_from_data_file(data_file, limit_to_be_removed)\n"
				}
			],
			"path": "Finance/yahoo_stock_ticker.10m.py",
			"filename": "yahoo_stock_ticker.10m.py",
			"dir": "Finance",
			"docsPlugin": "Finance/yahoo_stock_ticker.10m.py.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "Yahoo Stock Ticker",
			"version": "v1.1",
			"author": "Long Do",
			"authors": [
				{
					"name": "Long Do",
					"githubUsername": "longpdo",
					"imageURL": "https://avatars.githubusercontent.com/u/33006592?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows major stock indices in the menu bar and stock symbols in the dropdown menu by pulling data from the Yahoo Finance API. Similar to finance.yahoo.com the prices are delayed, but no API key is necessary. You can also set price alarms for BUY/SELL limits, which will notify you when the limit is reached.",
			"imageURL": "https://github.com/longpdo/bitbar-plugins-custom/raw/master/images/yahoo-stock-ticker.png",
			"dependencies": [
				"python3"
			],
			"aboutURL": "https://github.com/longpdo/bitbar-plugins-custom/blob/master/README.md#yahoo-stock-ticker",
			"lastUpdated": "2021-03-08T15:21:54.108319Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Finance/hours.1m.py",
					"filename": "hours.1m.py",
					"content": "#!/usr/local/bin/python3\n# \u003cbitbar.title\u003ehours\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eUdey Rishi\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eudeyrishi\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eA simple command line tool for managing your work hours and the money you make\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/udeyrishi/hours/master/assets/shift_ongoing.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ePython3\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/udeyrishi/hours\u003c/bitbar.abouturl\u003e\n\nfrom argparse import ArgumentParser\nimport csv\nfrom enum import Enum, auto\nimport os\nfrom distutils.util import strtobool\nfrom math import isclose\nimport sys\nimport time\n\nLOG_FILE_PATH = os.path.join(os.path.expanduser('~'), '.hours', 'log.csv')\n\nclass ModeFailException(Exception):\n    pass\n\ndef prompt_until_success(question, parser_fn, default=None):\n    while True:\n        print(question, end='')\n        try:\n            return parser_fn(input())\n        except ValueError:\n            if default is None:\n                print('Not a valid response.')\n            else:\n                return default\n\ndef script_path():\n    return os.path.realpath(__file__)\n\ndef script_name():\n    return os.path.basename(__file__)\n\nclass LogEvent(Enum):\n    WAGE_SET = auto()\n    PAYMENT = auto()\n    START = auto()\n    END = auto()\n\ndef positive_float(val):\n    num = float(val)\n    if num \u003c 0:\n        raise ValueError(f'{val} is a negative number.')\n    return num\n\nclass LogReport:\n    def __init__(self, active_wage=None, current_shift_started_at=None, earned_past_shifts=0, total_paid=0):\n        self.active_wage = active_wage\n        self.current_shift_started_at = current_shift_started_at\n        self.earned_past_shifts = earned_past_shifts\n        self.total_paid = total_paid\n\n    @property\n    def total_earned(self):\n        return self.earned_past_shifts + (((time.time() - self.current_shift_started_at)/60/60*self.active_wage) if self.current_shift_started_at is not None else 0)\n\n    @property\n    def outstanding_payment(self):\n        return self.total_earned - self.total_paid\n\n    @property\n    def has_outstanding_payment(self):\n        return not isclose(self.total_earned, self.total_paid, abs_tol=0.01)\n\n    @property\n    def in_shift(self):\n        return self.current_shift_started_at != None\n\n    @property\n    def has_active_wage(self):\n        return self.active_wage != None\n\n    @property\n    def current_shift_duration(self):\n        if self.current_shift_started_at is None:\n            return None\n        else:\n            duration = time.time() - self.current_shift_started_at\n            if duration \u003c 0:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; the ongoing shift seems to have been started in the future.')\n            m, s = divmod(duration, 60)\n            h, m = divmod(m, 60)\n            return f'{int(h):02d}:{int(m):02d}:{int(s):02d}'\n\ndef prepare_report():\n    report = LogReport()\n    \n    for event, value in read_log():\n        if event == LogEvent.WAGE_SET:\n            report.active_wage = value\n        elif event == LogEvent.PAYMENT:\n            report.total_paid += value\n        elif event == LogEvent.START: \n            if report.in_shift:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; found two successive {LogEvent.START.name}s without a {LogEvent.END.name} in between. Try fixing or deleting it.')\n            if report.active_wage is None:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; A shift {event.name} event occurred before any {LogEvent.WAGE_SET.name} event.')\n            report.current_shift_started_at = value\n        elif event == LogEvent.END:\n            if not report.in_shift:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; found two successive {LogEvent.END.name}s without a {LogEvent.START.name} in between. Try fixing or deleting it.')\n            if report.active_wage is None:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; A shift {event.name} event occurred before any {LogEvent.WAGE_SET.name} event.')\n            \n            seconds = value - report.current_shift_started_at\n            report.current_shift_started_at = None\n            if (seconds \u003c 0):\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; A shift\\'s duration cannot be negative. Try fixing or deleting it.')\n            \n            report.earned_past_shifts += (seconds/60/60) * report.active_wage\n        else:\n            assert False, f'Support for new LogEvent {event.name} not added.'\n\n    return report\n\n\ndef read_log():\n    with open(LOG_FILE_PATH, 'r') as log_file:\n        csv_reader = csv.reader(log_file)\n        for log in csv_reader:\n            event = next((e for e in LogEvent if e.name == log[0]), None)\n            if event is None:\n                raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; found an unknown log event: {log}')\n            value = float(log[1])\n            yield event, value\n\ndef write_log(event, value):\n    with open(LOG_FILE_PATH, 'a') as log_file:\n        csv_writer = csv.writer(log_file)\n        csv_writer.writerow([event.name, value])\n\ndef read_sanitized_report(expected_in_shift=None, if_shift_err=None):\n    if (expected_in_shift is None and if_shift_err is not None) or (expected_in_shift is not None and if_shift_err is None):\n        raise ValueError('Either both, or neither of expected_in_shift and if_shift_err should be null.')\n\n    report = prepare_report()\n    if not report.has_active_wage:\n        raise ModeFailException(f'Log file at {LOG_FILE_PATH} is corrupted; no {LogEvent.WAGE_SET.name} events found. Try fixing or deleting it.')\n\n    if expected_in_shift is not None and report.in_shift != expected_in_shift:\n        raise ModeFailException(if_shift_err)\n\n    return report\n\ndef configure_as_new(ask_permission=True):\n    if ask_permission:\n        should_configure = prompt_until_success(question=f'Looks like you have never configured {script_name()} before. Would you like to do so now? [Y/n] ', parser_fn=lambda x: strtobool(x) == 1, default=True)\n        if not should_configure:\n            raise ModeFailException(f'{script_name()} cannot run without configuring.')\n\n    wage = prompt_until_success(question='What is your hourly wage? ', parser_fn=positive_float)\n\n    if not os.path.exists(os.path.dirname(LOG_FILE_PATH)):\n        os.makedirs(os.path.dirname(LOG_FILE_PATH))\n\n    write_log(LogEvent.WAGE_SET, wage)\n    return LogReport(active_wage=wage)\n\nclass App:\n    class Mode:\n        def __init__(self, name, runner, help, is_default):\n            self.name = name\n            self.runner = runner\n            self.help = help\n            self.is_default = is_default\n\n    def __init__(self):\n        self.__registered_modes = []\n\n    def run(self):\n        assert len(self.__registered_modes) \u003e 0, 'No modes were registered'\n        default_modes = [mode for mode in self.__registered_modes if mode.is_default]\n        assert len(default_modes) == 1, 'Exactly 1 mode should be registered as the default'\n        default_mode = default_modes[0]\n\n        parser = ArgumentParser(description='A tool for managing your work hours and the money you make.')\n        group = parser.add_mutually_exclusive_group()\n\n        for mode in self.__registered_modes:\n            group.add_argument(f'-{mode.name[0]}', f'--{mode.name}', action='store_true', help=mode.help)\n\n        args = parser.parse_args()\n\n        matching_mode = next((mode for mode in self.__registered_modes if getattr(args, mode.name)), default_mode)\n        try:\n            matching_mode.runner()\n            return 0\n        except ModeFailException as e:\n            print(str(e))\n            return 3\n\n    def register_mode(self, expected_in_shift=None, if_shift_err=None, help=None, configure_if_needed=True, is_default=False):\n        def wrapper(mode_fn):\n            report_param_name = next((param[0] for param in mode_fn.__annotations__.items() if param[1] == LogReport), None)\n            num_other_params = len([param for param in mode_fn.__annotations__.items() if param[1] != LogReport])\n            assert num_other_params == 0, 'mode functions can only optionally request the current report. Everything else must be gathered via user input for bitbar compatibility.'\n\n            def mode_runner():\n                if os.path.isfile(LOG_FILE_PATH):\n                    report = read_sanitized_report(expected_in_shift, if_shift_err)\n                elif configure_if_needed:\n                    report = configure_as_new()\n                else:\n                    report = None\n\n                kwargs = dict()\n                if report_param_name is not None:\n                    kwargs[report_param_name] = report\n                \n                mode_fn(**kwargs)\n\n            self.__registered_modes.append(App.Mode(name=mode_fn.__name__, runner=mode_runner, help=help, is_default=is_default))\n            return mode_runner\n        return wrapper\n\napp = App()\n\n@app.register_mode(help='see the current status summary in a bitbar compatible syntax', configure_if_needed=False, is_default=True)\ndef bitbar(report: LogReport):\n    if report is None:\n        print(f'‚öôÔ∏è{script_name()} needs a one-time configuration.')\n        print(f'Configure | refresh=true bash=\"{script_path()}\" param1=-i terminal=true')\n        return 0\n\n    if report.in_shift:\n        print(f'üïí {report.current_shift_duration}')\n    else:\n        print('üè†')\n\n    print('---')\n    if report.in_shift:\n        print(f'End Shift | refresh=true bash=\"{script_path()}\" param1=-e terminal=false')\n    else:\n        print(f'Start Shift | refresh=true bash=\"{script_path()}\" param1=-s terminal=false')\n\n    print('---')\n    if not report.in_shift:\n        print(f'Update wage | refresh=true bash=\"{script_path()}\" param1=-w terminal=true')\n    print(f'Receive payment | refresh=true bash=\"{script_path()}\" param1=-p terminal=true')\n\n    print(f'Open log | refresh=true bash=\"less\" param1={LOG_FILE_PATH} terminal=true')\n\n    if report.has_outstanding_payment:\n        print('---')\n        if report.outstanding_payment \u003e 0:\n            print(f'üí∞ {report.outstanding_payment:.2f} pending')\n        else:\n            print(f'üí∞ {-report.outstanding_payment:.2f} overpaid')\n\n@app.register_mode(help='see the current status summary info')\ndef info(report: LogReport):\n    if report.in_shift:\n        print(f'üïí {report.current_shift_duration}', end='')\n    else:\n        print('üè†', end='')\n\n    if report.has_outstanding_payment:\n        print(' | ', end='')\n        if report.outstanding_payment \u003e 0:\n            print(f'üí∞ {report.outstanding_payment:.2f} pending', end='')\n        else:\n            print(f'üí∞ {-report.outstanding_payment:.2f} overpaid', end='')\n    print()\n\n@app.register_mode(expected_in_shift=False, if_shift_err='Cannot change the wage while a shift is ongoing.', help='update the hourly wage moving forward', configure_if_needed=False)\ndef wage(report: LogReport):\n    if report is None:\n        # User is trying to use this mode as the first-time setup itself. Do not ask for wage 2x\n        configure_as_new(ask_permission=False)\n    else:\n        wage = prompt_until_success(question='What is your new hourly wage? ', parser_fn=positive_float)\n        write_log(LogEvent.WAGE_SET, wage)\n\n@app.register_mode(help='add a received payment')\ndef payment():\n    amount = prompt_until_success(question='How much amount did you receive? ', parser_fn=positive_float)\n    write_log(LogEvent.PAYMENT, amount)\n\n@app.register_mode(expected_in_shift=False, if_shift_err='Cannot start a shift while one is ongoing.', help='start a shift')\ndef start():\n    write_log(LogEvent.START, time.time())\n\n@app.register_mode(expected_in_shift=True, if_shift_err='Cannot end a shift when none is ongoing.', help='end a shift')\ndef end():\n    write_log(LogEvent.END, time.time())\n\n@app.register_mode(help='prints the path to the log file')\ndef log():\n    print(LOG_FILE_PATH)\n\nif __name__ == '__main__':\n    sys.exit(app.run())"
				}
			],
			"path": "Finance/hours.1m.py",
			"filename": "hours.1m.py",
			"dir": "Finance",
			"docsPlugin": "Finance/hours.1m.py.html",
			"docsCategory": "Finance.html",
			"pathSegments": [
				"Finance"
			],
			"categoryPathSegments": [
				{
					"path": "Finance",
					"text": "Finance",
					"isLast": true
				}
			],
			"title": "hours",
			"version": "v2.0",
			"author": "Udey Rishi",
			"authors": [
				{
					"name": "Udey Rishi",
					"githubUsername": "udeyrishi",
					"imageURL": "https://avatars.githubusercontent.com/u/4692593?v=4",
					"bio": "Living life, one commit at a time",
					"primary": true
				}
			],
			"desc": "A simple command line tool for managing your work hours and the money you make",
			"imageURL": "https://raw.githubusercontent.com/udeyrishi/hours/master/assets/shift_ongoing.png",
			"dependencies": [
				"Python3"
			],
			"aboutURL": "https://github.com/udeyrishi/hours",
			"lastUpdated": "2021-03-08T15:21:53.616911Z",
			"vars": null
		}
	]
}