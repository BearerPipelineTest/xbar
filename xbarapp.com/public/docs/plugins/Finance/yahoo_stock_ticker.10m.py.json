{
	"plugin": {
		"files": [
			{
				"path": "Finance/yahoo_stock_ticker.10m.py",
				"filename": "yahoo_stock_ticker.10m.py",
				"content": "#!/usr/bin/env LC_ALL=en_US.UTF-8 /usr/local/bin/python3\n#\n# \u003cbitbar.title\u003eYahoo Stock Ticker\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eLong Do\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003elongpdo\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows major stock indices in the menu bar and stock symbols in the dropdown menu by pulling data from the Yahoo Finance API. Similar to finance.yahoo.com the prices are delayed, but no API key is necessary. You can also set price alarms for BUY/SELL limits, which will notify you when the limit is reached.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://github.com/longpdo/bitbar-plugins-custom/raw/master/images/yahoo-stock-ticker.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython3\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/longpdo/bitbar-plugins-custom/blob/master/README.md#yahoo-stock-ticker\u003c/bitbar.abouturl\u003e\n#\n# by longpdo (https://github.com/longpdo)\n\nfrom datetime import datetime\nimport json\nimport os\nimport re\nimport sys\nimport subprocess\n\n# ---------------------------------------------------------------------------------------------------------------------\n# Enter your stock symbols here in the format: [\"symbol1\", \"symbol2\", ...]\nsymbols = [\"FB\", \"AAPL\", \"AMZN\", \"NFLX\", \"GOOG\", \"BIDU\", \"BABA\", \"TCEHY\"]\n\n# Enter the order how you want to sort the stock list:\n# 'name'                     : Sort alphabetically by name from A to Z\n# 'market_change_winners'    : Sort by value from top winners to losers\n# 'market_change_losers'     : Sort by value from top losers to winners\n# 'market_change_volatility' : Sort by absolute value from top to bottom\n# '' or other values         : Sort by your custom order from the symbols array above\nsort_by = 'market_change_winners'\n# ---------------------------------------------------------------------------------------------------------------------\n\n# ---------------------------------------------------------------------------------------------------------------------\n# CODE STARTING BELOW HERE, DO NOT EDIT IF YOU ARE A REGULAR USER\n# Variables\nindices_dict = {\n    '^GSPC': 'ðŸ‡ºðŸ‡¸ S\u0026P 500',\n    '^DJI': 'ðŸ‡ºðŸ‡¸ DOW 30',\n    '^IXIC': 'ðŸ‡ºðŸ‡¸ NASDAQ',\n    '^GDAXI': 'ðŸ‡©ðŸ‡ª DAX',\n    '^FTSE': 'ðŸ‡¬ðŸ‡§ FTSE 100',\n    '^FCHI': 'ðŸ‡«ðŸ‡· CAC 40',\n    '^STOXX50E': 'ðŸ‡ªðŸ‡º EURO STOXX 50',\n}\nGREEN = '\\033[32m'\nRED = '\\033[31m'\nRESET = '\\033[0m'\nFONT = \"| font='Menlo'\"\n# ---------------------------------------------------------------------------------------------------------------------\n\n\n# macOS Alerts, Prompts and Notifications -----------------------------------------------------------------------------\n# Display a macOS specific alert dialog to get confirmation from user to continue\ndef alert(alert_title='', alert_text='', alert_buttons=['Cancel', 'OK']):\n    try:\n        d = locals()\n        user_input = subprocess.check_output(['osascript', '-l', 'JavaScript', '-e', '''\n            const app = Application.currentApplication()\n            app.includeStandardAdditions = true\n            const response = app.displayAlert('{alert_title}', {{\n                message: '{alert_text}',\n                as: 'critical',\n                buttons: ['{alert_buttons[0]}', '{alert_buttons[1]}'],\n                defaultButton: '{alert_buttons[1]}',\n                cancelButton: '{alert_buttons[0]}'\n            }})\n            response\n        '''.format(**d)]).decode('ascii').rstrip()\n        return user_input\n    except subprocess.CalledProcessError:\n        pass\n\n\n# Display a macOS specific prompt dialog to get text input from the user\ndef prompt(prompt_text=''):\n    try:\n        d = locals()\n        user_input = subprocess.check_output(['osascript', '-l', 'JavaScript', '-e', '''\n            const app = Application.currentApplication()\n            app.includeStandardAdditions = true\n            const response = app.displayDialog('{prompt_text}', {{\n                defaultAnswer: '',\n                buttons: ['Cancel', 'OK'],\n                defaultButton: 'OK'\n            }})\n            response.textReturned\n        '''.format(**d)]).decode('ascii').rstrip()\n        if user_input == '':\n            sys.exit()\n        return user_input\n    except subprocess.CalledProcessError:\n        pass\n\n\n# Display a macOS specific prompt dialog prompting user for a choice from a list\ndef prompt_selection(prompt_text='', choices=''):\n    try:\n        d = locals()\n        user_selection = subprocess.check_output(['osascript', '-l', 'JavaScript', '-e', '''\n            const app = Application.currentApplication()\n            app.includeStandardAdditions = true\n            var choices = {choices}\n            const response = app.chooseFromList(choices, {{\n                withPrompt: '{prompt_text}',\n                defaultItems: [choices[0]]\n            }})\n            response\n        '''.format(**d)]).decode('ascii').rstrip()\n        if user_selection == 'false':\n            sys.exit()\n        return user_selection\n    except subprocess.CalledProcessError:\n        pass\n\n\n# Display a macOS specific notification\ndef notify(text, title, subtitle, sound='Glass'):\n    cmd = 'osascript -e \\'display notification \"{}\" with title \"{}\" subtitle \"{}\" sound name \"{}\"\\''\n    os.system(cmd.format(text, title, subtitle, sound))\n# ---------------------------------------------------------------------------------------------------------------------\n\n\n# Methods to read, write, remove data from the hidden .db file --------------------------------------------------------\ndef read_data_file(data_file):\n    with open(data_file, 'r') as f:\n        content = f.readlines()\n    f.close()\n    content = [x.strip() for x in content]\n    return content\n\n\ndef write_data_file(data_file, imit_type, symbol, price):\n    with open(data_file, 'a') as f:\n        f.write(limit_type + ' ' + symbol + ' ' + price + '\\n')\n    f.close()\n\n\ndef remove_line_from_data_file(data_file, line_to_be_removed):\n    with open(data_file, 'r') as f:\n        content = f.readlines()\n    with open(data_file, 'w') as f:\n        for line in content:\n            if line.strip('\\n') != line_to_be_removed:\n                f.write(line)\n    f.close()\n# ---------------------------------------------------------------------------------------------------------------------\n\n\n# Curl the yahoo api for data\ndef get_stock_data(symbol):\n    # Building the curl command as a string\n    library = 'curl --silent '\n    api = 'https://query1.finance.yahoo.com/v7/finance/quote?'\n    fields = ['symbol', 'marketState', 'regularMarketTime', 'regularMarketPrice', 'regularMarketChangePercent',\n              'fullExchangeName', 'currency', 'regularMarketPreviousClose', 'regularMarketOpen', 'bid', 'ask',\n              'regularMarketDayRange', 'fiftyTwoWeekRange', 'fiftyDayAverage', 'twoHundredDayAverage', 'shortName',\n              'fiftyDayAverageChangePercent', 'twoHundredDayAverageChangePercent']\n    fields_string = 'fields=' + ','.join(fields)\n    cmd = library + \"'\" + api + fields_string + '\u0026symbols=' + symbol + \"'\"\n\n    # Popen to run the curl command and retrieve the output\n    output = os.popen(cmd).read()\n    # Jsonify the output from the curl command\n    json_output = json.loads(output)\n\n    # Check if a valid symbol was used\n    try:\n        stock_data = json_output['quoteResponse']['result'][0]\n    except IndexError:\n        alert('Error', 'Invalid stock symbol: ' + symbol)\n        sys.exit()\n\n    return stock_data\n\n\n# Check a given stock symbol against the price limit list\ndef check_price_limits(symbol_to_be_checked, current_price, price_limit_list, data_file):\n    for limit_entry in price_limit_list:\n        if symbol_to_be_checked in limit_entry:\n            # Get the limit price, limits are saved in the format: TYPE SYMBOL PRICE\n            limit_price = float(limit_entry.split()[2])\n            notification_text = 'Current price is: ' + str(current_price)\n            notification_title = 'Price Alarm'\n\n            # Notify user if current price is lower than the BUY limit, then remove the limit from list\n            if 'BUY' in limit_entry and current_price \u003c limit_price:\n                notification_subtitle = 'BUY Limit: ' + str(limit_price)\n                notify(notification_text, notification_title, notification_subtitle)\n                remove_line_from_data_file(data_file, limit_entry)\n\n            # Notify user if current price is higher than the SELL limit, then remove the limit from list\n            if 'SELL' in limit_entry and current_price \u003e limit_price:\n                notification_subtitle = 'SELL Limit: ' + str(limit_price)\n                notify(notification_text, notification_title, notification_subtitle)\n                remove_line_from_data_file(data_file, limit_entry)\n\n\n# Print the indices information in the menu bar\ndef print_index(index, name):\n    market_state = index['marketState']\n    change = index['regularMarketChangePercent']\n\n    # Setting color and emojis depending on the market state and the market change\n    if market_state != 'REGULAR':\n        # Set change with a moon emoji for closed markets\n        colored_change = 'ðŸŒ›' + '(' + '{:.2f}'.format(change) + '%) '\n    if market_state == 'REGULAR':\n        # Set color for positive and negative values\n        color = ''\n        if change \u003e 0:\n            color = GREEN + 'â–²'\n        if change \u003c 0:\n            color = RED + 'â–¼'\n        # Format change to decimal with a precision of two and reset ansi color at the end\n        colored_change = color + '(' + '{:.2f}'.format(change) + '%) ' + RESET\n\n    # Print the index info only to the menu bar\n    print(name, colored_change, '| dropdown=false', sep=' ')\n\n\n# Print the stock info in the dropdown menu with additional info in the submenu\ndef print_stock(s):\n    market_state = s['marketState']\n    change = s['regularMarketChangePercent']\n\n    # Setting color and emojis depending on the market state and the market change\n    if market_state != 'REGULAR':\n        market = 'CLOSED'\n        # Set change with a moon emoji for closed markets\n        colored_change = 'ðŸŒ›' + '(' + '{:.2f}'.format(change) + '%) '\n    if market_state == 'REGULAR':\n        # Set color for positive and negative values\n        color = ''\n        market = 'OPEN'\n        if change \u003e 0:\n            color = GREEN + 'â–²'\n        if change \u003c 0:\n            color = RED + 'â–¼'\n        # Format change to decimal with a precision of two and reset ansi color at the end\n        change_in_percent = '(' + '{:.2f}'.format(change) + '%)'\n        colored_change = color + change_in_percent + RESET\n\n    # Remove appending stock exchange symbol for foreign exchanges, e.g. Apple stock symbol in Frankfurt: APC.F -\u003e APC\n    symbol = s['symbol'].split('.')[0]\n    # Convert epoch to human readable time HH:MM:SS\n    time = datetime.fromtimestamp(s['regularMarketTime']).strftime('%X')\n    # Convert float values to decimals with a precision of two\n    fifty_day = '{:.2f}'.format(s['fiftyDayAverage'])\n    two_hundred_day = '{:.2f}'.format(s['twoHundredDayAverage'])\n    fifty_day_change = '(' + '{:.2f}'.format(s['fiftyDayAverageChangePercent'] * 100) + '%)'\n    two_hundred_day_change = '(' + '{:.2f}'.format(s['twoHundredDayAverageChangePercent'] * 100) + '%)'\n\n    # Print the stock info seen in the dropdown menu\n    stock_info = '{:\u003c5} {:\u003e10} {:\u003c10}' + FONT\n    print(stock_info.format(symbol, s['regularMarketPrice'], colored_change))\n    # Print additional stock info in the submenu\n    stock_submenu = '{:\u003c17} {:\u003c17}' + FONT\n    print('--' + s['shortName'] + FONT)\n    print('--' + s['fullExchangeName'] + ' - Currency in ' + s['currency'] + FONT)\n    print('--' + time + ' - Market is ' + market + FONT)\n    print('-----')\n    print(stock_submenu.format('--Previous Close:', s['regularMarketPreviousClose']))\n    print(stock_submenu.format('--Open:', s['regularMarketOpen']))\n    print(stock_submenu.format('--Bid:', s['bid']))\n    print(stock_submenu.format('--Ask:', s['ask']))\n    print(stock_submenu.format(\"--Day's Range:\", s['regularMarketDayRange']))\n    print(stock_submenu.format('--52 Week Range:', s['fiftyTwoWeekRange']))\n    print(stock_submenu.format('--50 MA:', fifty_day + ' ' + fifty_day_change))\n    print(stock_submenu.format('--200 MA:', two_hundred_day + ' ' + two_hundred_day_change))\n\n\n# Print the price limits in the dropdown menu\ndef print_price_limits(price_limit_list):\n    PARAMETERS = FONT + \" refresh=true terminal='false' bash='\" + __file__ + \"'\"\n\n    print('---')\n    print('Price Limits' + FONT)\n    # Print available price limits in the submenu\n    for limit_entry in price_limit_list:\n        # Split the limit entry, limits are saved in the format: TYPE SYMBOL PRICE\n        limit_type = limit_entry.split()[0]\n        symbol = limit_entry.split()[1]\n        limit_price = limit_entry.split()[2]\n        price_limit_submenu = '{:\u003c6} {:\u003c4} {:\u003c10}'\n        # Print the price limit data into the submenu\n        # onClick will rerun this script with parameters 'remove' and the {limit_entry} to remove clicked the limit\n        print(price_limit_submenu.format('--' + limit_type, symbol, limit_price + PARAMETERS + \" param1='remove' param2='\" + limit_entry + \"'\"))\n    print('-----')\n    print('--To remove a limit, click on it.' + FONT)\n    # Print the clickable fields to set new limits or clear all price limits\n    # onClick will rerun this script with parameters 'set' to set a new limit\n    print('Set new Price Limit...' + PARAMETERS + \" param1='set'\")\n    # onClick will rerun this script with parameters 'clear' to clear the hidden .db file\n    print('Clear all Price Limits...' + PARAMETERS + \" param1='clear'\")\n\n\nif __name__ == '__main__':\n    data_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), '.' + os.path.basename(__file__) + '.db')\n\n    # Normal execution by BitBar without any parameters\n    if len(sys.argv) == 1:\n        stocks = []\n\n        # Check if hidden .db file exists\n        try:\n            price_limit_list = read_data_file(data_file)\n        except FileNotFoundError:\n            price_limit_list = []\n\n        # Print the menu bar information\n        for symbol, name in indices_dict.items():\n            # For each symbol: curl the data, then print it\n            index = get_stock_data(symbol)\n            print_index(index, name)\n\n        # For each symbol: curl the data, check against the .db file for limits\n        for symbol in symbols:\n            stock = get_stock_data(symbol)\n            stocks.append(stock)\n            check_price_limits(symbol, stock['regularMarketPrice'], price_limit_list, data_file)\n\n        # Set order of stocks\n        if sort_by == 'name':\n            stocks = sorted(stocks, key=lambda k: k['shortName'])\n        if sort_by == 'market_change_winners':\n            stocks = sorted(stocks, key=lambda k: k['regularMarketChangePercent'], reverse=True)\n        if sort_by == 'market_change_losers':\n            stocks = sorted(stocks, key=lambda k: k['regularMarketChangePercent'])\n        if sort_by == 'market_change_volatility':\n            stocks = sorted(stocks, key=lambda k: abs(k['regularMarketChangePercent']), reverse=True)\n\n        # Print the stock information inside the dropdown menu\n        print('---')\n        for stock in stocks:\n            print_stock(stock)\n\n        # Print the price limit section inside the dropdown\n        print_price_limits(price_limit_list)\n\n    # Script execution with parameter 'set' to set new price limits\n    if len(sys.argv) == 2 and sys.argv[1] == 'set':\n        # Run this until user does not want to continue\n        while True:\n            # Get the user selection of whether he wants to set 'BUY' or 'SELL'\n            limit_type_prompt = 'Select the type of your limit: BUY (SELL) limits are triggered, when the price is lower (higher) than the limit.'\n            limit_type_choices = '[\"BUY\", \"SELL\"]'\n            limit_type = prompt_selection(limit_type_prompt, limit_type_choices)\n\n            # Get the user selection of all tracked symbols\n            symbol = prompt_selection('Select stock symbol:', symbols)\n\n            # Get the user input for a price limit, info message includes the current market price\n            price = prompt('Current price of ' + symbol + ' is ' + str(get_stock_data(symbol)['regularMarketPrice']) + '. Enter a value for your price limit.')\n            # Check if the user input are decimals with a precision of two\n            if not re.match(r'^\\d+(\\.\\d{1,2})?$', price):\n                # Alert the user on invalid value and stop the script\n                alert('Error', 'You entered an invalid value: ' + price + ' - valid values are decimals with a precision of 2, e.g 25.70!')\n                sys.exit()\n\n            # Write the limit to the hidden .db file\n            write_data_file(data_file, limit_type, symbol, price)\n\n            # Ask user if he wants to add another limit\n            add_another_limit = alert('Question', 'Do you want to add another price limit?', ['No', 'Yes'])\n            # If the user clicked the 'No' button, stop the script\n            if add_another_limit is None:\n                sys.exit()\n\n    # Script execution with parameter 'clear' to clear the .db file\n    if len(sys.argv) == 2 and sys.argv[1] == 'clear':\n        # Ask for user confirmation\n        warning = alert('Warning', 'This will clear your price limits! Do you want to continue?')\n        if warning is None:\n            sys.exit()\n\n        # Clear the file\n        open(data_file, 'w').close()\n\n    # Script execution with the parameters 'remove' and the line to be removed\n    if len(sys.argv) == 3 and sys.argv[1] == 'remove':\n        limit_to_be_removed = sys.argv[2]\n        remove_line_from_data_file(data_file, limit_to_be_removed)\n"
			}
		],
		"path": "Finance/yahoo_stock_ticker.10m.py",
		"filename": "yahoo_stock_ticker.10m.py",
		"dir": "Finance",
		"docsPlugin": "Finance/yahoo_stock_ticker.10m.py.html",
		"docsCategory": "Finance.html",
		"pathSegments": [
			"Finance"
		],
		"categoryPathSegments": [
			{
				"path": "Finance",
				"text": "Finance",
				"isLast": true
			}
		],
		"title": "Yahoo Stock Ticker",
		"version": "v1.1",
		"author": "Long Do",
		"authors": [
			{
				"name": "Long Do",
				"githubUsername": "longpdo",
				"imageURL": "https://avatars.githubusercontent.com/u/33006592?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Shows major stock indices in the menu bar and stock symbols in the dropdown menu by pulling data from the Yahoo Finance API. Similar to finance.yahoo.com the prices are delayed, but no API key is necessary. You can also set price alarms for BUY/SELL limits, which will notify you when the limit is reached.",
		"imageURL": "https://github.com/longpdo/bitbar-plugins-custom/raw/master/images/yahoo-stock-ticker.png",
		"dependencies": [
			"python3"
		],
		"aboutURL": "https://github.com/longpdo/bitbar-plugins-custom/blob/master/README.md#yahoo-stock-ticker",
		"lastUpdated": "2021-03-08T15:21:54.108319Z",
		"vars": null
	}
}