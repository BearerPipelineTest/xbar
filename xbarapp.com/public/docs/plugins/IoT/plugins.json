{
	"plugins": [
		{
			"files": [
				{
					"path": "IoT/homebridge.10s.py",
					"filename": "homebridge.10s.py",
					"content": "#!/usr/bin/env python3\n#encoding: utf-8\n\n# \u003cbitbar.title\u003eHomebridge Controller\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Andrechek\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eEricAndrechek\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eControl Homebridge and connected devices.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://user-images.githubusercontent.com/35144594/102293908-0b849200-3f16-11eb-9778-7ce25edcc7ec.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython, requests module\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://homebridge.io/\u003c/bitbar.abouturl\u003e\n\nimport requests\nimport json\nimport pathlib\nimport os\nimport sys\n\n# Below Code Snippet from https://github.com/albertosottile/darkdetect/blob/master/darkdetect/_detect.py\n\nimport ctypes\nimport ctypes.util\n\nappkit = ctypes.cdll.LoadLibrary(ctypes.util.find_library('AppKit'))\nobjc = ctypes.cdll.LoadLibrary(ctypes.util.find_library('objc'))\n\nvoid_p = ctypes.c_void_p\null = ctypes.c_uint64\n\nobjc.objc_getClass.restype = void_p\nobjc.sel_registerName.restype = void_p\nobjc.objc_msgSend.restype = void_p\nobjc.objc_msgSend.argtypes = [void_p, void_p]\n\nmsg = objc.objc_msgSend\n\ndef _utf8(s):\n    if not isinstance(s, bytes):\n        s = s.encode('utf8')\n    return s\n\ndef n(name):\n    return objc.sel_registerName(_utf8(name))\n\ndef C(classname):\n    return objc.objc_getClass(_utf8(classname))\n\ndef theme():\n    NSAutoreleasePool = objc.objc_getClass('NSAutoreleasePool')\n    pool = msg(NSAutoreleasePool, n('alloc'))\n    pool = msg(pool, n('init'))\n\n    NSUserDefaults = C('NSUserDefaults')\n    stdUserDef = msg(NSUserDefaults, n('standardUserDefaults'))\n\n    NSString = C('NSString')\n\n    key = msg(NSString, n(\"stringWithUTF8String:\"), _utf8('AppleInterfaceStyle'))\n    appearanceNS = msg(stdUserDef, n('stringForKey:'), void_p(key))\n    appearanceC = msg(appearanceNS, n('UTF8String'))\n\n    if appearanceC is not None:\n        out = ctypes.string_at(appearanceC)\n    else:\n        out = None\n\n    msg(pool, n('release'))\n\n    if out is not None:\n        return out.decode('utf-8')\n    else:\n        return 'Light'\n\ndef isDark():\n    return theme() == 'Dark'\n\nhomebridgeBlack = \"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\"\nhomebridgeWhite = \"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\"\nofflineIcon = \"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\"\nhomebridgeIcon = homebridgeWhite if isDark() else homebridgeBlack\nprintColor = \"white\" if isDark() else \"black\"\n\ndef printer(content):\n    if type(content) is list:\n        for line in content:\n            print(line + \" | color={}\".format(printColor))\n    elif content != \"---\" and content != \"--\":\n        print(content + \" | color={}\".format(printColor))\n    else:\n        print(content)\n\n\ndef doStuff(token, url, icon, command, unit):\n    headers = {\n        'accept': '*/*',\n        'Authorization': 'Bearer {}'.format(token),\n    }\n\n    if command:\n        if command == \"restart\":\n            requests.put('{}/api/server/restart'.format(url), headers=headers)\n        elif command == \"reboot\":\n            requests.put('{}/api/platform-tools/linux/restart-host'.format(url), headers=headers)\n    else:\n        cpu = \"\"\n        temp = \"\"\n        ram = \"\"\n        updates = []\n        numUpdates = 0\n        uptime = \"\"\n        status = \"\"\n        state = False\n\n        updatesRequest = requests.get('{}/api/plugins'.format(url), headers=headers)\n        if updatesRequest.status_code == 200:\n            for plugin in updatesRequest.json():\n                name = plugin['name']\n                update = plugin['updateAvailable']\n                link = \"https://github.com/\" + plugin['author'] + '/' + plugin['name'] + '/releases/latest'\n                try:\n                    name = plugin['displayName']\n                except:\n                    pass\n                if update is True:\n                    numUpdates += 1\n                updates.append(\"{} v{} - {} | href={}\".format(name, plugin['installedVersion'], \"up to date\" if not update else \"new update v{}\".format(plugin['latestVersion']), link))\n        nodeJSRequest = requests.get('{}/api/status/nodejs'.format(url), headers=headers)\n        if nodeJSRequest.status_code == 200:\n            nodeVersion = nodeJSRequest.json()\n            updates.append(\"NodeJS {} - {} | href=https://github.com/nodejs/node/releases/latest\".format(nodeVersion['currentVersion'], \"up to date\" if not nodeVersion['updateAvailable'] else \"new update {}\".format(nodeVersion['latestVersion'])))\n            numUpdates += 1 if nodeVersion['updateAvailable'] else 0\n        homebridgeRequest = requests.get('{}/api/status/homebridge-version'.format(url), headers=headers)\n        if homebridgeRequest.status_code == 200:\n            hbVersion = homebridgeRequest.json()\n            updates.append(\"Homebridge v{} - {} | href=https://github.com/homebridge/homebridge/releases/latest\".format(hbVersion['installedVersion'], \"up to date\" if not hbVersion['updateAvailable'] else \"new update v{}\".format(hbVersion['latestVersion'])))\n            numUpdates += 1 if hbVersion['updateAvailable'] else 0\n        numUpdates = \"Avaliable Updates: \" + str(numUpdates)\n\n        cpuRequest = requests.get('{}/api/status/cpu'.format(url), headers=headers)\n        if cpuRequest.status_code == 200:\n            cpu = \"CPU: \" + str(round(float(cpuRequest.json()[\"currentLoad\"]))) + \"%\"\n            try:\n                init_temp = float(cpuRequest.json()[\"cpuTemperature\"][\"main\"])\n                if unit == \"F\":\n                    init_temp = str(round((init_temp * (9/5)) + 32))\n                else:\n                    init_temp = str(round(init_temp)) \n                temp = \"Temperature: \" + init_temp + \"˚\" + unit\n            except:\n                pass\n        \n        ramRequest = requests.get('{}/api/status/ram'.format(url), headers=headers)\n        if ramRequest.status_code == 200:\n            ram = \"RAM: \" + str(100 - round((int(ramRequest.json()[\"mem\"][\"available\"]) / int(ramRequest.json()[\"mem\"][\"total\"])) * 100)) + \"%\"\n        \n        uptimeRequest = requests.get('{}/api/status/uptime'.format(url), headers=headers)\n        if uptimeRequest.status_code == 200:\n            uptime = \"Uptime: \" + str(round(round(float(uptimeRequest.json()[\"processUptime\"])) / 86400)) + \" days\"\n        \n        statusRequest = requests.get('{}/api/status/homebridge'.format(url), headers=headers)\n        if statusRequest.status_code == 200:\n            if statusRequest.json()[\"status\"] == \"up\":\n                state = True\n            upWord = \"up\"\n            downWord = \"down\"\n            status = \"Homebridge is \" + upWord if state else downWord\n        \n        ico = \"\"\n        if icon.upper() == \"CPU\":\n            ico = cpu.split(\": \")[1]\n        elif icon.upper() == \"RAM\":\n            ico = ram.split(\": \")[1]\n        elif icon.upper() == \"TEMP\":\n            ico = temp.split(\": \")[1]\n        elif icon.upper() == \"UPTIME\":\n            ico = uptime.split()[1] + \"d\"\n        elif icon.upper() == \"UPDATES\":\n            ico = numUpdates.split(\": \")[1]\n        else:\n            ico = \"| image={}\".format(homebridgeIcon) if state else \"| image={}\".format(offlineIcon)\n        print(ico)\n        printer('---')\n        printer('Open Homebridge UI | href={}'.format(url))\n        printer('---')\n        printer(status)\n        printer(numUpdates)\n        printer(uptime)\n        printer('---')\n        printer(cpu)\n        printer(ram)\n        printer(temp)\n        printer('---')\n        printer(updates)\n        printer('---')\n        print('Restart Homebridge | bash=\"' + str(__file__) + '\" param1=restart terminal=false')\n        print('Reboot Server | bash=\"' + str(__file__) + '\" param1=reboot terminal=false')\n\ndef login(username, password, url, icon, command, unit, config):\n    headers = {\n        'accept': '*/*',\n        'Content-Type': 'application/json',\n    }\n    data = {\n        \"username\": username,\n        \"password\": password\n    }\n    response = requests.post('{}/api/auth/login'.format(url), headers=headers, data=json.dumps(data))\n    if response.status_code == 201:\n        token = response.json()['access_token']\n        firstSection = \"\"\n        lastSection = \"\"\n        with open(config, 'r') as oldConfig:\n            conf = oldConfig.read().split('[homebridge]')\n            firstSection = conf[0]\n            try:\n                lastSection = \"[\" + conf[1].split(\"[\")[1]\n            except IndexError:\n                pass\n        with open(config, 'w') as newConfig:\n            newConfig.write(firstSection)\n            newConfig.write('[homebridge]\\n')\n            newConfig.write(\"# edit the username and password to your homebridge's and then save and close\\n\")\n            newConfig.write(\"# you can also modify the url from the default if desired\\n\")\n            newConfig.write(\"# to change the icon image, specify whether you want to see: \\\"CPU\\\", \\\"TEMP\\\", \\\"RAM\\\", \\\"UPTIME\\\", \\\"UPDATES\\\", or \\\"STATUS\\\". Defaults to \\\"STATUS\\\"\\n\")\n            newConfig.write(\"username = \\\"{}\\\"\\n\".format(username))\n            newConfig.write(\"password = \\\"{}\\\"\\n\".format(password))\n            newConfig.write(\"url = \\\"{}\\\"\\n\".format(url))\n            newConfig.write(\"icon = \\\"{}\\\"\\n\".format(icon))\n            newConfig.write(\"token = \\\"{}\\\"\\n\".format(token))\n            newConfig.write(\"unit = \\\"{}\\\"\\n\".format(unit))\n            newConfig.write(lastSection)\n        doStuff(token, url, icon, command, unit)\n    else:\n        printer('❌') # login failed\n\nconfig = pathlib.Path.home().joinpath('.config', 'bitbar', 'config')\nconfig.touch(exist_ok=True)\n\ncommand = None\nif len(sys.argv) \u003e 1:\n    command = sys.argv[1]\n\nhbConfig = []\nwith open(config, 'r') as file:\n    for section in file.read().split('['):\n        if section.split('\\n')[0] == 'homebridge]':\n            hbConfig = section.split('\\n')[3:]\nif hbConfig == []:\n    with open(config, \"a\") as file:\n        file.write(\"\\n[homebridge]\\n\")\n        file.write(\"# edit the username and password to your homebridge's and then save and close\\n\")\n        file.write(\"# you can also modify the url from the default if desired\\n\")\n        file.write(\"# to change the icon image, specify whether you want to see: \\\"CPU\\\", \\\"TEMP\\\", \\\"RAM\\\", \\\"UPTIME\\\", \\\"UPDATES\\\", or \\\"STATUS\\\". Defaults to \\\"STATUS\\\"\\n\")\n        file.write(\"username = \\\"\\\"\\n\")\n        file.write(\"password = \\\"\\\"\\n\")\n        file.write(\"url = \\\"http://homebridge.local\\\"\\n\")\n        file.write(\"icon = \\\"STATUS\\\"\\n\")\n        file.write(\"token = \\\"\\\"\\n\")\n        file.write(\"unit = \\\"C\\\"\\n\")\n    os.system(\"open \" + str(config))\nelse:\n    token = \"\"\n    username = \"\"\n    password = \"\"\n    url = \"\"\n    icon = \"\"\n    unit = \"\"\n    for line in hbConfig:\n        if line.split(\" = \")[0] == \"username\":\n            username = line.split(\" = \")[1].split(\"\\\"\")[1]\n        elif line.split(\" = \")[0] == \"password\":\n            password = line.split(\" = \")[1].split(\"\\\"\")[1]\n        elif line.split(\" = \")[0] == \"token\":\n            token = line.split(\" = \")[1].split(\"\\\"\")[1]\n        elif line.split(\" = \")[0] == \"url\":\n            url = line.split(\" = \")[1].split(\"\\\"\")[1]\n        elif line.split(\" = \")[0] == \"icon\":\n            icon = line.split(\" = \")[1].split(\"\\\"\")[1]\n        elif line.split(\" = \")[0] == \"unit\":\n            unit = line.split(\" = \")[1].split(\"\\\"\")[1]\n    if token:\n        headers = {\n            'accept': '*/*',\n            'Authorization': 'Bearer {}'.format(token),\n        }\n\n        checkToken = requests.get('{}/api/auth/check'.format(url), headers=headers)\n        if checkToken.status_code == 401:\n            login(username, password, url, icon, command, unit, config)\n        elif checkToken.status_code == 200:\n            doStuff(token, url, icon, command, unit)\n        else:\n            printer(\"❌\")\n    else:\n        login(username, password, url, icon, command, unit, config)\n"
				}
			],
			"path": "IoT/homebridge.10s.py",
			"filename": "homebridge.10s.py",
			"dir": "IoT",
			"docsPlugin": "IoT/homebridge.10s.py.html",
			"docsCategory": "IoT.html",
			"pathSegments": [
				"IoT"
			],
			"categoryPathSegments": [
				{
					"path": "IoT",
					"text": "IoT",
					"isLast": true
				}
			],
			"title": "Homebridge Controller",
			"version": "v1.0",
			"author": "Eric Andrechek",
			"authors": [
				{
					"name": "Eric Andrechek",
					"githubUsername": "EricAndrechek",
					"imageURL": "https://avatars.githubusercontent.com/u/35144594?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Control Homebridge and connected devices.",
			"imageURL": "https://user-images.githubusercontent.com/35144594/102293908-0b849200-3f16-11eb-9778-7ce25edcc7ec.png",
			"dependencies": [
				"python",
				"requests module"
			],
			"aboutURL": "https://homebridge.io/",
			"lastUpdated": "2021-03-08T15:21:54.474241Z",
			"vars": null
		}
	]
}