{
	"plugins": [
		{
			"files": [
				{
					"path": "Lifestyle/Todo/todoNotePlan.15m.rb",
					"filename": "todoNotePlan.15m.rb",
					"content": "#!/usr/bin/env ruby\n# coding: utf-8\n\n# \u003cbitbar.title\u003eNotePlan Todo in Colour\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.5\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRichard Guay\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eraguay\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eA todo list taken from NotePlan and displayed with customizable color-code. Mark tasks \"done\" simply by clicking on them in the menubar drop-down list. This was based on \"Todo Colour\" plugin by Srdgh.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://customct.com/images/NotePlanPlugin-01.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://customct.com/bitbar\u003c/bitbar.abouturl\u003e\n#\n# Modifications by Guillaume Barrette\n#   2017/07/01:\n#     - Added option to show subtasks\n#   2017/06/15:\n#     - Changed TRUE/FALSE constant to true/false since uppercase are deprecated in ruby 2.4\n#     - Changed labels to start with '#' to follow NotePlan way of tagging\n#     - Allow to change Fonts by the user\n#     - Added a new parameter for users to specify if want the task to be archived at the end of the file or not\n#     - Added alternate action to mark as cancelled instead of done (using the Option modifier key)\n#     - Allow indentation at beginning of task\n#   2017/06/03:\n#     - Added 'divide_with_header' to allow to show sections separated by headers\n#     - Updated the algorithm to skip all items that are not a task (Skip anything that doesn't starts with '- ' or '* ' and if followed by [x], [\u003e], [-])\n#   2017/05/28:\n#     - Fixed the line number of item to mark as done by getting the id before stripping the lines that are not a task\n#     - Scheduled task (to another day - [\u003e]) are now skipped also\n#   2017/05/20:\n#     - Added Black and White NotePlan menubar icon\n#     - Repaired a bug when there was no newline on the last line the done task would get appended to the last line instead of a new line at the end\n#     - Added the time in the @done(YYYY-MM-DD HH:MM) so it's like NotePlan preference\n#     - Added User Parameters so it's easy to determine if we want to append the @done(...) string at the end of the done task and if we want the black or white menubar icon\n#     - Changed the menubar icon to a templateImage so the color changes automatically when using a dark menubar (removed the white icon)\n#     - Removed 'use_black_icon' parameters since now it's automatic\n#     - Changed encoding method and removed the use of 'force_encoding(\"utf-8\")'\n#     - Repaired a bug if there was no file already created for that day in NotePlan\n#\n# Modifications by Richard Guay\n#   05/20/2017:\n#       - Added using emoji option\n#       - fixed character encoding on removing an item\n#       - Proper parsing of [ ] in the todo.\n#       - cleanup\nrequire 'date'\n\n#################################\n# User Parameters:\ninsert_date_on_done_task = true  # If true, the date would be inserted with the @done tag\nuse_emoji = false                # If true, will show emoji, otherwise it will use the black or white icon.\nuse_star = false                 # if true, will look for and use '*' instead of '-'\nshow_alt_task = true             # If true, tasks marked with the alternate character ('* ' if use_star is FALSE or '- ' if use_star is TRUE) would be shown in the task list. For example, this could be useful to use them as bullet list.\nshow_subtasks = true             # If true, subtasks would be shown in the list\ndivide_with_header = true        # If true, headers would be listed and a separator is put between lists\narchive_task_at_end = false      # If true, the task would get archived to the end of the note\nuse_icloud = true                # If true, files will be checked from iCloud. Otherwise:\nuse_container = true             # If true and not iCloud, it will treat as MAS store version. Otherwise, it is non-MAS store version\n\nstandard_font = ''               # Font used for tasks\nheader_font   = 'Helvetica-Bold' # Font used for headers if listed with 'divide_with_header'\n#################################\n\nEncoding.default_internal = Encoding::UTF_8\nEncoding.default_external = Encoding::UTF_8\n\ntodo_file_loc = ''\nif use_icloud\n  todo_file_loc = File.expand_path('~/Library/Mobile Documents/iCloud~co~noteplan~NotePlan/Documents/Calendar/' + Date.today.strftime('%Y%m%d') + '.txt')\nelse\n  if use_container\n    todo_file_loc = File.expand_path('~/Library/Containers/co.noteplan.NotePlan/Data/Library/Application Support/co.noteplan.NotePlan/Calendar/' + Date.today.strftime('%Y%m%d') + '.txt')\n  else\n    todo_file_loc = File.expand_path('~/Library/Application Support/co.noteplan/Calendar/' + Date.today.strftime('%Y%m%d') + '.txt')\n  end\nend\n\nif ARGV.empty?\n  #\n  # Add further priority labels here\n  #\n  priority_labels = ['@urgent', '@due']\n\n  #\n  # Change priority color here\n  #\n  priority_color = 'red'\n\n  #\n  # Customise label color-code here:\n  #\n  labels = {\n    '@Work' =\u003e 'orange',\n    '@Play' =\u003e 'yellow',\n    '@home' =\u003e 'green',\n    '@daily' =\u003e 'blue',\n    '@Health' =\u003e 'cadetblue',\n    '@church' =\u003e 'lightblue',\n    '@tutorials' =\u003e 'violet',\n    '@Envato' =\u003e 'darkorange',\n    '@workflow' =\u003e 'purple',\n    '@tutorial' =\u003e 'cobaltblue'\n  }\n\n  linesInFile = File.exist?(todo_file_loc.to_s) ? IO.readlines(todo_file_loc.to_s) : []\n  lines = []\n\n  #\n  # Remove all lines that are not a todo. Stop at the first empty line.\n  #\n  line_number = []\n  line_number_id = 0\n  taskStyleToSearch = (show_alt_task) ? ['- ', '* '] : (use_star) ? ['* '] : ['- ']\n  linesInFile.each_index do |key|\n    #\n    # Clean out leading and trailing white spaces (space, tabs, etc)\n    #\n    line = linesInFile[key].gsub(/\\s+$/, '')\n    taskLine = show_subtasks ? line.gsub(/^\\s+/, '') : line\n    if (taskLine.start_with?(*taskStyleToSearch)) \u0026\u0026 (!taskLine[2..4].start_with?('[x]', '[\u003e]', '[-]'))  # Get only active Task items\n      #\n      # It's a todo line to display. Remove the leading '-' and add\n      # to the list.\n      #\n      if use_star\n        lines.push(line.gsub(/^(\\s*)\\*\\s*(\\[ \\]\\s*)*/, '\\1'))\n      else\n        lines.push(line.gsub(/^(\\s*)\\-\\s*(\\[ \\]\\s*)*/, '\\1'))\n      end\n      line_number.push(line_number_id)\n    elsif divide_with_header \u0026\u0026 line.start_with?('#')\n      lines.push(line)\n      line_number.push(line_number_id)\n    end\n    line_number_id += 1\n  end\n\n  #\n  # Give the header. It's the NotePlan icon or an emoji briefcase with the number of items todo\n  #\n  iconBase64 = 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAViAAAFYgBxNdAoAAABCRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIgogICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyI+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0MDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHRpZmY6WVJlc29sdXRpb24+MTQwPC90aWZmOllSZXNvbHV0aW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MzI8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpDb2xvclNwYWNlPjE8L2V4aWY6Q29sb3JTcGFjZT4KICAgICAgICAgPGV4aWY6UGl4ZWxZRGltZW5zaW9uPjMyPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgICAgPGRjOnN1YmplY3Q+CiAgICAgICAgICAgIDxyZGY6QmFnLz4KICAgICAgICAgPC9kYzpzdWJqZWN0PgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAxNzowNToyMCAwMDowNToyMDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+UGl4ZWxtYXRvciAzLjY8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CpI9t/8AAAPASURBVFgJtZdLSFRRGMfn/aJRZ5wITQwqCAkzUlrYJrGCLITIateiRbugh7iQCKqVm2pRywgLitBFtchFCVlERQshowckSIllIc44Os44r35nune4c71z5s5gB86c73W+/3e+851zz9gta9wCgUCj2+0+ZrVa51KpVBT3WRmEXaYsRxcMBtsBvgzwDebZnE5nq9frnYrH479lfhwypRmd3+/f43A4+rLZbJfNZnMwJuijSiAf8DEh82OTKUvovKR7AHAB1o1tbjGAjxBIMzI3dEcJH5aKAqihAT4MSB8AAiiHw5hC9pzxqJBBt4VCIb8siEoCcON4kN6lAqsA8K8ymUwdGdigyBooxC2q3mgsOwAW3w94tx4cmfD/BPAeVYfMAb/VCFiVlVWEpL2Zib0qgOqEMYXsNYBiC7Zp9WSkQWO3iiwrAzg+B4BP9QJtQTZG3+1yuQ4hXwVGAO2qvdFoOgBSvwnAI9rVQYvquxQOh8dnZ2eX0un0I0RJHVC1ji9gTQcAeBe9pmD2Pya3+YJErwcX4jfip1gzVQOsvgUHZ7SrVxyCaR2gNk4r/C1Gp0LnBrvd/lXL6+l89HqFyldXV++jkh/Ah1SZwRhXZB6dLpFMJnctLi5+0snzrDQDrHwnK7yPtQxcONMDi+0QBfoecGkGitZAVVVVECeD9PX5cMskCOA2U9KyaUUDYO+uAL7DYN9l/vI65k3wdRzKC4oQhjXA6g/ykXlaKThY4mLq4Xg+LoKbFxu+B7hURG1ElPRXsgUTgF/Ah/QxIqIw3IJoNPolEolc5EHRxk12ALuXwriMtoxtxoy99BTMzMzEcPKM05AgG2NmHGJnIWj1WJacYpgB/ayVlZVv7GlCL5fwUxJdgcpMAE6PxxNgVj89LFaobXpe0Y1rbWR0yQC4CU+y+ocU1TVutXbSeweHSwrwNPxd+B9qINimkb2VgZrW1dfX+9j/SV68vdpJ8NvpJ2prazcKOd+CRuyGkGWhJxF5tfYyWlqEsVhsP9+BzaxKvO/zjc9ujBU3kZXcRTM/P/8d5XGCOMsYpItTYKpJAyCVvwAawVOr1hu35CmCEi/hqxp5loCua3hTpLQGFhYW3uFF3GrTwpvP56sjzcOQ5wnuJqP0nhdzSjVpAEx20VvYhkXxvOZuF+BNBPSCi+peKedm9IVnSjdDfBGVB8VHtmIdwG5MDnMalvnM/tGZV8SWqgHxrLbQ9wL+k7Fzbm5OFNyaNekW8AdTXMEp0Eb5g9EB+Oc1QzbpyMFF1ImtqIX/0v4CwBRdmE9e8GAAAAAASUVORK5CYII='\n\n  lineCount = 0\n  lines.each { |line|  lineCount += 1 unless line.start_with?('#') }\n  if use_emoji\n    puts \"ðŸ’¼#{lineCount}\"\n  else\n    puts \"#{lineCount} |templateImage=#{iconBase64}\"\n  end\n\n  puts '---'\n\n  cfn = File.expand_path(__FILE__)\n\n  #\n  # Create the list of items to do in the menu.\n  #\n  item_number = 0\n  lines.each do |item|\n    line_color = \"\"\n    line = item.chomp\n    if priority_labels.any? { |s| line.include? s }\n      #\n      # If line contains priority label, display in priority color\n      #\n      line_color = priority_color\n    else\n      #\n      # If line contains no priority label, cycle through labels hash,\n      # and if line contains a label display in corresponding color\n      #\n      labels.each { |label, label_color| line_color = label_color if line.include?(label) }\n    end\n    #\n    # If the line contains no label, display in default color. Otherwise, in\n    # chosen color. Clicking line launches this script with line number as\n    # the parameter.\n    #\n    line_font = standard_font\n    if line.start_with?('#')\n      puts('---') unless line.start_with?('##')\n      line_font = header_font\n    end\n    lineParams = \"#{line_color.empty? ? '' : 'color='+line_color} #{line_font.empty? ? '' : 'font='+line_font} bash='#{cfn}' param1=#{line_number[item_number]}\"\n    puts(\"#{line} | \" + lineParams + \" param2=x terminal=false trim=false refresh=\\n\")\n    puts(\"#{line} | alternate=true \" + lineParams + \" param2=- terminal=false trim=false refresh=\\n\")\n    item_number += 1\n  end\n  puts '---'\n  puts \"Click an item to mark as 'done'\"\n  puts \"Click an item to mark as 'cancelled' | alternate=true\"\n  puts 'Refresh | refresh='\nelse\n  #\n  # This is what to do when clicking on an item. We want to move\n  # the item to the Archive section and set it as done. If there\n  # isn't an Archive area, create it and add the task to it.\n  #\n  # Get the task number to archive.\n  #\n  doNum = ARGV[0].to_i\n  mark = ARGV[1]\n\n  #\n  # Get the list of todos and setup variables\n  #\n  todo_file = File.open(todo_file_loc.to_s)\n  linesInFile = IO.readlines(todo_file)\n\n  if !linesInFile[doNum].start_with?('#')  # Do nothing if the item is a header\n    task = ''\n    lines = []\n    line_number = 0\n\n    linesInFile[-1] = linesInFile[-1] + \"\\n\" unless linesInFile[-1].include? \"\\n\"\n\n    #\n    # Process the todo list lines.\n    #\n    linesInFile.each do |line|\n      if line_number != doNum\n        #\n        # It is one of the other lines. Just push it into the stack.\n        #\n        lines.push(line)\n      else\n        #\n        # Get the line to be moved to the archive area.\n        #\n        if insert_date_on_done_task\n          task = line.chomp + (mark == 'x' ? \" @done(#{Time.new.strftime('%Y-%m-%d %H:%M')})\\n\" : \"\\n\")\n        else\n          task = line.chomp + \"\\n\"\n        end\n        task = task.gsub(/^(\\s*)([\\-\\*]+)\\s*(\\[ \\]\\s*)*/, '\\1\\2 [' + mark + '] ')  # Works with both task style, useful if mix with 'show_alt_task', also it keeps the indentation at beginning of the line\n        lines.push(task) unless archive_task_at_end\n      end\n      line_number += 1\n    end\n\n    #\n    # Add the task to the bottom.\n    #\n    lines.push(task) if archive_task_at_end\n\n    #\n    # Save the file.\n    #\n    IO.write(todo_file, lines.join)\n  end\nend\n"
				}
			],
			"path": "Lifestyle/Todo/todoNotePlan.15m.rb",
			"filename": "todoNotePlan.15m.rb",
			"dir": "Lifestyle/Todo",
			"docsPlugin": "Lifestyle/Todo/todoNotePlan.15m.rb.html",
			"docsCategory": "Lifestyle/Todo.html",
			"pathSegments": [
				"Lifestyle",
				"Todo"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/Todo",
					"text": "Todo",
					"isLast": true
				}
			],
			"title": "NotePlan Todo in Colour",
			"version": "v1.5",
			"author": "Richard Guay",
			"authors": [
				{
					"name": "Richard Guay",
					"githubUsername": "raguay",
					"imageURL": "https://avatars.githubusercontent.com/u/2487495?v=4",
					"bio": "I'm an American missionary in Tak, Thailand doing freelance work to help pay medical and college needs for my family of eight kids.",
					"primary": true
				}
			],
			"desc": "A todo list taken from NotePlan and displayed with customizable color-code. Mark tasks \"done\" simply by clicking on them in the menubar drop-down list. This was based on \"Todo Colour\" plugin by Srdgh.",
			"imageURL": "http://customct.com/images/NotePlanPlugin-01.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "http://customct.com/bitbar",
			"lastUpdated": "2021-03-08T15:21:54.884511Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/Todo/todo.30s.sh",
					"filename": "todo.30s.sh",
					"content": "#!/usr/bin/env bash\n#\n# \u003cbitbar.author\u003ez0mbix\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ez0mbix\u003c/bitbar.author.github\u003e\n# \u003cbitbar.title\u003eSimple Todo Tracker\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n#\n# Track todos in a simple ~/.todo file\n#\n\ntodo_file=\"$HOME/.todo\"\ncount=$(grep -c '[^[:space:]]' \"$todo_file\" | awk '{print $1}')\necho \"Todos: $count\"\necho \"---\"\ncat \"$todo_file\"\n"
				}
			],
			"path": "Lifestyle/Todo/todo.30s.sh",
			"filename": "todo.30s.sh",
			"dir": "Lifestyle/Todo",
			"docsPlugin": "Lifestyle/Todo/todo.30s.sh.html",
			"docsCategory": "Lifestyle/Todo.html",
			"pathSegments": [
				"Lifestyle",
				"Todo"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/Todo",
					"text": "Todo",
					"isLast": true
				}
			],
			"title": "Simple Todo Tracker",
			"version": "1.0",
			"author": "z0mbix",
			"authors": [
				{
					"name": "David Wooldridge",
					"githubUsername": "z0mbix",
					"imageURL": "https://avatars.githubusercontent.com/u/221251?v=4",
					"bio": "Getting things done.",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:54.881668Z",
			"vars": null
		}
	]
}