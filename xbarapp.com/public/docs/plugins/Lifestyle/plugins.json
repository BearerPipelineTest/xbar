{
	"plugins": [
		{
			"files": [
				{
					"path": "Lifestyle/org-agenda.30m.rb",
					"filename": "org-agenda.30m.rb",
					"content": "#!/usr/bin/env ruby\n# coding: utf-8\n\n# \u003cbitbar.title\u003eAgenda\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eyqrashawn\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eyqrashawn\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003edisplay emacs org-agenda in bitbar\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://github.com/yqrashawn/bitbar-plugin-agenda/raw/master/bitbar-ext-org-agenda.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby,emacs\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://yqrashawn.com/2017/11/25/org-agenda-bitbar-plugin/\u003c/bitbar.abouturl\u003e\n\n# for more information please checkout http://yqrashawn.com/2017/11/25/org-agenda-bitbar-plugin/\n# it's on github https://github.com/yqrashawn/bitbar-plugin-agenda\n\nrequire 'open3'\n\nEncoding.default_external = Encoding::UTF_8\nEncoding.default_internal = Encoding::UTF_8\n\n# your exported agenda files directory path eg. \"#{Dir.home}/agendas/work/\"\nagenda_directory = 'your agenda directory'\n\n# the exported txt agenda file that in the agenda_directory eg. 'todos.txt'\nagenda_name = 'todos.txt'\n\n# the agenda custome command which brings the agenda view that you want to export\nagenda_custome_command = 'B'\n\n# function to REALLY kill emacs\n# for spacemacs use (spacemacs/kill-emacs)\nkill_emacs_function = '(let (kill-emacs-hook) (kill-emacs))'\n\n# Change priority color here\ntag_color = 'orange'\n\n# Customise label color-code here (these colors are optimised for a dark theme menubar)\nlabels = {\n  '[#A]' =\u003e 'red',\n  '[#B]' =\u003e 'yellow',\n  '[#C]' =\u003e 'violet'\n}\n\ntag_indicator = 'Headlines with TAGS match: '\n\n# close stdout stderr\nsystem '/usr/local/bin/emacs',\n       '--batch',\n       '-l',\n       '~/.emacs.d/init.el',\n       '--eval',\n       '(run-hooks \\'emacs-startup-hook)',\n       '--eval',\n       \"(progn (org-agenda nil \\\"#{agenda_custome_command}\\\") (org-agenda-write \\\"#{agenda_directory}#{agenda_name}\\\") #{kill_emacs_function})\",\n       :out =\u003e :close,\n       :err =\u003e :close\n\nagenda_file = File.open(\"#{agenda_directory}#{agenda_name}\")\n\nlines = IO.readlines(agenda_file)\n\n# remove empty line\nlines.reject! { |s| s.nil? || s.strip.empty? }\nlines.reject! { |s| s.include?('=====') }\nlines.each.with_index do |line, i|\n  # get url for urls [[https://example.com][example]]\n  url = ''\n  if line.include?('[[http')\n    url = line.slice(/\\[\\[((http?|ftp).*\\]\\[)/)\n    lines[i] = line.sub(url, '')\n    lines[i] = lines[i].sub ']]', ''\n    line = lines[i]\n    url = url.slice(2, url.length - 4)\n  end\n\n  # detect tag line\n  if line.include?(tag_indicator)\n    lines[i] = \"#{line.slice(tag_indicator.length, line.length).delete(\"\\n\")} | color=#{tag_color} font=Hack\"\n  else\n    # get color dpends on priority\n    line_color = ''\n    labels.each { |label, label_color| line_color = label_color if line.include?(label) }\n    line_color = 'white' if line_color.strip.empty?\n\n    # remove TODO, add color, special font for clickable one\n    lines[i] = \"#{line.delete(\"\\n\").squeeze(' ')}|color=#{line_color} #{url.strip.empty? ? '' : \"font=Hack bash=open param1=\" + \"'\" + url + \"'\" + \" terminal=true\"}\"\n  end\nend\n\nputs \"Do: #{lines.length}\"\nputs '---'\nputs lines"
				}
			],
			"path": "Lifestyle/org-agenda.30m.rb",
			"filename": "org-agenda.30m.rb",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/org-agenda.30m.rb.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Agenda",
			"version": "v1.0",
			"author": "yqrashawn",
			"authors": [
				{
					"name": "yqrashawn",
					"githubUsername": "yqrashawn",
					"imageURL": "https://avatars.githubusercontent.com/u/15090582?v=4",
					"bio": "Extremely busy till Nov",
					"primary": true
				}
			],
			"desc": "display emacs org-agenda in bitbar",
			"imageURL": "https://github.com/yqrashawn/bitbar-plugin-agenda/raw/master/bitbar-ext-org-agenda.png",
			"dependencies": [
				"ruby",
				"emacs"
			],
			"aboutURL": "http://yqrashawn.com/2017/11/25/org-agenda-bitbar-plugin/",
			"lastUpdated": "2021-03-08T15:21:55.811978Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/wallpaperbing.1h.sh",
					"filename": "wallpaperbing.1h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eBing Wallpapers\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTok1\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eTokfrans03\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eA new wallpaper from Bing every hour\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eJQ\u003c/bitbar.dependencies\u003e\n\nexport PATH=\"/usr/local/bin:$PATH\"\n\nJQ=$(command -v jq)\n\nimageurls=(/tmp/imageurls.txt)\n\nfirst_time=$(defaults read wallpaperbing path 2\u003e\u00261 | grep exist)\n\n# If it's the first time we create a domain\n\nif [ ! \"$first_time\" = '' ]; then \n\n    defaults write wallpaperbing path /tmp/wallpaper.jpg\n\n    defaults write wallpaperbing setting today\n\nfi\n\nreadsetting=$(defaults read wallpaperbing setting)\n\ndefaultspath=$(defaults read wallpaperbing path)\n\n# Create a random number for random URL selection\n\nrandom=$((1 + RANDOM % 8))\n\n# check if JQ is installed\n\nif [ ! -e \"$JQ\" ]; then\n\n    echo \"Please install JQ with brew install JQ\"\n\n    echo ---\n\n    echo \"Install JQ | bash=brew param1=install param2=jq terminal=true\"\n    \n    echo ---\n\n    echo \"Update | refresh=true\"\n\n    exit\n\nfi\n\n# Download the json with all the image URLs\n\njson=$( (curl -s \"https://www.bing.com/HPImageArchive.aspx?format=js\u0026idx=0\u0026n=8\") | $JQ '.images')\n\nif [ \"$1\" = '' ]; then\n\n    #Bing logo\n\n    echo \"| templateImage=iVBORw0KGgoAAAANSUhEUgAAAAwAAAAPCAQAAAB66ObCAAAAr0lEQVR4AXWNM0LHARzFP9l2nSCObR0g2xfItrV2gbzEuZZca+25lrDl+tv88Wu+B09sUE88MtFhQUez8sLCgNqinxDClRa95LLHBHnE4CP9OMDCDxfMU0CakKPRVVvQcC1chNPBJUZHbxYuIIpR/oSLP2oJpppTD9gP6PlghFJ20biGBo4ogzfW2OEbi0sf6CYW4JwPz/CLRTIAAHLYQOsAOKGAQAQSySQvzJGIQKxs7lzLIn88zwAAAABJRU5ErkJggg==\"\n    echo ---\n    \n    \n    echo \"Update | refresh=true\"\n    \n    echo ---\n    \n    echo \"Options\"\n    echo \"--Today | bash=$0 param1='set' param2='today' terminal=false refresh=true\"\n    echo \"--Random | bash=$0 param1='set' param2='random' terminal=false refresh=true\"\n    \n\n\n    if [ \"$readsetting\" = \"today\" ]; then\n\n        echo \"Current setting: Today\"\n\n        $0 today\n\n    else\n    \n      echo \"Current setting: Random\"\n\n        $0 random\n\n    fi\n\nfi\n\nif [ \"$1\" = 'set' ]; then\n\n    if [ \"$2\" = 'today' ]; then\n\n        defaults write wallpaperbing setting today\n\n    fi\n\n    if [ \"$2\" = 'random' ]; then\n\n        defaults write wallpaperbing setting random\n\n    fi\nfi\n\n\nif [ \"$1\" = 'today' ]; then\n\n    # Decide path for the wallpaper \n\n    if [ \"$defaultspath\" = \"/tmp/wallpaper1.jpg\" ]; then\n\n        wallpaperpath=(\"/tmp/wallpaper1.jpg\")\n\n        defaults write wallpaperbing path /tmp/wallpaper.jpg\n\n        rm /tmp/wallpaper.jpg 2\u003e\u0026-\n\n    else\n\n        wallpaperpath=(\"/tmp/wallpaper.jpg\")\n\n        defaults write wallpaperbing path /tmp/wallpaper1.jpg\n\n        rm /tmp/wallpaper1.jpg 2\u003e\u0026-\n\n        # echo aaaaa\n\n        echo \"${wallpaperpath[0]}\"\n\n    fi\n\n    # Create setting to remember\n\n    defaults write wallpaperbing setting today\n\n    echo \"$json\" | $JQ '.[0]' | $JQ '.url' | sed s/'\"'// | sed s/'\"'// | sed s/'\\/'/'https:\\/\\/bing.com\\/'/ \u003e /tmp/imageurls.txt\n\n    curl -s -L \"$(cat \"${imageurls[0]}\")\" -o \"${wallpaperpath[0]}\"\n\n    # Get comment\n\n    Comment=$(echo \"$json\" | $JQ '.[0]' | $JQ '.copyright' | sed s/'\"'// | sed s/'\"'//)\n\n    echo \"$Comment\"\n\n    # Set dummy image as wallpaper so Finder will change the wallpaper to the pic that we want\n\n    # No langer needed as we choose a new name every time\n\n    # echo \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII=\" | base64 -D -o \"/tmp/dummyimg.jpg\"\n\n    # osascript -e 'tell application \"Finder\" to set desktop picture to POSIX file \"/private/tmp/dummyimg.jpg\"'\n\n    # Set image as wallpaper\n\n    if [ \"${wallpaperpath[0]}\" == \"/tmp/wallpaper.jpg\" ]; then\n    \n    osascript -e 'tell application \"Finder\" to set desktop picture to POSIX file \"/tmp/wallpaper.jpg\"'\n\n    else\n\n    osascript -e 'tell application \"Finder\" to set desktop picture to POSIX file \"/tmp/wallpaper1.jpg\"'\n\nfi\n\n# Cleanup\n \n# rm /tmp/imageurls.txt\n\nexit\nfi\n\nif [ \"$1\" = 'random' ]; then\n\n    # Decide path for the wallpaper \n\n    if [ \"$defaultspath\" = \"/tmp/wallpaper1.jpg\" ]; then\n\n        wallpaperpath=(\"/tmp/wallpaper1.jpg\")\n\n        defaults write wallpaperbing path /tmp/wallpaper.jpg\n\n        rm /tmp/wallpaper.jpg 2\u003e\u0026-\n\n    else\n\n        wallpaperpath=(\"/tmp/wallpaper.jpg\")\n\n        defaults write wallpaperbing path /tmp/wallpaper1.jpg\n\n        rm /tmp/wallpaper1.jpg 2\u003e\u0026-\n\n    fi\n\n    # Create setting to remember\n\n    defaults write wallpaperbing setting random\n\n    # Add URLs to a file and add bing to the beginning \n\n    echo \"$json\" | $JQ '.[0]' | $JQ '.url' | sed s/'\"'// | sed s/'\"'// | sed s/'\\/'/'https:\\/\\/bing.com\\/'/ \u003e /tmp/imageurls.txt\n    {\n    echo \"$json\" | $JQ '.[1]' | $JQ '.url' | sed s/'\"'// | sed s/'\"'// | sed s/'\\/'/'https:\\/\\/bing.com\\/'/ \n    echo \"$json\" | $JQ '.[3]' | $JQ '.url' | sed s/'\"'// | sed s/'\"'// | sed s/'\\/'/'https:\\/\\/bing.com\\/'/\n    echo \"$json\" | $JQ '.[2]' | $JQ '.url' | sed s/'\"'// | sed s/'\"'// | sed s/'\\/'/'https:\\/\\/bing.com\\/'/\n    echo \"$json\" | $JQ '.[4]' | $JQ '.url' | sed s/'\"'// | sed s/'\"'// | sed s/'\\/'/'https:\\/\\/bing.com\\/'/\n    echo \"$json\" | $JQ '.[5]' | $JQ '.url' | sed s/'\"'// | sed s/'\"'// | sed s/'\\/'/'https:\\/\\/bing.com\\/'/\n    echo \"$json\" | $JQ '.[6]' | $JQ '.url' | sed s/'\"'// | sed s/'\"'// | sed s/'\\/'/'https:\\/\\/bing.com\\/'/\n    echo \"$json\" | $JQ '.[7]' | $JQ '.url' | sed s/'\"'// | sed s/'\"'// | sed s/'\\/'/'https:\\/\\/bing.com\\/'/\n    } \u003e\u003e /tmp/imageurls.txt\n\n\n\n    # Select a URL from a random line \n\n    randomurl=$(\u003c \"${imageurls[0]}\" sed ''\"$random\"'q;d')\n\n    # Download image from the server\n\n    curl -s -L \"$randomurl\" -o \"${wallpaperpath[0]}\"\n\n    # Set dummy image as wallpaper so Finder will change the wallpaper to the pic that we want\n\n    # No langer needed as we choose a new name every time\n\n    # echo \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII=\" | base64 -D -o \"/tmp/dummyimg.jpg\"\n\n    # osascript -e 'tell application \"Finder\" to set desktop picture to POSIX file \"/private/tmp/dummyimg.jpg\"'\n\n    # Set image as wallpaper\n\n    if [ \"${wallpaperpath[0]}\" == \"/tmp/wallpaper.jpg\" ]; then\n \n    osascript -e 'tell application \"Finder\" to set desktop picture to POSIX file \"/tmp/wallpaper.jpg\"'\n\n    else\n\n    osascript -e 'tell application \"Finder\" to set desktop picture to POSIX file \"/tmp/wallpaper1.jpg\"'\n\n    fi\n\n    # Cleanup\n\n    rm /tmp/imageurls.txt\n\n    echo \"Random Url: $random\"\n\n    exit\nfi\n"
				}
			],
			"path": "Lifestyle/wallpaperbing.1h.sh",
			"filename": "wallpaperbing.1h.sh",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/wallpaperbing.1h.sh.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Bing Wallpapers",
			"version": "v2.0",
			"author": "Tok1",
			"authors": [
				{
					"name": "Tok1",
					"githubUsername": "Tokfrans03",
					"imageURL": "https://avatars.githubusercontent.com/u/34898241?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "A new wallpaper from Bing every hour",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"JQ"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.67851Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/current_task.1m.rb",
					"filename": "current_task.1m.rb",
					"content": "#!/usr/bin/ruby\n#\n# \u003cbitbar.author\u003evoter101\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003evoter101\u003c/bitbar.author.github\u003e\n# \u003cbitbar.title\u003eCurrent Task\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n#\n# You need to call it with string argument to change a task like this:\n# `./current_task.1m.rb \"Finish important business\"`\n#\n# The task is stored in a file\n\nTASK_FILE_NAME = File.dirname(__FILE__) + \"/task\"\n\n`touch #{TASK_FILE_NAME}`\n\ndef change_task(task)\n  File.write(TASK_FILE_NAME, task)\nend\n\ndef read_task\n  puts IO.read(TASK_FILE_NAME)\nend\n\nif ARGV[0].nil?\n  read_task\nelse\n  change_task(ARGV[0])\nend\n"
				}
			],
			"path": "Lifestyle/current_task.1m.rb",
			"filename": "current_task.1m.rb",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/current_task.1m.rb.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Current Task",
			"version": "1.0",
			"author": "voter101",
			"authors": [
				{
					"name": "Wiktor Mociun",
					"githubUsername": "voter101",
					"imageURL": "https://avatars.githubusercontent.com/u/2883685?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.153492Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/dadjokes.5m.sh",
					"filename": "dadjokes.5m.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eDad Jokes\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSimon Peier\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esimonpeier\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThe plugin tells you random dad jokes\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/simonpeier/bitbar-dadjokes-plugin/master/screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://simonpeier.github.io/bitbar-dadjokes-plugin/\u003c/bitbar.abouturl\u003e\n\njoke=$(curl -s -H \"Accept: text/plain\" https://icanhazdadjoke.com/)\n\necho \"😂\"\necho \"---\"\necho \"Next joke | refresh=true\"\necho \"---\"\n\necho \" |trim=false\"\necho \"$joke\"\necho \" |trim=false\"\n"
				}
			],
			"path": "Lifestyle/dadjokes.5m.sh",
			"filename": "dadjokes.5m.sh",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/dadjokes.5m.sh.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Dad Jokes",
			"version": "v1.0",
			"author": "Simon Peier",
			"authors": [
				{
					"name": "Simon Peier",
					"githubUsername": "simonpeier",
					"imageURL": "https://avatars.githubusercontent.com/u/41295530?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "The plugin tells you random dad jokes",
			"imageURL": "https://raw.githubusercontent.com/simonpeier/bitbar-dadjokes-plugin/master/screenshot.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://simonpeier.github.io/bitbar-dadjokes-plugin/",
			"lastUpdated": "2021-03-08T15:21:55.256711Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/deathTimer.5m.py",
					"filename": "deathTimer.5m.py",
					"content": "#!/usr/bin/env python\n\n# \u003cbitbar.title\u003eDeath Timer\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eThomas Wolfe\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etwolfe2\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eCounts down how approximately how many days you have left to live\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/2KjZaFb.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\n\n\nfrom datetime import datetime\n\n\ndeath = datetime(2081, 5,31, 12, 0, 0) #enter your estimated death year here (get the estimation here: https://www.myabaris.com/tools/life-expectancy-calculator-how-long-will-i-live/)\nbirth = datetime(1994, 5,31, 12, 0, 0) #enter the day you were born here\n\n\n\ndiff = death - datetime.now()\nremain = format(int(diff.total_seconds()/(3600*24)),' ,d')\nprint '~{0} days remaining'.format(remain)\n\nprint '---'\n\n\ndiff1 = death - datetime.now()\nremainH = format(int(diff1.total_seconds()/(3600)),' ,d')\nprint '~{0} hours remaining'.format(remainH)\n\nremainM = format(int(diff.total_seconds()/60),' ,d')\nprint '~{0} minutes remaining'.format(remainM)\n\n\n\n\ntotal = death - birth\ndiff = datetime.now() - birth\ntotalF = format(int(total.total_seconds()/60),' ,d')\nremain = format(int(diff.total_seconds()/60),' ,d')\npercent = format(((diff.total_seconds()/60)/(total.total_seconds()/60))*100,'.2f')\nprint '~{0}% elapsed \\nWe are all inventors...guided each by a private chart, of which there is no duplicate.\\n-Ralph Waldo Emerson'.format(percent)\n\n"
				}
			],
			"path": "Lifestyle/deathTimer.5m.py",
			"filename": "deathTimer.5m.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/deathTimer.5m.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Death Timer",
			"version": "v1.0",
			"author": "Thomas Wolfe",
			"authors": [
				{
					"name": "Thomas Wolfe",
					"githubUsername": "twolfe2",
					"imageURL": "https://avatars.githubusercontent.com/u/13949747?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Counts down how approximately how many days you have left to live",
			"imageURL": "http://i.imgur.com/2KjZaFb.jpg",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.253375Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/digital-zeitgebers.30m.py",
					"filename": "digital-zeitgebers.30m.py",
					"content": "#!/usr/bin/python\n\n# \u003cbitbar.title\u003eDigital Zeitgebers\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEdward\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003e0xedward\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eA fuzzy clock that reminds you of certain sleep hyigene recommendations, such as when to avoid blue light, caffeine, etc., at the proper time.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/0xedward/digital-zeitgebers/master/docs/banner.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/0xedward/digital-zeitgebers/\u003c/bitbar.abouturl\u003e\n\nfrom time import localtime, strftime\nfrom datetime import timedelta\n\n\"\"\" User Settings - Change the values below\"\"\"\nbedtime = 22 # Change the value to what time you usually go to bed in the 24hr format rounded to the nearest hour (i.e. 22 for 10:15pm)\nwakeup_time = 6 # Change the value to what time you usually wake up in the 24hr format rounded to the nearest hour (i.e. 6 for 5:45am)\n\"\"\" End of User Settings \"\"\"\n\ndef generate_message_and_link():\n    current_hour_military_time = int(strftime('%H', localtime()))\n    message = \"\"\n    link = \"\"\n    topic = \"\"\n    bedtime_delta = (timedelta(hours=bedtime) - timedelta(hours=current_hour_military_time)).seconds / 60 / 60\n    wakeup_time_delta = (timedelta(hours=wakeup_time) - timedelta(hours=current_hour_military_time)).seconds / 60 / 60\n    if current_hour_military_time == wakeup_time or wakeup_time_delta == 1:\n        message = \":alarm_clock: Good morning! Time to get up!\"\n        topic = \"Chronotypes and Circadian Rhythms\"\n        link = \"http://www.scielo.br/pdf/bjmbr/v41n10/7132.pdf\"\n    elif bedtime_delta \u003c= 6 and bedtime_delta \u003e 2:\n        message = \":coffee: No more caffeine!\"\n        topic = \"Caffeine's effect on sleep\"\n        link = \"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3805807/\"\n    elif bedtime_delta == 2:\n        message = \":no_mobile_phones: Avoid blue light!\"\n        topic = \"Blue light exposure's effect on sleep\"\n        link = \"https://www.sciencedirect.com/topics/agricultural-and-biological-sciences/chronotype#B9781437717037100301-p0155\"\n    elif bedtime_delta == 1:\n        message = \":zzz: Prepare to sleep!\"\n        topic = \"Sleep Latency\"\n        link = \"https://www.sciencedirect.com/topics/agricultural-and-biological-sciences/chronotype#S0065266017300202-p0160\"\n    elif bedtime == current_hour_military_time:\n        message = \":sleeping: Good night! Time for bed!\"\n        topic = \"Chronotypes and Circadian Rhythms\"\n        link = \"http://www.scielo.br/pdf/bjmbr/v41n10/7132.pdf\"\n    return [message, topic, link]\n\n\nif __name__ == '__main__':\n    delta = (timedelta(hours=bedtime) - (timedelta(hours=wakeup_time))).seconds / 60 / 60\n    if not (bedtime \u003e= 0 and bedtime \u003c= 23):\n        print(\":heavy_exclamation_mark: Please input an hour that is between 0-23 for your bedtime\")\n    elif not (wakeup_time \u003e= 0 and wakeup_time \u003c= 23):\n        print(\":heavy_exclamation_mark: Please input an hour that is between 0-23 for your wakeup time\")\n    elif bedtime == wakeup_time:\n        print(\":heavy_exclamation_mark: Your bedtime and wakeup time cannot be the same value\")\n    elif delta \u003e 17:\n        print(\":heavy_exclamation_mark: The interval between bedtime and wakeup time cannot be more than 17 hours.\")\n    else:\n        outputs = generate_message_and_link()\n        print(\"{state}\".format(state=outputs[0]))\n        print(\"---\")\n        print(\"{topic}\".format(topic=outputs[1]))\n        print(\"--Learn More | href={link}\".format(link=outputs[2]))\n"
				}
			],
			"path": "Lifestyle/digital-zeitgebers.30m.py",
			"filename": "digital-zeitgebers.30m.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/digital-zeitgebers.30m.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Digital Zeitgebers",
			"version": "v1.0",
			"author": "Edward",
			"authors": [
				{
					"name": "Edward",
					"githubUsername": "0xedward",
					"imageURL": "https://avatars.githubusercontent.com/u/14011954?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "A fuzzy clock that reminds you of certain sleep hyigene recommendations, such as when to avoid blue light, caffeine, etc., at the proper time.",
			"imageURL": "https://raw.githubusercontent.com/0xedward/digital-zeitgebers/master/docs/banner.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/0xedward/digital-zeitgebers/",
			"lastUpdated": "2021-03-08T15:21:55.265471Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/fortune.5m.sh",
					"filename": "fortune.5m.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eFortune\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eVolker Wieban\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ehpcodecraft\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows a random fortune quote\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/1476865/24081772/fd2011c2-0cb9-11e7-8679-30f1c56c0acd.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash,fortune\u003c/bitbar.dependencies\u003e\n\ncookie=\"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA3BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo1NjIwYjM2NS0wZGZhLTQ0NjYtOGMyMi1lOGJhNzZjY2Q0MmIiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6QzZDQTEzOTcwMDA4MTFFN0E0RENCMzkyNDkxNTY0OEEiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6QzZDQTEzOTYwMDA4MTFFN0E0RENCMzkyNDkxNTY0OEEiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKE1hY2ludG9zaCkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo3NTAxQzY4MzU2OUMxMUU2OUZGRkNDMENDMUUwOUU5NiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo3NTAxQzY4NDU2OUMxMUU2OUZGRkNDMENDMUUwOUU5NiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pl4lzYcAAARISURBVHjazFRLbBtVFD1vZuyxJ47tfJzm3/zTpIGSpIlJlVYtqIHCopVoFiyQilR+AlasUBfdoNAdIDZRCkIqggWV+CxSFaVqC+kiTUJr0jofkrhJHNmOY2fsjGdsz5eXBIQK2y640ls86b1zz73nnkssy8KTDAZPODgkHwIsC5gm/gjOIxpLYjuTLCgUjFci87/3Z8VY+UYs5m09cubrE2ffupxJbdLnNuSyEu5P3oPM+9DX14dUSoRhGBSQUFhTB4rKoGhAdHHyo+oi5YLPyqG93QXe0YrERgFCTOG11dAaoGbAMhaU1AblYIIQ5l8MGcrOW4ZHs4vu6dGRwPE21DfV1wKOCsBmp+w1pDNppGTmGpNcBQwdlpqHkyf0K/ffHlqaA8nQJkaHL94eaNyub+pogVlQBd3VCMPVRJ84Ieadecu0zxt5GRtrqzBUFXaHAIsToOk7LP8RlgmtxzF987v3nt8X7KztaIPG1cHy1IHxNIAhBObWOhTdNtPrP6qWlVUjbzkgazwUJS9AnH3HycoelXaMELIHmFyZ9Bclrp87UO2Fye4DU1AKuCrAOItBtkOU0RK9dnyvs4VYmFtwOvToea8680OZNL5tT0x83tXt/0Y3zH6Vst4BZTYeXu8XjI1u4q6ERftJ7G4wQgXM/BYQmURUdiWyXv+l8G8/vlFnTWVOtucvP9dpnJFkia0auMge6Oh6ubmhdpzn+Rd1XQcjhufqeaeHCuCgYstUJhsI7wETDyA6P425raLR+PgnX7WYYyP+ngam1FcMNctiwfkCDh1/abdMQRBQXl7+BVV9kDNtHk1RqZrgweRTsDIxwPcMBVchxkVUkNuDzz51WBCefg1Gjo6MsoTZCIFolOBvjSORSGx5ebmX47gIV9rUF0wmAookqoKr0oAhBmE6fbCqj2H/6QtoK3QLpLwbJmFhSZMAzb0Sk5F1mJAUFeHVR78mEonjdt5hUUCwH7z/ppSOLHWQVLxRKC4B76QpM1Fatht880kQz36YqgJk40BuEwyXwUQwi6llDVvBGw8MQ/fb7fwuU4MOOtN66Ohiddep4dByCNFQGtKmDEJdggRlE74FS1yCJa8D+QQ1FbUSSyCwBm4MD0GKrIw019aAlRPgslvglCT9q9LMLI+bn759VQvcOlvZ0omSqgLqRGo7wQHGTR1DvWvR/ulSEjYbcOmzMdyZjYd+mppvJJqKXC4Hi7Lb2VzESs0AnmJIooGxj8//zK8HBry+OrhLvCgotMMm0EP7YKgG5M044mIW384klXeHvjx48HDPihINg+zY96+ggMHdMkAE3J0IYvXOlQ/t4XtDrCTBXUQH3SaAGHmk01sQNQa5mu6rvp5T504Pvqqk1qm3mceXwx6gjYMu53H/7gw0ysZhZYqjD355PbUY8Oty2qPbCiWbr2VGqGm+0th1YiUZWUPvkWN7i4qW+jjg/31j/ynAAKk7+eVEqimNAAAAAElFTkSuQmCC\"\n\nfortune=\"/usr/local/bin/fortune\"\n\necho \"|dropdown=false image=$cookie\"\necho \"---\"\n\nif [[ -x $fortune ]]; then\n  echo \"Next cookie|refresh=true image=$cookie\"\n  echo \"---\"\n  echo \" |trim=false\"\n  $fortune|/usr/bin/sed 's/-/–/g; s/^/    /; s/$/  |font=Avenir size=14 trim=false/'\n  echo \" |trim=false\"\nelse\n  echo \"Fortune is not installed|color=red\"\n  echo \"|trim=false\"\n  echo \"Please install it via Homebrew using this command\"\n  echo \"brew install fortune|font=Courier color=green\"\n  echo \"Then refresh your Bitbar (Preferences ▶ Refresh all)\"\nfi\n"
				}
			],
			"path": "Lifestyle/fortune.5m.sh",
			"filename": "fortune.5m.sh",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/fortune.5m.sh.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Fortune",
			"version": "v1.0",
			"author": "Volker Wieban",
			"authors": [
				{
					"name": "hpcodecraft",
					"githubUsername": "hpcodecraft",
					"imageURL": "https://avatars.githubusercontent.com/u/1476865?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows a random fortune quote",
			"imageURL": "https://cloud.githubusercontent.com/assets/1476865/24081772/fd2011c2-0cb9-11e7-8679-30f1c56c0acd.png",
			"dependencies": [
				"bash",
				"fortune"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.270054Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/jawbone.10m.py",
					"filename": "jawbone.10m.py",
					"content": "#!/usr/bin/python\n#\n# \u003cbitbar.author\u003eTill Dettmering\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edettmering\u003c/bitbar.author.github\u003e\n# \u003cbitbar.title\u003eGet steps and sleep duration from your Jawbone UP\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.desc\u003eGet today's steps and sleep duration from your Jawbone UP!\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/JtguThL.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://tilldettmering.com/\u003c/bitbar.abouturl\u003e\n\nimport json\nimport urllib2\n\n# You have to follow these steps to request an access token:\n# https://jawbone.com/up/developer/authentication\n# Set your access token below:\n\naccess_token = \"my token\"\n\n# Function for retrieving data:\n\ndef retrieveUpData(type):\n    url = \"https://jawbone.com/nudge/api/v.1.1/users/@me/{0}\".format(type)\n\n    request = urllib2.Request(url)\n    request.add_header(\"Authorization\", \"Bearer {0}\".format(access_token))\n\n    response = urllib2.urlopen(request)\n    data = json.loads(response.read())\n\n    return data\n    \n# Get steps and distance walked:\n\nstep_data = retrieveUpData(\"moves\")\n\nsteps = step_data['data']['items'][0]['details']['steps']\ndistance = step_data['data']['items'][0]['details']['km']\n\n# Get hours of sleep:\n\nsleep_data = retrieveUpData(\"sleeps\")\n\nsleep_duration = sleep_data['data']['items'][0]['details']['duration'] / 3600\nsleep_percentage = sleep_duration / 24.0 * 100\n\n# Format output:\n\nprint '{0} steps'.format(steps)\nprint '---'\nprint '{0} km'.format(round(distance, 1))\nprint '{0} h slept ({1}%)'.format(round(sleep_duration, 1), round(sleep_percentage, 0))\n"
				}
			],
			"path": "Lifestyle/jawbone.10m.py",
			"filename": "jawbone.10m.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/jawbone.10m.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Get steps and sleep duration from your Jawbone UP",
			"version": "1.0",
			"author": "Till Dettmering",
			"authors": [
				{
					"name": "Till Dettmering",
					"githubUsername": "dettmering",
					"imageURL": "https://avatars.githubusercontent.com/u/1725685?v=4",
					"bio": "Life Science, Software, UX. I build bridges between life scientists and software developers.",
					"primary": true
				}
			],
			"desc": "Get today's steps and sleep duration from your Jawbone UP!",
			"imageURL": "http://i.imgur.com/JtguThL.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "http://tilldettmering.com/",
			"lastUpdated": "2021-03-08T15:21:55.546376Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/githubzen.1m.py",
					"filename": "githubzen.1m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eGitHub Zen\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJosh\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eandjosh\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGitHub zen in your menu bar!\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/U4OHxDm.png\u003c/bitbar.image\u003e\n\nimport urllib2\nimport os\n\napi_key = os.getenv('GITHUB_TOKEN', 'Enter your GitHub.com Personal Access Token here...')\nurl = 'https://api.github.com/zen'\n\nrequest = urllib2.Request( url, headers = { 'Authorization': 'token ' + api_key } )\nresponse = urllib2.urlopen( request )\nprint ( '%s' % (response.read())).encode( 'utf-8' )\n"
				}
			],
			"path": "Lifestyle/githubzen.1m.py",
			"filename": "githubzen.1m.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/githubzen.1m.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "GitHub Zen",
			"version": "v1.0.0",
			"author": "Josh",
			"authors": [
				{
					"name": "Josh Beckman",
					"githubUsername": "andjosh",
					"imageURL": "https://avatars.githubusercontent.com/u/2358584?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "GitHub zen in your menu bar!",
			"imageURL": "http://i.imgur.com/U4OHxDm.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.311493Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/habitica.1h.js",
					"filename": "habitica.1h.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eHabitica\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eStefan du Fresne\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003eSCdF\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eAllows you to manage your Habitica tasks, habits and to-dos. See: habitica.com\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttp://i.imgur.com/CUO445t.png\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003enode6\u003c/bitbar.dependencies\u003e\n\n/*jshint esversion: 6 */\n'use strict';\n\n// Go here: https://habitica.com/#/options/settings/api\n// And put your values in these vars below!\nconst USER_ID = 'YOUR_USER_ID_HERE';\nconst API_TOKEN = 'YOUR_TOKEN_HERE';\n\nconst HABITICA_ICON =\n  'iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAACXBIWXMAABYlAAAWJQFJUiTwAA' +\n  'A6HWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJX' +\n  'NU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpucz' +\n  'ptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxMzIgNzkuMTU5Mjg0LCAyMDE2' +\n  'LzA0LzE5LTEzOjEzOjQwICAgICAgICAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly' +\n  '93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2Ny' +\n  'aXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG' +\n  '9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcv' +\n  'ZGMvZWxlbWVudHMvMS4xLyIKICAgICAgICAgICAgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbn' +\n  'MuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIgogICAgICAgICAgICB4bWxuczp4bXBNTT0iaHR0' +\n  'cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgICAgICAgICAgeG1sbnM6c3RFdnQ9Im' +\n  'h0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgICAg' +\n  'ICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgIC' +\n  'AgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIj4KICAgICAg' +\n  'ICAgPHhtcDpDcmVhdGVEYXRlPjIwMTYtMDctMzBUMTM6MzA6MTErMDE6MDA8L3htcDpDcmVhdG' +\n  'VEYXRlPgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAxNi0wNy0zMFQxMzozMTo0NSswMTow' +\n  'MDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6TWV0YWRhdGFEYXRlPjIwMTYtMDctMz' +\n  'BUMTM6MzE6NDUrMDE6MDA8L3htcDpNZXRhZGF0YURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRv' +\n  'clRvb2w+QWRvYmUgUGhvdG9zaG9wIENDIDIwMTUuNSAoTWFjaW50b3NoKTwveG1wOkNyZWF0b3' +\n  'JUb29sPgogICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3BuZzwvZGM6Zm9ybWF0PgogICAgICAg' +\n  'ICA8cGhvdG9zaG9wOkNvbG9yTW9kZT4zPC9waG90b3Nob3A6Q29sb3JNb2RlPgogICAgICAgIC' +\n  'A8eG1wTU06SW5zdGFuY2VJRD54bXAuaWlkOmI1Y2U5ZjZlLWRmZjEtNDYzNS05Yzk0LTkzN2I2' +\n  'OTI2NzliMTwveG1wTU06SW5zdGFuY2VJRD4KICAgICAgICAgPHhtcE1NOkRvY3VtZW50SUQ+eG' +\n  '1wLmRpZDplYTUwZTRiMi0zZmVjLTQ1MDktOWVhMS02MGIxYTZhZDRhODU8L3htcE1NOkRvY3Vt' +\n  'ZW50SUQ+CiAgICAgICAgIDx4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ+eG1wLmRpZDplYTUwZT' +\n  'RiMi0zZmVjLTQ1MDktOWVhMS02MGIxYTZhZDRhODU8L3htcE1NOk9yaWdpbmFsRG9jdW1lbnRJ' +\n  'RD4KICAgICAgICAgPHhtcE1NOkhpc3Rvcnk+CiAgICAgICAgICAgIDxyZGY6U2VxPgogICAgIC' +\n  'AgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAg' +\n  'ICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgIC' +\n  'AgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOmVhNTBlNGIyLTNmZWMtNDUwOS05ZWExLTYw' +\n  'YjFhNmFkNGE4NTwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0On' +\n  'doZW4+MjAxNi0wNy0zMFQxMzozMTowMiswMTowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAg' +\n  'ICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgUGhvdG9zaG9wIENDIDIwMTUuNSAoTW' +\n  'FjaW50b3NoKTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0' +\n  'OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgIC' +\n  'AgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAg' +\n  'ICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgIC' +\n  'AgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6YjVjZTlmNmUtZGZmMS00NjM1LTljOTQt' +\n  'OTM3YjY5MjY3OWIxPC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdn' +\n  'Q6d2hlbj4yMDE2LTA3LTMwVDEzOjMxOjQ1KzAxOjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAg' +\n  'ICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgQ0MgMjAxNS41IC' +\n  'hNYWNpbnRvc2gpPC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RF' +\n  'dnQ6Y2hhbmdlZD4vPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KIC' +\n  'AgICAgICAgICAgPC9yZGY6U2VxPgogICAgICAgICA8L3htcE1NOkhpc3Rvcnk+CiAgICAgICAg' +\n  'IDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOl' +\n  'hSZXNvbHV0aW9uPjE0NDAwMDAvMTAwMDA8L3RpZmY6WFJlc29sdXRpb24+CiAgICAgICAgIDx0' +\n  'aWZmOllSZXNvbHV0aW9uPjE0NDAwMDAvMTAwMDA8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgIC' +\n  'AgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAg' +\n  'IDxleGlmOkNvbG9yU3BhY2U+NjU1MzU8L2V4aWY6Q29sb3JTcGFjZT4KICAgICAgICAgPGV4aW' +\n  'Y6UGl4ZWxYRGltZW5zaW9uPjM2PC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4' +\n  'aWY6UGl4ZWxZRGltZW5zaW9uPjM2PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZG' +\n  'Y6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAog' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCi' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA' +\n  'ogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC' +\n  'AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' +\n  'ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldC' +\n  'BlbmQ9InciPz5J4M7HAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5Jf' +\n  'xUYAAAT0SURBVHja7JhfbFN1FMc/567rsBsERiSAhBBoy5LxgMQnHrCsk39BMEaCIQaFGE1IiG' +\n  'BcNybGG2LCVkAJ+kBMDIhIVIhGIIrZmGVogkQkmkzZn+AS3RDDABUurN29x4e1446uawsL8uB5' +\n  'ur2/3/3db8/5nu8554qqcj+ZwX1mntSFiLAguKmsT+13iq/7lh3pNq17BcIdpUEesp24IRC2Sq' +\n  'yjj082ff95yHzW6M5+yMy/XmwdDpWbJfcakKTcJSIAhAORc8DM5PpZO6FLYp3b/sj34BXlprfn' +\n  '5o1HRPquHu/Y8fOKctPbk7BmO4bxZ+xcXWemkKUBqghU7xJ0vWv/BRFndWPb9sZcgISmmaM8nh' +\n  'sbMDSiyrjk7R5gDFAI9Kowr6ktenooQJ50hjl7EXEDmqRqNFQGInvEYHNDa7R7EICQ6Snour4I' +\n  'lVEizFastQqTGKwm413XRaK6FjidU9o3dWz7QeFEGk5Y4zicDwcieyv8VXMGAMVwQGoRDiq8Ck' +\n  'zKThQm5qVDovY6IDHEUhHwrIicCQcizZXBVypNTMdO+CpQtopwJQuU3xD9XFWO5UzqlIX91c8g' +\n  '+kF2EeFjn+Vbe6TbtPrDZx0FFg4pet7E+K9a3rqcsw657XhH/X5HWQ5czOL+lZbPOmRiGrGY2a' +\n  'dD8TJpfXHv8znrUKisZlrIH5niXvy6I3rY9vr8IrwIfCjCGeDHZNa4QS0+GbjxZsZEueWL+rA/' +\n  '8sVi//oxWQEV2M6vBQbfpKVxCxYwXYVTDrpb0EPA70O87KVwoGq3QDCLRxfH5YFjoZDpGZZD4W' +\n  'B1TJBLiO5X6HbrxG1iOTL1C13T1L5tb0YONbVHQwbOGyifCVrrfthRIiNeIpCncm8/VMoqgxGz' +\n  '0l8TSnEJ4b0RxhQyMY1c+6GZqryO4YRSN0oLfeuA90cQ0M3v/D0lw+rQY4Gq2Q5y1rXeiug5lY' +\n  'JdTa11Tf18qloKsgV4+C7A9JZ6fWMOtpjxnHUo5SlUluPYUwf0qX3b0ePt0TmKPIqyQ5Vv02Qg' +\n  'uxVdiVtLh+0YARLe4g5P7835GM4iVapv+VHSXNvUXt8MNAOE/JEphiEvi+rGPFj9BPBpTqWjIl' +\n  'D1nCB7XNu67ETvrFjnzqvp5YU60IfyT3tONLVHQzmFbLy3+ICdiI+zE/FxHm9iPDjdBR7vZvee' +\n  'ymDkhf5alz+YZNpfzhqylCXJFh/wWDCyT2BZ6vfC8o2lfXG232Vn33jHY5AoqwRtHiiSvYVPA6' +\n  'PvAs5Fu8i3744AhYNVtSBT+7zFO13+nnsXYP4xDJbGWsxrOYcsZfODVUtQ2aywaNABwmTufOA9' +\n  '39Aa/T7vyTU0o8ZvqHwkwoZkirtTZFSOL7dHZJQ2MY0Cwz6A8EljW/TdIVI2noV1XYquKfX6fL' +\n  'bXNxpla96jtNtO+q0nQYJ2oa8iA8ktJOOZv9jSNy/WtuNS8nccqK0IVJcIuh4dnrdDN/nCbOBS' +\n  'JuIhXM54oMFqF5hbtUKtzUAvBmPyBqToKWBGOBDZsqLc9N4+CALTMxXNsR7fT6l5zf3slx1v/w' +\n  '10oExMnpHf1FEZjNT11zPpAm0EuSqipY6ySODBYf7kBcACpgKWndCygiKdgG3UISxOdREiXFNl' +\n  'lgg7G1rra7ICAlgQ3FRmq71KYa70e2UCUJzfxwNZqaKzgNcybPmrsa1+bBqg/7+gZbB/BwBXfQ' +\n  'a0r0oBWwAAAABJRU5ErkJggg==';\n\n//   ================================================================================================\n//   ===     =====    ====  =======  ===      ===        =====  =====  =======  ==        ===      ==\n//   ==  ===  ===  ==  ===   ======  ==  ====  =====  =======    ====   ======  =====  =====  ====  =\n//   =  ========  ====  ==    =====  ==  ====  =====  ======  ==  ===    =====  =====  =====  ====  =\n//   =  ========  ====  ==  ==  ===  ===  ==========  =====  ====  ==  ==  ===  =====  ======  ======\n//   =  ========  ====  ==  ===  ==  =====  ========  =====  ====  ==  ===  ==  =====  ========  ====\n//   =  ========  ====  ==  ====  =  =======  ======  =====        ==  ====  =  =====  ==========  ==\n//   =  ========  ====  ==  =====    ==  ====  =====  =====  ====  ==  =====    =====  =====  ====  =\n//   ==  ===  ===  ==  ===  ======   ==  ====  =====  =====  ====  ==  ======   =====  =====  ====  =\n//   ===     =====    ====  =======  ===      ======  =====  ====  ==  =======  =====  ======      ==\n//   ================================================================================================\n\n// NB: DEBUG on means refreshing post-action doesn't work\nconst DEBUG = false;\n\nconst REQUEST_TIMEOUT = 30 * 1000;\n\nconst NEW_DAY = '🌅';\n\nconst UNCHECKED = '◻️';\nconst CHECKED = '☑️';\nconst HEALTH = '💗';\nconst EXP = '⭐';\nconst MAGIC = '🔥';\n\nconst SCORE_UP   = '➕';\nconst SCORE_DOWN = '➖';\n\nconst SCORE_TASK = 'scoreTask';\nconst SCORE_CHECKLIST_ITEM = 'scoreChecklistItem';\nconst START_NEW_DAY = 'startNewDay';\n\n//   ========================================================================\n//   =  ====  =====  =====      ====    ==        ==    ====     ======  ====\n//   =  ====  ====    ====  ===  ====  ======  ======  ====  ===  ====    ===\n//   =  ====  ===  ==  ===  ====  ===  ======  ======  ===  =========  ==  ==\n//   =  ====  ==  ====  ==  ===  ====  ======  ======  ===  ========  ====  =\n//   =        ==  ====  ==      =====  ======  ======  ===  ========  ====  =\n//   =  ====  ==        ==  ===  ====  ======  ======  ===  ========        =\n//   =  ====  ==  ====  ==  ====  ===  ======  ======  ===  ========  ====  =\n//   =  ====  ==  ====  ==  ===  ====  ======  ======  ====  ===  ==  ====  =\n//   =  ====  ==  ====  ==      ====    =====  =====    ====     ===  ====  =\n//   ========================================================================\n\nconst https = require('https');\n\nconst options = function(method, endpoint) {\n  return {\n    method: method,\n    hostname: 'habitica.com',\n    path: '/api/v3/' + endpoint,\n    timeout: REQUEST_TIMEOUT,\n    headers: {\n      'x-api-user': USER_ID,\n      'x-api-key': API_TOKEN\n    }\n  };\n};\n\nconst request = function(method, endpoint) {\n  return new Promise((resolve, reject) =\u003e {\n    let req = https.request(options(method, endpoint), (res) =\u003e {\n      if (res.statusCode !== 200) {\n        return reject('HTTP'+res.statusCode+' when '+method+'ing ['+endpoint+']');\n      }\n\n      let body = '';\n      res.on('data', data =\u003e body += data);\n      res.on('end',  ()   =\u003e resolve(JSON.parse(body)));\n      res.on('error', reject);\n    });\n\n    req.end();\n    req.on('error', reject);\n  });\n};\n\nconst get = function(endpoint) {\n  return request('GET', endpoint);\n};\n\n//   =====================================================================\n//   ====  =======     ===        ==    ====    ====  =======  ===      ==\n//   ===    =====  ===  =====  ======  ====  ==  ===   ======  ==  ====  =\n//   ==  ==  ===  ===========  ======  ===  ====  ==    =====  ==  ====  =\n//   =  ====  ==  ===========  ======  ===  ====  ==  ==  ===  ===  ======\n//   =  ====  ==  ===========  ======  ===  ====  ==  ===  ==  =====  ====\n//   =        ==  ===========  ======  ===  ====  ==  ====  =  =======  ==\n//   =  ====  ==  ===========  ======  ===  ====  ==  =====    ==  ====  =\n//   =  ====  ===  ===  =====  ======  ====  ==  ===  ======   ==  ====  =\n//   =  ====  ====     ======  =====    ====    ====  =======  ===      ==\n//   =====================================================================\n\nconst scoreTask = (taskId, direction) =\u003e request('POST', 'tasks/'+taskId+'/score/'+direction);\n\nconst scoreChecklistItem = (taskId, checklistItemId) =\u003e\n  request('POST', 'tasks/'+taskId+'/checklist/'+checklistItemId+'/score');\n\nconst processArguments = function() {\n  const action = process.argv[2];\n\n  switch (action) {\n    case SCORE_TASK: {\n      const taskId = process.argv[3],\n            direction = process.argv[4];\n      if (taskId \u0026\u0026 direction) {\n        return scoreTask(taskId, direction);\n      } else {\n        throw Error(SCORE_TASK + ' requires an id and a direction');\n      }\n      break;\n    }\n    case SCORE_CHECKLIST_ITEM: {\n      const taskId = process.argv[3],\n            checklistItemId = process.argv[4];\n\n      if (taskId \u0026\u0026 checklistItemId) {\n        return scoreChecklistItem(taskId, checklistItemId);\n      } else {\n        throw Error(SCORE_CHECKLIST_ITEM + ' missing params');\n      }\n      break;\n    }\n    case START_NEW_DAY: {\n      return request('POST', 'cron');\n    }\n    default:\n      throw Error('Unsupported action ' + action);\n  }\n};\n\n//   ==============================================\n//   =  ==========    =====      ===    ====     ==\n//   =  =========  ==  ===   ==   ===  ====  ===  =\n//   =  ========  ====  ==  ====  ===  ===  =======\n//   =  ========  ====  ==  =========  ===  =======\n//   =  ========  ====  ==  =========  ===  =======\n//   =  ========  ====  ==  ===   ===  ===  =======\n//   =  ========  ====  ==  ====  ===  ===  =======\n//   =  =========  ==  ===   ==   ===  ====  ===  =\n//   =        ====    =====      ===    ====     ==\n//   ==============================================\n\nconst dayOfWeek = new Date().getDay();\nconst now = Date.now();\nconst tz = new Date().getTimezoneOffset();\nconst days = ['su', 'm', 't', 'w', 'th', 'f', 's'];\n\nconst relevant = task =\u003e {\n  switch (task.frequency) {\n    case 'weekly':\n      return task.repeat[days[dayOfWeek]];\n    case 'daily':\n      let startDateLocal = new Date(task.startDate).getTime() - (1000 * 60 * tz);\n      let msDifferent = Math.abs(Date.now() - startDateLocal);\n      let daysDifferent = Math.floor(msDifferent / (1000 * 60 * 60 * 24));\n\n      return daysDifferent % task.everyX === 0;\n    default:\n      throw Error('Cannot handle task.frequency of ' + task.frequency);\n  }\n};\nconst daily = task =\u003e task.type === 'daily';\nconst habit = task =\u003e task.type === 'habit';\nconst todo = task =\u003e task.type === 'todo';\nconst completed = task =\u003e task.completed;\nconst incomplete = task =\u003e !completed(task);\n\n// presumes that habitica never screws up and always contains all the ids\n// we need\nconst order = (correctOrder, unorderedItems) =\u003e\n  correctOrder\n    .map(oItem =\u003e unorderedItems.find(item =\u003e item._id === oItem))\n    .filter(i =\u003e i); // identity function, removes undefined\n\n//   ============================================================\n//   ===    ====  ====  ==        ==       ===  ====  ==        =\n//   ==  ==  ===  ====  =====  =====  ====  ==  ====  =====  ====\n//   =  ====  ==  ====  =====  =====  ====  ==  ====  =====  ====\n//   =  ====  ==  ====  =====  =====  ====  ==  ====  =====  ====\n//   =  ====  ==  ====  =====  =====       ===  ====  =====  ====\n//   =  ====  ==  ====  =====  =====  ========  ====  =====  ====\n//   =  ====  ==  ====  =====  =====  ========  ====  =====  ====\n//   ==  ==  ===   ==   =====  =====  ========   ==   =====  ====\n//   ===    =====      ======  =====  =========      ======  ====\n//   ============================================================\n\nconst sep = () =\u003e console.log('---');\nconst title = text =\u003e console.log(text + '|size=10');\n\nconst FILLED = '🌕';\nconst UNFILLED = '🌑';\nconst FILLEDISH = ['🌘','🌗','🌖'];\nconst progressBar = function(n, total, charLength = 10) {\n  n = Math.max(n, 0); // Health can be negative\n\n  const progress = (n / total) * charLength;\n  const ish = progress % 1;\n\n  const filled = Array(Math.floor(progress) + 1).join(FILLED);\n  const middle = ish ? FILLEDISH[Math.ceil(FILLEDISH.length * ish) - 1] : false;\n  const unfilled = Array(charLength - Math.floor(progress) + (middle ? 0 : 1)).join(UNFILLED);\n\n  return filled + (middle ? middle : '') + unfilled;\n};\n\nconst action = function(action, params) {\n  params = Array.prototype.slice.call(arguments).slice(1);\n  return ['terminal='+DEBUG+' refresh=true bash=' + process.argv[0],\n          'param1=' + process.argv[1],\n          'param2=' + action\n         ].concat(params.map((p, i) =\u003e 'param'+(i+3)+'='+p))\n         .join(' ');\n};\n\nconst outputTasks = function(titleName, tasks) {\n  title(titleName);\n\n  tasks.forEach(task =\u003e {\n    console.log([UNCHECKED, task.text, '|', action(SCORE_TASK, task._id, 'up')].join(' '));\n    task.checklist.forEach(item =\u003e {\n      console.log(\n        ['--', (completed(item) ? CHECKED : UNCHECKED), item.text, '|',\n         action(SCORE_CHECKLIST_ITEM, task._id, item.id)].join(' '));\n    });\n  });\n};\n\nconst outputHabits = function(habits) {\n  title('Habits');\n\n  habits.forEach(habit =\u003e {\n    if (habit.up) {\n      console.log([SCORE_UP, habit.text, '|', action(SCORE_TASK, habit._id, 'up')].join(' '));\n    }\n    if (habit.down) {\n      console.log([SCORE_DOWN, habit.text, '|', action(SCORE_TASK, habit._id, 'down')].join(' '));\n    }\n  });\n};\n\nconst outputProfile = function(userData) {\n  title(userData.profile.name +\n    ' \u003clvl ' + userData.stats.lvl + ' ' +\n    (n =\u003e n[0].toUpperCase() + n.slice(1))(userData.stats.class) + '\u003e');\n\n  const font = '| color=black size=10 font=Monaco';\n\n  const hp = Math.floor(userData.stats.hp),\n        xp = Math.floor(userData.stats.exp),\n        mp = Math.floor(userData.stats.mp),\n        maxHp = userData.stats.maxHealth,\n        maxXp = userData.stats.toNextLevel,\n        maxMp = userData.stats.maxMP;\n\n  console.log([HEALTH, progressBar(hp, maxHp), hp, '/', maxHp, font].join(' '));\n  console.log([EXP, progressBar(xp, maxXp), xp, '/', maxXp, font].join(' '));\n  console.log([MAGIC, progressBar(mp, maxMp), mp, '/', maxMp, font].join(' '));\n};\n\nconst outputIcon = function(numDailies, isSleeping, needsCron) {\n  if (isSleeping) {\n    console.log(`Zzz|templateImage=\"${HABITICA_ICON}\"`);\n  } else {\n    if (numDailies) {\n      numDailies = needsCron ? `(${numDailies})` : numDailies;\n      console.log(`${numDailies}|image=\"${HABITICA_ICON}\"`);\n    } else {\n      console.log(`|templateImage=\"${HABITICA_ICON}\"`);\n    }\n  }\n};\n\nconst outputNeedsCron = () =\u003e {\n  console.log('You left Dailies unchecked yesterday!|size=11');\n  console.log('Either check them off now or…|size=11');\n  console.log(NEW_DAY + ' Start My New Day|' + action('startNewDay'));\n};\n\nconst output = function(dailies, habits, todos, userData) {\n    outputIcon(dailies.length,\n               userData.preferences.sleep,\n               userData.needsCron);\n\n    if (userData.needsCron) {\n      sep();\n      outputNeedsCron();\n    }\n\n    if (dailies.length) {\n      sep();\n      outputTasks((userData.needsCron ? 'Yesterday\\'s ' : '') + 'Dailies', dailies);\n    }\n\n    if (habits.length) {\n      sep();\n      outputHabits(habits);\n    }\n\n    if (todos.length) {\n      sep();\n      outputTasks('To-Dos', todos);\n    }\n\n    sep();\n    outputProfile(userData);\n    sep();\n    console.log('Go to website|href=\"https://habitica.com\"');\n    console.log('Refresh|refresh=true');\n};\n\n//   ==============================================\n//   =        ==  ==========    ====  ====  ====  =\n//   =  ========  =========  ==  ===  ====  ====  =\n//   =  ========  ========  ====  ==  ====  ====  =\n//   =  ========  ========  ====  ==  ====  ====  =\n//   =      ====  ========  ====  ==   ==    ==  ==\n//   =  ========  ========  ====  ===  ==    ==  ==\n//   =  ========  ========  ====  ===  ==    ==  ==\n//   =  ========  =========  ==  =====    ==    ===\n//   =  ========        ====    =======  ====  ====\n//   ==============================================\n\nconst failure = function(reason) {\n  console.log('☹');\n  console.log('---');\n  console.log(reason);\n};\n\nif (USER_ID === 'YOUR_USER_ID_HERE' || API_TOKEN === 'YOUR_TOKEN_HERE') {\n  return failure('Please configure the plugin with your userid and token');\n}\n\nget('status')\n.catch(err =\u003e {\n  throw new Error('habitica api is down');\n})\n.then(result =\u003e {\n  if (result.data.status !== 'up') {\n    throw new Error('habitica api is down');\n  }\n})\n.then(() =\u003e {\n  if (process.argv.length \u003e 2) {\n    return processArguments().then((r) =\u003e console.log(JSON.stringify(r, null, 2)));\n  } else {\n    return Promise.all([\n      get('tasks/user'),\n      get('user')])\n    .then(([tasks, user]) =\u003e {\n      const dailies = order(\n        user.data.tasksOrder.dailys,\n        tasks.data\n          .filter(daily)\n          .filter(relevant)\n          .filter(incomplete));\n\n      const habits = order(\n        user.data.tasksOrder.habits,\n        tasks.data\n          .filter(habit));\n\n      const todos = order(\n        user.data.tasksOrder.todos,\n        tasks.data\n          .filter(todo)\n          .filter(incomplete));\n\n      output(dailies, habits, todos, user.data);\n    });\n  }\n})\n.catch(failure);\n"
				}
			],
			"path": "Lifestyle/habitica.1h.js",
			"filename": "habitica.1h.js",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/habitica.1h.js.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Habitica",
			"version": "v1.2",
			"author": "Stefan du Fresne",
			"authors": [
				{
					"name": "Stefan du Fresne",
					"githubUsername": "SCdF",
					"imageURL": "https://avatars.githubusercontent.com/u/583851?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Allows you to manage your Habitica tasks, habits and to-dos. See: habitica.com",
			"imageURL": "http://i.imgur.com/CUO445t.png",
			"dependencies": [
				"node6"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.425685Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/bear-calls.sh",
					"filename": "bear-calls.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.author\u003emreider\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emreider\u003c/bitbar.author.github\u003e\n# \u003cbitbar.title\u003eHandy bear calls\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n\nReplace these with your home page and bookmarks page\n\nHOMEPAGE='bear://x-callback-url/open-note?id=3B82C004-4B7D-4B66-A492-6D0F3EEDA40A-4300-00001FDE04293478'\nBOOKMARKS='bear://x-callback-url/open-note?id=68496A87-42BE-479A-AE9C-3117CB1CB9FB-31243-00045FA30CF5DC43'\n\nrawurlencode() {\n  local string=\"${1}\"\n  local strlen=${#string}\n  local encoded=\"\"\n  local pos c o\n\n  for (( pos=0 ; pos\u003cstrlen ; pos++ )); do\n     c=${string:$pos:1}\n     case \"$c\" in\n        [-_.~a-zA-Z0-9] ) o=\"${c}\" ;;\n        * )               printf -v o '%%%02x' \"'$c\"\n     esac\n     encoded+=\"${o}\"\n  done\n  echo \"${encoded}\"    # You can either set a return variable (FASTER) \n  REPLY=\"${encoded}\"   #+or echo the result (EASIER)... or both... :p\n}\n\n\necho \"🐻\"\necho \"---\"\nHOMEPAGE_LINK='[Home Page]('$HOMEPAGE')'\nHOMEPAGE_ENCODED=$( rawurlencode \"$HOMEPAGE_LINK\" )\nTITLE='Notes For '$(date +\"%a %b %d %Y\")\nTITLE_ENCODED=$( rawurlencode \"$TITLE\" )\nDATE_WITH_HOME_LINK='bear://x-callback-url/create?title='$TITLE_ENCODED'\u0026text='$HOMEPAGE_ENCODED\necho \"Open home page | href=$HOMEPAGE\"\necho \"Open bookmarks | href=$BOOKMARKS\"\necho \"New note with date \u0026 home link | href=$DATE_WITH_HOME_LINK\"\n\n\n"
				}
			],
			"path": "Lifestyle/bear-calls.sh",
			"filename": "bear-calls.sh",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/bear-calls.sh.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Handy bear calls",
			"version": "1.0",
			"author": "mreider",
			"authors": [
				{
					"name": "Matt Reider",
					"githubUsername": "mreider",
					"imageURL": "https://avatars.githubusercontent.com/u/118036?v=4",
					"bio": "30 years in software\r\n15 years in product \u0026 program management\r\nBoston. San Francisco. Currently in Linz, Austria",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.141724Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/iss.1m.sh",
					"filename": "iss.1m.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eISS Pass Finder\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eCian Dowd\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eBrokenFlows\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTells you when the ISS (space station) will pass over your location and for how long it will be above the horizon. Requires user to enter their location data in the script\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/z4Tc4dt.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ejq\u003c/bitbar.dependencies\u003e\n\necho \"Please open the script to enter your location information, you can delete this line once you have\" 1\u003e\u00262\nexit 0 #you should also delete this one\n\n# Credit: I am not the original author of this script, I altered an existing Linux script for BSD Unix and BitBar. The original Shell Script can be found here: http://vsido.org/index.php?topic=1016.0\n\n# Note: Even if the International Space Station is above the horizon if may only be visible in the late evening and and night, as is the case with stars. Happy spotting\n\n# User set up in the box below\n# ********************************************************************************************************************* #\n# This script requires jq, which you can get by typing                                                                  #\n#                   brew install jq                                                                                     #\n# into the terminal app if you have homebrew installed                                                                  #\n#                                                                                                                       #\n# Please leave out any units                                                                                            #\n# Enter your latitude and longitude (you can find them here: http://mynasadata.larc.nasa.gov/latitudelongitude-finder/) #\nlatit=0                                                                                                                 #\nlongi=0                                                                                                                 #\n#                                                                                                                       #\n# Enter your elevation (you can find it here: www.whatismyelevation.com)                                                #\neleva=0                                                                                                                 #\n# ********************************************************************************************************************* #\n\n\n\ncurl -s --connect-timeout 30 -o /tmp/issn.json \"http://api.open-notify.org/iss-now.json\"\ncurl -s --connect-timeout 30 -o /tmp/issp.json \"http://api.open-notify.org/iss-pass.json?lat=$latit\u0026lon=$longi\u0026alt=$eleva\u0026n=10\"\n\nissnowtu=$(/usr/local/bin/jq -r '.timestamp' /tmp/issn.json)\nlatit=$(/usr/local/bin/jq -r '.iss_position.latitude' /tmp/issn.json)\nlongi=$(/usr/local/bin/jq -r '.iss_position.longitude' /tmp/issn.json)\nisspd1=$(/usr/local/bin/jq -r '.response[0].duration' /tmp/issp.json)\nisspd11=$(printf '%02d:%02d\\n' $((isspd1/60%60)) $((isspd1%60)))\nisspd2=$(/usr/local/bin/jq -r '.response[1].duration' /tmp/issp.json)\nisspd22=$(printf '%02d:%02d\\n' $((isspd2/60%60)) $((isspd2%60)))\nisspd3=$(/usr/local/bin/jq -r '.response[2].duration' /tmp/issp.json)\nisspd33=$(printf '%02d:%02d\\n' $((isspd3/60%60)) $((isspd3%60)))\nisspd4=$(/usr/local/bin/jq -r '.response[3].duration' /tmp/issp.json)\nisspd44=$(printf '%02d:%02d\\n' $((isspd4/60%60)) $((isspd4%60)))\nisspd5=$(/usr/local/bin/jq -r '.response[4].duration' /tmp/issp.json)\nisspd55=$(printf '%02d:%02d\\n' $((isspd5/60%60)) $((isspd5%60)))\nisspd6=$(/usr/local/bin/jq -r '.response[5].duration' /tmp/issp.json)\nisspd66=$(printf '%02d:%02d\\n' $((isspd6/60%60)) $((isspd6%60)))\nisspd7=$(/usr/local/bin/jq -r '.response[6].duration' /tmp/issp.json)\nisspd77=$(printf '%02d:%02d\\n' $((isspd7/60%60)) $((isspd7%60)))\nisspd8=$(/usr/local/bin/jq -r '.response[7].duration' /tmp/issp.json)\nisspd88=$(printf '%02d:%02d\\n' $((isspd8/60%60)) $((isspd8%60)))\nisspd9=$(/usr/local/bin/jq -r '.response[8].duration' /tmp/issp.json)\nisspd99=$(printf '%02d:%02d\\n' $((isspd9/60%60)) $((isspd9%60)))\nisspd10=$(/usr/local/bin/jq -r '.response[9].duration' /tmp/issp.json)\nisspd100=$(printf '%02d:%02d\\n' $((isspd10/60%60)) $((isspd10%60)))\nisspt1=$(/usr/local/bin/jq -r '.response[0].risetime' /tmp/issp.json)\nisspt11=$(date -r \"$isspt1\" +'%H:%M %d/%m/%y')\nisspt2=$(/usr/local/bin/jq -r '.response[1].risetime' /tmp/issp.json)\nisspt22=$(date -r \"$isspt2\" +'%H:%M %d/%m/%y')\nisspt3=$(/usr/local/bin/jq -r '.response[2].risetime' /tmp/issp.json)\nisspt33=$(date -r \"$isspt3\" +'%H:%M %d/%m/%y')\nisspt4=$(/usr/local/bin/jq -r '.response[3].risetime' /tmp/issp.json)\nisspt44=$(date -r \"$isspt4\" +'%H:%M %d/%m/%y')\nisspt5=$(/usr/local/bin/jq -r '.response[4].risetime' /tmp/issp.json)\nisspt55=$(date -r \"$isspt5\" +'%H:%M %d/%m/%y')\nisspt6=$(/usr/local/bin/jq -r '.response[5].risetime' /tmp/issp.json)\nisspt66=$(date -r \"$isspt6\" +'%H:%M %d/%m/%y')\nisspt7=$(/usr/local/bin/jq -r '.response[6].risetime' /tmp/issp.json)\nisspt77=$(date -r \"$isspt7\" +'%H:%M %d/%m/%y')\nisspt8=$(/usr/local/bin/jq -r '.response[7].risetime' /tmp/issp.json)\nisspt88=$(date -r \"$isspt8\" +'%H:%M %d/%m/%y')\nisspt9=$(/usr/local/bin/jq -r '.response[8].risetime' /tmp/issp.json)\nisspt99=$(date -r \"$isspt9\" +'%H:%M %d/%m/%y')\nisspt10=$(/usr/local/bin/jq -r '.response[9].risetime' /tmp/issp.json)\nisspt100=$(date -r \"$isspt10\" +'%H:%M %d/%m/%y')\n\ncurl -s --connect-timeout 30 -o /tmp/gcd.json \"https://maps.googleapis.com/maps/api/geocode/json?latlng=$latit,$longi\u0026components=locality\u0026language=en\"\n\nissnowl=$(/usr/local/bin/jq -r '.results[0].formatted_address' /tmp/gcd.json)\nissnowlc=$(grep \"ZERO_RESULTS\" /tmp/gcd.json)\n\nissptl=$((isspt1 - issnowtu))\n\necho \"ISS passing in $((issptl/3600%60)) hours $((issptl/60%60)) minutes\"\necho \"---\"\n\nif [[ -z \"$issnowlc\" ]]; then\n\t\techo -e \"The ISS is over $issnowl\"\nelse\n\t\techo -e \"The ISS is over an unmapped area\"\nfi\n\necho \"---\"\necho \"\"\necho -e \"ISS will pass over your location at these times:\"\necho \"Visible from $isspt11 for $isspd11 | font=CourierNew\"\necho \"Visible from $isspt22 for $isspd22 | font=CourierNew\"\necho \"Visible from $isspt33 for $isspd33 | font=CourierNew\"\necho \"Visible from $isspt44 for $isspd44 | font=CourierNew\"\necho \"Visible from $isspt55 for $isspd55 | font=CourierNew\"\necho \"Visible from $isspt66 for $isspd66 | font=CourierNew\"\necho \"Visible from $isspt77 for $isspd77 | font=CourierNew\"\necho \"Visible from $isspt88 for $isspd88 | font=CourierNew\"\necho \"Visible from $isspt99 for $isspd99 | font=CourierNew\"\necho \"Visible from $isspt100 for $isspd100 | font=CourierNew\"\n\nrm /tmp/issn.json\nrm /tmp/issp.json\nrm /tmp/gcd.json\nexit 0\n"
				}
			],
			"path": "Lifestyle/iss.1m.sh",
			"filename": "iss.1m.sh",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/iss.1m.sh.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "ISS Pass Finder",
			"version": "v1.0",
			"author": "Cian Dowd",
			"authors": [
				{
					"name": "Cian Dowd",
					"githubUsername": "BrokenFlows",
					"imageURL": "https://avatars.githubusercontent.com/u/21959941?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Tells you when the ISS (space station) will pass over your location and for how long it will be above the horizon. Requires user to enter their location data in the script",
			"imageURL": "http://i.imgur.com/z4Tc4dt.png",
			"dependencies": [
				"jq"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.530326Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/life-percentage.12h.rb",
					"filename": "life-percentage.12h.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eLife Percentage\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKerem Bozdaş\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekrmbzds\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows what percentage of life you have lived.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/DbXIhiS.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n\n# BitBar Life Percentage plugin\n# by Kerem Bozdaş (@krmbzds)\n\ndob = Time.new(1990, 12, 31, 10, 30, 0)  # Date of birth\ndod = Time.new(2080, 12, 31, 10, 30, 0)  # Date of death\nnow = Time.now()\npercent = ((now - dob) / (dod - dob) * 100).round(2)\nputs \"❤ #{percent}\"\n"
				}
			],
			"path": "Lifestyle/life-percentage.12h.rb",
			"filename": "life-percentage.12h.rb",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/life-percentage.12h.rb.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Life Percentage",
			"version": "v1.0",
			"author": "Kerem Bozdaş",
			"authors": [
				{
					"name": "Kerem Bozdas",
					"githubUsername": "krmbzds",
					"imageURL": "https://avatars.githubusercontent.com/u/1383035?v=4",
					"bio": "Software Engineer",
					"primary": true
				}
			],
			"desc": "Shows what percentage of life you have lived.",
			"imageURL": "http://i.imgur.com/DbXIhiS.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.553898Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/memento_mori.py",
					"filename": "memento_mori.py",
					"content": "#!/usr/bin/env python\n\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eMemento Mori\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSufiyan Yasa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003exr1337\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eMemento Mori - Remember, thou art mortal\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://www.sufiyanyasa.com/img/avatar.jpg\u003c/bitbar.image\u003e\n\n\nfrom datetime import datetime as dt\nfrom datetime import timedelta\n\n# example 25/12/2011\nbirthday = \"\u003cYOUR BIRTHDAY\u003e\"\nend_age = 77\n\nbirthday_date = dt.strptime(birthday, \"%d/%m/%Y\")\nend_date = birthday_date + timedelta(days=end_age * 365)\ndays_left = (end_date - dt.now()).days\nprint('- {} days left -'.format(days_left))\n\n\n"
				}
			],
			"path": "Lifestyle/memento_mori.py",
			"filename": "memento_mori.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/memento_mori.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Memento Mori",
			"version": "1.0",
			"author": "Sufiyan Yasa",
			"authors": [
				{
					"name": "Sufiyan Yasa",
					"githubUsername": "xr1337",
					"imageURL": "https://avatars.githubusercontent.com/u/2070518?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Memento Mori - Remember, thou art mortal",
			"imageURL": "https://www.sufiyanyasa.com/img/avatar.jpg",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.65337Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/moon-phase.1h.js",
					"filename": "moon-phase.1h.js",
					"content": "#!/usr/local/bin/node\n\n// \u003cbitbar.title\u003eMoon Phase\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eVolker Wieban\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003ehpcodecraft\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eShows the current moon phase\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/1476865/24201253/ce0d8c5e-0f0f-11e7-8e44-503654407850.png\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n\n// Moon phase calculations taken from https://github.com/tingletech/moon-phase\nDate.prototype.getJulian = function() {\n    return ((this / 86400000) - (this.getTimezoneOffset() / 1440) + 2440587.5);\n};\n\nfunction moon_day(today) {\n    var GetFrac = function(fr) {\n        return (fr - Math.floor(fr));\n    };\n    var thisJD = today.getJulian();\n    var year = today.getFullYear();\n    var degToRad = 3.14159265 / 180;\n    var K0, T, T2, T3, J0, F0, M0, M1, B1, oldJ;\n    K0 = Math.floor((year - 1900) * 12.3685);\n    T = (year - 1899.5) / 100;\n    T2 = T * T;\n    T3 = T * T * T;\n    J0 = 2415020 + 29 * K0;\n    F0 = 0.0001178 * T2 - 0.000000155 * T3 + (0.75933 + 0.53058868 * K0) - (0.000837 * T + 0.000335 * T2);\n    M0 = 360 * (GetFrac(K0 * 0.08084821133)) + 359.2242 - 0.0000333 * T2 - 0.00000347 * T3;\n    M1 = 360 * (GetFrac(K0 * 0.07171366128)) + 306.0253 + 0.0107306 * T2 + 0.00001236 * T3;\n    B1 = 360 * (GetFrac(K0 * 0.08519585128)) + 21.2964 - (0.0016528 * T2) - (0.00000239 * T3);\n    var phase = 0;\n    var jday = 0;\n    while (jday \u003c thisJD) {\n        var F = F0 + 1.530588 * phase;\n        var M5 = (M0 + phase * 29.10535608) * degToRad;\n        var M6 = (M1 + phase * 385.81691806) * degToRad;\n        var B6 = (B1 + phase * 390.67050646) * degToRad;\n        F -= 0.4068 * Math.sin(M6) + (0.1734 - 0.000393 * T) * Math.sin(M5);\n        F += 0.0161 * Math.sin(2 * M6) + 0.0104 * Math.sin(2 * B6);\n        F -= 0.0074 * Math.sin(M5 - M6) - 0.0051 * Math.sin(M5 + M6);\n        F += 0.0021 * Math.sin(2 * M5) + 0.0010 * Math.sin(2 * B6 - M6);\n        F += 0.5 / 1440;\n        oldJ = jday;\n        jday = J0 + 28 * phase + Math.floor(F);\n        phase++;\n    }\n\n    // 29.53059 days per lunar month\n    return (((thisJD - oldJ) / 29.53059));\n}\n\nfunction phase_text(phase) {\n    var txt_phase;\n    if (phase \u003c= 0.0625 || phase \u003e 0.9375) {\n        txt_phase = \"new_moon\";\n    } else if (phase \u003c= 0.1875) {\n        txt_phase = \"waxing_crescent_moon\";\n    } else if (phase \u003c= 0.3125) {\n        txt_phase = \"first_quarter_moon\";\n    } else if (phase \u003c= 0.4375) {\n        txt_phase = \"waxing_gibbous_moon\";\n    } else if (phase \u003c= 0.5625) {\n        txt_phase = \"full_moon\";\n    } else if (phase \u003c= 0.6875) {\n        txt_phase = \"waning_gibbous_moon\";\n    } else if (phase \u003c= 0.8125) {\n        txt_phase = \"last_quarter_moon\";\n    } else if (phase \u003c= 0.9375) {\n        txt_phase = \"waning_crescent_moon\";\n    }\n\n    return txt_phase;\n}\n\nvar phaseLabel = {\n  \"new_moon\"              : \"New moon\",\n  \"waxing_crescent_moon\"  : \"Waxing crescent moon\",\n  \"first_quarter_moon\"    : \"First quarter moon\",\n  \"waxing_gibbous_moon\"   : \"Waxing gibbous moon\",\n  \"full_moon\"             : \"Full moon\",\n  \"waning_gibbous_moon\"   : \"Waning gibbous moon\",\n  \"last_quarter_moon\"     : \"Third quarter moon\",\n  \"waning_crescent_moon\"  : \"Waning crescent moon\",\n};\n\nvar phase     = moon_day(new Date()),\n    phase_str = phase_text(phase),\n    output    = ':' + phase_str + ':|dropdown=false \\n' +\n              '---\\n' +\n              phaseLabel[phase_str] + '\\n' +\n              \"Completed \" + Math.round(phase*100) + \"% of lunar cycle\";\n\nconsole.log(output);\n"
				}
			],
			"path": "Lifestyle/moon-phase.1h.js",
			"filename": "moon-phase.1h.js",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/moon-phase.1h.js.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Moon Phase",
			"version": "v1.0",
			"author": "Volker Wieban",
			"authors": [
				{
					"name": "hpcodecraft",
					"githubUsername": "hpcodecraft",
					"imageURL": "https://avatars.githubusercontent.com/u/1476865?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows the current moon phase",
			"imageURL": "https://cloud.githubusercontent.com/assets/1476865/24201253/ce0d8c5e-0f0f-11e7-8e44-503654407850.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.654084Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/nightscout.1m.sh",
					"filename": "nightscout.1m.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eNightscout Reader\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e0.2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.desc\u003eFor Diabetics using Nightscout to track CGM data: Display current Blood Sugar data and trend from Nightscout\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash, curl, bc, jq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.author\u003eJeremy Hay Draude\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejhaydraude\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/jhaydraude/NightscoutBitBar/master/Preview.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/jhaydraude/NightscoutBitBar/blob/master/README.md\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:$PATH\"\n\nif ! [ -x \"$(command -v jq)\" ]; then\n  echo 'Error: jq is not installed.'\n  echo '---'\n  echo 'Click here to install jq | href=https://stedolan.github.io/jq/download/'\n  exit 1\nfi\n\nNSURL=https://YOURNIGHTSCOUTURL.herokuapp.com # Add your own Nightscout URL here\nUSEMMOL=true # true if you use mmol/l units. false if you use mg/dl\n\nJSONOUT=$(curl --silent $NSURL/api/v1/entries/current.json)\n\nJSDATE=$(jq '.[0].date' \u003c\u003c\u003c \"$JSONOUT\")\n#NS Returns date as ms since epoch. BASH likes Seconds since epoch\nEPOCHTS=$((JSDATE / 1000))\nTIMESTRING=$(date -r $EPOCHTS)\n\nEPOCHNOW=$(date +%s) # Convert current time to epoch time\nTIMEDIFF=$(((EPOCHNOW - EPOCHTS)/60)) #calculate the difference\n\nBG=$(jq '.[0].sgv' \u003c\u003c\u003c \"$JSONOUT\")\n\nTRENDSTR=$(jq -r '.[0].direction' \u003c\u003c\u003c \"$JSONOUT\")\n\nif $USEMMOL ; then\n\tBG=$(echo \"scale=1; $BG / 18\" | bc) #Convert mg/dl to mmol/l\nfi\n\n\ncase $TRENDSTR in\n\tFortyFiveUp)\n\t\tTREND='↗'\n\t\t;;\n\tFortyFiveDown)\n\t\tTREND='↘'\n\t\t;;\n\tSingleUp)\n\t\tTREND='↑'\n\t\t;;\n\tSingleDown)\n\t\tTREND='↓'\n\t\t;;\n\tFlat)\n\t\tTREND='→'\n\t\t;;\n\tDoubleUp)\n\t\tTREND='⇈'\n\t\t;;\n\tDoubleDown)\n\t\tTREND='⇊'\n\t\t;;\n\t*)\n\t\tTREND=$TRENDSTR\n\t\t;;\nesac\n\necho \"$BG $TREND (${TIMEDIFF}m ago)\"\necho \"---\"\necho \"Go to Nightscout | href=$NSURL\"\necho \"Reading taken: $TIMESTRING\"\n"
				}
			],
			"path": "Lifestyle/nightscout.1m.sh",
			"filename": "nightscout.1m.sh",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/nightscout.1m.sh.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Nightscout Reader",
			"version": "0.2.0",
			"author": "Jeremy Hay Draude",
			"authors": [
				{
					"name": "Jeremy Hay Draude",
					"githubUsername": "jhaydraude",
					"imageURL": "https://avatars.githubusercontent.com/u/28458904?v=4",
					"bio": "Tinkerer, builder, messer with of things",
					"primary": true
				}
			],
			"desc": "For Diabetics using Nightscout to track CGM data: Display current Blood Sugar data and trend from Nightscout",
			"imageURL": "https://raw.githubusercontent.com/jhaydraude/NightscoutBitBar/master/Preview.png",
			"dependencies": [
				"bash",
				"curl",
				"bc",
				"jq"
			],
			"aboutURL": "https://github.com/jhaydraude/NightscoutBitBar/blob/master/README.md",
			"lastUpdated": "2021-03-08T15:21:55.664229Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/Todo/todoNotePlan.15m.rb",
					"filename": "todoNotePlan.15m.rb",
					"content": "#!/usr/bin/env ruby\n# coding: utf-8\n\n# \u003cbitbar.title\u003eNotePlan Todo in Colour\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.5\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRichard Guay\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eraguay\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eA todo list taken from NotePlan and displayed with customizable color-code. Mark tasks \"done\" simply by clicking on them in the menubar drop-down list. This was based on \"Todo Colour\" plugin by Srdgh.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://customct.com/images/NotePlanPlugin-01.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://customct.com/bitbar\u003c/bitbar.abouturl\u003e\n#\n# Modifications by Guillaume Barrette\n#   2017/07/01:\n#     - Added option to show subtasks\n#   2017/06/15:\n#     - Changed TRUE/FALSE constant to true/false since uppercase are deprecated in ruby 2.4\n#     - Changed labels to start with '#' to follow NotePlan way of tagging\n#     - Allow to change Fonts by the user\n#     - Added a new parameter for users to specify if want the task to be archived at the end of the file or not\n#     - Added alternate action to mark as cancelled instead of done (using the Option modifier key)\n#     - Allow indentation at beginning of task\n#   2017/06/03:\n#     - Added 'divide_with_header' to allow to show sections separated by headers\n#     - Updated the algorithm to skip all items that are not a task (Skip anything that doesn't starts with '- ' or '* ' and if followed by [x], [\u003e], [-])\n#   2017/05/28:\n#     - Fixed the line number of item to mark as done by getting the id before stripping the lines that are not a task\n#     - Scheduled task (to another day - [\u003e]) are now skipped also\n#   2017/05/20:\n#     - Added Black and White NotePlan menubar icon\n#     - Repaired a bug when there was no newline on the last line the done task would get appended to the last line instead of a new line at the end\n#     - Added the time in the @done(YYYY-MM-DD HH:MM) so it's like NotePlan preference\n#     - Added User Parameters so it's easy to determine if we want to append the @done(...) string at the end of the done task and if we want the black or white menubar icon\n#     - Changed the menubar icon to a templateImage so the color changes automatically when using a dark menubar (removed the white icon)\n#     - Removed 'use_black_icon' parameters since now it's automatic\n#     - Changed encoding method and removed the use of 'force_encoding(\"utf-8\")'\n#     - Repaired a bug if there was no file already created for that day in NotePlan\n#\n# Modifications by Richard Guay\n#   05/20/2017:\n#       - Added using emoji option\n#       - fixed character encoding on removing an item\n#       - Proper parsing of [ ] in the todo.\n#       - cleanup\nrequire 'date'\n\n#################################\n# User Parameters:\ninsert_date_on_done_task = true  # If true, the date would be inserted with the @done tag\nuse_emoji = false                # If true, will show emoji, otherwise it will use the black or white icon.\nuse_star = false                 # if true, will look for and use '*' instead of '-'\nshow_alt_task = true             # If true, tasks marked with the alternate character ('* ' if use_star is FALSE or '- ' if use_star is TRUE) would be shown in the task list. For example, this could be useful to use them as bullet list.\nshow_subtasks = true             # If true, subtasks would be shown in the list\ndivide_with_header = true        # If true, headers would be listed and a separator is put between lists\narchive_task_at_end = false      # If true, the task would get archived to the end of the note\nuse_icloud = true                # If true, files will be checked from iCloud. Otherwise:\nuse_container = true             # If true and not iCloud, it will treat as MAS store version. Otherwise, it is non-MAS store version\n\nstandard_font = ''               # Font used for tasks\nheader_font   = 'Helvetica-Bold' # Font used for headers if listed with 'divide_with_header'\n#################################\n\nEncoding.default_internal = Encoding::UTF_8\nEncoding.default_external = Encoding::UTF_8\n\ntodo_file_loc = ''\nif use_icloud\n  todo_file_loc = File.expand_path('~/Library/Mobile Documents/iCloud~co~noteplan~NotePlan/Documents/Calendar/' + Date.today.strftime('%Y%m%d') + '.txt')\nelse\n  if use_container\n    todo_file_loc = File.expand_path('~/Library/Containers/co.noteplan.NotePlan/Data/Library/Application Support/co.noteplan.NotePlan/Calendar/' + Date.today.strftime('%Y%m%d') + '.txt')\n  else\n    todo_file_loc = File.expand_path('~/Library/Application Support/co.noteplan/Calendar/' + Date.today.strftime('%Y%m%d') + '.txt')\n  end\nend\n\nif ARGV.empty?\n  #\n  # Add further priority labels here\n  #\n  priority_labels = ['@urgent', '@due']\n\n  #\n  # Change priority color here\n  #\n  priority_color = 'red'\n\n  #\n  # Customise label color-code here:\n  #\n  labels = {\n    '@Work' =\u003e 'orange',\n    '@Play' =\u003e 'yellow',\n    '@home' =\u003e 'green',\n    '@daily' =\u003e 'blue',\n    '@Health' =\u003e 'cadetblue',\n    '@church' =\u003e 'lightblue',\n    '@tutorials' =\u003e 'violet',\n    '@Envato' =\u003e 'darkorange',\n    '@workflow' =\u003e 'purple',\n    '@tutorial' =\u003e 'cobaltblue'\n  }\n\n  linesInFile = File.exist?(todo_file_loc.to_s) ? IO.readlines(todo_file_loc.to_s) : []\n  lines = []\n\n  #\n  # Remove all lines that are not a todo. Stop at the first empty line.\n  #\n  line_number = []\n  line_number_id = 0\n  taskStyleToSearch = (show_alt_task) ? ['- ', '* '] : (use_star) ? ['* '] : ['- ']\n  linesInFile.each_index do |key|\n    #\n    # Clean out leading and trailing white spaces (space, tabs, etc)\n    #\n    line = linesInFile[key].gsub(/\\s+$/, '')\n    taskLine = show_subtasks ? line.gsub(/^\\s+/, '') : line\n    if (taskLine.start_with?(*taskStyleToSearch)) \u0026\u0026 (!taskLine[2..4].start_with?('[x]', '[\u003e]', '[-]'))  # Get only active Task items\n      #\n      # It's a todo line to display. Remove the leading '-' and add\n      # to the list.\n      #\n      if use_star\n        lines.push(line.gsub(/^(\\s*)\\*\\s*(\\[ \\]\\s*)*/, '\\1'))\n      else\n        lines.push(line.gsub(/^(\\s*)\\-\\s*(\\[ \\]\\s*)*/, '\\1'))\n      end\n      line_number.push(line_number_id)\n    elsif divide_with_header \u0026\u0026 line.start_with?('#')\n      lines.push(line)\n      line_number.push(line_number_id)\n    end\n    line_number_id += 1\n  end\n\n  #\n  # Give the header. It's the NotePlan icon or an emoji briefcase with the number of items todo\n  #\n  iconBase64 = 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAViAAAFYgBxNdAoAAABCRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIgogICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyI+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0MDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHRpZmY6WVJlc29sdXRpb24+MTQwPC90aWZmOllSZXNvbHV0aW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MzI8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpDb2xvclNwYWNlPjE8L2V4aWY6Q29sb3JTcGFjZT4KICAgICAgICAgPGV4aWY6UGl4ZWxZRGltZW5zaW9uPjMyPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgICAgPGRjOnN1YmplY3Q+CiAgICAgICAgICAgIDxyZGY6QmFnLz4KICAgICAgICAgPC9kYzpzdWJqZWN0PgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAxNzowNToyMCAwMDowNToyMDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+UGl4ZWxtYXRvciAzLjY8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CpI9t/8AAAPASURBVFgJtZdLSFRRGMfn/aJRZ5wITQwqCAkzUlrYJrGCLITIateiRbugh7iQCKqVm2pRywgLitBFtchFCVlERQshowckSIllIc44Os44r35nune4c71z5s5gB86c73W+/3e+851zz9gta9wCgUCj2+0+ZrVa51KpVBT3WRmEXaYsRxcMBtsBvgzwDebZnE5nq9frnYrH479lfhwypRmd3+/f43A4+rLZbJfNZnMwJuijSiAf8DEh82OTKUvovKR7AHAB1o1tbjGAjxBIMzI3dEcJH5aKAqihAT4MSB8AAiiHw5hC9pzxqJBBt4VCIb8siEoCcON4kN6lAqsA8K8ymUwdGdigyBooxC2q3mgsOwAW3w94tx4cmfD/BPAeVYfMAb/VCFiVlVWEpL2Zib0qgOqEMYXsNYBiC7Zp9WSkQWO3iiwrAzg+B4BP9QJtQTZG3+1yuQ4hXwVGAO2qvdFoOgBSvwnAI9rVQYvquxQOh8dnZ2eX0un0I0RJHVC1ji9gTQcAeBe9pmD2Pya3+YJErwcX4jfip1gzVQOsvgUHZ7SrVxyCaR2gNk4r/C1Gp0LnBrvd/lXL6+l89HqFyldXV++jkh/Ah1SZwRhXZB6dLpFMJnctLi5+0snzrDQDrHwnK7yPtQxcONMDi+0QBfoecGkGitZAVVVVECeD9PX5cMskCOA2U9KyaUUDYO+uAL7DYN9l/vI65k3wdRzKC4oQhjXA6g/ykXlaKThY4mLq4Xg+LoKbFxu+B7hURG1ElPRXsgUTgF/Ah/QxIqIw3IJoNPolEolc5EHRxk12ALuXwriMtoxtxoy99BTMzMzEcPKM05AgG2NmHGJnIWj1WJacYpgB/ayVlZVv7GlCL5fwUxJdgcpMAE6PxxNgVj89LFaobXpe0Y1rbWR0yQC4CU+y+ocU1TVutXbSeweHSwrwNPxd+B9qINimkb2VgZrW1dfX+9j/SV68vdpJ8NvpJ2prazcKOd+CRuyGkGWhJxF5tfYyWlqEsVhsP9+BzaxKvO/zjc9ujBU3kZXcRTM/P/8d5XGCOMsYpItTYKpJAyCVvwAawVOr1hu35CmCEi/hqxp5loCua3hTpLQGFhYW3uFF3GrTwpvP56sjzcOQ5wnuJqP0nhdzSjVpAEx20VvYhkXxvOZuF+BNBPSCi+peKedm9IVnSjdDfBGVB8VHtmIdwG5MDnMalvnM/tGZV8SWqgHxrLbQ9wL+k7Fzbm5OFNyaNekW8AdTXMEp0Eb5g9EB+Oc1QzbpyMFF1ImtqIX/0v4CwBRdmE9e8GAAAAAASUVORK5CYII='\n\n  lineCount = 0\n  lines.each { |line|  lineCount += 1 unless line.start_with?('#') }\n  if use_emoji\n    puts \"💼#{lineCount}\"\n  else\n    puts \"#{lineCount} |templateImage=#{iconBase64}\"\n  end\n\n  puts '---'\n\n  cfn = File.expand_path(__FILE__)\n\n  #\n  # Create the list of items to do in the menu.\n  #\n  item_number = 0\n  lines.each do |item|\n    line_color = \"\"\n    line = item.chomp\n    if priority_labels.any? { |s| line.include? s }\n      #\n      # If line contains priority label, display in priority color\n      #\n      line_color = priority_color\n    else\n      #\n      # If line contains no priority label, cycle through labels hash,\n      # and if line contains a label display in corresponding color\n      #\n      labels.each { |label, label_color| line_color = label_color if line.include?(label) }\n    end\n    #\n    # If the line contains no label, display in default color. Otherwise, in\n    # chosen color. Clicking line launches this script with line number as\n    # the parameter.\n    #\n    line_font = standard_font\n    if line.start_with?('#')\n      puts('---') unless line.start_with?('##')\n      line_font = header_font\n    end\n    lineParams = \"#{line_color.empty? ? '' : 'color='+line_color} #{line_font.empty? ? '' : 'font='+line_font} bash='#{cfn}' param1=#{line_number[item_number]}\"\n    puts(\"#{line} | \" + lineParams + \" param2=x terminal=false trim=false refresh=\\n\")\n    puts(\"#{line} | alternate=true \" + lineParams + \" param2=- terminal=false trim=false refresh=\\n\")\n    item_number += 1\n  end\n  puts '---'\n  puts \"Click an item to mark as 'done'\"\n  puts \"Click an item to mark as 'cancelled' | alternate=true\"\n  puts 'Refresh | refresh='\nelse\n  #\n  # This is what to do when clicking on an item. We want to move\n  # the item to the Archive section and set it as done. If there\n  # isn't an Archive area, create it and add the task to it.\n  #\n  # Get the task number to archive.\n  #\n  doNum = ARGV[0].to_i\n  mark = ARGV[1]\n\n  #\n  # Get the list of todos and setup variables\n  #\n  todo_file = File.open(todo_file_loc.to_s)\n  linesInFile = IO.readlines(todo_file)\n\n  if !linesInFile[doNum].start_with?('#')  # Do nothing if the item is a header\n    task = ''\n    lines = []\n    line_number = 0\n\n    linesInFile[-1] = linesInFile[-1] + \"\\n\" unless linesInFile[-1].include? \"\\n\"\n\n    #\n    # Process the todo list lines.\n    #\n    linesInFile.each do |line|\n      if line_number != doNum\n        #\n        # It is one of the other lines. Just push it into the stack.\n        #\n        lines.push(line)\n      else\n        #\n        # Get the line to be moved to the archive area.\n        #\n        if insert_date_on_done_task\n          task = line.chomp + (mark == 'x' ? \" @done(#{Time.new.strftime('%Y-%m-%d %H:%M')})\\n\" : \"\\n\")\n        else\n          task = line.chomp + \"\\n\"\n        end\n        task = task.gsub(/^(\\s*)([\\-\\*]+)\\s*(\\[ \\]\\s*)*/, '\\1\\2 [' + mark + '] ')  # Works with both task style, useful if mix with 'show_alt_task', also it keeps the indentation at beginning of the line\n        lines.push(task) unless archive_task_at_end\n      end\n      line_number += 1\n    end\n\n    #\n    # Add the task to the bottom.\n    #\n    lines.push(task) if archive_task_at_end\n\n    #\n    # Save the file.\n    #\n    IO.write(todo_file, lines.join)\n  end\nend\n"
				}
			],
			"path": "Lifestyle/Todo/todoNotePlan.15m.rb",
			"filename": "todoNotePlan.15m.rb",
			"dir": "Lifestyle/Todo",
			"docsPlugin": "Lifestyle/Todo/todoNotePlan.15m.rb.html",
			"docsCategory": "Lifestyle/Todo.html",
			"pathSegments": [
				"Lifestyle",
				"Todo"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/Todo",
					"text": "Todo",
					"isLast": true
				}
			],
			"title": "NotePlan Todo in Colour",
			"version": "v1.5",
			"author": "Richard Guay",
			"authors": [
				{
					"name": "Richard Guay",
					"githubUsername": "raguay",
					"imageURL": "https://avatars.githubusercontent.com/u/2487495?v=4",
					"bio": "I'm an American missionary in Tak, Thailand doing freelance work to help pay medical and college needs for my family of eight kids.",
					"primary": true
				}
			],
			"desc": "A todo list taken from NotePlan and displayed with customizable color-code. Mark tasks \"done\" simply by clicking on them in the menubar drop-down list. This was based on \"Todo Colour\" plugin by Srdgh.",
			"imageURL": "http://customct.com/images/NotePlanPlugin-01.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "http://customct.com/bitbar",
			"lastUpdated": "2021-03-08T15:21:54.884511Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/random_quotes.5m.sh",
					"filename": "random_quotes.5m.sh",
					"content": "#!/bin/bash\n\n# Categories\n# (Uncomment ONE category at a time!)\n#\n# Default \ncat_name=\"Default\"\ncat_url=\"https://gist.githubusercontent.com/JanGross/fb6ada3292474f300ef4/raw/quotes_default\"\n#\n#Computer Science\n#cat_name=\"Computer Science\"\n#cat_url=https://gist.githubusercontent.com/JanGross/2ac95e44ca7d0a7e0663/raw/quotes_cscience\n#\n#--------------------------------------------------------------\n#Settings:\n#----------\n# The amount of characters shown before the quote gets trimmed. (Default: 25)\n# The full quote can always be seen in the dropdown menu!\nmax_chars=\"25\"\n#----------\n# Defines the color of the quote (status bar and dropdown)\nquote_color=\"black\"\n#----------\n\n#BitBar Metadata\n# \u003cbitbar.title\u003eRandom Quotes for BitBar\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJan Groß\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eJanGross\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays a random quote from the selected category\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/0yTkSta.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\nmkdir -p ~/BitBar_quotes\ncurl -s $cat_url \u003e ~/BitBar_quotes/quotes\nline_c=$(wc -l ~/BitBar_quotes/quotes)\nline=$(jot -r 1  2 \"$line_c\")\nquote=$(tail -n+\"$line\" ~/BitBar_quotes/quotes | head -n1)\necho \"$quote | color=$quote_color length=$max_chars\"\necho \"---\"\necho \"$quote | color=$quote_color size=20\"\necho \"Quote from line $line\"\necho \"---\"\necho \"Category: $cat_name | color=black size=20\"\necho \"Category URL: $cat_url | size=10\"\necho \"Total Quotes in this category: $line_c \"\n\n\n"
				}
			],
			"path": "Lifestyle/random_quotes.5m.sh",
			"filename": "random_quotes.5m.sh",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/random_quotes.5m.sh.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Random Quotes for BitBar",
			"version": "v0.1",
			"author": "Jan Groß",
			"authors": [
				{
					"name": "Jan Groß",
					"githubUsername": "JanGross",
					"imageURL": "https://avatars.githubusercontent.com/u/13641301?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays a random quote from the selected category",
			"imageURL": "http://i.imgur.com/0yTkSta.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.926001Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/SaveToLinkPack.1h.rb",
					"filename": "SaveToLinkPack.1h.rb",
					"content": "#!/usr/bin/env ruby\n# \u003cbitbar.title\u003eSave to Linkpack\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTaylor Zane Glaeser\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etaylorzane\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSaves the current Safari link to the selected Linkpack folder. Created because Linkpack lacks a Safari extension, for now. Theoretically this doesn't need to be used with Linkpack, it will just save a bookmark to disk.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/MasCD4V.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://www.taylorzane.com\u003c/bitbar.abouturl\u003e\n\n# --------------------- #\n# EDIT THESE VARIABLES. #\n# --------------------- #\n\nMENU_TEXT = 'Save to Linkpack'\nLINKPACK_DIR = '/full/path/to/link/pack/dir'\n\n# -------------------------------------------------------- #\n# DON'T EDIT BELOW HERE UNLESS YOU KNOW WHAT YOU'RE DOING. #\n# -------------------------------------------------------- #\n\nLINKPACK_FOLDERS = Dir[\"#{LINKPACK_DIR}/**/*/\"]\n\nif ARGV[0] == 'save'\n  PAGE_TITLE = `osascript -e 'tell Application \"Safari\"' -e 'name of current tab of window 1' -e 'end tell'`\n  PAGE_URL = `osascript -e 'tell Application \"Safari\"' -e 'URL of current tab of window 1' -e 'end tell'`\n\n  SAVE_FOLDER = ARGV[1].gsub(/ZZspaceZZ/, ' ')\n\n  File.open(SAVE_FOLDER + (PAGE_TITLE.strip || PAGE_URL.chomp('/')) + '.url', 'w') do |file|\n    file.write \"[InternetShortcut]\\n\"\n    file.write \"URL=#{PAGE_URL.strip}\\n\"\n    file.write \"TITLE=#{PAGE_TITLE.strip}\\n\"\n  end\nelse\n  puts MENU_TEXT\n  puts \"---\"\n\n  LINKPACK_FOLDERS.each do |folder|\n    folder_display = folder.split(LINKPACK_DIR)[1].gsub(/^\\/|\\/$/, '')\n\n    puts \"#{folder_display} | bash=#{$0} param1=save param2=#{folder.gsub(/\\s/, 'ZZspaceZZ')} terminal=false\"\n  end\n\n  puts \"---\"\n  puts \"Refresh Folders | refresh=true\"\n  # NOTE: This cannot have terminal=false or it won't trigger.\n  # cont: I didn't want to make an ugly AppleScript command.\n  # cont: I will update this if enough people decide they\n  # cont: don't like the Terminal window popping up.\n  puts \"Open Directory | bash=open param1=#{LINKPACK_DIR}\"\nend\n"
				}
			],
			"path": "Lifestyle/SaveToLinkPack.1h.rb",
			"filename": "SaveToLinkPack.1h.rb",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/SaveToLinkPack.1h.rb.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Save to Linkpack",
			"version": "v1.0",
			"author": "Taylor Zane Glaeser",
			"authors": [
				{
					"name": "Taylor Zane Glaeser",
					"githubUsername": "taylorzane",
					"imageURL": "https://avatars.githubusercontent.com/u/5092987?v=4",
					"bio": "Software Engineer\r\nhttps://keybase.io/taylorzane\r\nhttps://gitlab.com/taylorzane",
					"primary": true
				}
			],
			"desc": "Saves the current Safari link to the selected Linkpack folder. Created because Linkpack lacks a Safari extension, for now. Theoretically this doesn't need to be used with Linkpack, it will just save a bookmark to disk.",
			"imageURL": "http://i.imgur.com/MasCD4V.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://www.taylorzane.com",
			"lastUpdated": "2021-03-08T15:21:54.48301Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/ToDo/todo-md.30s.pl",
					"filename": "todo-md.30s.pl",
					"content": "#!/usr/bin/env perl\n\n# Inspired from [Simple Todo Tracker](https://getbitbar.com/plugins/Lifestyle/todo.30s.sh)\n\nuse strict;\nuse warnings;\n\n# Edit the path to the file describe your ToDo\nmy $file_path = \"$ENV{HOME}/Dropbox/TODO.md\";\n\n# Select your editor\nmy $editor = \"/Applications/Atom.app/Contents/Resources/app/atom.sh\"; # Atom\n# my $editor = \"/Applications/TextMate.app/Contents/Resources/mate\"; # TextMate\n# my $editor = \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\"; # Sublime Text\n# my $editor = \"/Applications/CotEditor.app/Contents/SharedSupport/bin/cot\"; # CotEditor\n# my $editor = \"/Applications/Emacs.app/Contents/MacOS/Emacs\"; # Emacs\n\n# Change here depending on your preference\nmy $font_color_finished = \"#C0C0C0\";\nmy $font_color_unfinieshed = \"black\";\nmy $font_color_label = \"gray\";\nmy $menu_bar_icon = \":ballot_box_with_check:\";\n\n# \u003cbitbar.title\u003eSimple ToDo Tracker for Markdown\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKenji Akiyama\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eartifactsauce\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTracking ToDo list described in Markdown\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/nIEVIdR.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eperl\u003c/bitbar.dependencies\u003e\n\nmy $unfinished_task_cnt = 0;\nmy @tasks = ();\n\nopen my $fh, \"\u003c\", $file_path or die $!;\nmy $content = do { local $/; \u003c$fh\u003e };\nclose $fh;\n\n$content =~s/\u003c!--.*?--\u003e//sg;\n\nfor ( split /\\n/, $content ) {\n    next unless $_ =~/^\\s*(?:[\\-\\+\\*]|\\d+\\.?)\\s{1,3}\\[(.)\\]\\s+(.+)$/;\n    my $task = {\n        checked =\u003e ($1 eq \"x\"),\n        title =\u003e $2,\n    };\n\n    if ( $task-\u003e{title} =~s/^(?:label\\:(\\S+))?\\s*(.+)$/$2/i ) {\n        $task-\u003e{label} = $1;\n    }\n\n    if ( $task-\u003e{title} =~s/\\[(.+?)\\]\\((\\S+?)\\)/$1/ ) {\n        $task-\u003e{url} = $2;\n    }\n\n    $unfinished_task_cnt++ unless $task-\u003e{checked};\n    push @tasks, $task;\n}\n\nprint \"$menu_bar_icon:$unfinished_task_cnt\\n\";\nprint \"---\\n\";\n\nfor ( my $i = 0; $i \u003c= $#tasks; $i++ ) {\n    my $font_color = $tasks[$i]-\u003e{checked} ? $font_color_finished : $font_color_unfinieshed;\n    my $option_string = \"color=$font_color trim=false\";\n    $option_string .= \" href=$tasks[$i]-\u003e{url}\" if defined $tasks[$i]-\u003e{url};\n\n    if ( ! defined $tasks[$i]-\u003e{label} ) {\n        printf \"%s | %s\\n\", $tasks[$i]-\u003e{title}, $option_string;\n    }\n    elsif ( defined $tasks[$i-1]-\u003e{label} \u0026\u0026 $tasks[$i-1]-\u003e{label} eq $tasks[$i]-\u003e{label}) {\n        printf \"    %s | %s\\n\", $tasks[$i]-\u003e{title}, $option_string;\n    }\n    else {\n        printf \"%s | color=$font_color_label\\n\", $tasks[$i]-\u003e{label};\n        printf \"    %s | %s\\n\", $tasks[$i]-\u003e{title}, $option_string;\n    }\n}\n\nprint \"---\\n\";\nprint \"Open file | bash=$editor param1=$file_path terminal=false\\n\";\n# print \"Refresh | refresh=true\\n\"; # enable to refresh manually\n"
				}
			],
			"path": "Lifestyle/ToDo/todo-md.30s.pl",
			"filename": "todo-md.30s.pl",
			"dir": "Lifestyle/ToDo",
			"docsPlugin": "Lifestyle/ToDo/todo-md.30s.pl.html",
			"docsCategory": "Lifestyle/ToDo.html",
			"pathSegments": [
				"Lifestyle",
				"ToDo"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/ToDo",
					"text": "ToDo",
					"isLast": true
				}
			],
			"title": "Simple ToDo Tracker for Markdown",
			"version": "v1.1",
			"author": "Kenji Akiyama",
			"authors": [
				{
					"name": "Kenji Akiyama",
					"githubUsername": "artifactsauce",
					"imageURL": "https://avatars.githubusercontent.com/u/125637?v=4",
					"bio": "\r\n    A raw guy programmer.\r\n",
					"primary": true
				}
			],
			"desc": "Tracking ToDo list described in Markdown",
			"imageURL": "http://i.imgur.com/nIEVIdR.png",
			"dependencies": [
				"perl"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:54.757273Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/Todo/todo.30s.sh",
					"filename": "todo.30s.sh",
					"content": "#!/usr/bin/env bash\n#\n# \u003cbitbar.author\u003ez0mbix\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ez0mbix\u003c/bitbar.author.github\u003e\n# \u003cbitbar.title\u003eSimple Todo Tracker\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n#\n# Track todos in a simple ~/.todo file\n#\n\ntodo_file=\"$HOME/.todo\"\ncount=$(grep -c '[^[:space:]]' \"$todo_file\" | awk '{print $1}')\necho \"Todos: $count\"\necho \"---\"\ncat \"$todo_file\"\n"
				}
			],
			"path": "Lifestyle/Todo/todo.30s.sh",
			"filename": "todo.30s.sh",
			"dir": "Lifestyle/Todo",
			"docsPlugin": "Lifestyle/Todo/todo.30s.sh.html",
			"docsCategory": "Lifestyle/Todo.html",
			"pathSegments": [
				"Lifestyle",
				"Todo"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/Todo",
					"text": "Todo",
					"isLast": true
				}
			],
			"title": "Simple Todo Tracker",
			"version": "1.0",
			"author": "z0mbix",
			"authors": [
				{
					"name": "David Wooldridge",
					"githubUsername": "z0mbix",
					"imageURL": "https://avatars.githubusercontent.com/u/221251?v=4",
					"bio": "Getting things done.",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:54.881668Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/sureflap.15s.rb",
					"filename": "sureflap.15s.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eSureFlap Pet Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eHenrik Nyh\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ehenrik\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow inside/outside status of pets using a SureFlap smart cat flap or pet door. Can also show notifications.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n\n# By Henrik Nyh \u003chttps://henrik.nyh.se\u003e 2019-12-16 under the MIT license.\n# Heavily based on the https://github.com/alextoft/sureflap PHP code by Alex Toft.\n#\n# Has no dependencies outside the Ruby standard library (uses Net::HTTP directly and painfully).\n\n\n# NOTE: You can configure these if you like:\n\n# You can exclude e.g. indoor-only pets from the menu bar by listing their names here. (But all pets show if you click the menu bar item.)\n# Example: [ \"Foocat\", \"Bardog\" ]\nHIDE_PETS_IN_MENU_BAR = [ ]\n\n# You can ignore pets entirely by listing their names here. They won't be listed anywhere, and no notifications sent.\n# Example: [ \"Foocat\", \"Bardog\" ]\nIGNORE_PETS_ENTIRELY = [ ]\n\n# Show a notification when in/out state changes?\nNOTIFICATIONS = true\n\n# Increase this number when you add 😻, remove 😿 or rename pets or flaps/doors. You don't need to increase it if you just change the configuration above.\n# As long as this number remains unchanged, we will assume nothing's changed, which makes things faster and means we can check status more frequently.\nCACHE_VERSION = 1\n\n# End of configuration.\n\n\nrequire \"net/http\"\nrequire \"json\"\nrequire \"pp\"\nrequire \"time\"\nrequire \"fileutils\"\nrequire \"digest\"\n\nENDPOINT = \"https://app.api.surehub.io\"\nTOKEN_PATH = File.expand_path(\"~/.sureflap_token\")\nAUTH_PATH = File.expand_path(\"~/.sureflap_auth\")\n\nunless File.exist?(AUTH_PATH)\n  puts \":warning: Run: echo \\\"me@example.com / my_pw\\\" \u003e ~/.sureflap_auth\"\n  exit\nend\n\nEMAIL, PASSWORD = File.read(AUTH_PATH).strip.split(\" / \")\nAUTH_DATA = { email_address: EMAIL, password: PASSWORD, device_id: \"0\" }\n\n# From https://github.com/barsoom/net_http_timeout_errors/blob/master/lib/net_http_timeout_errors.rb\nNETWORK_ERRORS = [\n  EOFError,\n  Errno::ECONNREFUSED,\n  Errno::ECONNRESET,\n  Errno::EHOSTUNREACH,\n  Errno::EINVAL,\n  Errno::ENETUNREACH,\n  Errno::EPIPE,\n  Errno::ETIMEDOUT,\n  Net::HTTPBadResponse,\n  Net::HTTPHeaderSyntaxError,\n  Net::ProtocolError,\n  Net::ReadTimeout,\n  SocketError,\n  Timeout::Error,  # Also covers subclasses like Net::OpenTimeout.\n]\n\nclass StaleTokenError \u003c StandardError; end\n\ndef handle_network_errors\n  yield\nrescue *NETWORK_ERRORS =\u003e e\n  puts \"🙀\"\n  puts \"---\"\n  puts \"Network error when trying to communicate with the SureFlap API!\"\n  puts \"Check that you're not offline.\"\n  puts \"---\"\n  puts \"Technical details:\"\n  puts \"#{e.class.name}: #{e.message}\"\n  exit 1\nend\n\ndef post(path, data)\n  handle_network_errors do\n    uri = URI.join(ENDPOINT, path)\n    req = Net::HTTP::Post.new(uri, \"Content-Type\" =\u003e \"application/json\")\n    req.body = data.to_json\n\n    res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\n    hash = JSON.parse(res.body)\n\n    raise \"HTTP error!\\n#{res.code} #{res.message}\\n#{hash.pretty_inspect}\" unless res.code == \"200\"\n\n    hash\n  end\nend\n\ndef get(path, token:, cache:)\n  if cache\n    cache_file = \"/tmp/sureflap_#{Digest::SHA256.hexdigest(\"#{path}-#{token}\")}_v#{CACHE_VERSION}\"\n    return JSON.parse(File.read(cache_file)) if File.exist?(cache_file)\n  end\n\n  handle_network_errors do\n    uri = URI.join(ENDPOINT, path)\n    req = Net::HTTP::Get.new(uri,\n      \"Content-Type\" =\u003e \"application/json\",\n      \"Authorization\" =\u003e \"Bearer #{token}\",\n    )\n\n    res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\n    raw_json = res.body\n    hash = JSON.parse(raw_json)\n\n    error_message = \"HTTP error!\\n#{res.code} #{res.message}\\n#{hash.pretty_inspect}\" unless res.code == \"200\"\n\n    if res.code == \"401\" \u0026\u0026 hash.dig(\"error\", \"message\") == [ \"Token Signature could not be verified.\" ]\n      raise StaleTokenError, error_message\n    elsif res.code != \"200\"\n      raise error_message\n    end\n\n    File.write(cache_file, raw_json) if cache\n    hash\n  end\nend\n\ndef refresh_token\n  token = post(\"/api/auth/login\", AUTH_DATA).dig(\"data\", \"token\")\n  File.write(TOKEN_PATH, token)\n  token\nend\n\n# This method reuses an existing token until it becomes stale.\ndef with_fresh_token\n  retried = false\n\n  begin\n    token = File.exist?(TOKEN_PATH) \u0026\u0026 File.read(TOKEN_PATH) || refresh_token()\n    yield(token)\n  rescue StaleTokenError\n    raise if retried  # Avoid endless loops.\n    retried = true\n\n    FileUtils.rm(TOKEN_PATH)\n    retry\n  end\nend\n\nwith_fresh_token do |token|\n  # We assume a single household.\n  household_id = get(\"/api/household\", token: token, cache: true).dig(\"data\", 0, \"id\")\n\n  data =\n    get(\"/api/household/#{household_id}/pet\", token: token, cache: true).fetch(\"data\").map { |pet_data|\n      id = pet_data.fetch(\"id\")\n      name = pet_data.fetch(\"name\")\n      next if IGNORE_PETS_ENTIRELY.include?(name)\n\n      position_data = get(\"/api/pet/#{id}/position\", token: token, cache: false).fetch(\"data\")\n\n      is_inside = (position_data.fetch(\"where\") == 1)\n      since = Time.parse(position_data.fetch(\"since\")).localtime  # Convert from UTC to local time.\n\n      [ name, [ id, is_inside, since ] ]\n    }.compact.to_h\n\n  pets_in_summary = data.keys - HIDE_PETS_IN_MENU_BAR - IGNORE_PETS_ENTIRELY\n  raise \"There are no pets to summarize!\" if pets_in_summary.empty?\n\n  icon = -\u003e(is_inside) { is_inside ? \"🏠\" : \"🌳\" }\n\n  puts pets_in_summary.map { |name|\n    _id, is_inside, _since = data.fetch(name)\n    \"#{icon.(is_inside)} #{name}\"\n  }.join(\"  \")\n\n  puts \"---\"\n\n  today = Date.today\n  data.each do |name, (id, is_inside, since)|\n    if NOTIFICATIONS\n      inside_state_path = \"/tmp/sureflap_#{id}_is_inside\"\n      previous_is_inside_string = File.read(inside_state_path) rescue nil\n\n      if previous_is_inside_string \u0026\u0026 previous_is_inside_string != is_inside.to_s\n        system(\"osascript\", \"-e\", %{display notification \"#{icon.(is_inside)} #{name} #{is_inside ? \"has entered… Hi #{name}!\" : \"has left… Bye #{name}!\" }\" with title \"Cat flap\"})\n      end\n\n      File.write(inside_state_path, is_inside)\n    end\n\n    formatting_string =\n      case since.to_date\n      when today then \"%H:%M\"\n      when today - 1 then \"yesterday at %H:%M\"\n      when (today - 2)..(today - 6) then \"%a at %H:%M\"\n      else \"%b %-d %Y at %H:%M\"\n      end\n    puts \"#{icon.(is_inside)} #{name} is #{is_inside ? \"inside\" : \"outside\"} since #{since.strftime(formatting_string)}.\"\n  end\nend\n"
				}
			],
			"path": "Lifestyle/sureflap.15s.rb",
			"filename": "sureflap.15s.rb",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/sureflap.15s.rb.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "SureFlap Pet Status",
			"version": "v1.2.0",
			"author": "Henrik Nyh",
			"authors": [
				{
					"name": "Henrik Nyh",
					"githubUsername": "henrik",
					"imageURL": "https://avatars.githubusercontent.com/u/216?v=4",
					"bio": "Swedish web developer and pug automator in West Yorkshire, UK.",
					"primary": true
				}
			],
			"desc": "Show inside/outside status of pets using a SureFlap smart cat flap or pet door. Can also show notifications.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.957563Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/syncthing.10s.sh",
					"filename": "syncthing.10s.sh",
					"content": "#!/usr/bin/env bash\nset -euo pipefail\n\n# \u003cbitbar.title\u003eSyncthing\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eblockloop\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eblockloop\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eMonitor the status of your local (or remote) Syncthing\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://blockloop.nyc3.digitaloceanspaces.com/images/syncthing.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ecurl\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.dependencies\u003ejq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.dependencies\u003ebc\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.dependencies\u003edig\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.dependencies\u003eawk\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.dependencies\u003exargs\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.dependencies\u003esed\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.dependencies\u003etac\u003c/bitbar.dependencies\u003e\n\nPATH=\"/usr/local/bin:/usr/local/opt/coreutils/libexec/gnubin:$PATH\"\nAPI_KEY=\"\"\nHOST=\"http://127.0.0.1:8384\"\n# HiDPI\n# ICON_DEFAULT=\"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\"\n# ICON_NOTIFY=\"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\"\n# ICON_PAUSE=\"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\"\n# ICON_SYNC=\"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\"\n\n# SCALE_FACTOR=\"$(gsettings get org.gnome.desktop.interface text-scaling-factor)\"\n# if (( $(echo \"$SCALE_FACTOR == 1\" | bc -l) )); then\n        # regular icons\n        ICON_DEFAULT=\"iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gQXDw8e2d2/XgAABChJREFUOMs1lE1sVFUAhb9733sz82am7XSGttACpWmhVsUiKjEojRqDwKIEUBZGggtJjMGdiCgaNTEB3aAxLgwhRmJIMJEISjWIQTQ1ESSUnwiBgU6hv2B/pvNeZ957914XxZN8+29xzhFgOG7W8dmZtzl36iNS7fvqE7a91lhWtxJyaSUM5gPE7dighb4gtDpaDsMeL7997P7WV/m2+zh14gCCBmB0M/P2vyOTDemVUoo3K4aulDTVzUmHZEwC4Aeagh/iaVGMC05rrT/2RvzekW1LNdxAPPp5DwU3kNW5jg3asvcm0K3rGlzWN1aZGluIaWUAqLIEU5E2R4dK4sfRGcrIvKWinfwzcaRpYUGLZ34w9AfXnlSW9ZUrTevu9loWpx0OFor03Z1hKFAANMYsOue4bGmu5lop5MOrE5QikXeMfnk42/aHmH/oUp0Ti++PYbrffTBrUpYUey7eoVCOSAgBgtkYKBtDc8Jm10N1CCE4NFCid7xyLJjxXpGWsNYGoelaV++yJB0Te/vGGPZDYgYibYjUPbQhYWDACzk5VGLtgmq+eKyBVTm3a1Lba22B1Z0yOtO9oMocvDEpbpRC4lKgMfwfcQ8NJIDlWRfHEriONCmlqlNCdksVmc7mhGWyjhQXRjwcM2tgtAFlEMpQjjSlUJORgvc762lLO3x6doSBibK4WQyMi1xqz5SDpkQmybQyFLwIGRm0MZSBCEgDzzWlWVbnsizrYrRh559DjPoRjzekcG0hypWgyTbaiAcycTpyLlvaMvQNe1TFLeIJm5q4RWvKYdPiWuZWx/l7aJqtJwqUAkXSthDMmhtlsLOx2O0Ni2pas0mHN5Y3cPOuT6AMXmQYCxReoJmYiWhIxyhMBxT8iKwQzE1KElLgeRExYQ/apXLUd7K/2NaejXP21jTv/T5IURlKSjOhDMoYOqpjPDu/io3ttTyVS9A76LFicYZRPzL5qUCAvGjF12xLnBupPD0yVU6saExx4uYUw15EYEACNjBRVpwf8Wl0bbZ05KgRghc6shy8/K84Px5MaaP3yUoY9UTanP7+epFLoz67n2ikLeUQVhQm0qBAaNDa8N31KVpyLh+sXkSpojhZ8LAMpyeDSo/V/tqX/t3x4dshVtdfQ6Xsw7kEWzvnkLYlYVlhlCEtBS2pGBvba1nVUoNjCX7OF/mp38snMTt+yT1yRXDgDPGro9KZM2+DJe091Ua1rW5OsakjS2PaJtCzpYxLuFUKuTzkU0FwuN/LD0z4Oze79pH9Y3e04PVveGn7ixz++lfp1GRW2sgdQpmulNQ1bVUxkq4FwIyvuFYKqChRlIbfPMEnnWK8d3TXpM7z/L1JLr8M9/lw7Arxt5bUWVKuSQhrPZrOShQ2zR6bMyik6CsbdTRjq56+U6U7C+Np/HwL9NXzH60pAeJOLCGgAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDE4LTA0LTIzVDE1OjE4OjM0LTA1OjAwHpitlgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAxOC0wNC0yM1QxNToxNTozMC0wNTowMG50uokAAAAASUVORK5CYII=\"\n        ICON_NOTIFY=\"iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gQXDxAI4FMEkQAABD1JREFUOMt90l1o1XUcBvDn+/v9X87LXo7bjlvzeEYdbWmpDNQLyxFdBC5Y9IIgaEhURtlFF2aWRgSBlsUIicg1BQlrhZHVUaqJLhls0+WmsOy4tbP2arpzdl7+53/+L79vF1mXfeC5feCBhwBGktvw0eAbGDr/LsLNHUsDmraFpWz3Sawpu04MAEzNmJZQI6T807brnimO7b65OvEivmpPIkpdINQDmN+KuzrfFKH6ik1C0GtlRmtYcFVTSEfIEAAAy1FIWy6KinImoVcp9V5xzuqbe36NAsZB64+cQTroiKraVU8oqR0KQCXa6oN4vLGSqzWivM8AgEpJWPQUn54p0A/zJdgQY9L39mI0882yeFrRI98zJpzUQ76Ux4OCE/ubl2BlhY4T6RyGb5Uw4/gAgEZDYl1dEDuaqpAquHjnegYFj8Z0Vjtna1ZcpNjJa1HdMDsNcPuBB2o4LAUdvPoX0raHABFA+AcDNjOaghr2rYmCiPjkZIH6FsrfOaXic0KS3OK43Nq2NIh7Kww6NHwTs5YLgwFPMTz/ThQ4AMKEpdA7b6MtXkUfb6jH5tpga1ZpWzSCbA+zirQvr+QT41kaL7gwBUGB8R8hQVLmFGjcA0/HK0ypSRELGbg7rFR1iES75nu8riksuUYXNDJXhM4Mz7+ziAAI6QB0ju1SZ/78qanS5V50N1ahcedWWrX5sXsGMs7LAaGt1Uq2sywQCSHvM9JFD8JjKGbYAKBpjknUlT/7+dFCd8ejxN7eYDC0/NoU1LMXfx7XDPOLwK4PXkXzhhc0Vkz3R0ysqg1ix4oIhmeLqDQlgiEDtqJzg93HOue7P9xDXvlJTZDRWBeB63mYnl5shOOsX+zYfTS8ff/7WHn8t1T/VF4xMy9aDl+ZzHL/HxnuS+cWL09mn66ujuwTQjqmaapoNMpdXV18+PBhjkQirOs6A8hDiFe0gu0N90zkVjTXmLj0Zx5v/TKNnGKUoI1lLnw9lbPsPax8XQgDuq4jFovBNE1omgYiAoAwlNouHM89feTKQvbA+SlUBSQkARlboeipmcLgWcVA7J8X/a/Voux6ZzzFvd/eyOHavMX7H2xEIqTDtX3B0BlMCgBc10WhUEAymURPTw8sy4Lv+/8WebL5pU+tWwuzUy5k68BMobalNsDPrK2j5RWGHRRa8sbAjxuU7zUREaSUiMfjyOVySKVS8H2fmRkABsXV25fgzE33ea77+oJDN96+OEefDM7zuqWBxL5d2xKVoeCXQkpbSsmBQAAbN25ES0sLTNOEEIIAZAF0ScQfxrZdT/FI/+h1Mowhl0Xd6G2n4ezv2crkeKGh3HDfseKvP7m+56x2ymVzaGiI+/v7kc1m4ft+BkAHgM8kBk5hpG8rfE2we3R0Um2K9ICQYgi16CNhVUTrUN3QoUYvTIC5zvf9JeVyueS67iCAgwA6AVh/A1pGJFL6j63vAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDE4LTA0LTIzVDE1OjE4OjM0LTA1OjAwHpitlgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAxOC0wNC0yM1QxNToxNjowOC0wNTowMDgjSA4AAAAASUVORK5CYII=\"\n        ICON_PAUSE=\"iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gQXDxAZiuMkYwAABD1JREFUOMtVkn9olWUcxc/3ed73vb/n3ebu5u7ccNOGtiWE+ofVKBPBUbdfIFEThH5CShmsoWlQEWiGjSH+41BJw1IpsnJBOJbVLA1p65LF3Nqdm3Obeu/e3Xvfn8/z9Icm9oHz5zlwOIcAhdOqFV0XtuNi3weINHYmgpq2XnGeEsSaHc+tAYCAZkxwyEGS4pTteT2F4c3TyxpexYnUaVTQQRAqAUxtwILut1m4MrqaMXrLUWiJMFVSF9YRNhgAoOhKZIoeCpLMAOGslPLDwrVi/7WXmiUwAlqxrweZkMtKypc+Jbm2OwjZ0FoZwhPVMTVPI5oTCgAQ44RZX6pTV/P07ZQFG2yYC78Dl7JfJmszktZ8ozDqDj0oOD8cYqphR2MplkR1HMmYGLhu4aorAADVBsfy+SFsrCvBUN7De39nkfdpWFdy02TZ4p+o5li6QjcC3QZUamdTmYpwRrv+mEHG9hEkAgi3UICtFOpCGrY1V4CI1LGxPPXfdL52rcKLjBNf73qqpTURwj1Rg3YPTGOy6MFQgC8VfHFbEioIwmhR4uyUjdbaEtq/shIPlYdaclJbrxF4KqJkPLUwpo6M5Ggk7yHACBIKd2AcxLkpiUZ8qSZqowGucVYTNrAoIuW8MLGUJny1vC7CVZnOaPBaAbpS8MXtRgSAcRegXmVb3bPfnxh30+fw+YIoKtueoaaHU/Xns+5rQabdp1m2mwzGw5gTCpmCD+YrSKVgA4CmuQGig/meowcKJzvXRULBDnj+wvQYl69fPDfiem98Fnzlo61oXPWypqSie+MBLC0PYePiOAYmC4gFOEJhA7ak3vPHD3XPnPy4XYd4ujpRbszmctB1HYFgsPrK+PgKs3PLgXDbjj205PBfQ0fXJhtWJaNkWh7+uV6EIxQE42aA5AuPNNUtkVK+W1oa17q6uqivrw+JRALJZBIdHR0wTTNv2fZ2LW/7A2dGzcWNZQH8dmUO7/w4AVMqWNCGsz+cHDeLTns0qOmGYaC2thYVFRWoqqpCMpmErusgogiUamOu753a9/vN3M6+cZQEOTgBWVui4Mur+QvfSQA1hFsTCiEgpbyju1jGHM/v8aU6+9VlE+mpotrxQDUawjo8WzAJXQH4n+NulLpzEZ8tql8xYwmxx5Ts8vu/TtNEzlV71y7EtpWJmseffFbjDKOgW2/gnIMxBsYYOOcgov+SBvn0usdAmclxCoYnHMnv/2Vsrjxb8NSj9SWxtauafz5+aP+wlHKNxjlvam6mdDoNx3FgWRZ6e3vJcZyc7/u7CFs+Rdvm53D8k16mz4uv1sDaSaiWGEc8GtD6b1w69+aNg1ufZ8rblEgkYoVCQWmaBl3XMTMzkxVCdCql9nKc/wKD/RsgNKa8A5fG5Or4GRCGFJicFWgoxhLzEa/qFH/2jUoh5luWVep5nuX7/gXHcXYRUbdhGMV/AbVpEwC7SbpYAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDE4LTA0LTIzVDE1OjE4OjM0LTA1OjAwHpitlgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAxOC0wNC0yM1QxNToxNjoyNS0wNTowMBvRLrMAAAAASUVORK5CYII=\"\n        ICON_SYNC=\"iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gQXDxAmPIUJXgAABHdJREFUOMs9z/tr1XUcx/HX+/P5nvvFoztubW4OPdrSmkKo0KoxVgiOmDrEXCkJ1Ri5/VCgoilhEWmiiI0IHSJGLFfqslK6OEx0pMvYpsxibu3M3XXnnJ2zc85338vn3Q9JD3j+AU8CGJe4Csc79+LPqx/DV3Is161p61jKaptE6axpFAKAS3OOSKgeUvZF3TQvp/sbJpdH6vFN9SXMp1Mg5AGY2Iz85veFN89fJgTtmmWU+wQHi70OeJ0CAJAxFKIZE2lFSRfhmlLq0/R4pmP87VIFDIBWNV1G1GOIYM6yjUpqh9xQkao8D9YXBHiORpSyGQAQkIRpS/HF0Rn6cSILHaJf2tZu3ItfWLAwqqjyB8ag0feCLeVpj+DIvpK5WOp34MtoEt2Pshg1bABAgVNiZdiDbcVB9M2Y+PDvOGYs6new2j42b8l1Kmy5O9/hdDU7wdX7n5nHPino4J2HiOoW3EQA4T8M6Mwo9mjYUzofRMQtQzPUEZv93sim3xKS5DrD5PKqXA+e9DvpUPckxjImnAxYimHZj1NgNwiDGYVrEzqqFgbp89V5eDHHU55Q2jqNIKt9rELVRQH+ciBBAzMmXIKgwPifkCApkwo0YIFHFvpdUpOi0OvEIp9Sc7wkqjXb4pXFPsnzHIJ6xtNwMMOyHx8RACENgNqVnm1OXT0/rHffQEvYi9w3NlFpRfXiW3Fjh1toKyjcfCfz3BNe9+4VYdraPgTbUrAYmAUATTNcQpxK/9py0mj7bK1hzNaQlEVzA37lEDxgKf5abP+kk55aU6exYno65MKyHA+2LQmheyyNgEvC43VCV9R+q/VUc+zC8Z2SrRqpDKfL4UJBXhip1EzBVCy2Ktv07knXq7sOY+npv/puDqcUM/N0xuCuoQTf/CfOHdHk9B/R+KYFBQV7ioqKjKNHjqiKigouLy/n27dvc1dXFzfs2MFutzvl8wcaxYxudV8ZTNJ01kTngxTe+XkIb/4yhG0/Pehf/0HTsGGpDXV1dY6GxkY6cOAAlFI4ceIETNPExpoaBINBnxS0VRiWebGpK5bYf3UYQbeEJCCuK6QtNRr77YKSUis0DIMTiQRisRgMw8DZs2fR3t4Oj8cDn88HZl4uZk3rsqX42nf3k7g7keF9zxcg4nXA1G1hSg+ns7o6d+4cpqamcP36dfT29qKsrAyVlZWIRCKora2FlNISixavepi17cNJJe5/dHOSRhIGH325CHtX5xZWbajVBGEwmUxSOp3Gli1bUF9fj2w2C8uy4HK5eHR0FMzcIyfXvgKKjg2T2zsyq+Szvw+lcuJpk19aHAysXbPixrdnvuhPJpOVAGRJSQnl5+ejra0NnZ2d6O3tpdbW1gQRHSQ0foWtDa+h9Uy7cMwJlWkQO8nm8oBEyO/SOh71dryXOLPzdQ3W9lAoFHA4HDw+Pg6lFKSUcaXUMdM0j0rcOo+ejs2wNcHmyXtDqix0BYQ+hlDTNiLZQG5Y+cPHZN+NQaVUOJPJzNV1PQugU0p50DTNZill5l8RAkRHz8PDyQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOC0wNC0yM1QxNToxODozNC0wNTowMB6YrZYAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTgtMDQtMjNUMTU6MTY6MzgtMDU6MDC2rE/tAAAAAElFTkSuQmCC\"\n# fi\n\nfunction hostnameForIP() {\n        if [ -z \"$1\" ]; then\n                return\n        fi\n\n        port=\"$(echo \"$1\" | awk -F: '{print $NF}')\"\n        ip=\"${1//:$port/}\"\n        # strip IPv6 brackets\n        ip=\"${ip//[][]/}\"\n        hname=\"$(dig +short -x \"$ip\" xargs)\"\n        if [ -n \"$hname\" ]; then\n                echo \"${hname//\\.$/}\"\n        else\n                echo \"$ip\"\n        fi\n}\n\n[ -z \"$API_KEY\" ] \u0026\u0026 echo \"ERROR\" \u0026\u0026 echo \"Open this file and set your API_KEY!\" \u0026\u0026 exit 1\n\nif ! curl -s -m 1 \"$HOST/rest/system/ping\" \u0026\u003e /dev/null; then\n        echo \"| image=${ICON_NOTIFY}\"\n        echo \"---\"\n        echo \"Open | href=${HOST}\"\n        echo \"State: Not connected\"\n        echo \"Host: $HOST\"\n        exit 0\nfi\n\nSTATUS=\"$(curl -s -m 2 -H \"X-API-KEY:$API_KEY\" $HOST/rest/system/status)\"\nuptime_s=\"$(echo \"$STATUS\" | jq -r '.uptime')\"\nuptime_m=\"$((uptime_s / 60))\"\nuptime_h=\"$((uptime_m / 60))\"\nuptime_d=\"$((uptime_h / 24))\"\n\nuptime_m=\"$((uptime_m % 60))\"\nuptime_h=\"$((uptime_h % 24))\"\n\nCONNS=\"$(curl -s -m 2 -H \"X-API-KEY:$API_KEY\" $HOST/rest/system/connections)\"\nCON_ADDRS=\"$(echo \"$CONNS\" | jq -r '.connections[] | select(.connected == true) | .address')\"\n\nSTATE=\"$(curl -s -m 2 -H \"X-API-KEY:$API_KEY\" \"$HOST/rest/events?event=StateChanged\u0026limit=1\")\"\nCHANGES=\"$(curl -s -m 1 -H \"X-API-KEY:$API_KEY\" \"$HOST/rest/events?events=LocalChangeDetected,RemoteChangeDetected\u0026limit=50\")\" || true\n\ncpu=\"$(echo \"$STATUS\" | jq -r .cpuPercent)\"\ncpu=$(echo \"scale=2;$cpu\" |bc)\n\nstate=\"$(echo \"$STATE\" | jq -r '.[].data.to')\"\n[ \"$state\" == \"null\" ] \u0026\u0026 state='idle'\n\nICON=$ICON_DEFAULT\nif [ \"$state\" == \"scanning\" ] || [ \"$state\" == \"syncing\" ]; then\n        ICON=$ICON_SYNC\nelif [ \"$state\" == \"paused\" ]; then\n        ICON=$ICON_PAUSE\nelif [ \"$state\" == \"error\" ]; then\n        ICON=$ICON_NOTIFY\nfi\n\necho \"| image=${ICON}\"\necho '---'\necho \"Open | href=${HOST}\"\necho \"State: $state\"\necho \"Uptime: ${uptime_d}d ${uptime_h}h ${uptime_m}m\"\nprintf \"CPU: %.*f%%\\\\n\" 2 \"$cpu\"\necho '---'\n\necho \"Connections\"\nif [ -z \"$CON_ADDRS\" ]; then\n        echo \"None\"\nelse\n        for addr in $CON_ADDRS; do\n                echo -n '- '\n                hostnameForIP \"$addr\"\n        done\nfi\n\necho '---'\necho \"Recent Changes\"\necho \"$CHANGES\" | jq -r '.[] | .data | \"-- \\(.action)::\\t\\(.path)\"' | uniq | column -t -s $'::' | tac | head\necho '---'\n"
				}
			],
			"path": "Lifestyle/syncthing.10s.sh",
			"filename": "syncthing.10s.sh",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/syncthing.10s.sh.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Syncthing",
			"version": "v0.2",
			"author": "blockloop",
			"authors": [
				{
					"name": "Brett Jones",
					"githubUsername": "blockloop",
					"imageURL": "https://avatars.githubusercontent.com/u/3022496?v=4",
					"bio": "I think I am a Pyrrhonist, but I’m not sure",
					"primary": true
				}
			],
			"desc": "Monitor the status of your local (or remote) Syncthing",
			"imageURL": "https://blockloop.nyc3.digitaloceanspaces.com/images/syncthing.png",
			"dependencies": [
				"tac"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.054393Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/syncthing-conflicts.10m.py",
					"filename": "syncthing-conflicts.10m.py",
					"content": "#!/usr/bin/env python3\n\"\"\"\n    syncthing-conflicts.10m.py\n    Python 2 and 3 compatible.\n\n    Searches in your Syncthing shares to find conflicting files.\n    Clicking on a conflict in the menu will open the enclosing folder in the Finder.\n\n    'st' Menu item will turn red if there are any conflicts.\n\n    This is a Bitbar plugin for MacOS\n    https://github.com/matryer/bitbar\n\n    \u003cbitbar.title\u003eSyncthing-conflicts\u003c/bitbar.title\u003e\n    \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n    \u003cbitbar.author\u003eTim Battersby\u003c/bitbar.author\u003e\n    \u003cbitbar.author.github\u003euglygus\u003c/bitbar.author.github\u003e\n    \u003cbitbar.desc\u003eBitbar - Syncthing conflicts helper.\u003c/bitbar.desc\u003e\n    \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n    \u003cbitbar.image\u003ehttps://i.imgur.com/CbthLRt.png\u003c/bitbar.image\u003e\n\n\"\"\"\n\nimport os\nimport re\nimport argparse\nimport sys\nfrom subprocess import call\n\n\ndef find_conflicts():\n    \"\"\" Reads a folder list from config.xml\n        Returns a list of conflict found in those folders.\n    \"\"\"\n    config_file = os.environ['HOME'] + \\\n        \"/Library/Application Support/Syncthing/config.xml\"\n\n    try:\n        config = open(config_file)\n    except FileNotFoundError:\n        return ['ERROR: config file not found: '+ config_file]\n\n    xml_contents = config.read()\n    config.close()\n\n    PATH_REGEX = re.compile('path=\"(.*)\" type')\n    shares = PATH_REGEX.findall(xml_contents)\n\n    c_list = []\n\n    for share in shares:\n        for root, dirs, files in os.walk(share):\n            for file in files:\n\n                if \"/.stversions/\" in root:\n                    continue\n\n                if \".sync-conflict-\" in file:\n                    c_list.append('--' + os.path.join(root, file) +\n                                  ' | terminal=false bash=/usr/bin/open param1=\\\"' + root + '\\\"')\n\n    if c_list:\n        c_list = ['Conflicts'] + c_list\n\n    return c_list\n\n\ndef main():\n    \"\"\" Syncthing Bitbar plugin \"\"\"\n\n    parser = argparse.ArgumentParser(description='Bitbar - Syncthing conflicts helper.')\n    parser.add_argument('conflict', nargs='?',\n                        help='a conflict')\n    args = parser.parse_args()\n\n    print(args)\n\n    conflicts = find_conflicts()\n\n    if conflicts:\n        print(u' \\u001b[31mst\\u001b[0m | ansi=true')\n    else:\n        print('st')\n\n    print('---')\n\n    if args.conflict:\n        print('CONFLICT--', args.conflict)\n        call([\"open\", args.conflict])\n\n    for item in conflicts:\n        print(item)\n\n    return 0\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n"
				}
			],
			"path": "Lifestyle/syncthing-conflicts.10m.py",
			"filename": "syncthing-conflicts.10m.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/syncthing-conflicts.10m.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Syncthing-conflicts",
			"version": "v1.0",
			"author": "Tim Battersby",
			"authors": [
				{
					"name": "Tim Battersby",
					"githubUsername": "uglygus",
					"imageURL": "https://avatars.githubusercontent.com/u/11585473?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Bitbar - Syncthing conflicts helper.",
			"imageURL": "https://i.imgur.com/CbthLRt.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.036425Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/taskpaper_current_task.29s.py",
					"filename": "taskpaper_current_task.29s.py",
					"content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n#\n# \u003cbitbar.title\u003eTaskpaper Current Task\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMarcin Biegun\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emarcinbiegun\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin will display first task in your file having the specified tag\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/2I3eU0D.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n\nimport os\nimport re\nimport sys\n\ntaskpaper_file = '~/todo.taskpaper'\ntag = 'now'\nemoji_prefix = '🍅'\n\ntry:\n    file = open(os.path.expanduser(taskpaper_file), 'r')\nexcept IOError:\n    sys.stdout.write('Taskpaper File Not Found\\n---\\n'\n                     + 'Currently selected file is %s\\n' % taskpaper_file\n                     + 'To select a different file, edit %s|href=file://%s\\n'\n                     % (sys.argv[0], sys.argv[0]))\n    sys.exit(1)\n\nitem = ''\n\nfor line in file:\n\n    # Save header (e.g. \"Work:\")\n    if line.endswith(':\\n'):\n        header = line.strip()[:-1]\n\n    # Find line containing the tag but not @done\n    elif ' @%s' % tag in line and ' @done' not in line:\n        # Remove all tags\n        # Remove dash\n        # Remove whitespace\n        item += '%s (%s)\\n' % (re.sub(' @%s ?' %\n                                      tag, ' ', line).strip()[2:], header)\n        break\n\nfile.close()\n\nif item != '':\n    if emoji_prefix != '':\n        item = emoji_prefix + ' ' + item\n    sys.stdout.write(item)\n"
				}
			],
			"path": "Lifestyle/taskpaper_current_task.29s.py",
			"filename": "taskpaper_current_task.29s.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/taskpaper_current_task.29s.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Taskpaper Current Task",
			"version": "v1.1",
			"author": "Marcin Biegun",
			"authors": [
				{
					"name": "Marcin Biegun",
					"githubUsername": "marcinbiegun",
					"imageURL": "https://avatars.githubusercontent.com/u/472392?v=4",
					"bio": "Software Engineer",
					"primary": true
				}
			],
			"desc": "This plugin will display first task in your file having the specified tag",
			"imageURL": "https://i.imgur.com/2I3eU0D.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.202893Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/taskpaper.10s.py",
					"filename": "taskpaper.10s.py",
					"content": "#!/usr/bin/python\n\nimport os\nimport re\nimport sys\n\n#\n# \u003cbitbar.title\u003eTaskpaper Today\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eErnst Widerberg\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eernstwi\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin will display all tasks tagged @today and not @done in a given Taskpaper file.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/XODr2PY.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n# Read more about the Taskpaper format at taskpaper.com.\n#\n# For Vim users I recommend github.com/davidoc/taskpaper.vim. Also, to refresh\n# the BitBar plugin on writes, add this to your .vimrc:\n#\n#     autocmd! BufWritePost ~/todo.taskpaper silent ! open -g\n#                 \\ \"bitbar://refreshPlugin?name=taskpaper.*?.py\"\n#\n# Set you own file location by changing the variable \"taskpaper_file\" below.\n#\n\ntaskpaper_file = '~/todo.taskpaper'\ntag = 'today'\n\ntry:\n    file = open(os.path.expanduser(taskpaper_file), 'r')\nexcept IOError:\n    sys.stdout.write('Taskpaper File Not Found\\n---\\n'\n                     + 'Currently selected file is %s\\n' % taskpaper_file\n                     + 'To select a different file, edit %s|href=file://%s\\n'\n                     % (sys.argv[0], sys.argv[0]))\n    sys.exit(1)\n\nheader = ''\nitems = ''\nnum_items = 0\nfor line in file:\n\n    # Stop searching if \"Archive\" header is reached.\n    if re.match(r'archive:\\n', line, re.IGNORECASE) != None:\n        break\n\n    # Update header (project title).\n    if line.endswith(':\\n'):\n        header = line.strip()[:-1]\n\n    # Include lines that contain @today and not @done in output. Remove leading\n    # dash and \"@today\" with surrounding whitespace.\n    elif ' @%s' % tag in line and ' @done' not in line:\n        items += '%s (%s)\\n' % (re.sub(' @%s ?' % tag, ' ', line).strip()[2:], header)\n        num_items += 1\n\nfile.close()\nsys.stdout.write('%d %s\\n---\\n%s'\n        % (num_items, 'Task' if num_items == 1 else 'Tasks', items))\n"
				}
			],
			"path": "Lifestyle/taskpaper.10s.py",
			"filename": "taskpaper.10s.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/taskpaper.10s.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Taskpaper Today",
			"version": "v1.1",
			"author": "Ernst Widerberg",
			"authors": [
				{
					"name": "Ernst Widerberg",
					"githubUsername": "ernstwi",
					"imageURL": "https://avatars.githubusercontent.com/u/17042548?v=4",
					"bio": "CS student @KTH",
					"primary": true
				}
			],
			"desc": "This plugin will display all tasks tagged @today and not @done in a given Taskpaper file.",
			"imageURL": "http://i.imgur.com/XODr2PY.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.049813Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/taskwarrior.4m.py",
					"filename": "taskwarrior.4m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Taskwarrior\n#\n# \u003cbitbar.title\u003eTaskwarrior\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eChristoph Russ\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003echristophruss\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTask managment through your menu-bar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003etask,python\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/vjEt7Is.jpg\u003c/bitbar.image\u003e\n#\n# Dependencies:\n#   taskwarrior (http://taskwarrior.org)\n#      available via homebrew `brew install task`\n\n#\n# TODO\n# * In a sub-menu (at the bottom) Allow to restart previously completed tasks\n# * Allow to delete tasks (also in a sub-menu?)\n#\n\nimport os\nimport re\nimport subprocess\nfrom subprocess import Popen, PIPE\n\n\ndef trigger_actions(argv):\n    t_id = argv[-1]\n    action = argv[-2]\n    subprocess.call(['/usr/local/bin/task', t_id, action])\n\n\ndef build_command(t_id, action, refresh=True):\n    cmd = ''\n\n    if refresh:\n        cmd = cmd + ' refresh=true'\n\n    cmd = cmd + ' bash=/usr/bin/python param1=' + __file__ + ' param2='\n\n    cmd = cmd + action\n\n    cmd = cmd + ' param3=' + str(t_id)\n\n    cmd = cmd + ' terminal=false'\n\n    return cmd\n\n\ndef print_output(\n        cmd,\n        color,\n        head,\n        print_content=True,\n        command='',\n        ignore_id_list=[],\n        highlight_id_list=[],\n        highlight_color=' color=Red',\n        highlight_command='',\n        alternate_command=''):\n    output = ''\n\n    # important: PIPE the stderr, since task likes to use that - a lot ...\n    p = Popen(['/usr/local/bin/task', cmd],\n              stdin=None, stdout=PIPE, stderr=PIPE)\n    output, err = p.communicate()\n\n    output_lines = output.split('\\n')\n\n    id_list = []\n    content_lines = []\n\n    for output_line in output_lines:\n        output_line = output_line.rstrip()\n        if not output_line:\n            continue\n        # When looking for 'active' or 'next' tasks, we want to look only at\n        # lines that start with a digit or a -. Other line are likely extra\n        # data like annotations from bugwarrior sync\n        content_id = output_line.split()[0]\n        if not content_id.isdigit() and content_id not in ['--', '-', 'ID']:\n            continue\n        line_groups = re.match('^(\\s*\\d+|\\s*ID|\\s*-+)(.*)', output_line)\n        content_lines.append('[{}]{}'.format(*line_groups.groups()))\n\n    content_count = len(content_lines[2:-1])\n\n    if head:\n        if content_count == 0:\n            print 'ⓣ'  # ⓪ #⓿\n        elif content_count \u003c 21:\n            circle_number = ['⓪', '①', '②', '③', '④', '⑤', '⑥',\n                             '⑦', '⑧', '⑨', '⑩', '⑪', '⑫', '⑬',\n                             '⑭', '⑮', '⑯', '⑰', '⑱', '⑲', '⑳']\n            print circle_number[content_count]  # + '|' + color_pending\n        else:\n            print str(content_count)  # + '| color=Red'\n\n        print '---'\n\n    if content_count \u003c 1:\n        return id_list\n\n    table_head = content_lines[0]\n\n    # total_number_of_tasks = content_lines[-1]\n\n    content_formatting = ' | size=12 font=Courier'\n\n    if print_content:\n        print table_head + content_formatting\n        print '---'\n\n    for content_line in content_lines[2:-1]:\n        content_re = re.match('^\\[\\s*(.+)\\]\\s+([0-9A-Fa-f]+)?', content_line)\n        content_id = content_re.group(1)\n        \n        if content_id == '-':\n            # should be the UUID in this case\n            content_id = content_re.group(2)\n\n        if content_id in ignore_id_list:\n            continue\n\n        id_list.append(content_id)\n\n        if print_content:\n            cmd = ''\n\n            if len(command) \u003e 0:\n                cmd = build_command(t_id=content_id, action=command)\n\n            if content_id in highlight_id_list:\n                if len(highlight_command) \u003e 0:\n                    cmd = build_command(\n                        t_id=content_id, action=highlight_command)\n                print content_line + content_formatting + highlight_color + cmd\n            else:\n                print content_line + content_formatting + color + cmd\n\n            # adding an alternative command (press ALT for this!)\n            # printing the same stuff again, only with a different action\n            # attached\n            if len(alternate_command) \u003e 0:\n                alt_cmd = build_command(\n                    t_id=content_id, action=alternate_command)\n\n                if content_id in highlight_id_list:\n                    print content_line + content_formatting + highlight_color + alt_cmd + ' alternate=true'\n                else:\n                    print content_line + content_formatting + color + alt_cmd + ' alternate=true'\n\n    return id_list\n\n\ndef is_darkmode():\n    FNULL = open(os.devnull, 'w')\n    return_code = subprocess.call(['/usr/bin/defaults', 'read', '-g',\n                                   'AppleInterfaceStyle'], stdout=FNULL, stderr=subprocess.STDOUT)\n    if (return_code == 1):\n        return False\n    else:\n        return True\n\n\ndef main(argv):\n\n    if len(argv) \u003e 1:\n        trigger_actions(argv)\n        exit()\n\n    if is_darkmode():\n        color_running = ' color=Red'\n        color_pending = ' color=Yellow'\n        color_completed = ' color=Green'\n    else:\n        color_running = ' color=Red'\n        color_pending = ' color=Black'\n        color_completed = ' color=Green'\n\n    id_list = print_output('active', color_running, True, print_content=False)\n\n    if len(id_list) \u003e 0:\n        print '---'\n\n    print_output(\n        'next',\n        color_pending,\n        False,\n        command='start',\n        highlight_id_list=id_list,\n        highlight_color=color_running,\n        highlight_command='stop',\n        alternate_command='done')\n\n    print '---'\n\n    # ok, so if you want to delete a command, you have to press done first ...\n    # sorry, but there is only one alternative command I can provide above ...\n    print_output(\n        'completed',\n        color_completed,\n        False,\n        command='start',\n        alternate_command='delete')\n\n    return\n\nif __name__ == \"__main__\":\n    import sys\n    main(sys.argv)\n"
				}
			],
			"path": "Lifestyle/taskwarrior.4m.py",
			"filename": "taskwarrior.4m.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/taskwarrior.4m.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Taskwarrior",
			"version": "v2.0",
			"author": "Christoph Russ",
			"authors": [
				{
					"name": "Christoph Russ",
					"githubUsername": "christophruss",
					"imageURL": "https://avatars.githubusercontent.com/u/12080753?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Task managment through your menu-bar.",
			"imageURL": "http://i.imgur.com/vjEt7Is.jpg",
			"dependencies": [
				"task",
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.297012Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/tescomobileirl.1h.py",
					"filename": "tescomobileirl.1h.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eTesco Mobile Ireland Balance\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJack Higgins\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eskhg\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays your current Tesco Mobile Ireland balance and available data, text and voice allowances\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://github.com/skhg/BitBar-Plugins/blob/master/TescoMobileIrl/tescobalance.jpg?raw=true\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython 2.7 or 3.6, pytescomobileirl\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/skhg/BitBar-Plugins/tree/master/TescoMobileIrl\u003c/bitbar.abouturl\u003e\n\n\n\n\n\n\n\n# START USER DETAILS\n\n# Enter your tescomobile.ie login details here. These are sent only to the tesco mobile\n# website and never stored or transmitted anywhere else.\n\nphone_num = \"MyPhoneNumber\"\npassword = \"MyPassword\"\n\n# END USER DETAILS\n\n\n\n\n\n\nfrom sys import exit\n\n# VERIFY DEPENDENCIES\ntry:\n    from pytescomobileirl import TescoSession\nexcept ImportError:\n    print(\"Tesco Mobile Ireland\")\n    print(\"---\")\n    print(\"Looks like the package 'pytescomobileirl' isn't installed.\")\n    print(\"You need it to run this tool. To install, click 'Install Now',\")\n    print(\"then click 'Preferences' -\u003e 'Refresh All...'\")\n    print(\"Install Now. | bash='sudo /usr/local/bin/pip install pytescomobileirl'\")\n    exit()\n\n\n\n\n\n\n# START APP\n\nimport pickle\nimport os\nimport subprocess\n\nclass StateMgmt:\n    \n    def __init__(self):\n        os.chdir(self.get_bitbar_plugins_dir())\n        self.relative_state_dir = \"./.tescomobileirl_state/\"\n        self.state_dump_file = self.relative_state_dir+\"tescomobileirl_last_state.pickle\"\n\n    def get_bitbar_plugins_dir(self):\n        bitbar_defaults = subprocess.check_output([\"defaults\", \"read\", \"com.matryer.BitBar\"]).split(\";\")\n        for entry in bitbar_defaults:\n            if \"pluginsDirectory\" in entry:\n                return entry.split(\"\\\"\")[1]\n\n        raise IOError(\"BitBar plugins directory could not be found\")\n    \n    def check_state_dir_exists(self, state_dir):\n        if os.path.exists(state_dir) is False:\n            os.mkdir(state_dir)\n    \n    def load_state(self):\n        self.check_state_dir_exists(self.relative_state_dir)\n\n        if os.path.exists(self.state_dump_file) is False:\n            return None\n        else:\n            try:\n                with open(self.state_dump_file,\"r\") as f_read:\n                    return pickle.load(f_read)\n            except:\n                return None\n    \n    def dump_state(self, current_state):\n        self.check_state_dir_exists(self.relative_state_dir)\n\n        with open(self.state_dump_file,\"w\") as f_write:\n            pickle.dump(current_state,f_write)\n\nclass ResultsFormatter:\n\tdef print_output(self, balances, is_live):\n\t\tprint(balances.remaining_total(\"data\").summary())\n\t\tprint(\"---\")\n\t\tif is_live is False:\n\t\t    print(\"❌ : Using cached data, last update failed\")\n\t\t    print(\"---\")\n\n\t\tprint(\"Number: \"+phone_num)\n\t\tprint(\"---\")\n\t\tprint(u'€{:,.2f} credit'.format(balances.credit_remaining).encode(\"utf-8\"))\n\t\tprint(\"---\")\n\t\tprint(\"Active bundles:\")\n\t\tfor bundle in balances.active_balances():\n\t\t    print(bundle.summary() + \" for \"+ str(bundle.days_remaining())+\" days\")\n\t\tprint(\"---\")\n\n\t\tprint(\"tescomobile.ie | href=https://my.tescomobile.ie/tmi-selfcare-web/login\")\n    \n\tdef print_error_message(self):\n\t\tprint(\"❌\")\n\t\tprint(\"---\")\n\t\tprint(\"Error: Unable to retrieve Tesco Mobile state.\")\n\t\tprint(\"---\")\n\n\t\tprint(\"tescomobile.ie | href=https://my.tescomobile.ie/tmi-selfcare-web/login\")\n\ndef run():\n    login_ok= False\n\n    session = TescoSession()\n\n    try:\n        login_ok = session.login(phone_num, password)\n    except Exception:\n        pass\n\n    state = StateMgmt()\n    formatter = ResultsFormatter()\n\n    if login_ok:\n        balances = session.get_balances()\n        \n        state.dump_state(balances)\n        formatter.print_output(balances,True)\n    else:\n        loaded_state = state.load_state()\n        if loaded_state is not None:\n            formatter.print_output(loaded_state,False)\n        else:\n            formatter.print_error_message()\n\nrun()\n"
				}
			],
			"path": "Lifestyle/tescomobileirl.1h.py",
			"filename": "tescomobileirl.1h.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/tescomobileirl.1h.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Tesco Mobile Ireland Balance",
			"version": "v1.0.0",
			"author": "Jack Higgins",
			"authors": [
				{
					"name": "Jack Higgins",
					"githubUsername": "skhg",
					"imageURL": "https://avatars.githubusercontent.com/u/1479627?v=4",
					"bio": "Product Manager and Software Engineer",
					"primary": true
				}
			],
			"desc": "Displays your current Tesco Mobile Ireland balance and available data, text and voice allowances",
			"imageURL": "https://github.com/skhg/BitBar-Plugins/blob/master/TescoMobileIrl/tescobalance.jpg?raw=true",
			"dependencies": [
				"python 2.7 or 3.6",
				"pytescomobileirl"
			],
			"aboutURL": "https://github.com/skhg/BitBar-Plugins/tree/master/TescoMobileIrl",
			"lastUpdated": "2021-03-08T15:21:56.304789Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/text_on_menubar.1h.py",
					"filename": "text_on_menubar.1h.py",
					"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 /usr/local/bin/python\n# \u003cbitbar.title\u003eText on Menubar\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eclip\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebinderclip\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow your text on menubar\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://qn.cdn.cliiip.com/imgs/u/d93e6b5b-52b7-4324-aaef-8969915f91b1.png\u003c/bitbar.image\u003e\n\nimport argparse\nimport os\nimport subprocess\n\n\ndef get_text_file():\n    home = os.path.expanduser(\"~\")\n    text_file = os.path.join(home, '.bitbar_text_on_menubar')\n    return text_file\n\n\ndef get_file_path():\n    return os.path.realpath(__file__)\n\n\ndef get_file_name():\n    return os.path.basename(__file__)\n\n\ndef read_and_print():\n    text_file = get_text_file()\n    text = ''\n    try:\n        with open(text_file, 'r') as f:\n            text = f.read()\n    except IOError:\n        pass\n    print(text.strip() or 'Hello')\n\n\ndef set_text():\n    try:\n        ret = subprocess.check_output(\n            [\n                'osascript',\n                '-e',\n                r'set input_text to text returned of (display dialog \"Please input text here:\"'\n                ' default answer \"\" with title \"Set the Text\")',\n            ])\n        text = ret.strip()\n\n        text_file = get_text_file()\n        with open(text_file, 'w') as f:\n            f.write(text)\n    except subprocess.CalledProcessError:\n        pass\n    # refresh\n    s = \"bitbar://refreshPlugin?name={}\".format(get_file_name())\n    subprocess.call(['open', s])\n\n\ndef print_submenu():\n    print('---')\n    print('Set the Text | bash=\"{}\" param1=\"-s\"  terminal=false'.format(get_file_path()))\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-s\", \"--set_text\",\n                        action=\"store_true\", help='set the text')\n    args = parser.parse_args()\n\n    if args.set_text:\n        set_text()\n        return\n    read_and_print()\n    print_submenu()\n\n\nif __name__ == '__main__':\n    main()\n"
				}
			],
			"path": "Lifestyle/text_on_menubar.1h.py",
			"filename": "text_on_menubar.1h.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/text_on_menubar.1h.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Text on Menubar",
			"version": "1.0",
			"author": "clip",
			"authors": [
				{
					"name": "clip",
					"githubUsername": "binderclip",
					"imageURL": "https://avatars.githubusercontent.com/u/8187479?v=4",
					"bio": "Backend developer.",
					"primary": true
				}
			],
			"desc": "Show your text on menubar",
			"imageURL": "https://qn.cdn.cliiip.com/imgs/u/d93e6b5b-52b7-4324-aaef-8969915f91b1.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.320217Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/Things/thingsinbox.6s.sh",
					"filename": "thingsinbox.6s.sh",
					"content": "#!/bin/bash\n\n# Show tasks in your Inbox in Things\n#\n# by Max Clayton Clowes (maxcc@me.com)\n#\n# Shows tasks in your Inbox. Find/replace \"Inbox\" with a list of your choice - e.g \"Today\"\n# 60 second refresh might be too slow. Tweak to your liking.\n# Only shows 20 todos - too many stops todos from being completed\n\n# metadata\n# \u003cbitbar.title\u003eThings - View Inbox\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMax Clayton Clowes\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emcclowes\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay tasks in your Inbox in Things 3.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/2IvhNws.png\u003c/bitbar.image\u003e\n\nfunction tellthings() {\n\tosascript -e \"tell application \\\"Things3\\\" \n\t$1\nend tell\"\n}\n\nif [ \"$1\" = 'launch' ]; then\n\ttellthings 'activate'\n\texit\nfi\n\ncase \"$1\" in\n\t'show quick entry panel' | 'log completed now' | 'empty trash')\n\t\ttellthings \"$1\"\n\t\texit\nesac\n\nif [ \"$1\" = 'complete' ]; then\n\ttellthings \"set toDo to to do named \\\"$2\\\" of list \\\"Inbox\\\"\n\tset status of toDo to completed\n\tdelay 1.3\"\n\texit\nfi\n\nif [ \"$(osascript -e 'application \"Things3\" is running')\" = \"false\" ]; then\n\techo \"☑\"\n\techo \"---\"\n\techo \"Things 3 is not running\"\n\techo \"Launch Things3 | bash='$0' param1=launch terminal=false\"\n\texit\nfi\n\necho \"☑\"\n\necho \"---\"\n\necho \"Inbox\"\n\nitems=$(tellthings 'set targetList to {}\nrepeat with n from 1 to count of to dos of list \"Inbox\"\n\tset toDo to item n of to dos of list \"Inbox\"\n\tcopy name of toDo \u0026 \"|\" \u0026 status of toDo to the end of the targetList\n\tif n \u003e 20 then\n\t\treturn targetList\n\tend if\nend repeat\nreturn targetList');\n\nIFS=\",\"\nfor i in $items; do\n\tIFS=\"|\";\n\t# shellcheck disable=SC2086\n\tset \"--\" ${i};\n\tif [ \"$2\" = \"open\" ]; then\n\t\titem=\"☐ ${1}\";\n\telse \n\t\titem=\"☑ ${1}\";\n\tfi\n\techo \"${item} | bash=$0 param1=complete param2='${1}' terminal=false\"\ndone\n\necho \"View more... | color=#aaaaaa bash='$0' param1=launch terminal=false\"\n\necho \"---\"\n\necho \"New to do | bash='$0' param1='show quick entry panel' terminal=false\"\n\necho \"Log completed | bash='$0' param1='log completed now' terminal=false\"\n\necho \"Empty trash | bash='$0' param1='empty trash' terminal=false\"\n\necho '---'\n\necho \"Open Things 3 | bash='$0' param1=launch terminal=false\"\n"
				}
			],
			"path": "Lifestyle/Things/thingsinbox.6s.sh",
			"filename": "thingsinbox.6s.sh",
			"dir": "Lifestyle/Things",
			"docsPlugin": "Lifestyle/Things/thingsinbox.6s.sh.html",
			"docsCategory": "Lifestyle/Things.html",
			"pathSegments": [
				"Lifestyle",
				"Things"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/Things",
					"text": "Things",
					"isLast": true
				}
			],
			"title": "Things - View Inbox",
			"version": "v1.2",
			"author": "Max Clayton Clowes",
			"authors": [
				{
					"name": "Max Clayton Clowes",
					"githubUsername": "mcclowes",
					"imageURL": "https://avatars.githubusercontent.com/u/4573407?v=4",
					"bio": "Product Manager. Have been delivering websites and apps for 10+ years.",
					"primary": true
				}
			],
			"desc": "Display tasks in your Inbox in Things 3.",
			"imageURL": "https://i.imgur.com/2IvhNws.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:54.511103Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/Things/thingstoday.6s.sh",
					"filename": "thingstoday.6s.sh",
					"content": "#!/bin/bash\n\n# Show tasks due Today in Things\n#\n# by Max Clayton Clowes (maxcc@me.com)\n#\n# Shows tasks due Today. Find/replace \"Today\" with a list of your choice - e.g \"Inbox\"\n# 60 second refresh might be too slow. Tweak to your liking.\n# Only shows 20 todos - too many stops todos from being completed\n\n# metadata\n# \u003cbitbar.title\u003eThings 3 Today\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMax Clayton Clowes\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emcclowes\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay tasks due today in Things 3.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/2IvhNws.png\u003c/bitbar.image\u003e\n\nfunction tellthings() {\n\tosascript -e \"tell application \\\"Things3\\\"\n\t$1\nend tell\"\n}\n\nif [ \"$1\" = 'launch' ]; then\n\ttellthings 'activate'\n\texit\nfi\n\ncase \"$1\" in\n\t'show quick entry panel' | 'log completed now' | 'empty trash')\n\t\ttellthings \"$1\"\n\t\texit\nesac\n\nif [ \"$1\" = 'complete' ]; then\n\ttellthings \"set toDo to to do named \\\"$2\\\" of list \\\"Today\\\"\n\tset status of toDo to completed\n\tdelay 1.3\"\n\texit\nfi\n\nif [ \"$(osascript -e 'application \"Things3\" is running')\" = \"false\" ]; then\n\techo \"☑\"\n\techo \"---\"\n\techo \"Things 3 is not running\"\n\techo \"Launch Things3 | bash='$0' param1=launch terminal=false\"\n\texit\nfi\n\necho \"☑\"\n\necho \"---\"\n\necho \"Today...\"\n\nitems=$(tellthings 'set targetList to {}\nrepeat with n from 1 to count of to dos of list \"Today\"\n\tset toDo to item n of to dos of list \"Today\"\n\tif activation date of toDo is equal to missing value then\n\telse\n\t\tcopy name of toDo \u0026 \"|\" \u0026 status of toDo to the end of the targetList\n\tend if\n\tif n \u003e 20 then\n\t\treturn targetList\n\tend if\nend repeat\nreturn targetList');\n\nIFS=\",\"\nfor i in $items; do\n\tIFS=\"|\";\n\t# shellcheck disable=SC2086\n\tset \"--\" ${i};\n\tif [ \"$2\" = \"open\" ]; then\n\t\titem=\"☐ ${1}\";\n\telse \n\t\titem=\"☑ ${1}\";\n\tfi\n\techo \"${item} | bash=$0 param1=complete param2='${1}' terminal=false\"\ndone\n\necho \"View more... | color=#aaaaaa bash='$0' param1=launch terminal=false\"\n\necho \"---\"\n\necho \"New to do | bash='$0' param1='show quick entry panel' terminal=false\"\n\necho \"Log completed | bash='$0' param1='log completed now' terminal=false\"\n\necho \"Empty trash | bash='$0' param1='empty trash' terminal=false\"\n\necho '---'\n\necho \"Open Things 3 | bash='$0' param1=launch terminal=false\"\n"
				}
			],
			"path": "Lifestyle/Things/thingstoday.6s.sh",
			"filename": "thingstoday.6s.sh",
			"dir": "Lifestyle/Things",
			"docsPlugin": "Lifestyle/Things/thingstoday.6s.sh.html",
			"docsCategory": "Lifestyle/Things.html",
			"pathSegments": [
				"Lifestyle",
				"Things"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/Things",
					"text": "Things",
					"isLast": true
				}
			],
			"title": "Things 3 Today",
			"version": "v1.1",
			"author": "Max Clayton Clowes",
			"authors": [
				{
					"name": "Max Clayton Clowes",
					"githubUsername": "mcclowes",
					"imageURL": "https://avatars.githubusercontent.com/u/4573407?v=4",
					"bio": "Product Manager. Have been delivering websites and apps for 10+ years.",
					"primary": true
				}
			],
			"desc": "Display tasks due today in Things 3.",
			"imageURL": "https://i.imgur.com/2IvhNws.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:54.507698Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/Things/thingsdoingnow.10s.sh",
					"filename": "thingsdoingnow.10s.sh",
					"content": "#!/bin/bash\n\n# Show the one task you tagged with `Now` in Things\n#\n# by Florent Crivello (forked from Max Clayton Clowes' plugin (maxcc@me.com))\n#\n\n# metadata\n# \u003cbitbar.title\u003eThings Doing Now\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eFlorent Crivello\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ealtimor\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow the one task you tagged with `Now` in Things\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/CLtYE1E.gif\u003c/bitbar.image\u003e\n\nfunction tellthings() {\n\tosascript -e \"tell application \\\"Things3\\\" \n\t$1\nend tell\"\n}\n\nif [ \"$1\" = 'launch' ]; then\n  tellthings 'activate'\n  exit\nfi\n\ncase \"$1\" in\n  'show quick entry panel' | 'log completed now' | 'empty trash')\n    tellthings \"$1\"\n    exit\nesac\n\nif [ \"$1\" = 'complete' ]; then\n  tellthings \"set toDo to to do named \\\"$2\\\" of list \\\"Today\\\"\n\tset status of toDo to completed\n\tdelay 1.3\"\n  exit\nfi\n\nif [ \"$(osascript -e 'application \"Things3\" is running')\" = \"false\" ]; then\n  echo \"☑\"\n  echo \"---\"\n  echo \"Things 3 is not running\"\n  echo \"Launch Things3 | bash='$0' param1=launch terminal=false\"\n  exit\nfi\n\ncurrentlyDoing=$(tellthings 'set currentlyDoing to \"\"\nrepeat with n from 1 to count of to dos of list \"Today\"\n\tset toDo to item n of to dos of list \"Today\"\n\tset toDoName to name of toDo\n\tif status of toDo = open then\n    set tagList to tags of toDo \n    repeat with aTag in tagList\n    set tagName to name of aTag\n      if tagName = \"Now\" then\n        set currentlyDoing to toDoName\n        return currentlyDoing\n      end if\n      end repeat\n\tend if\nend repeat\nreturn currentlyDoing');\n\nif [ \"$currentlyDoing\" != \"\" ]; then\n\techo \"☐ $currentlyDoing | bash='$0' param1=launch terminal=false\"\nfi"
				}
			],
			"path": "Lifestyle/Things/thingsdoingnow.10s.sh",
			"filename": "thingsdoingnow.10s.sh",
			"dir": "Lifestyle/Things",
			"docsPlugin": "Lifestyle/Things/thingsdoingnow.10s.sh.html",
			"docsCategory": "Lifestyle/Things.html",
			"pathSegments": [
				"Lifestyle",
				"Things"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/Things",
					"text": "Things",
					"isLast": true
				}
			],
			"title": "Things Doing Now",
			"version": "v1.0",
			"author": "Florent Crivello",
			"authors": [
				{
					"name": "Florent Crivello",
					"githubUsername": "altimor",
					"imageURL": "https://avatars.githubusercontent.com/u/1656495?v=4",
					"bio": "@Altimor",
					"primary": true
				}
			],
			"desc": "Show the one task you tagged with `Now` in Things",
			"imageURL": "http://i.imgur.com/CLtYE1E.gif",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:54.49509Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/ToDo/todo.15m.rb",
					"filename": "todo.15m.rb",
					"content": "#!/usr/bin/env ruby\n# coding: utf-8\n\n# \u003cbitbar.title\u003eTodo Colour\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSrdgh\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eSrdgh\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTodo list with customisable color-code. Mark tasks \"done\" simply by clicking on them in the menubar drop-down list.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/eNl6QGh.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby, todo.sh\u003c/bitbar.dependencies\u003e\n\n# Change to your todo directory path (which should contain todo.sh and todo.txt)\ntodo_directory = \"#{Dir.home}/todo/\"\n\n# Add further priority labels here\npriority_labels = [ \"+Urgent\" ]\n\n# Change priority color here\npriority_color = \"red\"\n\n# Customise label color-code here (these colors are optimised for a dark theme menubar)\nlabels = {\n  \"+Work\" =\u003e \"orange\",\n  \"+Play\" =\u003e \"yellow\",\n  \"+Family\" =\u003e \"green\",\n  \"+Health\" =\u003e \"cadetblue\",\n  \"+Code\" =\u003e \"purple\",\n  \"+Admin\" =\u003e \"violet\"\n  }\n\ntodo_file = File.open(\"#{todo_directory}todo.txt\")\ntodo_script = (\"#{todo_directory}todo.sh\")\n\nlines = IO.readlines(todo_file)\n\nputs \"Do: #{lines.length}\"\n\nputs \"---\"\n\nline_number = 0\nuntil todo_file.eof() # Until end-of-file\n  line_number += 1\n  line_color = \"\"\n  line = todo_file.readline().chomp\n  priority_labels.each do |priority_label|\n    if line.include?(priority_label) # If line contains priority label, display in priority color\n      line_color = priority_color\n    else # If line contains no priority label, cycle through labels hash, and if line contains a label display in corresponding color\n      labels.each { |label, label_color| line_color = label_color if line.include?(label) }\n    end\n  end\n  line_color.empty? ? puts(\"#{line} | bash=#{todo_script} param1=do param2=#{line_number} terminal=false refresh=\\n\") : puts(\"#{line} | color=#{line_color} bash=#{todo_script} param1=do param2=#{line_number} terminal=false refresh=\\n\") # If the line contains no label, display in default color. Otherwise, in chosen color. Clicking line launches bash script: 'todo.sh do (line_number)'.\nend\nputs \"---\"\nputs \"Click an item to mark 'done'\"\nputs \"Refresh | refresh=\"\n"
				}
			],
			"path": "Lifestyle/ToDo/todo.15m.rb",
			"filename": "todo.15m.rb",
			"dir": "Lifestyle/ToDo",
			"docsPlugin": "Lifestyle/ToDo/todo.15m.rb.html",
			"docsCategory": "Lifestyle/ToDo.html",
			"pathSegments": [
				"Lifestyle",
				"ToDo"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/ToDo",
					"text": "ToDo",
					"isLast": true
				}
			],
			"title": "Todo Colour",
			"version": "v0.1",
			"author": "Srdgh",
			"authors": [
				{
					"name": "Srdgh",
					"githubUsername": "Srdgh",
					"imageURL": "https://avatars.githubusercontent.com/u/7290027?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Todo list with customisable color-code. Mark tasks \"done\" simply by clicking on them in the menubar drop-down list.",
			"imageURL": "http://i.imgur.com/eNl6QGh.png",
			"dependencies": [
				"ruby",
				"todo.sh"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:54.862177Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/ToDo/NotePlan3.15m.rb",
					"filename": "NotePlan3.15m.rb",
					"content": "#!/usr/bin/env ruby\n# coding: utf-8\n\n# \u003cbitbar.title\u003eTodo Today for NotePlan v3\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJonathan Clark\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejgclark\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eA todo list taken from NotePlan v3 and displayed with customizable color-code. Mark tasks \"done\" simply by clicking on them in the menubar drop-down list. This was based on \"Todo.NotePlan\" by Richard Guay which in turn was based on \"Todo Colour\" plugin by Srdgh.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://noteplan.co/static/icon-aef6fdb335c829b1363315ef21c3146d.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://noteplan.co/\u003c/bitbar.abouturl\u003e\n#\n# Modifications by Jonathan Clark\n#   v2.2, 2021/01/29:\n#     - tweak default 'priority_label' to suit planned change in NP3\n#   v2.1, 2020/11/29:\n#     - auto-detect storage type (CloudKit \u003e iCloud Drive \u003e Drobpox if there are multiple)\n#     - add option to specify the file extension in use (default to md, but can be txt)\n#   v2.0, 2020/10/30:\n#     - Update NP data storage filepaths for NotePlan 3 beta\n#       (including CloudKit change at v3.0.15 beta)\n#     - Make CloudKit location the default\n#     - tweak colours and falgs to suit my needs\n#     - ignore tasks with dates scheduled into the future\n#     - improve some non-tasks it was including\n#     - code clean up\n#\n# Modifications by Guillaume Barrette\n#   2017/07/01:\n#     - Added option to show subtasks\n#   2017/06/15:\n#     - Changed TRUE/FALSE constant to true/false since uppercase are deprecated in ruby 2.4\n#     - Changed labels to start with '#' to follow NotePlan way of tagging\n#     - Allow to change Fonts by the user\n#     - Added a new parameter for users to specify if want the task to be archived\n#       at the end of the file or not\n#     - Added alternate action to mark as cancelled instead of done (using the\n#       Option modifier key)\n#     - Allow indentation at beginning of task\n#   2017/06/03:\n#     - Added 'divide_with_header' to allow to show sections separated by headers\n#     - Updated the algorithm to skip all items that are not a task (Skip anything that\n#       doesn't starts with '- ' or '* ' and if followed by [x], [\u003e], [-])\n#   2017/05/28:\n#     - Fixed the line number of item to mark as done by getting the id before stripping\n#       the lines that are not a task\n#     - Scheduled task (to another day - [\u003e]) are now skipped also\n#   2017/05/20:\n#     - Added Black and White NotePlan menubar icon\n#     - Repaired a bug when there was no newline on the last line the done task would\n#       get appended to the last line instead of a new line at the end\n#     - Added the time in the @done(YYYY-MM-DD HH:MM) so it's like NotePlan preference\n#     - Added User Parameters so it's easy to determine if we want to append the\n#       @done(...) string at the end of the done task and if we want the black or white\n#       menubar icon\n#     - Changed the menubar icon to a templateImage so the color changes automatically\n#       when using a dark menubar (removed the white icon)\n#     - Removed 'use_black_icon' parameters since now it's automatic\n#     - Changed encoding method and removed the use of 'force_encoding(\"utf-8\")'\n#     - Repaired a bug if there was no file already created for that day in NotePlan\n#\n# Modifications by Richard Guay\n#   2017/05/20:\n#       - Added using emoji option\n#       - fixed character encoding on removing an item\n#       - Proper parsing of [ ] in the todo.\n#       - cleanup\nrequire 'date'\n\n#################################\n# User Parameters:\ninsert_date_on_done_task = true  # If true, the date would be inserted with the @done tag\nuse_emoji_as_icon = false        # If true, will show emoji, otherwise it will use the black or white icon.\nuse_star = true                  # if true, will look for and use '*' instead of '-'\nshow_alt_task = true             # If true, tasks marked with the alternate character ('* ' if use_star is FALSE or '- ' if use_star is TRUE) would be shown in the task list. For example, this could be useful to use them as bullet list.\nshow_subtasks = true             # If true, subtasks would be shown in the list\ndivide_with_header = true        # If true, headers would be listed and a separator is put between lists\narchive_task_at_end = false      # If true, the task would get archived to the end of the note\nfile_extension = '.md'           # Defaults to file extension type 'md' -- can change to '.txt'\npriority_labels = ['@urgent', '#high', '#⭐️']\npriority_marker = '⭐'\nstandard_font = ''               # Font used for tasks\nheader_font   = 'Helvetica-Bold' # Font used for headers if listed with 'divide_with_header'\n#################################\n\nEncoding.default_internal = Encoding::UTF_8\nEncoding.default_external = Encoding::UTF_8\n\nUSERNAME = ENV['LOGNAME'] # pull username from environment\nUSER_DIR = ENV['HOME'] # pull home directory from environment\nDROPBOX_DIR = \"#{USER_DIR}/Dropbox/Apps/NotePlan/Documents\".freeze\nICLOUDDRIVE_DIR = \"#{USER_DIR}/Library/Mobile Documents/iCloud~co~noteplan~NotePlan/Documents\".freeze\nCLOUDKIT_DIR = \"#{USER_DIR}/Library/Containers/co.noteplan.NotePlan3/Data/Library/Application Support/co.noteplan.NotePlan3\".freeze\ndata_root_filepath = DROPBOX_DIR if Dir.exist?(DROPBOX_DIR) \u0026\u0026 Dir[File.join(DROPBOX_DIR, '**', '*')].count { |file| File.file?(file) } \u003e 1\ndata_root_filepath = ICLOUDDRIVE_DIR if Dir.exist?(ICLOUDDRIVE_DIR) \u0026\u0026 Dir[File.join(ICLOUDDRIVE_DIR, '**', '*')].count { |file| File.file?(file) } \u003e 1\ndata_root_filepath = CLOUDKIT_DIR if Dir.exist?(CLOUDKIT_DIR) \u0026\u0026 Dir[File.join(CLOUDKIT_DIR, '**', '*')].count { |file| File.file?(file) } \u003e 1\n\ntodo_file_loc = File.expand_path(data_root_filepath + '/Calendar/' + Date.today.strftime('%Y%m%d') + file_extension)\n\nif ARGV.empty?\n  # Customise label color-code here:\n  labels = {\n    '@admin' =\u003e 'orange',\n    '@liz' =\u003e 'yellow',\n    '@home' =\u003e 'green',\n    '@martha' =\u003e 'purple', # pink is too light\n    '@Health' =\u003e 'cadetblue',\n    '@church' =\u003e 'blue', # lightblue is too light\n    '@tutorials' =\u003e 'violet',\n    '@Envato' =\u003e 'darkorange',\n    '@workflow' =\u003e 'purple',\n    '@tutorial' =\u003e 'cobaltblue'\n  }\n\n  lines_in_file = File.exist?(todo_file_loc.to_s) ? IO.readlines(todo_file_loc.to_s) : []\n  lines = []\n\n  # Remove all lines that are not a todo. Stop at the first empty line.\n  line_number = []\n  line_number_id = 0\n  task_style_to_search = show_alt_task ? ['- ', '* '] : use_star ? ['* '] : ['- ']\n  lines_in_file.each_index do |key|\n    # Clean out leading and trailing white spaces (space, tabs, etc)\n    line = lines_in_file[key].gsub(/\\s+$/, '')\n    task_line = show_subtasks ? line.gsub(/^\\s+/, '') : line\n    if task_line.start_with?(*task_style_to_search) \u0026\u0026 !task_line[2..4].start_with?('[x]', '[\u003e]', '[-]')  # Get only active Task items\n      # Now check if doesn't have a \u003eYYYY-MM-DD that schedules it into the future\n      break if task_line =~ /\\s\u003e\\d{4}\\-\\d{2}\\-\\d{2}/\n\n      # It's a todo line to display. Remove the leading task marker and add to the list.\n      if use_star\n        lines.push(line.gsub(/^(\\s*)\\*\\s*(\\[ \\]\\s*)*/, '\\1'))\n      else\n        lines.push(line.gsub(/^(\\s*)\\-\\s*(\\[ \\]\\s*)*/, '\\1'))\n      end\n      line_number.push(line_number_id)\n    elsif divide_with_header \u0026\u0026 line =~ /^#+\\s+/ # i.e. this is a header line\n      lines.push(line)\n      line_number.push(line_number_id)\n    end\n    line_number_id += 1\n  end\n\n  # Give the header. It's the NotePlan icon or an emoji briefcase with the number of items todo\n  icon_base64 = 'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAQAAAACj/OVAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAJcEhZcwAAFiUAABYlAUlSJPAAAAAHdElNRQfkChwAHRNqrC5wAAABSElEQVRYw2NgGAWjYBRQCXAy8AIxnYAxw384NKKHhf9R4KiFoxYOpIXGDPxkWsjFYEKqZQ5Q476QYSFMRpfcYJtDgoU3yQvuZ2iG/mfwIsLCBgxdl8hLFhD4h0EMj4VKWPX8p8RCEHzPwILVwv84IZGgHY8RG9H4t/GodSU+FmPwGEMsVCI1axygwLIF5Gb+V2RY9oGy8oaV4R9J1rFQo5BLIdIyR2qWrBcJWLaL2nXELwIWnqCmZROJDNIsalgmT1KS+cMgTIllzCSmUAh8A0zZZIEXFGT8Y6Ra1kCFoq2IeOt24DEG3Skb8Khtprx6wlYfMjJ8pbR6wq8Zm6gwZRZextCoRUQTwx1D113yGlGrSWhEbSG3zapOQTPxO1RGhdSsIUd2y5uNQWa0bzFq4ciyMAjJOnF6jdXYMrgwmI6Oj42CUUAVAABntNYrW391eQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMC0xMC0yOFQwMDoyOToxOSswMDowMDOfhXoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjAtMTAtMjhUMDA6Mjg6MjMrMDA6MDCH/w5VAAAAAElFTkSuQmCC'\n\n  line_count = 0\n  lines.each { |line|  line_count += 1 unless line.start_with?('#') }\n  if use_emoji_as_icon\n    puts \"💼#{line_count}\"\n  else\n    puts \"#{line_count} |templateImage=#{icon_base64}\"\n  end\n\n  puts '---'\n\n  cfn = File.expand_path(__FILE__)\n\n  # Create the list of items to do in the menu.\n  item_number = 0\n  lines.each do |item|\n    line_color = ''\n    line = item.chomp\n    if priority_labels.any? { |s| line.include? s }\n      # If line contains priority label, display in priority color\n      # line_color = priority_color\n      # If line contains priority label, prefix item with priority_marker\n      line = priority_marker + ' ' + line\n    else\n      # If line contains no priority label, cycle through labels hash,\n      # and if line contains a label display in corresponding color\n      labels.each { |label, label_color| line_color = label_color if line.include?(label) }\n    end\n    # If the line contains no label, display in default color. Otherwise, in\n    # chosen color. Clicking line launches this script with line number as\n    # the parameter.\n    line_font = standard_font\n    if line.start_with?('#')\n      puts('---') unless line.start_with?('##')\n      line_font = header_font\n    end\n    line_params = \"#{line_color.empty? ? '' : 'color=' + line_color} #{line_font.empty? ? '' : 'font=' + line_font} bash='#{cfn}' param1=#{line_number[item_number]}\"\n    puts(\"#{line} | \" + line_params + \" param2=x terminal=false trim=false refresh=\\n\")\n    puts(\"#{line} | alternate=true \" + line_params + \" param2=- terminal=false trim=false refresh=\\n\")\n    item_number += 1\n  end\n  puts '---'\n  puts \"Click an item to mark as 'done'\"\n  puts \"Click an item to mark as 'cancelled' | alternate=true\"\n  puts 'Refresh now (normally every 15m) | refresh='\nelse\n  # This is what to do when clicking on an item. We want to move\n  # the item to the Archive section and set it as done. If there\n  # isn't an Archive area, create it and add the task to it.\n\n  # Get the task number to archive.\n  do_num = ARGV[0].to_i\n  mark = ARGV[1]\n\n  # Get the list of todos and setup variables\n  todo_file = File.open(todo_file_loc.to_s)\n  lines_in_file = IO.readlines(todo_file)\n\n  unless lines_in_file[do_num].start_with?('#') # Do nothing if the item is a header\n    task = ''\n    lines = []\n    line_number = 0\n\n    lines_in_file[-1] = lines_in_file[-1] + \"\\n\" unless lines_in_file[-1].include? \"\\n\"\n\n    # Process the todo list lines\n    lines_in_file.each do |line|\n      if line_number != do_num\n        # It is one of the other lines. Just push it into the stack\n        lines.push(line)\n      else\n        # Get the line to be moved to the archive area\n        task = if insert_date_on_done_task\n                 line.chomp + (mark == 'x' ? \" @done(#{Time.new.strftime('%Y-%m-%d %H:%M')})\\n\" : \"\\n\")\n               else\n                 task = line.chomp + \"\\n\"\n               end\n        task = task.gsub(/^(\\s*)([\\-\\*]+)\\s*(\\[ \\]\\s*)*/, '\\1\\2 [' + mark + '] ') # Works with both task style, useful if mix with 'show_alt_task', also it keeps the indentation at beginning of the line\n        lines.push(task) if archive_task_at_end\n      end\n      line_number += 1\n    end\n\n    # Add the task to the bottom\n    lines.push(task) if archive_task_at_end\n\n    # Save the file\n    IO.write(todo_file, lines.join)\n  end\nend\n"
				}
			],
			"path": "Lifestyle/ToDo/NotePlan3.15m.rb",
			"filename": "NotePlan3.15m.rb",
			"dir": "Lifestyle/ToDo",
			"docsPlugin": "Lifestyle/ToDo/NotePlan3.15m.rb.html",
			"docsCategory": "Lifestyle/ToDo.html",
			"pathSegments": [
				"Lifestyle",
				"ToDo"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/ToDo",
					"text": "ToDo",
					"isLast": true
				}
			],
			"title": "Todo Today for NotePlan v3",
			"version": "v2.2",
			"author": "Jonathan Clark",
			"authors": [
				{
					"name": "Jonathan Clark",
					"githubUsername": "jgclark",
					"imageURL": "https://avatars.githubusercontent.com/u/1671754?v=4",
					"bio": "Christian, husband, geek, church leader, coffee lover and ex-systems engineer.",
					"primary": true
				}
			],
			"desc": "A todo list taken from NotePlan v3 and displayed with customizable color-code. Mark tasks \"done\" simply by clicking on them in the menubar drop-down list. This was based on \"Todo.NotePlan\" by Richard Guay which in turn was based on \"Todo Colour\" plugin by Srdgh.",
			"imageURL": "https://noteplan.co/static/icon-aef6fdb335c829b1363315ef21c3146d.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://noteplan.co/",
			"lastUpdated": "2021-03-08T15:21:54.639873Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/todoist.1m.py",
					"filename": "todoist.1m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eTodoist Today\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eK.Kobayashi, et al\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekobayashi,gingerbeardman\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eToday's task in your menu bar!\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/f37VtAg.png\u003c/bitbar.image\u003e\n\nimport sys\nif sys.version_info[0] \u003c 3:\n    from urllib2 import urlopen, Request\n    from urllib import urlencode\nelse:\n    from urllib.request import urlopen, Request\n    from urllib.parse import urlencode\nimport json\nimport datetime\n\napi_key = ''\nurl = 'https://api.todoist.com/sync/v8/sync'\nvalue = { 'token': api_key, 'sync_token': '*', 'resource_types': '[\"all\"]' }\ndata = urlencode(value).encode('utf-8')\n\nd = datetime.datetime.today()\ntoday = d.strftime(\"%Y-%m-%d\")\ncomment = \"Today's task: \"\n\nif len(api_key) == 0:\n    print(\"set api first\")\nelse:\n    try:\n        request = Request(url, data)\n        r = urlopen(request)\n        j = json.loads(r.read())\n        items = j['items']\n        for item in items:\n            if (item['due']): \n                due = item['due']['date'] # due date of a task\n                if (due.startswith(today)):\n                    if (\"T\" in due): \n                        time = \"@%s \" % due[-8:-3]\n                    else:\n                        time = \"\"\n                    print((comment + time + item['content']).encode('utf-8'))\n    finally:\n        r.close()\n\n"
				}
			],
			"path": "Lifestyle/todoist.1m.py",
			"filename": "todoist.1m.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/todoist.1m.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Todoist Today",
			"version": "v2.1.0",
			"author": "K.Kobayashi,  et al",
			"authors": [
				{
					"name": "K.Kobayashi",
					"githubUsername": "kobayashi",
					"imageURL": "https://avatars.githubusercontent.com/u/8712070?v=4",
					"bio": "",
					"primary": true
				},
				{
					"name": "Matt Sephton",
					"githubUsername": "gingerbeardman",
					"imageURL": "https://avatars.githubusercontent.com/u/49612?v=4",
					"bio": "Former Apple Technology Evangelist. \r\n\r\nI type stuff into computers to make them do cool things. ✌️",
					"primary": false
				}
			],
			"desc": "Today's task in your menu bar!",
			"imageURL": "http://i.imgur.com/f37VtAg.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.350489Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/track-correios-packages.1h.js",
					"filename": "track-correios-packages.1h.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n/* jshint esversion: 6 */\n\n/*\n * \u003cbitbar.title\u003eTrack Brazilian Post Office (Correios) packages\u003c/bitbar.title\u003e\n * \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n * \u003cbitbar.author\u003eCarlos E. Torres\u003c/bitbar.author\u003e\n * \u003cbitbar.author.github\u003ecetorres\u003c/bitbar.author.github\u003e\n * \u003cbitbar.desc\u003eEN: Track Brazilian Post Office (Correios) packages. PT: Rastreie encomendas dos Correios.\u003c/bitbar.desc\u003e\n * \u003cbitbar.abouturl\u003ehttps://github.com/cetorres/bitbar-track-correios-packages\u003c/bitbar.abouturl\u003e\n * \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/cetorres/bitbar-track-correios-packages/master/screenshot.png\u003c/bitbar.image\u003e\n * \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n */\n\n// Enter the track code here.\n// Informe o código de rastreio aqui.\nvar code = \"\"; // Ex.: AA123456789BR\n\n// Don't change anything else below this line.\n// Não altere mais nada a partir desta linha.\nconst fs = require('fs');\nconst https = require('https');\nvar url = \"https://wsmobile.correios.com.br/service/rest/rastro/rastroMobile/FALECONOSC/7KMJ6FISA4/L/T/\" + code + \"/101\";\nvar logFile = \".track-correios-package.log\";\n\nvar getLogData = function(callback) {\n    fs.readFile(__dirname + '/' + logFile, (e, data) =\u003e {\n        if (e) {\n            callback(null);\n        }\n        callback(data);\n    });\n};\n\nvar saveLogData = function(data) {\n    fs.writeFile(__dirname + '/' + logFile, data, function(err) {\n        if (err) {\n            console.log(err);\n        }\n    });\n};\n\nvar refreshMenu = function() {\n    console.log(\"---\");\n    console.log(\"Atualizar | refresh=true\");\n};\n\nvar aboutMenu = function() {\n    console.log('---');\n    console.log('by Carlos E. Torres | href=http://cetorres.com');\n};\n\nconst toTitleCase = (phrase) =\u003e {    \n    return phrase ? phrase\n        .toLowerCase()\n        .split(' ')\n        .map(word =\u003e word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ') : \"\";\n};\n\nif (!fs.existsSync(__dirname + '/' + logFile)) {\n    saveLogData(0);\n}\n\nhttps.get(url, (res) =\u003e {\n\n    res.setEncoding('utf-8');\n    var responseString = '';\n\n    res.on('data', function(data) {\n        responseString += data;\n    });\n\n    res.on('end', function() {       \n        var responseObject = JSON.parse(responseString);\n        var nomeObjeto = responseObject.objeto[0].nome != undefined ? responseObject.objeto[0].nome : \"OBJETO\";\n        var eventos = responseObject.objeto[0].evento;\n        var eventosTotal = eventos != undefined ? eventos.length : 0;\n\n        if (nomeObjeto != \"OBJETO\" \u0026\u0026 eventosTotal == 0) {\n            console.log(\"📦 0 | color=yellow\");\n            console.log(\"---\");\n            console.log(nomeObjeto + \"\\n\");\n            console.log(\"Código: \" + code);\n            console.log(\"---\");\n            console.log(\"Sem eventos no momento.\");      \n            \n            refreshMenu();\n            aboutMenu(); \n        }\n        else if (nomeObjeto == \"OBJETO\" \u0026\u0026 eventosTotal == 0) {\n            console.log(\"📦 0 | color=yellow\");\n            console.log(\"---\");\n            console.log(nomeObjeto + \"\\n\");\n            console.log(\"Código: \" + code);\n            console.log(\"---\");\n            console.log(\"Objeto não encontrado.\"); \n\n            refreshMenu();\n            aboutMenu(); \n        }\n        else if (nomeObjeto != \"\" \u0026\u0026 eventosTotal \u003e 0) {\n            var header = eventos.filter(evento =\u003e evento.tipo == \"PO\")[0];            \n            \n            getLogData((data) =\u003e {\n                var newEvents = false;\n                var eventosLog = data;\n            \n                if (eventosLog != undefined) {\n                    if (eventosLog != eventosTotal) {\n                        newEvents = true;\n                    }\n                }            \n                \n                saveLogData(eventosTotal);\n\n                var objetoEntregue = eventos.find(e =\u003e e.tipo == \"BDE\") != undefined ? true : false;\n\n                if (objetoEntregue) {\n                    console.log(\"📦 ✓ | color=green\");    \n                }\n                else {\n                    console.log(\"📦 \" + eventosTotal + (newEvents ? ' | color=green' : ''));\n                }\n                console.log(\"---\");            \n                console.log(nomeObjeto + \"\\n\");\n                console.log(\"Código: \" + code);\n                console.log('Postado em: ' + (header == undefined ? eventos[0].dataPostagem : header.postagem.datapostagem));\n\n                eventos.forEach(evento =\u003e {                \n                    console.log(\"---\");\n                    console.log(evento.data + \" - \" + evento.hora + \"\\n\");                 \n                    if (evento.tipo == \"RO\") {            \n                        console.log(evento.descricao.trim() + \"\\n\");                                                        \n                        console.log(\"Para: \" + toTitleCase(evento.destino[0].local) + (evento.destino[0].cidade != undefined ? (\" em \" + toTitleCase(evento.destino[0].cidade)) : \"\"));\n                        console.log(\"De: \" + toTitleCase(evento.unidade.local) + (evento.unidade.cidade != undefined ? (\" em \" + toTitleCase(evento.unidade.cidade) + \"\\n\") : \"\"));   \n                    } \n                    else if (evento.tipo == \"PAR\") {\n                        console.log(evento.descricao.trim() + \"\\n\");                                                        \n                        console.log(toTitleCase(evento.unidade.local));\n                    }\n                    else {\n                        console.log(evento.descricao.trim() + \"\\n\");\n                        if (evento.detalhe != undefined) {\n                            console.log(evento.detalhe.trim() + \"\\n\");                                \n                        }                        \n                        if (evento.postagem != undefined) {\n                            console.log(\"Para: \" + toTitleCase(evento.postagem.destinatario));\n                        }\n                        console.log(\"De: \" + toTitleCase(evento.unidade.local) + (evento.unidade.cidade != undefined ? (\" em \" + toTitleCase(evento.unidade.cidade) + \"\\n\") : \"\")); \n                    }               \n                });\n\n                console.log(\"---\");\n                console.log(\"Ver online | href=\" + url); \n                \n                refreshMenu();\n                aboutMenu(); \n            });                 \n            \n        }\n        \n    });\n\n})\n.on('error', (e) =\u003e {\n    console.log('✖︎ | color=red');\n    console.log('---');\n    console.log('Erro ao ler dados do serviço dos Correios.\\n' + e);\n    refreshMenu();\n    aboutMenu();\n});\n"
				}
			],
			"path": "Lifestyle/track-correios-packages.1h.js",
			"filename": "track-correios-packages.1h.js",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/track-correios-packages.1h.js.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Track Brazilian Post Office (Correios) packages",
			"version": "v1.0",
			"author": "Carlos E. Torres",
			"authors": [
				{
					"name": "Carlos Eugenio Torres",
					"githubUsername": "cetorres",
					"imageURL": "https://avatars.githubusercontent.com/u/533661?v=4",
					"bio": "A software engineer..",
					"primary": true
				}
			],
			"desc": "EN: Track Brazilian Post Office (Correios) packages. PT: Rastreie encomendas dos Correios.",
			"imageURL": "https://raw.githubusercontent.com/cetorres/bitbar-track-correios-packages/master/screenshot.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "https://github.com/cetorres/bitbar-track-correios-packages",
			"lastUpdated": "2021-03-08T15:21:56.451879Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/transmission.4m.py",
					"filename": "transmission.4m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Transmission Remote\n#\n# \u003cbitbar.title\u003eTransmission Remote\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eChristoph Russ\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003echristophruss\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003e\n# Checking transmission status, info and allowing adjustment to alternative speed.\n# Requires a single initial setup: `python transmission.4m.py init`\n# This plugin displays all not yet completed torrents using \"transmission-remote\" cli.\n# You can pause any torrent in the list by selecting them.\n# If all active downloads have completed, but some torrents had been paused, the oldest one will be unpaused automatically.\n# \u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003etransmission-remote,python,keyring\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/hUWGq3u.jpg\u003c/bitbar.image\u003e\n#\n# Dependencies:\n#   transmission-remote (https://trac.transmissionbt.com/wiki/Building)\n#      available via homebrew `brew install transmission`\n#   keyring (https://github.com/jaraco/keyring)\n\nimport sys\nimport subprocess\nimport keyring\n\ndef init():\n    import getpass\n    print \"Enter your Transmission Server IP (e.g. 192.168.1.10 or 10.0.1.10): \"\n    host_ip = raw_input()\n    keyring.set_password(\"transmission-bitbar\", \"ip\", host_ip)\n    print \"Enter your Transmission port (default: 9091): \"\n    host_port = raw_input()\n    keyring.set_password(\"transmission-bitbar\", \"port\", host_port)\n    print \"Enter your Transmission user name: \"\n    usr = raw_input()\n    keyring.set_password(\"transmission-bitbar\", \"username\", usr)\n    print \"Enter your Transmission password: \"\n    pswd = getpass.getpass()\n    keyring.set_password(\"transmission-bitbar\", usr, pswd)\n    pswd = ''\n\ndef check_transmission(argv):\n    remote_bin = '/usr/local/bin/transmission-remote' # also make this configurable ?\n    host_ip = keyring.get_password(\"transmission-bitbar\", \"ip\")\n    host_port = keyring.get_password(\"transmission-bitbar\", \"port\")\n    host_user = keyring.get_password(\"transmission-bitbar\", \"username\")\n    host_pswd = keyring.get_password(\"transmission-bitbar\", host_user)\n\n    if 'slowdown' in argv:\n        subprocess.check_output(remote_bin+' '+host_ip+':'+host_port+' --auth '+host_user+':'+host_pswd+' -as', shell=True)\n        exit()\n    elif 'speedup' in argv:\n        subprocess.check_output(remote_bin+' '+host_ip+':'+host_port+' --auth '+host_user+':'+host_pswd+' -AS', shell=True)\n        exit()\n    elif 'pause' in argv:\n        subprocess.check_output(remote_bin+' '+host_ip+':'+host_port+' --auth '+host_user+':'+host_pswd+' -t ' + argv[-1] + ' -S', shell=True)\n    elif 'resume' in argv:\n        subprocess.check_output(remote_bin+' '+host_ip+':'+host_port+' --auth '+host_user+':'+host_pswd+' -t ' + argv[-1] + ' -s', shell=True)\n\n    session_info = subprocess.check_output(remote_bin+' '+host_ip+':'+host_port+' --auth '+host_user+':'+host_pswd+' -si -st', shell=True)\n    session_info_lines = session_info.split('\\n')\n\n    slow_speed = False\n\n    for session_info_line in session_info_lines:\n        if 'speed limit' in session_info_line:\n            if not 'Unlimited' in session_info_line:\n                slow_speed = True\n\n    info = subprocess.check_output(remote_bin+' '+host_ip+':'+host_port+' --auth '+host_user+':'+host_pswd+' -l', shell=True)\n    info_lines = info.split('\\n')\n\n    host_pswd = ''\n\n    return slow_speed,info_lines\n\ndef info_output(slow_speed, info_lines, auto_resume=True):\n    unfinished_lines = []\n    paused_lines = []\n\n    for info_line in info_lines:\n        if not '100%' in info_line and len(info_line)\u003e0:\n            if 'Stopped' in info_line:\n                paused_lines.append(info_line)\n            else:\n                unfinished_lines.append(info_line)\n\n    formatting = ''\n\n    if len(unfinished_lines) \u003c 3:\n        if len(paused_lines) \u003e 0:\n            if not auto_resume:\n                # nothing is actively downloading, but there are paused items in your queue\n                # red means - warning - you need to check this ...\n                formatting = formatting + ' | color=red'\n            else:\n                # with auto_resume we will automatically resume ONE of the items in the queue\n                # it could make sense to resume the smallest download with the simple assumtion that it will download the fastest\n                # of course this can and will lead to larger items being stuck in the queue forever\n                # it's also more work to actually query all info and parse it to find the smallest item in the paused queue\n                # it is a lot easier to just unpause the first (or last) item added to the queue (smallest ID)\n                # the items should already be in order, so we just pick the first one !\n                t_id = paused_lines[0].strip().split(' ')[0]\n                check_transmission([__file__, 'resume', t_id]) # file arg isn't really needed, but it's more consistent this way\n                unfinished_lines.insert(1, paused_lines[0]) #this may not be ordered by ID anymore after this step\n                paused_lines.pop(0) # or del(0) or [1:]\n\n        else:\n            # nothing is actually happening ... all downloads finished\n            formatting = formatting + ' | color=green'\n\n    # PRINTING \u003e.\u003c\n    if slow_speed:\n        print \"¶\" + formatting # | color=#808080 #grey: 999999 #lighter grey: b3b3b3\n    else:\n        print \"∞\" + formatting # | color=white\n\n    print \"---\"\n\n    if slow_speed:\n        print '∞ Unlimited Speed | refresh=true bash=/usr/bin/python param1='+__file__+' param2=speedup terminal=false'\n    else:\n        print '¶ Limit Speed | refresh=true bash=/usr/bin/python param1='+__file__+' param2=slowdown terminal=false'\n\n    print '---'\n\n    content_formatting = ' | size=12 font=Arial'\n    print unfinished_lines[0] + content_formatting\n\n    click_command = ' refresh=true bash=/usr/bin/python param1='+__file__+' param2=pause param3='\n\n    content_formatting = content_formatting + ' color=yellow'\n    for info_line in unfinished_lines[1:-1]:\n        t_id = info_line.strip().split(' ')[0]\n        print info_line + content_formatting + click_command + t_id + ' terminal=false'\n    content_formatting = content_formatting[:-13]\n\n    click_command = ' refresh=true bash=/usr/bin/python param1='+__file__+' param2=resume param3='\n\n    if len(paused_lines) \u003e 0:\n        content_formatting = content_formatting + ' color=red'\n        print '---'\n        for paused_line in paused_lines:\n            t_id = paused_line.strip().split(' ')[0]\n            print paused_line + content_formatting + click_command + t_id + ' terminal=false'\n    content_formatting = content_formatting[:-10]\n\n    print '---'\n    print unfinished_lines[-1] + content_formatting\n\ndef main(argv):\n    if 'init' in argv:\n        # this is an init call to setup account details, which should only have to be done once\n        # simply call:\n        # python ../transmission.4m.py init\n        # then enter your account details, which will be stored in your keychain !\n        # please note for this to work system level access to the created keychain items is REQUIRED\n        # technically any other app can thus read out this information from your keychain\n        # there is no easy way around this if you do not want to enter your password every time\n        init()\n\n    try:\n        slow_speed,info_lines = check_transmission(argv)\n        info_output(slow_speed,info_lines)\n    except Exception as e:\n        print \"¶ | color=yellow\" #error occured\n        print \"---\"\n        print \"Exception caught. Have you initialized this script?\"\n        print \"python \" + __file__ + \" init | refresh=true bash=/usr/bin/python param1=\" + __file__ + \" param2=init terminal=true\"\n        print \"---\"\n        print e\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n"
				}
			],
			"path": "Lifestyle/transmission.4m.py",
			"filename": "transmission.4m.py",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/transmission.4m.py.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Transmission Remote",
			"version": "v1.0",
			"author": "Christoph Russ",
			"authors": [
				{
					"name": "Christoph Russ",
					"githubUsername": "christophruss",
					"imageURL": "https://avatars.githubusercontent.com/u/12080753?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "http://i.imgur.com/hUWGq3u.jpg",
			"dependencies": [
				"transmission-remote",
				"python",
				"keyring"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.436343Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/Trello/trello_notifications.15m.sh",
					"filename": "trello_notifications.15m.sh",
					"content": "#!/bin/bash\n# shellcheck disable=SC2034\n# shellcheck disable=SC2154\n# shellcheck source=/dev/null\n\n# \u003cbitbar.title\u003eTrello\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0.3\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKodie Grantham\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekodie\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows unread Trello notification count with a drop-down list of clickable recent notifications\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/kodie/bitbar-trello/master/screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ejq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/kodie/bitbar-trello\u003c/bitbar.abouturl\u003e\n\nver=\"1.0.3\"\n\n### Note: The below variables can be overwritten by setting them in the ~/.bitbar_trello file\n\napiKey=\"\"   # Your Trello API Key\napiToken=\"\" # Your Trello API Token\n# ^ To get these, go to https://trello.com/app-key\n\nlimit=\"20\"  # Number of notifications to fetch (Can be any number from 1 to 1000)\n\n# Fonts, sizes, and colors (Setting to blank will use system default)\nreadColor=\"\"        # Read notification color (Color names or HEX values can be used)\nreadFont=\"\"         # Read notification font\nreadSize=\"15\"       # Read notification font size\nunreadColor=\"blue\"  # Unread notification color (Color names or HEX values can be used)\nunreadFont=\"\"       # Unread notification font\nunreadSize=\"15\"     # Unread notification font size\n\ntruncLength=\"70\"    # Number of characters before the notification text is truncated (Set to blank to disable truncating)\ntruncSuffix=\"...\"   # Text to use after truncating\n\nuseIcons=\"1\"  # Whether emoji icons should be displayed next to notifications or not (0=no, 1=yes)\n\nunreadDisplay=\"1\"       # Unread display mode (0=none, 1=beside icon/title, 2=rotated with icon/title, 3=in dropdown)\nunreadEcho=\"%unread%\"   # Unread count text (%unread% will be replaced with unread count number)\n\ntitle=\"\"  # Text to be displayed on system bar (Can be set to blank to display icon only)\n\n# Base64 icon to use in system bar (Can be set to blank to disable icon)\nicon=\"\"\n\n### Notification settings\n# nIcon_[$notificationType] - Emoji Icon (See list of possibilities here: http://www.webpagefx.com/tools/emoji-cheat-sheet/)\n# nText_[$notificationType] - Text to be displayed for notification. (Useable vars: %name%, %card%, %board%, %organization%)\n# nType_[$notificationType] - Notification type. Probably shouldn't ever be changed. (c=card, b=board, o=organization)\n\n# An attachment was added to a card\nnIcon_addAttachmentToCard=\"📎\"\nnText_addAttachmentToCard=\"%name% added an attachment to card %card%\"\nnType_addAttachmentToCard=\"c\"\n\n# The current member was added to a board\nnIcon_addedToBoard=\"📋\"\nnText_addedToBoard=\"%name% added you to the board %board%\"\nnType_addedToBoard=\"b\"\n\n# The current member was added to a card\nnIcon_addedToCard=\"📗\"\nnText_addedToCard=\"%name% added you to the card %card%\"\nnType_addedToCard=\"c\"\n\n# The current member was added to an organization\nnIcon_addedToOrganization=\"🏠\"\nnText_addedToOrganization=\"%name% added you to the organization %organization%\"\nnType_addedToOrganization=\"o\"\n\n# Another member was added to a card\nnIcon_addedMemberToCard=\"📗\"\nnText_addedMemberToCard=\"%name% was added to the card %card%\"\nnType_addedMemberToCard=\"c\"\n\n# The current member was added to a board as an admin\nnIcon_addAdminToBoard=\"📋\"\nnText_addAdminToBoard=\"%name% added you as an admin on the board %board%\"\nnType_addAdminToBoard=\"b\"\n\n# The current member was added to an organization as an admin\nnIcon_addAdminToOrganization=\"🏠\"\nnText_addAdminToOrganization=\"%name% added you as an admin of the organization %organization%\"\nnType_addAdminToOrganization=\"o\"\n\n# A card was changed\nnIcon_changeCard=\"📝\"\nnText_changeCard=\"%name% updated the card %card%\"\nnType_changeCard=\"c\"\n\n# A board was closed\nnIcon_closeBoard=\"📋\"\nnText_closeBoard=\"%name% closed the board %board%\"\nnType_closeBoard=\"b\"\n\n# Another member commented on a card\nnIcon_commentCard=\"💬\"\nnText_commentCard=\"%name% commented on the card %card%\"\nnType_commentCard=\"c\"\n\n# Another member created a card\nnIcon_createdCard=\"📙\"\nnText_createdCard=\"%name% created the card %card%\"\nnType_createdCard=\"c\"\n\n# The current member was invited to a board\nnIcon_invitedToBoard=\"📋\"\nnText_invitedToBoard=\"%name% invited you to the board %board%\"\nnType_invitedToBoard=\"b\"\n\n# The current member was invited to an organization\nnIcon_invitedToOrganization=\"🏠\"\nnText_invitedToOrganization=\"%name% invited you to the organization %organization%\"\nnType_invitedToOrganization=\"o\"\n\n# The current member was removed from a board\nnIcon_removedFromBoard=\"📋\"\nnText_removedFromBoard=\"%name% removed you from the board %board%\"\nnType_removedFromBoard=\"b\"\n\n# The current member was removed from a card\nnIcon_removedFromCard=\"📕\"\nnText_removedFromCard=\"%name% removed you from the card %card%\"\nnType_removedFromCard=\"c\"\n\n# Another member was removed from a card\nnIcon_removedMemberFromCard=\"📕\"\nnText_removedMemberFromCard=\"%name% was removed from the card %card%\"\nnType_removedMemberFromCard=\"c\"\n\n# The current member was removed from an organization\nnIcon_removedFromOrganization=\"🏠\"\nnText_removedFromOrganization=\"%name% removed you from the organization %organization%\"\nnType_removedFromOrganization=\"o\"\n\n# The current member was mentioned on a card\nnIcon_mentionedOnCard=\"🔔\"\nnText_mentionedOnCard=\"%name% mentioned you on the card %card%\"\nnType_mentionedOnCard=\"c\"\n\n# ???\nnIcon_unconfirmedInvitedToBoard=\"❔\"\nnText_unconfirmedInvitedToBoard=\"%name% unconfirmedInvitedToBoard %board%\"\nnType_unconfirmedInvitedToBoard=\"b\"\n\n# ???\nnIcon_unconfirmedInvitedToOrganization=\"❔\"\nnText_unconfirmedInvitedToOrganization=\"%name% unconfirmedInvitedToOrganization %organization%\"\nnType_unconfirmedInvitedToOrganization=\"o\"\n\n# A checklist item on a card was updated\nnIcon_updateCheckItemStateOnCard=\"✅\"\nnText_updateCheckItemStateOnCard=\"%name% updated a checklist on the card %card%\"\nnType_updateCheckItemStateOnCard=\"c\"\n\n# The current member was made an admin of a board\nnIcon_makeAdminOfBoard=\"📋\"\nnText_makeAdminOfBoard=\"%name% made you an admin on the board %board%\"\nnType_makeAdminOfBoard=\"b\"\n\n# The current member was made an admin of an organization\nnIcon_makeAdminOfOrganization=\"🏠\"\nnText_makeAdminOfOrganization=\"%name% made you an admin of the organization %organization%\"\nnType_makeAdminOfOrganization=\"o\"\n\n# A card's due date is approaching\nnIcon_cardDueSoon=\"🕓\"\nnText_cardDueSoon=\"The card %card% is due soon\"\nnType_cardDueSoon=\"c\"\n\n# Another member declined the current member's invitation to a board\nnIcon_declinedInvitationToBoard=\"📋\"\nnText_declinedInvitationToBoard=\"%name% declined your invite to the board %board%\"\nnType_declinedInvitationToBoard=\"b\"\n\n# Another member declined the current member's invitation to an organization\nnIcon_declinedInvitationToOrganization=\"🏠\"\nnText_declinedInvitationToOrganization=\"%name% declined your invite to the organization %organization%\"\nnType_declinedInvitationToOrganization=\"o\"\n\n# Another member joined Trello because of the current member's recommendation\nnIcon_memberJoinedTrello=\"👋\"\nnText_memberJoinedTrello=\"%name% joined Trello on your recommendation\"\nnType_memberJoinedTrello=\"o\"\n\n### End of notification settings\n\napiLink=\"https://api.trello.com/1\" # API Link. Probably shouldn't ever be changed.\nnLink=\"https://trello.com\"                                  # Base for notification links. Probably shouldn't ever be changed.\n\nconfigFile=\"$HOME/.bitbar_trello\" # Config file path\ncreateConfigFile=\"1\"              # Create the config file if one is not found (0=no, 1=yes)\n\n###\n### No editing below this line unless you know what you are doing.\n###\n\n# Check if there's a config file\nif [ -e \"$configFile\" ]; then\n  . \"$configFile\"\nelif [ \"$createConfigFile\" == \"1\" ]; then\n  printf \"# To get your Trello API Key and Token, go to https://trello.com/app-key\\napiKey=\\\"%s\\\"\\napiToken=\\\"%s\\\"\" \"$apiKey\" \"$apiToken\" \u003e \"$configFile\"\nfi\n\n# Export PATH\nexport PATH=\"/usr/local/bin:/usr/bin:$PATH\"\n\n# \"Mark All Notifications As Read\" function\nif [ \"$1\" == \"markRead\" ]; then\n  curl -s -X POST \"$apiLink/notifications/all/read?key=$apiKey\u0026token=$apiToken\"\nfi\n\n# Get response from API\nresponse=$(curl -s -X GET \"$apiLink/members/me/notifications?key=$apiKey\u0026token=$apiToken\u0026limit=$limit\")\n\n# Check for errors\nif [ \"${response:0:1}\" == \"[\" ]; then\n  error=false\n  ids=($(echo \"$response\" | jq -r -c '.[].id'))\nelse\n  error=true\n  if [[ ! \"$response\" || \"${response:0:1}\" == \"\u003c\" ]]; then response=\"no response\"; fi\nfi\n\n# Set the title to \"Trello\" if we're running it BitBar and both the title and icon have been set to blank\nif [[ \"${BitBar}\" \u0026\u0026 ! \"$title\" \u0026\u0026 ! \"$icon\" ]]; then title=\"Trello\"; fi\n\n# If there's no errors, get the unread notification count\nif [[ ! \"$unreadDisplay\" == \"0\" \u0026\u0026 \"$error\" == false ]]; then\n  unread=($(echo \"$response\" | jq -c '.[].unread | select(.==true)'))\n  unreadCount=${#unread[@]}\n\n  if [[ \"$unreadCount\" -gt 0 ]]; then\n    unreadEcho=${unreadEcho//%unread%/$unreadCount}\n    if [ \"$unreadDisplay\" == \"1\" ]; then title=\"$title$unreadEcho\"; fi\n  fi\nfi\n\n# BitBar title formatting\nif [ \"${BitBar}\" ]; then\n  # Set title properties\n  titleProperties=\" | dropdown=false\"\n\n  # Set the icon if there is one\n  if [ \"$icon\" ]; then titleProperties=\"$titleProperties templateImage=\"$icon; fi\nfi\n\n# Our first echo\ntitleEcho=\"$title$titleProperties\"\nif [ \"$titleEcho\" ]; then echo \"$titleEcho\"; fi\n\n# Display unread count if there are no errors and unreadDisplay is set to 2 or 3\nif [[ \"$error\" == false \u0026\u0026 \"$unreadCount\" -gt 0 ]]; then\n  if [ \"$unreadDisplay\" == \"2\" ]; then\n    echo \"$unreadEcho\"\n  elif [ \"$unreadDisplay\" == \"3\" ]; then\n    echo \"---\";\n    echo \"$unreadEcho\";\n  fi\nfi\n\nif [ \"$titleEcho\" ]; then echo \"---\"; fi\n\n# Echo the error in the drop-down\nif [ \"$error\" == true ]; then echo \"⁉️ $response\"; fi\n\n# If there's no errors, let's loop through the notifications\nif [ \"$error\" == false ]; then\n  x=0\n\n  # Notifications were found\n  if [[ \"${#ids[@]}\" -gt 0 ]]; then\n    for i in \"${ids[@]}\"; do\n      # Get the data for this notification\n      this=$(echo \"$response\" | jq -c '.['$x']')\n      notificationType=$(echo \"$this\" | jq -r '.type')\n\n      # Get notification type settings\n      if [ \"$useIcons\" == \"1\" ]; then itemIcon=\"nIcon_$notificationType\"; itemIcon=${!itemIcon}; fi\n      itemText=\"nText_$notificationType\"; itemText=${!itemText}\n      itemType=\"nType_$notificationType\"; itemType=${!itemType}\n\n      # Start the link\n      itemLink=\"$nLink\"\n\n      # Deal with different notification types\n      case $itemType in\n        # Cards\n        \"c\")\n          shortLink=$(echo \"$this\" | jq -r '.data.card.shortLink')\n          itemLink=\"$itemLink/c/$shortLink\"\n\n          cardName=$(echo \"$this\" | jq -r '.data.card.name')\n          itemText=\"${itemText//%card%/$cardName}\"\n        ;;\n\n        # Boards\n        \"b\")\n          shortLink=$(echo \"$this\" | jq -r '.data.board.shortLink')\n          itemLink=\"$itemLink/b/$shortLink\"\n\n          boardName=$(echo \"$this\" | jq -r '.data.board.name')\n          itemText=\"${itemText//%board%/$boardName}\"\n        ;;\n\n        # Organizations\n        \"o\")\n          orgId=$(echo \"$this\" | jq -r '.data.organization.id')\n          itemLink=\"$itemLink/$orgId\"\n\n          orgName=$(echo \"$this\" | jq -r '.data.organization.name')\n          itemText=\"${itemText//%organization%/$orgName}\"\n        ;;\n      esac\n\n      # Name replace\n      memberName=$(echo \"$this\" | jq -r -c \".memberCreator.fullName\")\n      if [ \"$memberName\" ]; then\n        itemText=\"${itemText//%name%/$memberName}\"\n      fi\n\n      # Only set item properties if we're in BitBar\n      if [ \"${BitBar}\" ]; then\n        # Item properties\n        itemProperties=\" | href=\"$itemLink\n\n        # Colors and fonts\n        itemUnreadStatus=$(echo \"$this\" | jq -r '.unread')\n        if [ \"$itemUnreadStatus\" == true ]; then\n          color=$unreadColor\n          font=$unreadFont\n          size=$unreadSize\n        else\n          color=$readColor\n          font=$readFont\n          size=$readSize\n        fi\n\n        if [ \"$color\" ]; then itemProperties=\"$itemProperties color=\"$color; fi\n        if [ \"$font\" ]; then itemProperties=\"$itemProperties font=\"$font; fi\n        if [ \"$size\" ]; then itemProperties=\"$itemProperties size=\"$size; fi\n      fi\n\n      # Add a space after icon if there is one\n      if [ \"$itemIcon\" ]; then itemIcon=\"$itemIcon \"; fi\n\n      # Truncate the item text\n      if [ \"$truncLength\" ]; then\n        if [ \"${#itemText}\" -gt \"$truncLength\" ]; then\n          itemText=\"${itemText:0:$truncLength-${#truncSuffix}}$truncSuffix\"\n        fi\n      fi\n\n      # Print it\n      echo \"$itemIcon$itemText$itemProperties\"\n\n      # Break out if we hit our limit\n      if [[ $x == $((limit-1)) ]]; then break; fi\n\n      # Increment x\n      ((x+=1))\n    done\n\n    # Display \"Mark All Notificatins As Read\" option if there are any unread notifications\n    if [[ \"${BitBar}\" \u0026\u0026 \"$unreadCount\" -gt 0 ]]; then\n      echo \"---\"\n      echo \"Mark All Notifications As Read | bash='$0' param1=markRead refresh=true terminal=false\"\n    fi\n  else\n    # No notifications were found\n    echo \"🙈 no notifications found\"\n  fi\nfi\n\n# Display about menu\nif [ \"${BitBar}\" ]; then\n  echo \"---\"\n  echo \"BitBar Trello Plugin v$ver\"\n  echo \"--by Kodie Grantham | href=http://kodieg.com\"\n  echo \"-----\"\n  echo \"--GitHub Page | href=https://github.com/kodie/bitbar-trello\"\n  echo \"--Changelog | href=https://github.com/kodie/bitbar-trello/blob/master/CHANGELOG.md\"\n  echo \"-----\"\n  echo \"--Refresh | refresh=true terminal=false\"\nfi\n"
				}
			],
			"path": "Lifestyle/Trello/trello_notifications.15m.sh",
			"filename": "trello_notifications.15m.sh",
			"dir": "Lifestyle/Trello",
			"docsPlugin": "Lifestyle/Trello/trello_notifications.15m.sh.html",
			"docsCategory": "Lifestyle/Trello.html",
			"pathSegments": [
				"Lifestyle",
				"Trello"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/Trello",
					"text": "Trello",
					"isLast": true
				}
			],
			"title": "Trello",
			"version": "1.0.3",
			"author": "Kodie Grantham",
			"authors": [
				{
					"name": "Kodie Grantham",
					"githubUsername": "kodie",
					"imageURL": "https://avatars.githubusercontent.com/u/603949?v=4",
					"bio": "Lead Engineer/Systems Administrator for @itsahappymedium",
					"primary": true
				}
			],
			"desc": "Shows unread Trello notification count with a drop-down list of clickable recent notifications",
			"imageURL": "https://raw.githubusercontent.com/kodie/bitbar-trello/master/screenshot.png",
			"dependencies": [
				"jq"
			],
			"aboutURL": "https://github.com/kodie/bitbar-trello",
			"lastUpdated": "2021-03-08T15:21:54.90632Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/votd.1d.rb",
					"filename": "votd.1d.rb",
					"content": "#!/usr/bin/env ruby\n\n# Simple Verse of the Day plugin.\n#\n# by Harry Löwen\n#\n# Shows current verse of the day + verse image\n# Thanks to YouVersion API Devs!\n#\n# Feel free to customize version, language, colors, etc.\n\n# metadata\n# \u003cbitbar.title\u003eVerse of the day\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eHarry Löwen\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eharryloewen\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay verse of the day and verse image.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://drive.google.com/uc?export=download\u0026id=1dpt4wWamYbk_l49u8IAOVf66wA27cAi0\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003cbitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/harryloewen/bitbar-votd/\u003c/bitbar.abouturl\u003e\n\nrequire 'net/http'\nrequire 'open-uri'\nrequire 'json'\nrequire 'openssl'\nrequire 'Date'\nrequire 'base64'\n\nBIBLE_LOGO = 'https://www.bible.com/favicon.ico'.freeze\nBASE_URL = 'https://developers.youversionapi.com/1.0/verse_of_the_day'.freeze\nTODAY = Date.today.yday.to_s\nTOKEN = '...'.freeze\nLANG = 'en'.freeze\nVERSION_ID = '1'.freeze # KJV: 1, ASV: 12, RVES: 147, WEB: 20, ...\nCOLOR = '#696969'.freeze\n\nurl = URI(\"#{BASE_URL}/#{TODAY}?version_id=#{VERSION_ID}\")\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest['content-type'] = 'application/json'\nrequest['accept'] = 'application/json'\nrequest['x-youversion-developer-token'] = TOKEN\nrequest['accept-language'] = LANG\n\nresponse = JSON.parse http.request(request).read_body\n\nputs \"\\n---\\nresponse: #{response['message']} | color=red\" if response['message']\n\nbible_logo = Base64.encode64(open(BIBLE_LOGO).read).delete(\"\\n\")\nreference = response['verse']['human_reference']\nverse = response['verse']['text'].split.each_slice(8).map{|a|a.join ' '}.join(\"| color=#{COLOR}\\n\")\nverse_url = response['verse']['url']\nimage_url = 'https:' + response['image']['url'].gsub('{width}', '300').gsub('{height}', '300')\nimage_base64 = Base64.encode64(open(image_url).read).delete(\"\\n\")\nimage_attribution = response['image']['attribution']\n\nputs \"\n#{reference} | image=#{bible_logo}\n---\n#{verse} | color=#{COLOR}\n#{reference} | color=#{COLOR}\n---\n| image=#{image_base64}\n#{image_attribution}\n---\n🔗  open in bible.com | href=#{verse_url}\n---\nRefresh ⟳| refresh=true\n\"\n"
				}
			],
			"path": "Lifestyle/votd.1d.rb",
			"filename": "votd.1d.rb",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/votd.1d.rb.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Verse of the day",
			"version": "v1.0",
			"author": "Harry Löwen",
			"authors": [
				{
					"name": "Harry Löwen",
					"githubUsername": "harryloewen",
					"imageURL": "https://avatars.githubusercontent.com/u/33319470?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display verse of the day and verse image.",
			"imageURL": "https://drive.google.com/uc?export=download\u0026id=1dpt4wWamYbk_l49u8IAOVf66wA27cAi0",
			"dependencies": null,
			"aboutURL": "https://github.com/harryloewen/bitbar-votd/",
			"lastUpdated": "2021-03-08T15:21:56.70804Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/time_on_earth.10m.rb",
					"filename": "time_on_earth.10m.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eYour time on earth\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTim Regener\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etimlapluie\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays the time you are already living.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/EzUARsL.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n\n# --------------------- #\n# EDIT THESE VARIABLES. #\n# --------------------- #\n\n# Add your Birthday here\n# Format: 'YYYY-MM-DD [hh:mm (optional)] [UTC Offset (optional)]'\nBIRTHDAY = '1988-01-12 11:42 +01:00'\n\n# -------------------------------------------------------- #\n# DON'T EDIT BELOW HERE UNLESS YOU KNOW WHAT YOU'RE DOING. #\n# -------------------------------------------------------- #\nrequire 'date'\n\nbirth_time = DateTime.parse(BIRTHDAY)\ntime_now = DateTime.now\ndelta = time_now - birth_time\n\ndays = delta.to_i\n\nhours = (delta * 24)\nminutes = (hours % 1) * 60\nseconds = (minutes % 1) * 60\n\ndef format_int(number)\n  number.to_i.to_s.reverse.gsub(/(\\d{3})(?=\\d)/, '\\\\1,').reverse\nend\n\nputs \"#{format_int(days)} days on 🌍\"\nputs '---'\nputs \"Impressive! That's #{format_int(hours)} hours, #{format_int(minutes)} minutes, #{format_int(seconds)} seconds.\"\n"
				}
			],
			"path": "Lifestyle/time_on_earth.10m.rb",
			"filename": "time_on_earth.10m.rb",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/time_on_earth.10m.rb.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "Your time on earth",
			"version": "v1.0",
			"author": "Tim Regener",
			"authors": [
				{
					"name": "Tim Regener",
					"githubUsername": "timlapluie",
					"imageURL": "https://avatars.githubusercontent.com/u/2337105?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays the time you are already living.",
			"imageURL": "http://i.imgur.com/EzUARsL.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.336428Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/ZoomsToday/zooms-today.1h.sh",
					"filename": "zooms-today.1h.sh",
					"content": "#!/bin/bash\n\n#\n# Display a list of Zoom based meetings in your calendar today.\n# Selecting a meeting will take you to the Zoom session associated with it.\n#\n# \u003cbitbar.title\u003eZoom Meetings for Today\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eLuis Cruz\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esprak3000\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay a list of Zoom based meetings in your calendar today. Selecting a meeting will take you to the Zoom session associated with it.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://sprak3000.github.io/assets/images/blog/zooms-today.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eicalBuddy\u003c/bitbar.dependencies\u003e\n#\n# Dependencies:\n#\t  - icalBuddy: https://hasseg.org/icalBuddy/\n#   - open-zoom.sh: Should be included with this plugin\n#\n# Configuration:\n#   Set the userdir and plugindir variables below to match your directory structure for BitBar plug-ins.\n#\n\n# Add the path iCalBuddy should be installed under.\nexport PATH=\"/usr/local/bin:$PATH\"\n\nwhoami=$(whoami)\nuserdir=\"\\/Users\\/$whoami\"\n\n# The location of your BitBar plugin directory.\n# It is assumed it is under your user directory.\nplugindir=\".bitbar\"\n\n# Zoom URL pattern\nzoomURLPattern=\"https:\\/\\/.*.zoom.us\\/j\\/([0-9]+)\"\n\nstatusBarIcon=\":busts_in_silhouette:\"\nnoZoomsMessage=\":tada: No Zoom meetings today! | color=green\"\n\n# Grab the calendar events.\nevents=$(icalBuddy \\\n\t\t--includeOnlyEventsFromNowOn \\\n\t\t--noCalendarNames \\\n\t\t--excludeAllDayEvents \\\n\t\t--excludeEventProps \"attendees\" \\\n\t\t--notesNewlineReplacement \" \" \\\n\t\t--bullet \"» \" \\\n\t\t--propertySeparators \"/ » /\" eventsToday | \\\n\tgrep -E \"$zoomURLPattern\" | \\\n\tsed -E \"s/^» ([^»]+).*(https:\\/\\/.*.zoom.us\\/j\\/[0-9]+).* » (.*)$/\\1\\3 | bash=$userdir\\/$plugindir\\/open-zoom.sh param1=\\2 terminal=false/\")\n\n# Print out the status bar icon and indicate there will be menu items.\necho \"${statusBarIcon}\"\necho \"---\"\n\n# Display the events or a message if no events for the day.\nif [ -z \"$events\" ]; then\n  echo \"${noZoomsMessage}\"\nelse\n  echo \"${events}\"\nfi\n\n"
				}
			],
			"path": "Lifestyle/ZoomsToday/zooms-today.1h.sh",
			"filename": "zooms-today.1h.sh",
			"dir": "Lifestyle/ZoomsToday",
			"docsPlugin": "Lifestyle/ZoomsToday/zooms-today.1h.sh.html",
			"docsCategory": "Lifestyle/ZoomsToday.html",
			"pathSegments": [
				"Lifestyle",
				"ZoomsToday"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/ZoomsToday",
					"text": "ZoomsToday",
					"isLast": true
				}
			],
			"title": "Zoom Meetings for Today",
			"version": "1.0.0",
			"author": "Luis Cruz",
			"authors": [
				{
					"name": "Luis Cruz",
					"githubUsername": "sprak3000",
					"imageURL": "https://avatars.githubusercontent.com/u/5545555?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display a list of Zoom based meetings in your calendar today. Selecting a meeting will take you to the Zoom session associated with it.",
			"imageURL": "https://sprak3000.github.io/assets/images/blog/zooms-today.png",
			"dependencies": [
				"icalBuddy"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.039136Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/sleepingtime.1m.sh",
					"filename": "sleepingtime.1m.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003esleepingtime\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMatteo Ferrando\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003echamini2\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow the next sleeping cycles if we fell asleep in `falling_asleep` minutes.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/JTqosty.png\u003c/bitbar.image\u003e\n\n# Time in minutes to fall asleep; the mean is 15 minutes\nfalling_asleep=15\n\n# Range of cycles to show in the menu\nstart_cycle=1\nend_cycle=7\n\n# The length of a cycle **in minutes**, standard value is 90\nlength=90\n\n# Format with local time format (12 or 24 hours)\nformat='%H:%M'\n\n# Display everything in local time format\necho \"💤\"\necho '---'\n\nfor ((cy=start_cycle; cy\u003c=end_cycle; cy++)); do\n    # Add 1 hour and 30 minutes every cycle\n    h=$(((length * cy) / 60))\n    m=$(((length * cy) % 60))\n\n    if [[ $cy -gt 1 ]]; then\n        str=\"$cy cycles:\"\n    else\n        str=\"$cy cycle: \"\n    fi\n    echo \"$str $(date -v+${h}H -v+${m}M -v+${falling_asleep}M +${format})\"\ndone\n"
				}
			],
			"path": "Lifestyle/sleepingtime.1m.sh",
			"filename": "sleepingtime.1m.sh",
			"dir": "Lifestyle",
			"docsPlugin": "Lifestyle/sleepingtime.1m.sh.html",
			"docsCategory": "Lifestyle.html",
			"pathSegments": [
				"Lifestyle"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": true
				}
			],
			"title": "sleepingtime",
			"version": "v1.0",
			"author": "Matteo Ferrando",
			"authors": [
				{
					"name": "Matteo Ferrando",
					"githubUsername": "chamini2",
					"imageURL": "https://avatars.githubusercontent.com/u/2745502?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show the next sleeping cycles if we fell asleep in `falling_asleep` minutes.",
			"imageURL": "http://i.imgur.com/JTqosty.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:55.922355Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Lifestyle/Trello/trello_board.30s.py",
					"filename": "trello_board.30s.py",
					"content": "#!/usr/bin/python\n\n# \u003cbitbar.title\u003etrello list\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKarim Boumedhel\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekarmab\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eLists trello cards in New/In Progress\u003c/bitbar.desc\u003e\n\n\nimport os\nimport requests\nimport sys\n\nkey = os.environ['TRELLO_KEY'] if 'TRELLO_KEY' in os.environ else None\ntoken = os.environ['TRELLO_TOKEN'] if 'TRELLO_TOKEN' in os.environ else None\nboard = os.environ['TRELLO_BOARD'] if 'TRELLO_BOARD' in os.environ else None\nboardname = os.environ['TRELLO_BOARDNAME'] if 'TRELLO_BOARDNAME' in os.environ else None\nstates = os.environ['TRELLO_STATES'] if 'TRELLO_STATES' in os.environ else 'Next,In Progress'\nuser = os.environ['TRELLO_USER'] if 'TRELLO_USER' in os.environ else None\n\nstates = states.split(',')\nerror = None\nif key is None:\n    error = \"Missing key\\nGet it at https://trello.com/app-key\"\nif token is None:\n    error = \"Missing token\\nGet it at https://trello.com/app-key\"\nif boardname is None and board is None:\n    error = \"Missing board information\\nDefine board short or long name\"\nif user is None:\n    error = \"Missing username\"\n\nif error is not None:\n    warning = u\"\\u26A0\"\n    warning = warning.encode('utf-8')\n    print(\"%s\\n\" % warning)\n    print(\"---\\n\")\n    print(error)\n    sys.exit(1)\n\nboardsurl = \"https://api.trello.com/1/members/%s/boards?key=%s\u0026token=%s\" % (user, key, token)\nr = requests.get(boardsurl)\nif board:\n    board = [b for b in r.json() if b['shortLink'] == board]\n    if board:\n        boardname = board[0]['name']\nelif boardname:\n    board = [b for b in r.json() if b['name'] == boardname]\nif len(board) != 1:\n    print \"Missing board information\"\n    sys.exit(0)\nboardid = board[0]['id']\n\nstatesurl = \"https://api.trello.com/1/boards/%s/lists?key=%s\u0026token=%s\" % (boardid, key, token)\nr = requests.get(statesurl)\nstatesinfo = {}\nfor l in r.json():\n    if l['name'] in states:\n        statesinfo[l['id']] = l['name']\n\ncardsurl = \"https://api.trello.com/1/members/%s/cards?key=%s\u0026token=%s\" % (user, key, token)\nr = requests.get(cardsurl)\ncards = [card for card in r.json() if card['idBoard'] == boardid and card['idList'] in statesinfo]\nif cards:\n    print(\"%s Trello cards in %s\" % (len(cards), boardname))\nelse:\n    print(\"No Trello cards in %s\" % boardname)\n    sys.exit(0)\nprint(\"---\\n\")\noldcolumn = None\nfor card in sorted(cards, key=lambda c: (statesinfo[c['idList']], c['name'])):\n    currentcolumn = statesinfo[card['idList']]\n    if oldcolumn is None:\n        oldcolumn = currentcolumn\n        print currentcolumn\n    if currentcolumn != oldcolumn:\n        print(\"---\\n\")\n        print currentcolumn\n    url = card['url']\n    name = card['name']\n    print(\"%s | href=%s\" % (name, url))\n"
				}
			],
			"path": "Lifestyle/Trello/trello_board.30s.py",
			"filename": "trello_board.30s.py",
			"dir": "Lifestyle/Trello",
			"docsPlugin": "Lifestyle/Trello/trello_board.30s.py.html",
			"docsCategory": "Lifestyle/Trello.html",
			"pathSegments": [
				"Lifestyle",
				"Trello"
			],
			"categoryPathSegments": [
				{
					"path": "Lifestyle",
					"text": "Lifestyle",
					"isLast": false
				},
				{
					"path": "Lifestyle/Trello",
					"text": "Trello",
					"isLast": true
				}
			],
			"title": "trello list",
			"version": "v1.0",
			"author": "Karim Boumedhel",
			"authors": [
				{
					"name": "Karim Boumedhel",
					"githubUsername": "karmab",
					"imageURL": "https://avatars.githubusercontent.com/u/1840387?v=4",
					"bio": "loves python, guitar and his family too",
					"primary": true
				}
			],
			"desc": "Lists trello cards in New/In Progress",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:54.889425Z",
			"vars": null
		}
	]
}