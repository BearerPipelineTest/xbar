{
	"plugins": [
		{
			"files": [
				{
					"path": "Music/airconnect.1d.sh",
					"filename": "airconnect.1d.sh",
					"content": "#!/bin/bash\n\n###\n#\n# Make sure you take care of the \u003cbitbar.dependencies\u003e, then\n#\n# CHANGE THESE\n#\n\nreadonly path=\"/Applications/\"\nreadonly processName=\"aircast-osx-multi\"\n\n#\n# NOTE: These values cannot contain single or double quotation marks.\n# Would love to know how to get BitBar to parse these correctly!\n# (Incidentally, |href also chokes on spaces.)\n#\n###\n\n\n\n# Info\n\n# \u003cbitbar.title\u003eAirConnect\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eCartoonChess\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecartoonchess\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eLaunches AirConnect to enable streaming AirPlay audio to Chromecast devices.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://user-images.githubusercontent.com/43363630/101709887-aa9f2900-3ad3-11eb-8863-4309a068aa3c.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eairconnect,bash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/cartoonchess/bitbar-airconnect\u003c/bitbar.abouturl\u003e\n\n\n\n# Strings\n\nreadonly app=\"AirConnect\"\n\n\n\n# Icons\n\nreadonly onIcon=\"iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAACXBIWXMAABYlAAAWJQFJUiTwAAAGX2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDMgNzkuMTY0NTI3LCAyMDIwLzEwLzE1LTE3OjQ4OjMyICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjIuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMTUtMDMtMjFUMDQ6NTQ6MjArMDk6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDIwLTEyLTEwVDEwOjIzOjQyKzA5OjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIwLTEyLTEwVDEwOjIzOjQyKzA5OjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgcGhvdG9zaG9wOklDQ1Byb2ZpbGU9InNSR0IgSUVDNjE5NjYtMi4xIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjk2MzQxY2VkLTRlNmQtNDYxMi1hNzZhLTUzMGU4YmQ4N2RhYiIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOmUzMjIyZmNiLWIxMGYtZDU0ZC05NDQ3LWMzZWJiNzdmMWY1NCIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjQ1ZjAwZjFiLTIyMzEtNDVmYy05NzdhLTI0NGYxM2U1MTM1ZSI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NDVmMDBmMWItMjIzMS00NWZjLTk3N2EtMjQ0ZjEzZTUxMzVlIiBzdEV2dDp3aGVuPSIyMDE1LTAzLTIxVDA0OjU0OjIwKzA5OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjIuMSAoTWFjaW50b3NoKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY29udmVydGVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo5NjM0MWNlZC00ZTZkLTQ2MTItYTc2YS01MzBlOGJkODdkYWIiIHN0RXZ0OndoZW49IjIwMjAtMTItMTBUMTA6MjM6NDIrMDk6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMi4xIChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PhYdaq8AAAH7SURBVFiF7ZfRcdswDIa/9jKANqi6gT1B3AniDapsIE9gZYK2E4QbJJ2gygTRBtEG0QbtA4EQoinZdSTlxd8djzQIm78BkpDgwoX38cmMM6CQfkk6wEn/RgY8A38/qD0TBaL8QDHaSoArEyGlBp7iuM7ENbCxGq4STk9AtYgcv87GGj4vtPDJpCJk2RD9gwmopSU5RdB+Oi1v1EMTKqhiuX0zyrE95IAd0M6uRDgmqAV+Al+BW6LbdA5UUEW4oF6ABw7LiBNhbglBlhzYAvfAq/S5zHX4SN0uKSimwEetMjYHrJkhhSrIAd+k3QFNwnePL4K5fG7EfzFyfLriIvgKrIxfkfAZa5X5bhXbx1LW4vfKmn7EMuAPIVKOCTd66pTpCVMafGrsopn4KTsm2k+pCG3xqXqRMYTTZUWtCOHvRNQsgpQcH4V7Y9vRT9+efuraqQQ5fFriBcGn74eMOw7vIFt8f71XkBbXVlqNLxWlLJTJfIl/cHvEC3aEfVYQ9tAjx18S6jO1ssIfcVtSlJz+US44j4qBY68TD/QvvrtIhC7c0k/tzZmCDogf0Lb4h7I1odJ/J1yEN4ST9tvYtVeqE9e/NuMv8Q/YFNg7pozmlM2AHf7v5u69Bg0d+60ZNwM+U9IgkdeU1SPOLf29dMzOiD1FR+JV+sKFc/kHPkbXK6gg7e8AAAAASUVORK5CYII=\"\n\nreadonly offIcon=\"iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAACXBIWXMAABYlAAAWJQFJUiTwAAAGX2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDMgNzkuMTY0NTI3LCAyMDIwLzEwLzE1LTE3OjQ4OjMyICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjIuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMTUtMDMtMjFUMDQ6NTQ6MjIrMDk6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDIwLTEyLTEwVDEwOjI2OjA2KzA5OjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIwLTEyLTEwVDEwOjI2OjA2KzA5OjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgcGhvdG9zaG9wOklDQ1Byb2ZpbGU9InNSR0IgSUVDNjE5NjYtMi4xIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjgxYzg2NGI4LTQ0OTQtNDdiNy1iOGY2LTdkNDNiZjgyNzUxZCIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOjEyODQ2OTA3LTBjMjctODk0Ni1iODJlLTgwN2M0NjFkZTVmZCIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmMwOTBmMjkyLTIwN2EtNDVlYy04Y2ZkLThiMzc0ZjljNDNiMiI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YzA5MGYyOTItMjA3YS00NWVjLThjZmQtOGIzNzRmOWM0M2IyIiBzdEV2dDp3aGVuPSIyMDE1LTAzLTIxVDA0OjU0OjIyKzA5OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjIuMSAoTWFjaW50b3NoKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY29udmVydGVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo4MWM4NjRiOC00NDk0LTQ3YjctYjhmNi03ZDQzYmY4Mjc1MWQiIHN0RXZ0OndoZW49IjIwMjAtMTItMTBUMTA6MjY6MDYrMDk6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMi4xIChNYWNpbnRvc2gpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PgzdiP0AAAHiSURBVFiF7ZetdoNAEIW/pghEBKIiIgKJRPQBkJGVlX2EPkIfI7KysrIyMiICUVERgYhARCAiEBUVMxsWCklOICSCe86eXWY32cu9sz/AgAHtcGe1XSDUuk/kQKz1npALvACTnskYpMA7kI80EF6RDDp3COBowLYp0dIHfC17Dk7NoARY9MEGiCgIATCqHXZFDISOweTQgv7y5iBuTqGbI2Qsi7QAZMjO+aMlvwYhG56WQJ9jJL+yHvicZFkIvFIoeFHca50h9sTadoFxZayPqLamOxt9ip06ARJDKFcimXaslJxL+dAdI4qtgd0lCB2yLAM+gTmS5AbmquJ1QOgfjEKRThIhijgWiR3wjahj1HKQN1u1nN+nwTK74wHJlRBRaQv8IjnmWaRMjiVdEjpkmQc8A09W7IuyfREdW1ddZSny5vYKmyB5s0aU2gCPVr+rvz0HPkdW2QbJixyYUmycUyW7RXLKo7BuAiyVbGtCTZYt0Uu3FZtZ7UVlfEBHMIQi4A3JGU9jaWViD72IU5x3nROqnmUBIuFcJ11S/iIJkA0TJG9s22xEJ87vW22vjhBIks6AD32OKeyylUiqf3YGIRspNB+uQXXghZGiyhuFEpqvsFlDX1OcA/E6lD6lBwxoiz93TGyVG5zbNAAAAABJRU5ErkJggg==\"\n\n\n\n# Run app\n\nif [ \"$1\" = \"start\" ]; then\n\t# Must use -Z to keep CPU under control\n\t# \u0026 runs in background so plugin can refresh\n\t\"$path$processName\" -Z \u0026\n\texit\nfi\n\n\n\n# Exit app\n\nif [ \"$1\" = \"stop\" ]; then\n\tpid=$(pgrep \"$processName\")\n\tkill -s $2 $pid\n\t# Give the plugin time to wait for the app process to end\n\tsleep 1\n\texit\nfi\n\n\n\n# Check if app script is running\n\nrunning=false\nps cax | grep aircast-osx-multi \u003e /dev/null\n\nif [ $? = 0 ]; then\n\trunning=true\nfi\n\n\n\n# Show menu bar item\n\nif [ \"$running\" = true ]; then\n\techo \"| templateImage=$onIcon\"\nelse\n\techo \"| templateImage=$offIcon\"\nfi\necho \"---\"\n\n\n\n# Check that the app can be located and only show help if not\n\ntest -f \"$path$processName\"\n\nif [ $? != 0 ]; then\n\techo \"$app Not Found\"\n\techo \"Refresh | refresh=true\"\n\techo \"Help\"\n\techo \"-- Set path and filename in .sh file\"\n\techo \"-- Open Plugin Folder… | href=file://${0%/*}/\"\n\techo \"-----\"\n\techo \"-- Download and install $app binary\"\n\techo \"-- Open GitHub Page… | href=https://github.com/philippe44/AirConnect\"\n\texit\nfi\n\n\n\n\n# Show full menu (if app is properly located)\n\nif [ \"$running\" = true ]; then\n\t# Running\n\techo \"Running\"\n\techo \"Stop $app | bash='$0' param1=stop param2=TERM terminal=false refresh=true\"\n\t# Hold opt key to force quit\n\techo \"Force Quit $app | alternate=true bash='$0' param1=stop param2=KILL terminal=false refresh=true\"\nelse\n\t# Not running\n\techo \"Not Running\"\n\techo \"Start $app | bash='$0' param1=start terminal=false refresh=true\"\nfi"
				}
			],
			"path": "Music/airconnect.1d.sh",
			"filename": "airconnect.1d.sh",
			"dir": "Music",
			"docsPlugin": "Music/airconnect.1d.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "AirConnect",
			"version": "v1.1.0",
			"author": "CartoonChess",
			"authors": [
				{
					"name": "CartoonChess",
					"githubUsername": "cartoonchess",
					"imageURL": "https://avatars.githubusercontent.com/u/43363630?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Launches AirConnect to enable streaming AirPlay audio to Chromecast devices.",
			"imageURL": "https://user-images.githubusercontent.com/43363630/101709887-aa9f2900-3ad3-11eb-8863-4309a068aa3c.png",
			"dependencies": [
				"airconnect",
				"bash"
			],
			"aboutURL": "https://github.com/cartoonchess/bitbar-airconnect",
			"lastUpdated": "2021-03-08T15:21:56.758357Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/cmus.10s.sh",
					"filename": "cmus.10s.sh",
					"content": "#!/bin/bash\n\n# Displays the current track being played by `cmus`, a console music player.\n# All thanks to the cmus-remote.\n#\n# based on Spotify script by Jason Tokoph (jason@tokoph.net)\n#\n# Choose to launch cmus in iTerm2 (version 2.9.20150414+ only) or Terminal\n#\n# Metadata:\n# \u003cbitbar.title\u003eCmus Now Playing\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMichael Chris Lopez\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emcchrish\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays currently playing song from cmus. Control cmus in menubar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/qeZCB0a.png\u003c/bitbar.image\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\n\n\nif [ \"$1\" = 'launch-iterm' ]; then\n  if [ \"$(osascript -e 'application \"iTerm\" is running')\" = \"false\" ]; then\n    osascript -e 'tell application \"iTerm\" to activate'\n    osascript -e 'tell application \"iTerm\" to tell current session of current window to write text \"cmus\"'\n  else\n    # Then create new tab\n    osascript -e 'tell application \"iTerm\" to tell current window to set newTab to (create tab with default profile)'\n    osascript -e 'tell application \"iTerm\" to tell current window to tell current tab to tell current session to write text \"cmus\"'\n  fi\n\n  exit\nfi\n\nif [ \"$1\" = 'launch-terminal' ]; then\n  if [ \"$(osascript -e 'application \"Terminal\" is running')\" = \"false\" ]; then\n    osascript -e 'tell application \"Terminal\" to activate'\n    osascript -e 'tell application \"Terminal\" to do script \"cmus\" in window 1'\n  else\n    # Then create a new tab\n    osascript -e 'tell application \"System Events\" to keystroke \"t\" using command down'\n    osascript -e 'tell application \"Terminal\" to do script \"cmus\" in tab 2 of window 1'\n  fi\n\n  exit\nfi\n\nstate=$(cmus-remote -C status | sed -n 1p | cut -d \" \" -f2)\n\nif [ \"$state\" = \"\" ]; then\n  echo \"♫\"\n  echo \"---\"\n  echo \"cmus is not running\"\n  echo \"Launch cmus in iTerm | bash='$0' param1=launch-iterm terminal=false refresh=true\"\n  echo \"Launch cmus in Terminal | bash='$0' param1=launch-terminal terminal=false refresh=true\"\n  exit\nfi\n\nif [ \"$1\" = 'playpause' ]; then\n  cmus-remote --pause\n  exit\nfi\n\nif [ \"$1\" = 'previous' ]; then\n  cmus-remote --prev\n  exit\nfi\n\nif [ \"$1\" = 'next' ]; then\n  cmus-remote --next\n  exit\nfi\n\nif [ \"$state\" = \"playing\" ]; then\n  state_icon=\"▶\"\nelse\n  state_icon=\"❚❚\"\nfi\n\ntrack=$(cmus-remote -C \"format_print %{title}\")\nartist=$(cmus-remote -C \"format_print %{artist}\")\nalbum=$(cmus-remote -C \"format_print %{album}\")\n\necho \"$state_icon\"\necho \"---\"\n\ncase \"$0\" in\n  *\\ * )\n   echo \"Your script path | color=#ff0000\"\n   echo \"($0) | color=#ff0000\"\n   echo \"has a space in it, which BitBar does not support. | color=#ff0000\"\n   echo \"Play/Pause/Next/Previous buttons will not work. | color=#ff0000\"\n  ;;\nesac\n\necho \"Track: $track | color=#333333 length=40\"\necho \"Artist: $artist | color=#333333 length=40\"\necho \"Album: $album | color=#333333 length=40\"\n\necho \"---\"\n\nif [ \"$state\" = \"playing\" ]; then\n  echo \"Pause | bash='$0' param1=playpause terminal=false refresh=true\"\n  echo \"Previous | bash='$0' param1=previous terminal=false refresh=true\"\n  echo \"Next | bash='$0' param1=next terminal=false refresh=true\"\nelse\n  echo \"Play | bash='$0' param1=playpause terminal=false refresh=true\"\nfi\n"
				}
			],
			"path": "Music/cmus.10s.sh",
			"filename": "cmus.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/cmus.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Cmus Now Playing",
			"version": "v1.0",
			"author": "Michael Chris Lopez",
			"authors": [
				{
					"name": "Michael Chris Lopez",
					"githubUsername": "mcchrish",
					"imageURL": "https://avatars.githubusercontent.com/u/7200153?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays currently playing song from cmus. Control cmus in menubar.",
			"imageURL": "https://i.imgur.com/qeZCB0a.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.956181Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/fip.1m.sh",
					"filename": "fip.1m.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eFip - Now Playing\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBastien L.\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eBehel\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eWhat's playing currently on FIP french radio\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://attentionphilippelepara.pet/img/images/2021/01/18/bitbar.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ejq\u003c/bitbar.dependencies\u003e\n#\n\nexport PATH=\"/usr/local/bin:$PATH\"\n\nFIP_NOWPLAYING_URL='https://api.radiofrance.fr/livemeta/pull/7'\n\nJSON=\"$(curl -s ${FIP_NOWPLAYING_URL})\"\njson_length=\"$(echo $JSON | jq '[.steps[]] | length')\"\n\nNOW_PLAYING_STEP=\"$(expr $json_length - 2)\"\nPREVIOUS_STEP=\"$(expr $json_length - 3)\"\nNEXT_STEP=\"$(expr $json_length - 1)\"\n\necho '| templateImage=iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IB2cksfwAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAEhQTFRFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq4SsmwAAABh0Uk5TADCv3/9g7yCAQJDQwFDgED/Pb19/8LBwGpMSKgAAAMZJREFUeJzNkssSgyAMRaEGEtQWtEL//09LqMg4gq6caRYBwhFvHkL8iclHBwBKRqdr96iBjQz7GtDzxTA+m8DIn8eVgVcLME2B1rkpArNzNm6dFBg9CvteZpcAgmzmp4EDo+G0YLItQK8hHQlJ5OM2EGEBIBhUftVeRBZg4LDa6nYE+hSHnN0R2L98CtAVoM4Af/EL5CPWgVTCsPXuCEC3zA/IEiqAX0sd9u2W6c2kATnmP9X+Z5EGGwNS0rwNiANC7Qm9w75xIgrxpBUclgAAAABJRU5ErkJggg=='\necho '---'\n\necho \":notes: Go to FIP website | href=https://www.fip.fr\"\n\necho \"---\"\necho \":sound: Now Playing | color=#e20179\"\n\ntitle=\"$(echo $JSON | jq '[.steps[]]['$NOW_PLAYING_STEP'].title' | sed 's/\\\"//g')\"\ntitleSlug=\"$(echo $JSON | jq '[.steps[]]['$NOW_PLAYING_STEP'].titleSlug' | sed 's/\\\"//g' | sed 's/-/ /g')\"\nartist=\"$(echo $JSON | jq '[.steps[]]['$NOW_PLAYING_STEP'].authors' | sed 's/\\\"//g')\"\nalbum=\"$(echo $JSON | jq '[.steps[]]['$NOW_PLAYING_STEP'].titreAlbum' | sed 's/\\\"//g')\"\nyear=\"$(echo $JSON | jq '[.steps[]]['$NOW_PLAYING_STEP'].anneeEditionMusique')\"\nitunes=\"$(echo $JSON | jq '[.steps[]]['$NOW_PLAYING_STEP'].path' | sed 's/\\\"//g')\"\nvisual=\"$(echo $JSON | jq '[.steps[]]['$NOW_PLAYING_STEP'].visual' | sed 's/\\\"//g' | sed 's/400x400/200x200/g')\"\nbase64_img=\"$(curl -s $visual --output - | base64)\"\n\necho \"| image=\"$base64_img\necho $title\" - \"$artist\" | href=\"$itunes\necho \"Album : \"$album\" (\"$year\")\" \necho \"Search on Spotify | href=https://open.spotify.com/search/$(echo $artist | sed 's/ /%20/g')\"\"%20\"\"$(echo $titleSlug | sed 's/ /%20/g')\"\n\necho \"---\"\necho \":point_left: Last Title | color=red\"\n\nptitle=\"$(echo $JSON | jq '[.steps[]]['$PREVIOUS_STEP'].title' | sed 's/\\\"//g')\"\nptitleSlug=\"$(echo $JSON | jq '[.steps[]]['$PREVIOUS_STEP'].titleSlug' | sed 's/\\\"//g' | sed 's/-/ /g')\"\npartist=\"$(echo $JSON | jq '[.steps[]]['$PREVIOUS_STEP'].authors' | sed 's/\\\"//g')\"\npyear=\"$(echo $JSON | jq '[.steps[]]['$PREVIOUS_STEP'].anneeEditionMusique')\"\npitunes=\"$(echo $JSON | jq '[.steps[]]['$PREVIOUS_STEP'].path' | sed 's/\\\"//g')\"\n\necho $ptitle\" - \"$partist\" (\"$pyear\")\" \"| href=\"$pitunes\necho \"Search on Spotify | href=https://open.spotify.com/search/$(echo $partist | sed 's/ /%20/g')\"\"%20\"\"$(echo $ptitleSlug | sed 's/ /%20/g')\"\n\n\necho \"---\"\necho \":point_right: Next Title | color=green\"\n\nntitle=\"$(echo $JSON | jq '[.steps[]]['$NEXT_STEP'].title' | sed 's/\\\"//g')\"\nnartist=\"$(echo $JSON | jq '[.steps[]]['$NEXT_STEP'].authors' | sed 's/\\\"//g')\"\nnyear=\"$(echo $JSON | jq '[.steps[]]['$NEXT_STEP'].anneeEditionMusique')\"\nnitunes=\"$(echo $JSON | jq '[.steps[]]['$NEXT_STEP'].path' | sed 's/\\\"//g')\"\n\necho $ntitle\" - \"$nartist\" (\"$nyear\")\" \"| href=\"$nitunes"
				}
			],
			"path": "Music/fip.1m.sh",
			"filename": "fip.1m.sh",
			"dir": "Music",
			"docsPlugin": "Music/fip.1m.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Fip - Now Playing",
			"version": "v1.2",
			"author": "Bastien L.",
			"authors": [
				{
					"name": "Behel",
					"githubUsername": "Behel",
					"imageURL": "https://avatars.githubusercontent.com/u/8793448?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "What's playing currently on FIP french radio",
			"imageURL": "https://attentionphilippelepara.pet/img/images/2021/01/18/bitbar.png",
			"dependencies": [
				"jq"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.957147Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/lastfm.10s.rb",
					"filename": "lastfm.10s.rb",
					"content": "#!/usr/bin/env ruby\n\n# Get current or last played song from Last FM\n# by Eric Stiens\n#\n# Shows the last song played on Last.fm\n# (or scrobbled from another service)\n# Includes link to track info page in the dropdown\n\n# \u003cbitbar.title\u003eLast.fm Now Playing\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Stiens\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eestiens\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays currently playing song from Last.fm (or scrobbles)\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://s3.amazonaws.com/f.cl.ly/items/400E102E353y3U1x2r2U/Screen%20Shot%202016-02-09%20at%2012.19.47%20PM.png?v=36addc99\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby, xml-simple\u003c/bitbar.dependencies\u003e\n\nrequire 'open-uri'\nrequire 'xmlsimple'\n\nUSERNAME = '' #lastfm username\nAPI_KEY = '' #lastfm API key\n\nclass LastfmPlugin\n  def initialize(username, api_key)\n    @username = username\n    @api_key = api_key\n    @output = nil\n  end\n\n  def call_api\n    begin\n      url = 'http://ws.audioscrobbler.com' + \"/2.0/?method=user.getrecenttracks\u0026user=#{@username}\u0026api_key=#{@api_key}\u0026limit=1\"\n      response = open(url).read\n      XmlSimple.xml_in(response, { 'ForceArray' =\u003e false })\n    rescue\n      @output = \"API error\"\n    end\n  end\n\n  def build_output\n    begin\n      response = call_api\n      song = response['recenttracks']['track'][0]\n      output_array = get_details_of_song(song)\n      @output = output_array.join(\"\\n\")\n    rescue\n      @output = \"API error\"\n    end\n  end\n\n  def get_details_of_song(song)\n    if song['nowplaying'] == 'true'\n      icon = '▶'\n      playing_string = 'Now Playing'\n    else\n      icon='❚❚'\n      playing_string = 'Last Played'\n    end\n    track = song['name']\n    artist = song['artist']['content']\n    album = song['album']['content']\n    output_array = []\n    output_array \u003c\u003c \"#{icon} #{track} | length=20\"\n    output_array \u003c\u003c '---'\n    output_array \u003c\u003c \"#{playing_string} | color = #333\"\n    output_array \u003c\u003c \"Track: #{track} | href = #{song['url']} color=#000080\"\n    output_array \u003c\u003c \"Album: #{album} | color = #333\"\n    output_array \u003c\u003c \"Artist: #{artist} | color = #333\"\n    output_array\n  end\n\n  def execute\n    build_output\n    puts @output\n  end\nend\n\nplugin = LastfmPlugin.new(USERNAME, API_KEY)\nplugin.execute\n"
				}
			],
			"path": "Music/lastfm.10s.rb",
			"filename": "lastfm.10s.rb",
			"dir": "Music",
			"docsPlugin": "Music/lastfm.10s.rb.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Last.fm Now Playing",
			"version": "v1.0",
			"author": "Eric Stiens",
			"authors": [
				{
					"name": "Eric Stiens",
					"githubUsername": "estiens",
					"imageURL": "https://avatars.githubusercontent.com/u/4022668?v=4",
					"bio": "code for good. code for change. code as a medium for magic. code for fun.",
					"primary": true
				}
			],
			"desc": "Displays currently playing song from Last.fm (or scrobbles)",
			"imageURL": "https://s3.amazonaws.com/f.cl.ly/items/400E102E353y3U1x2r2U/Screen%20Shot%202016-02-09%20at%2012.19.47%20PM.png?v=36addc99",
			"dependencies": [
				"ruby",
				"xml-simple"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.113921Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/check-lms.10s.pl",
					"filename": "check-lms.10s.pl",
					"content": "#!/usr/bin/perl -w\n\n# \u003cbitbar.title\u003eLogitech Media Server Status Display\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMichael Herger\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emichaelherger\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow whether Logitech media Server is running or not. Quickly start/stop it, access its UI etc.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://www.herger.net/slim/BitBar/lms-bitbar.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eLogitech Media Server\u003c/bitbar.dependencies\u003e\n\nuse strict;\n\nBEGIN {\n\tif (!$ENV{BitBar}) {\n\t\trequire Data::Dump;\n\t}\n}\n\nuse constant STRINGS =\u003e sub {\n\tmy $lang = uc(substr(`/usr/bin/defaults read -g AppleLocale` || 'EN', 0, 2));\n\n\tmy $localizations = {\n\t\tNOT_FOUND =\u003e {\n\t\t\tDE =\u003e 'Logitech Media Server wurde nicht gefunden.',\n\t\t\tEN =\u003e 'Logitech Media Server can\\'t be found'\n\t\t},\n\t\tLMS_RUNNING =\u003e {\n\t\t\tDE =\u003e 'Logitech Media Server wird ausgeführt',\n\t\t\tEN =\u003e 'Logitech Media Server is running'\n\t\t},\n\t\tLMS_NOT_RUNNING =\u003e {\n\t\t\tDE =\u003e 'Logitech Media Server läuft nicht',\n\t\t\tEN =\u003e 'Logitech Media Server is not running'\n\t\t},\n\t\tLMS_IS_STARTING =\u003e {\n\t\t\tDE =\u003e 'Logitech Media Server startet…',\n\t\t\tEN =\u003e 'Logitech Media Server is starting…'\n\t\t},\n\t\tSTART_LMS =\u003e {\n\t\t\tDE =\u003e 'Logitech Media Server starten',\n\t\t\tEN =\u003e 'Start Logitech Media Server'\n\t\t},\n\t\tSTOP_LMS =\u003e {\n\t\t\tDE =\u003e 'Logitech Media Server anhalten',\n\t\t\tEN =\u003e 'Stop Logitech Media Server'\n\t\t},\n\t\tOPEN_WEB_CONTROL =\u003e {\n\t\t\tDE =\u003e 'Web-Steuerung öffnen…',\n\t\t\tEN =\u003e 'Open Web Control…'\n\t\t},\n\t\tOPEN_SETTINGS =\u003e {\n\t\t\tDE =\u003e 'Einstellungen öffnen…',\n\t\t\tEN =\u003e 'Open Settings…'\n\t\t},\n\t\tOPEN_PREF_PANE =\u003e {\n\t\t\tDE =\u003e 'Systemeinstellungen öffnen…',\n\t\t\tEN =\u003e 'Open Preference Pane…'\n\t\t},\n\t\tUPDATE_AVAILABLE =\u003e {\n\t\t\tDE =\u003e 'Software aktualisieren…',\n\t\t\tEN =\u003e 'Install software update…'\n\t\t}\n\t};\n\n\treturn { map {\n\t\t$_ =\u003e ($localizations-\u003e{$_}-\u003e{$lang} || $localizations-\u003e{$_}-\u003e{EN})\n\t} keys %$localizations };\n}-\u003e();\n\nuse constant PREFPANE_LINK =\u003e STRINGS-\u003e{'OPEN_PREF_PANE'} . '|bash=/usr/bin/open param1=/Library/PreferencePanes/Squeezebox.prefPane terminal=false';\n\nuse constant LMS_ON =\u003e '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';\nuse constant LMS_OFF =\u003e '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';\n\nmy $status = LMS_OFF;\n\nmy $INSTALLATION_FOLDER = '/Library/PreferencePanes/Squeezebox.prefPane/Contents/Resources';\n\nmy $items;\n\nif ( !-d $INSTALLATION_FOLDER ) {\n\t$items = STRINGS-\u003e{'NOT_FOUND'} . '|color=#ff0000';\n}\nelse {\n\tmy $port = `$INSTALLATION_FOLDER/check-web.pl`;\n\t$port *= 1;\n\t\n\tif ( $port ) {\n\t\t$items = sprintf(\n \t\t\t\"%s\\n%s| href=http://localhost:$port\\n%s| href=http://localhost:$port/settings/index.html\\n---\\n%s|bash=$INSTALLATION_FOLDER/stop-server.sh terminal=false refresh=true\", \n\t\t\tSTRINGS-\u003e{LMS_RUNNING},\n\t\t\tSTRINGS-\u003e{OPEN_WEB_CONTROL},\n\t\t\tSTRINGS-\u003e{OPEN_SETTINGS},\n\t\t\tSTRINGS-\u003e{STOP_LMS}\n\t\t);\n\t\t\t\n\t\t$status = LMS_ON;\n\t}\n\telse {\n\t\tmy $server = `$INSTALLATION_FOLDER/get-server.sh`;\n \t\t$server =~ s/\\s*//sig;\n\n\t\tif ( $server ) {\n\t\t\t$items = STRINGS-\u003e{LMS_IS_STARTING};\n\t\t}\n\t\telse {\n\t\t\t$items = sprintf(\n\t\t\t\t\"%s\\n%s|bash=$INSTALLATION_FOLDER/start-server.sh terminal=false refresh=true\", \n\t\t\t\tSTRINGS-\u003e{LMS_NOT_RUNNING}, \n\t\t\t\tSTRINGS-\u003e{START_LMS}\n\t\t\t);\n\t\t}\n\t}\n\t\t\n\t$items .= \"\\n---\\n\" . PREFPANE_LINK;\n\n\tmy $versionFile = $ENV{\"HOME\"} . '/Library/Caches/Squeezebox/updates/server.version';\n\tmy $installer = '';\n\n\topen(UPDATEFLAG, $versionFile) \u0026\u0026 do {\n\t\tlocal $_;\n\t\twhile ( \u003cUPDATEFLAG\u003e ) {\n\n\t\t\tchomp;\n\n\t\t\tif (/(?:LogitechMediaServer|Squeezebox|SqueezeCenter).*/i) {\n\t\t\t\t$installer = $_;\n\t\t\t\tlast;\n\t\t\t}\n\t\t}\n\t\t\n\t\tclose UPDATEFLAG;\n\t};\t\n\t\n\tif ($installer) {\n\t\t$items .= \"\\n\" . STRINGS-\u003e{UPDATE_AVAILABLE} . \"|color=green terminal=false bash=/usr/bin/open param1=$installer\";\n\t\tprint '⇧';\n\t}\n}\n\nprint qq(|image=$status\n---\n$items\n);\n\n\n1;"
				}
			],
			"path": "Music/check-lms.10s.pl",
			"filename": "check-lms.10s.pl",
			"dir": "Music",
			"docsPlugin": "Music/check-lms.10s.pl.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Logitech Media Server Status Display",
			"version": "v1.2.0",
			"author": "Michael Herger",
			"authors": [
				{
					"name": "Michael Herger",
					"githubUsername": "michaelherger",
					"imageURL": "https://avatars.githubusercontent.com/u/2789989?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show whether Logitech media Server is running or not. Quickly start/stop it, access its UI etc.",
			"imageURL": "http://www.herger.net/slim/BitBar/lms-bitbar.png",
			"dependencies": [
				"Logitech Media Server"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:56.83299Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/music-controls-like.10s.sh",
					"filename": "music-controls-like.10s.sh",
					"content": "#!/bin/bash\n\n# Like the current track in iTunes, Music or pianobar.\n#\n# Special thanks to Google for providing the open-source icons: https://github.com/google/material-design-icons\n# and to mcchrish and alekseysotnikov for their helpful existing BitBar scripts\n#\n# metadata\n# \u003cbitbar.title\u003eMusic Controls - Like Track Button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastián Barschkis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebbas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eLikes the current track in iTunes, Music or pianobar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://github.com/sebbas/music-controls-bitbar\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\nexport LC_CTYPE=\"UTF-8\"\n\npianobar_ctlfile=\"$HOME/.config/pianobar/ctl\"\n\nNONE=\"none\"\nCMUS=\"cmus\"\nITUNES=\"iTunes\"\nMUSIC=\"Music\"\nSPOTIFY=\"Spotify\"\nPIANOBAR=\"pianobar\"\n\nlike_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAcFJREFUWAntV00rRUEYvr4iZYFQPlY2smYntnaShYWdkj1LUn6BIksLZcVPkI2thb2kG1vcLEQhnqfOq9vcOeO8M3Nup5y3nmbO+/G8z8yZzp1bqZT2T3dgGusmCmPHUEIUwvqg4j1Bf6ii1lAC1K8DnQnWIvAFUXBB98B3As5jLBI0fraIMhEj44IfVZyqC4ug8zjUepZxixjZJcaabofoKALMcb/ZarrR8NUhiDHmqK3FqJjF8wjAb0s9eo1nfm/aAZd9IFgDnutGzgUSe4DvErDaFLxPgPkK8npmL/Z0Gg9kFchLhPCyR+bDP4Dk6xxFkZs9VMZDyW+KrCjWSE6vA0/1bcAJEEvMUcKJIcx2UR4qaidMQmP1KlxfHsI+UbPSSBfH8+ghiDW52CRYfV/bRFZFmrvLTFZSS17m2sIJsiwm1XWHiO8ru01l9QwMO8RUEZtPwHma6OA/AOD+tWXMzEa8YmwDvOCLcb4FvAFm/pIkxRgPjAZneB51EI8hdmrU7Dny1SH5ob1B5Zyimrms4W5dKeqcqT2I1oAN4K9LmY2oA85N4AXosiVofUMoGNQWWfLJob5yWHhKV7kDzh34ASdLIkzm2nPzAAAAAElFTkSuQmCC\"\nlike_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAeVJREFUWAntlj9LA0EQxXNRUQIWJkbBP1UasY6daGsnYmFhJ4ilEEtF8BNYWFsIVvoRgo2thb2VaGsMFqKgEn+jWTj3cre7d5cQ8AYeu7cz8+bdZHO7uVxm/7EDrVZrQdA3746YM0FfCEJIEby3UUoqKp+UgPwdMNzGdgp88SnoSh48AGUyT+Ml44mi+JpS4htX47GlkIWIK58QNa2nQO1OQfWKUtBhrLgz/mYk+b1rEUV3I3zpu+hIAbx26IxaEl8hTmXPnwTJEs/ToKhhTHuW780giLIPnE3w7BtlrqB8j57nXbMeNARVQQP0yqRWNajEt0KAbNb7HiiSGnabn8AyuO2iKOEu+/pgnpIgG7feBVHCGWvD50gcAOcpijoVTnM7DBGQHKUg6tBQxs2NoC3wFUPYJzmbttX+fIdMSRA/EeN652nwnRk3cSu/9dGBmPkYYqROidw5VdA0WguCaNFEFuG3zs0ERXTR3sUemAJhJkfAShtRR47rnyFcIMU2OqiRK8YBkAv+j8kc7IM3oNu6iks8wnyisV/yPBNGjG8WXGg5x2HxzusQq4P2jvmyLYHEAskRu7HNi4yDaBQ0QQ2YLmUBLnKGwB54ASOBANcFSCbBhGueHi8cwO3KoZNkz1kHLDrwDQpoMjh/irN5AAAAAElFTkSuQmCC\"\n\n# Trigger like track in music application\nif [[ \"$1\" = 'itunes_like' ]]; then\n  osascript -e 'tell application \"iTunes\"' -e 'if loved of current track is true then' -e 'set loved of current track to false' -e 'else' -e 'set loved of current track to true' -e 'end if' -e 'end tell'\n  exit\nfi\nif [[ \"$1\" = 'music_like' ]]; then\n  osascript -e 'tell application \"Music\"' -e 'if loved of current track is true then' -e 'set loved of current track to false' -e 'else' -e 'set loved of current track to true' -e 'end if' -e 'end tell'\n  exit\nfi\nif [[ \"$1\" = 'pianobar_like' ]]; then\n  echo -ne \"\\n+\" \u003e \"$pianobar_ctlfile\"\n  exit\nfi\n\n# Ensure that pianobar fifo config file exists\nif [ ! -e \"$pianobar_ctlfile\" ]; then\n  mkfifo \"$pianobar_ctlfile\"\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\ncurrent_source=\"$NONE\"\n\n# Get pid of music apps to see if they are currently running\ncmus_pid=$(pgrep -x \"$CMUS\")\nitunes_pid=$(pgrep -x \"$ITUNES\")\nmusic_pid=$(pgrep -x \"$MUSIC\")\nspotify_pid=$(pgrep -x \"$SPOTIFY\")\npianobar_pid=$(pgrep -x \"$PIANOBAR\")\n\n# Keep track of music source\n# Reorder items in for-loop to your liking to change order of precendece\n# (i.e. if available, left-most audio source will be used first)\nfor s in \"$CMUS\" \"$ITUNES\" \"$MUSIC\" \"$SPOTIFY\" \"$PIANOBAR\"; do\n  if [[ $s = \"$CMUS\" \u0026\u0026 $cmus_pid ]]; then\n    # cmus does not support likes\n    exit\n  elif [[ $s = \"$ITUNES\" \u0026\u0026 $itunes_pid ]]; then\n    current_source=\"$ITUNES\"\n    break\n  elif [[ $s = \"$MUSIC\" \u0026\u0026 $music_pid ]]; then\n    current_source=\"$MUSIC\"\n    break\n  elif [[ $s = \"$SPOTIFY\" \u0026\u0026 $spotify_pid ]]; then\n    # spotify (applescript) api does not support likes\n    exit\n  elif [[ $s = \"$PIANOBAR\" \u0026\u0026 $pianobar_pid ]]; then\n    current_source=\"$PIANOBAR\"\n    break\n  fi\ndone\n\n# Do not display menu icon if no audio source is active\nif [[ $current_source = \"$NONE\" ]]; then\n  exit\nfi\n\n# Set like track icon based on dark mode setup\nif [[ \"$BitBarDarkMode\" ]]; then\n  icon=$like_icon_dark\nelse\n  icon=$like_icon_light\nfi\n\n# Trigger like track in correct music app\nif [[ $current_source = \"$ITUNES\" ]]; then\n  echo \" | image=$icon bash='$0' param1='itunes_like' terminal=false refresh=false\"\nelif [[ $current_source = \"$MUSIC\" ]]; then\n  echo \" | image=$icon bash='$0' param1='music_like' terminal=false refresh=false\"\nelif [[ $current_source = \"$PIANOBAR\" ]]; then\n  echo \" | image=$icon bash='$0' param1='pianobar_like' terminal=false refresh=false\"\nfi\n"
				}
			],
			"path": "Music/music-controls-like.10s.sh",
			"filename": "music-controls-like.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/music-controls-like.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Controls - Like Track Button",
			"version": "v1.0",
			"author": "Sebastián Barschkis",
			"authors": [
				{
					"name": "Sebastián Barschkis",
					"githubUsername": "sebbas",
					"imageURL": "https://avatars.githubusercontent.com/u/1890600?v=4",
					"bio": "Physics Developer @blender",
					"primary": true
				}
			],
			"desc": "Likes the current track in iTunes, Music or pianobar.",
			"imageURL": "https://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png",
			"dependencies": null,
			"aboutURL": "http://github.com/sebbas/music-controls-bitbar",
			"lastUpdated": "2021-03-08T15:21:57.230615Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/music-controls-info.10s.sh",
					"filename": "music-controls-info.10s.sh",
					"content": "#!/bin/bash\n\n# Shows infos on artist, album, track and more in cmus or pianobar.\n#\n# Special thanks to Google for providing the open-source icons: https://github.com/google/material-design-icons\n# and to mcchrish and alekseysotnikov for their helpful existing BitBar scripts\n#\n# metadata\n# \u003cbitbar.title\u003eMusic Controls - Next Track Button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastián Barschkis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebbas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePlays the next track in cmus, iTunes, Music, Spotify or pianobar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eperl\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://github.com/sebbas/music-controls-bitbar\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\nexport LC_CTYPE=\"UTF-8\"\n\npianobar_ctlfile=\"$HOME/.config/pianobar/ctl\"\npianobar_stationsfile=\"$HOME/.config/pianobar/stations\"\npianobar_playingfile=\"$HOME/.config/pianobar/playing\"\ncmus_cachefile=\"$HOME/.config/cmus/cache\"\n\ndisplay_length=40\n\n# Enables features that are still under development\nEXPERIMENTAL_MODE=0\n\nNONE=\"none\"\nCMUS=\"cmus\"\nITUNES=\"iTunes\"\nMUSIC=\"Music\"\nSPOTIFY=\"Spotify\"\nPIANOBAR=\"pianobar\"\n\nlist_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAONJREFUaAXtlkEKAjEMRUdBvEZv48o7eSddeBrnGC41XRQkpFBsMzT6CqE07fxJXsNkloUBAQhAAAIQgAAE/pfAriH1V8OZniMtMVT199WdIBskEOSiCBMCP0ug5RtMH/C8fvqAJ120IQCBMQRyH+gxHcVNHEk7Pdc9wVtNMPueYhexo5j78EigaK4S/ck7g/Kyb2cdn6VzlUNJH5x1bSWQfZuWVQ+cWgLFv4p4c1nN+i906CHk/WwhrefQJXQXasmb3Cj9T/IPET2PEt5KJycQplwsKKHKxUoAHwQgAAEIzEPgDVrLdHaFYNcHAAAAAElFTkSuQmCC\"\nlist_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAO5JREFUaAXtlsENwjAMRVskxBrZhhM7sRMcmIaOwbH8SOnlKyWA4ypRv6UotRM79qvVdBgkIiACIiACIiACIrBfAmOp9BlS2mNZHyEW/4PFuQVfFdDCW1AOIrBnAsVvsO4B5/bQPeAMWOFFQASsBOI9YBE+H7HuGIHtbrol+ejLiaV4L8xXjBOvV9fTgX9PnBAFmqCfeU9VnQ78WeVkVgLcYA+8t0l9pYBo3q6tLGQ+FLAsTXj4uq1a/Rc6WiC5+i6YM3PXLfRAQcGVXK3gRP4J/VIr9iZxUgF9tEuOCArop11yBcgmAiIgAiLQFIE3waT5BVt6JEkAAAAASUVORK5CYII=\"\n\nnote_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAJNJREFUSA1jYBgFBEKAkYA8Nun/2ASBYljNYsKhmGrCQ98CFgrCAmuYo5s39INo1AfocYrBJxREEkAdm4H4DRCDcvBxIKYaEAWa9AyIQQZjwxRbtACHwTDLKLbgNTUswBcHv/A4ERR0RAF8FuzGY8IePHJES4kBVWKLZJAYKAFQBUgCTdkKxG+heBOQBomNAuqFAACH8ifJWZDB1wAAAABJRU5ErkJggg==\"\nnote_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAALFJREFUSA1jYBgFBEKAkYA8hvR/IMAQBAowAgE2cSZsgtQUG/oWsJAbHLjCHN28oR9Eoz5Aj1MMPt4gAmZaCSDeDMRvgBgEjmOYQK4A0DBRIH4GMhUbINdcuD6goQuwGQwTgyskwMBaQIH0AA16DaREcOmnRkb7hctwoPgzPHIoUvgieTeKSlTOHlQuGTxgEIkBMbZIBomJkmEkphagQZJAvBWI30LxJpAYpspREQpCAACt5Y+AqibnJQAAAABJRU5ErkJggg==\"\n\nperson_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAANFJREFUSA1jYBgFQyUEJIAO3QzEb6AYxAaJUQWIAk15BsT/0fBzIF8QiCkGC4AmoBsO4y+k2HSgAa/xWACSwwuY8MpCJH/hUYNPDqyNGAt247FgDx45oqXEgCqxRTJIDJQAqAIkgaZsBeK3ULwJSIPERgBgJOBHQ6B8KBCbATGILQTEIPAOiM8D8SkgXg1lAynigT1QKcgAWIYiRIPUOgAxUSAcqOoPEBMyFF0epAeklyB4ClSBrplYPkgvCsAWByDDKAEoZhKTkymxbFTvIAgBAOvwVavvg1ziAAAAAElFTkSuQmCC\"\nperson_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAOBJREFUSA3tk0EOwUAUhjtuQFIpTmFjyyWk12NtR6w4gU1PoRbFAUQyvpEuxmhmXqMLpC/5ktd5//x/+0QUtfUTG9BaJ7CBc4npk0ZeHqMYcnDrxEH34xBMFq6z9bxsIqCwDN22CAV0QgLmN4/GN3tekwTsPAF7z0w2Yid9qPqRzVkscwmoMBrAFi4la3MWuPYnY+X7DtYwZj6HCZi+B6aukMEBVkop08sL4ylkIC2jnYkSEKZwlzpbOnMndUPeVoToiGjoCoXPOesa2dqqAG0L6vYEvHhK/sl1M1r9l23gARRQLiEZXQo0AAAAAElFTkSuQmCC\"\n\nalbum_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAW1JREFUSA3Vlc0uBUEQhYdIxDu4icWNBQsPwRWxsmLjSRCPI5ZWVvcF7PxGsBmJJWuRCL5Dd+vbXWN6sOAkJ1VTdaqqZ7pnpqr+O8ZabmCS/BpchQuwD5/hLTyGh/AAPsHOWKGihq8tlEbaTthG3dY4zr+gV00RujaPB7UOGbAErSYu6uKrVj0C4k2eInoNp0N21BlyeeFC89il0XS4usObhY8h4pxNrLXaB+KLqdjF7htq1CvDPhFrwHqm/AxsNNSoV4YrIumA00yVB6RJ69TrHePewVrP/ijKyz2Hfh98KtUoHnpNeBVWJyCFVhajRCO9pausR3QWd2/wpWl8RHHNniFU4VebrFzaXNfqleE7x1RH2BoQjmn8ounLeQN72eiPwBBz6XJzWOvdUFovWh+aX9hf/1RoYootAtZtl8RUW4QdVCUNvUbHcreocyRaxq+hb9JkpZHWRLzJliD9Zc44UY09gT/6Zbpef9y8Aedy0zAzcRrpAAAAAElFTkSuQmCC\"\nalbum_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAYRJREFUSA3VlbFKA0EQhu9EEN/BgEWw0IAPoQnBykqbPEkUnyelVaq8gIUQE0WizQmWWosgOb/B3ctmd25zOSx04WdmZ/5/Zvf2bi9J/vtIYxvI83yL/Ck4AYegCb7ACxiDIbhO0/QTu96geBdkYNUQTnet6gguVlX18nPRVGpSo7jbK94EZhvIauoO0bbdnRSHTGKbxBPYcQmOP8J/MPMD7LGTc91XJnsc/IcbTGjQK1n2O/GjJTITiYG3Ek3P54tgUEI+C8gmAP+8RDMINBBnCnkSEL0Amomim1nahnWw2rO/cfKyy3tgz8GmljgmWNTatCzs3PGtm1vH2CocoYY8VqY9oqnXIJiimwJ/qI/oNlAnSQtl7JAl11J0YS0K1XlN5RXWRvGauh+a3JzPoKGsSEIj8Ghy+9jg2zA5+dCa6g3LUn79qjBNF4YmfW3PFWP9RaWIR7HLigUtTS65q0jJMIWgAzJbIWKF0wkr/ESKQ9YICP1f5q7hZdg7UP+XaQr9ffMNJgYZyQXHjjUAAAAASUVORK5CYII=\"\n\nstation_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAARxJREFUSA1jYBikgA/orlwgvgrEItR0oy7QsBlA/AWI/0NxDJCmCLABdUcC8WEghhn6FsjuB2J1ICYbyAJ1tgDxayAGGfwPiPcCMcgykKVkAUagLlcg3gDEf4EYZPBzIG4HYnkgpgjYA3XfAmKQoZTga0D9/kCMAR4CRSgxGFnvYwzTkQzHJkeKGMwisB4mUnSSo5YaFqC4GN0R1LAA3UwUPihZwgDIJdQEYLNp7gNcFtQDvSIJxU3U8hYssiqxGFgBFIPJE0tjGAPTKIEhw8AAEoPJE0uDjcEWRMgRD7MLmxhMDi+NzYIkLDoSsYiRLITs9WagbmkoBrGR5YhlYzjgCZkGYbPwEYbpQAFQEXudCpaAzMBaXAPFhyAAABRSlmFQeETmAAAAAElFTkSuQmCC\"\nstation_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAATBJREFUSA3NlL9qAkEQh28tLFNZKGJSWvkMVtapAzbaBvukCiQBy7R5jLyAVZ7BIHaiYBHSpU0u38rNsQ4reDsGHPjY+XPzm91b7rLsHC3P8wuYwBwaJ9sjYj14hW8QG5oGoFKHG3gXRdYveIFusjjNHXiGT/D2CzPww+pJwjQ6GMAb/IC3LUzhKklUmhDowxKs9oHAteg6cUiu8C8lNq4b51xnT0O2vZdMCLROLUGjUot5gN6xnm4eoAV1HF5yrouWmEveaf/7CQ4NeGD3rYJHy0nKXrks1vsyWTjk7oL6Ua7WyIKupi5Sawb1o1zRiL2i8uLlIdZYLigfdmMDxpHHR5FctZQ69xNxu8D7lU2ml0dHYUOyLQXjuuYz2P04w1d0i+jCKOzbvcbkBDpnIvEHdSy7CinTWbUAAAAASUVORK5CYII=\"\n\nstar_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAATJJREFUSA3tlMFKQkEUhq0WkUIhbaSNhLsWbsKde6GXEAIfwbVPkDsTV7XMB+kJIiFcFQiStYxyIfb9cEcmY65nJFd24GOOc/45Z2bOeDOZbbMKBxYbs1sy32wq+zGJvxIOrUV2rUJ0l7Cf0IhYZ5LuoHqBecIzo+b+zC7I5JK7sWbJvhcQaXdHcAIlaMEp+FbgxwAOQEWnkGpNok8wgRm4nVpHrXmDISjXL1PDr8CaMKRrkyO1P3oh657A/LrUwM+I03ygNTUd3cLO8dSP0FW4+TGa8mJVpNM3FLiLzPlDPjIUkGYt07t317BqLIYqpH2LqkuL9LL0jIV835a1fizo94i4nd/jn3lK+Zpz8a4XM7uPKF+hHlihP5Ni7/AQ0ASns0Q6YPnu59FdQw7+Lf4GvgGCKIb8c6+V/AAAAABJRU5ErkJggg==\"\nstar_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAT9JREFUSA3tlLFqQjEUho0UCgqFtg8gXR1cpFt3oS8hCD6B+hi6WXHSUR/EJygdxKkFQVqtOIhd5PqlTeRqc825Fqd64CPJyf+f5CaXJBL/KoIguNec7KMp3oXOSRag8C18Ga6kiySlQnQluDSUY/j8Unat4A1svNJRfqdQQbFHWznUFiT2C5fI7E6f842h4tBV0U3Jz+ETFkqpwKH7SSGuwRA+YA1xQ3umMILar4VIJqEOf40GBaLvh8kyHPsFsr+LBQqwAmksEYoufXt0GPKg78MXEwS5rTFOB2PfV535XpyaO1rMY8EC4x2TdEDhO0FxK8lE1T30Fj3smdaM6wbdD8e+Njzn7rO1tt0e7QCyVqn7JkfzHS07J26xvcA7FF0m8voBLMIMnl2ayByGFDTB++6juYYnSEcWPE8cOoENzGJkOFk6QRwAAAAASUVORK5CYII=\"\n\n# Trigger next action in library section (e.g. play track in cmus)\nif [[ \"$1\" = 'cmus_song' ]]; then\n  f=$(echo -e \"player-play $2\")\n  cmus-remote -C \"$f\"\n  exit\nfi\nif [[ \"$1\" = 'itunes_next' ]]; then\n  osascript -e 'tell application \"iTunes\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'music_next' ]]; then\n  osascript -e 'tell application \"Music\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'spotify_next' ]]; then\n  osascript -e 'tell application \"Spotify\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'pianobar_station' ]]; then\n  echo -ne \"\\ns$2\\n\" \u003e \"$pianobar_ctlfile\"\n  exit\nfi\n\n# Ensure that pianobar fifo config file exists\nif [ ! -e \"$pianobar_ctlfile\" ]; then\n  mkfifo \"$pianobar_ctlfile\"\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\ncurrent_source=\"$NONE\"\n\n# Get pid of music apps to see if they are currently running\ncmus_pid=$(pgrep -x \"$CMUS\")\nitunes_pid=$(pgrep -x \"$ITUNES\")\nmusic_pid=$(pgrep -x \"$MUSIC\")\nspotify_pid=$(pgrep -x \"$SPOTIFY\")\npianobar_pid=$(pgrep -x \"$PIANOBAR\")\n\n# Keep track of music source\n# Reorder items in for -loop to your liking to change order of precendece\n# (i.e. if available, left-most audio source will be used first)\nfor s in \"$CMUS\" \"$ITUNES\" \"$MUSIC\" \"$SPOTIFY\" \"$PIANOBAR\"; do\n  if [[ $s = \"$CMUS\" \u0026\u0026 $cmus_pid ]]; then\n    current_source=\"$CMUS\"\n    break\n  elif [[ $s = \"$ITUNES\" \u0026\u0026 $itunes_pid ]]; then\n    current_source=\"$ITUNES\"\n    break\n  elif [[ $s = \"$MUSIC\" \u0026\u0026 $music_pid ]]; then\n    current_source=\"$MUSIC\"\n    break\n  elif [[ $s = \"$SPOTIFY\" \u0026\u0026 $spotify_pid ]]; then\n    current_source=\"$SPOTIFY\"\n    break\n  elif [[ $s = \"$PIANOBAR\" \u0026\u0026 $pianobar_pid ]]; then\n    current_source=\"$PIANOBAR\"\n    break\n  fi\ndone\n\n# Do not display menu icon if no audio source is active\nif [[ $current_source = \"$NONE\" ]]; then\n  exit\nfi\n\nfunction playing_info\n{\n  if [[ $current_source = \"$CMUS\" ]]; then\n    track=$(cmus-remote -C \"format_print %{title}\")\n    artist=$(cmus-remote -C \"format_print %{artist}\")\n    album=$(cmus-remote -C \"format_print %{album}\")\n  elif [[ $current_source = \"$ITUNES\" ]]; then\n    track=$(osascript -e 'try' -e 'tell application \"iTunes\" to name of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n    artist=$(osascript -e 'try' -e 'tell application \"iTunes\" to artist of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n    album=$(osascript -e 'try' -e 'tell application \"iTunes\" to album of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n  elif [[ $current_source = \"$MUSIC\" ]]; then\n    track=$(osascript -e 'try' -e 'tell application \"Music\" to name of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n    artist=$(osascript -e 'try' -e 'tell application \"Music\" to artist of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n    album=$(osascript -e 'try' -e 'tell application \"Music\" to album of current track as string' -e 'on error errText' -e '\"\"' -e 'end try');\n  elif [[ $current_source = \"$PIANOBAR\" ]]; then\n    # First check if 'playing' file exists\n    if [ -f \"$pianobar_playingfile\" ]; then\n      IFS=$'\\n' read -d '' -r -a lines \u003c \"$pianobar_playingfile\"\n      artist=\"${lines[0]}\"\n      track=\"${lines[1]}\"\n      album=\"${lines[2]}\"\n      station=\"${lines[3]}\"\n      rating=\"${lines[4]}\"\n    fi\n  fi\n\n  if [[ $track = \"\" || $artist = \"\" || $album = \"\" ]]; then\n    echo \"Nothing playing in $current_source\"\n    return 1\n  else\n    echo \"Now playing in $current_source\"\n  fi\n\n  # Get icon for current track, artist, album based on dark / light mode\n  if [[ \"$BitBarDarkMode\" ]]; then\n    track_icon=$note_icon_dark\n    artist_icon=$person_icon_dark\n    album_icon=$album_icon_dark\n    station_icon=$station_icon_dark\n    star_icon=$star_icon_dark\n  else\n    track_icon=$note_icon_light\n    artist_icon=$person_icon_light\n    album_icon=$album_icon_light\n    station_icon=$station_icon_light\n    star_icon=$star_icon_light\n  fi\n\n  echo \"$track | image=$track_icon length=$display_length\"\n  echo \"$artist | image=$artist_icon length=$display_length\"\n  echo \"$album | image=$album_icon length=$display_length\"\n\n  if [[ $current_source = \"$PIANOBAR\" ]]; then\n    echo \"$station | image=$station_icon\"\n\n    # Experimental mode: TODO (sebbas): Cover art\n    cover_url=\"${lines[5]}\"\n    if [[ $EXPERIMENTAL_MODE = 1 \u0026\u0026 $cover_url != \"\" ]]; then\n      echo \"---\"\n      cover_url=\"${lines[5]}\"\n      highres_pattern=\"500W_500H\"\n      lowres_pattern=\"130W_130H\"\n      thumb_url=${cover_url/$highres_pattern/$lowres_pattern}\n      base64=$(curl -s \"$thumb_url\" | openssl base64 | tr -d '\\n')\n      echo \" | image=$base64 length=$display_length trim=false\"\n    fi\n\n    if [[ \"$rating\" = 1 ]]; then\n      echo \"Favorite Pandora song | image=$star_icon length=$display_length\"\n    fi\n  fi\n  return 0\n}\n\nfunction library_info\n{\n  if [[ $current_source = \"$CMUS\" ]]; then\n    echo \"My cmus library\"\n\n    exif=$(xxd -p \"$cmus_cachefile\" | tr -d '\\n' | awk '{print $1\"0\"}' | perl -ne '$_.=\"0000\";@exif=$_=~/(?\u003c=f{112})(.*?)(?=0000)/g;print join\"\\n\",@exif' | awk '{print \"0066696c6500\"$1}')\n\n    # Experimental mode: TODO (sebbas): Album tag\n    if [[ $EXPERIMENTAL_MODE = 1 ]]; then\n      data=$(echo \"$exif\" | perl -ne '$_=~s/\\n/00\\n/g;@a=$_=~/(?\u003c=0066696c6500)(.*?)(?=00)|(?\u003c=0061727469737400)(.*?)(?=00)|(?\u003c=00616c62756d00)(.*?)(?=00)|(?\u003c=007469746c6500)(.*?)(?=00)/g; print \"@a\\n\"; ')\n      sorted=$(echo \"$data\" | sort -f -k 2)\n      echo -e \"$sorted\" | perl -ne '$display_length=40; @a=split(/\\s+/,$_); $a[0]=~s/\\G..\\K(?=.)/\\\\x/sg; $file=\"\\\\x\".$a[0]; $artist=$a[1]; $album=$a[2]; $track=$a[3]; $file.=\"0\" if(length($file) % 2 == 1); $artist.=\"0\" if(length($artist) % 2 == 1); $album.=\"0\" if(length($album) % 2 == 1); $track.=\"0\" if(length($track) % 2 == 1); use Encode; binmode STDOUT, \":utf8\"; $artist=Encode::decode(\"UTF-8\", pack(q{H*}, $artist)); $album=Encode::decode(\"UTF-8\", pack(q{H*}, $album)); $track=Encode::decode(\"UTF-8\", pack(q{H*}, $track)); next if ($file eq \"\" || $artist eq \"\" || $album eq \"\" || $track eq \"\"); print \"$artist | length=$display_length\\n\" if(\"$old_artist\" ne \"$artist\"); print \"--$album\\n\" if (\"$old_album\" ne \"$album\"); print \"--$track | bash='\"'$0'\"' param1=\\\"cmus_song\\\" param2=\\\"$file\\\" terminal=false refresh=false length=$display_length\\n\"; $old_artist=$artist; $old_album=$album;'\n\n    else\n      data=$(echo \"$exif\" | perl -ne '$_=~s/\\n/00\\n/g;@a=$_=~/(?\u003c=0066696c6500)(.*?)(?=00)|(?\u003c=0061727469737400)(.*?)(?=00)|(?\u003c=007469746c6500)(.*?)(?=00)/g; print \"@a\\n\"; ')\n      sorted=$(echo \"$data\" | sort -f -k 2)\n      echo -e \"$sorted\" | perl -ne '$display_length=30; @a=split(/\\s+/,$_); $a[0]=~s/\\G..\\K(?=.)/\\\\x/sg; $file=\"\\\\x\".$a[0]; $artist=$a[1]; $track=$a[2]; $file.=\"0\" if(length($file) % 2 == 1); $artist.=\"0\" if(length($artist) % 2 == 1); $track.=\"0\" if(length($track) % 2 == 1); use Encode; binmode STDOUT, \":utf8\"; $artist=Encode::decode(\"UTF-8\", pack(q{H*}, $artist)); $track=Encode::decode(\"UTF-8\", pack(q{H*}, $track)); next if ($file eq \"\" || $artist eq \"\" || $track eq \"\"); print \"$artist | length=$display_length\\n\" if(\"$oa\" ne \"$artist\"); print \"--$track | bash='\"'$0'\"' param1=\\\"cmus_song\\\" param2=\\\"$file\\\" terminal=false refresh=false length=$display_length\\n\"; $oa=$artist;'\n    fi\n\n  elif [[ $current_source = \"$PIANOBAR\" ]]; then\n    echo \"My Pandora stations\"\n    while read -r line; do\n\n      # Split station number and name from each other, closing bracket is delimiter\n      # shellcheck disable=SC2001\n      station_num=\"$(sed 's/).*//' \u003c\u003c\u003c \"$line\")\"\n      # shellcheck disable=SC2001\n      station_name=\"$(sed 's/^[^)]*)//' \u003c\u003c\u003c \"$line\")\"\n\n      # Remove leading and trailing white space\n      station_num=$(echo \"$station_num\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\n      station_name=$(echo \"$station_name\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\n\n      # Checked items are still beta, leaving this in anyways\n      if [[ \"$station_name\" = \"$station\" ]]; then\n        echo -e \"$station_name | bash='$0' param1='pianobar_station' param2='$station_num' terminal=false refresh=false checked=true length=$display_length\"\n      else\n        echo -e \"$station_name | bash='$0' param1='pianobar_station' param2='$station_num' terminal=false refresh=false length=$display_length\"\n      fi\n    done \u003c \"$pianobar_stationsfile\"\n  fi\n}\n\n# Set menu icon based on dark mode setup and display info sections\nif [[ \"$BitBarDarkMode\" ]]; then\n  echo \"| image=$list_icon_dark\"\n  echo \"---\"\nelse\n  echo \"| image=$list_icon_light\"\n  echo \"---\"\nfi\n\nif playing_info; then\n  echo \"---\"\n  library_info\nfi\n"
				}
			],
			"path": "Music/music-controls-info.10s.sh",
			"filename": "music-controls-info.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/music-controls-info.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Controls - Next Track Button",
			"version": "v1.0",
			"author": "Sebastián Barschkis",
			"authors": [
				{
					"name": "Sebastián Barschkis",
					"githubUsername": "sebbas",
					"imageURL": "https://avatars.githubusercontent.com/u/1890600?v=4",
					"bio": "Physics Developer @blender",
					"primary": true
				}
			],
			"desc": "Plays the next track in cmus, iTunes, Music, Spotify or pianobar.",
			"imageURL": "https://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png",
			"dependencies": [
				"perl"
			],
			"aboutURL": "http://github.com/sebbas/music-controls-bitbar",
			"lastUpdated": "2021-03-08T15:21:57.203372Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/music-controls-next.10s.sh",
					"filename": "music-controls-next.10s.sh",
					"content": "#!/bin/bash\n\n# Plays the next track in cmus, iTunes, Music, Spotify or pianobar.\n#\n# Special thanks to Google for providing the open-source icons: https://github.com/google/material-design-icons\n# and to mcchrish and alekseysotnikov for their helpful existing BitBar scripts\n#\n# metadata\n# \u003cbitbar.title\u003eMusic Controls - Next Track Button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastián Barschkis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebbas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePlays the next track in cmus, iTunes, Music, Spotify or pianobar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://github.com/sebbas/music-controls-bitbar\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\nexport LC_CTYPE=\"UTF-8\"\n\npianobar_ctlfile=\"$HOME/.config/pianobar/ctl\"\n\nNONE=\"none\"\nCMUS=\"cmus\"\nITUNES=\"iTunes\"\nMUSIC=\"Music\"\nSPOTIFY=\"Spotify\"\nPIANOBAR=\"pianobar\"\n\nnext_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAXtJREFUaAXtWDtOA0EMjRAgKppIaVKnpKDNCahzC25AbsAJOEOa1JyAloIydSpEkyZFJBSekSyNrMx6Bu8qjPRGGs069vOzn/PZzWjERQWoABWgAlSAClABKlCjwArBtzUAJ/YIf7qd8LhbyLbY83iq3wxp8XI9+FLCbzA9Y18GGTWfnsF0PlyJ9HwHZObDshGaR89sYF8OJUrPPZI//pEgzSPXgy9LmNqvYB9XVpDiz96AFPCJ/VDRxL9rQAt6QRM3BY1ovJ4FkFiIEpWcG1DdOXQ2jxMed1tCzz6A8gn7IkNt8Zmw/l62hKX2G0qYnijD4k+E9PuSJayxdyhlYcqxeOPuNnNj7UbFvNcxeBxtFSu1m30LyYd4iZ2bthUgLrGTwRJ22fI1el+ZzwmPu7sKTn3N/pB9QaNmbyXkZm5SOeR0anI9+LKEYjd9O/2BBpp8oNFHyqvgzO1Eg+l8uBA2/VC/RgNN/63iz4gRVIAKUAEqQAWoABVoQ4Efj0sWuAZStX4AAAAASUVORK5CYII=\"\nnext_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAYVJREFUaAXtWDFOAzEQPCGCUtEgpaGmpEjLC6j5BT+AH+QFvIGGmhfQUlBSUyGaNCmQ0DEX2ZIzOnnXXoNkaSNZ9mZnduzZXHKXYfCXO+AOuAPugDvgDrgD7oDagXEcHzFO1QQBiFoHLwFuTwe1D8xX9mrDcLB7BC1qZmskgj9YbzCOswQhmdTbLwW4Pc2CiF8xLmorc73aOmoeC4Z4h/lWXSQBcr0k9TdLFqT4GfFZiTLx//UaYO0Yf2JxrT1EJMVZy6vGRSHF/ADMUhLiOhLenGdBIX5H/jInyvwctkmOBRXxNzB3GEdzG2D+HKbpeyxYEL8Ae86bYT7nm8csWBhvgb9JN8X8NKdZz7ZVQzRgTgxcO5UdK4i7/QhNF/E9xmy32QC7xUIFFhTi6Wt0nSvJ/By2SY4FM3G3P2RfOFS3txLTzdyqpNXcwRJuFZYFQ9z17fQbDtHlA018pFxUtTKQuKOWWipuEOz6of4Jh+j3bxVVmxzkDrgD7oA74A64A+5AHw78AkOdplKAcgGEAAAAAElFTkSuQmCC\"\n\n# Trigger next track in music application\nif [[ \"$1\" = 'cmus_next' ]]; then\n  cmus-remote --next\n  exit\nfi\nif [[ \"$1\" = 'itunes_next' ]]; then\n  osascript -e 'tell application \"iTunes\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'music_next' ]]; then\n  osascript -e 'tell application \"Music\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'spotify_next' ]]; then\n  osascript -e 'tell application \"Spotify\" to next track'\n  exit\nfi\nif [[ \"$1\" = 'pianobar_next' ]]; then\n  echo -ne \"\\nn\" \u003e \"$pianobar_ctlfile\"\n  exit\nfi\n\n# Ensure that pianobar fifo config file exists\nif [ ! -e \"$pianobar_ctlfile\" ]; then\n  mkfifo \"$pianobar_ctlfile\"\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\ncurrent_source=\"$NONE\"\n\n# Get pid of music apps to see if they are currently running\ncmus_pid=$(pgrep -x \"$CMUS\")\nitunes_pid=$(pgrep -x \"$ITUNES\")\nmusic_pid=$(pgrep -x \"$MUSIC\")\nspotify_pid=$(pgrep -x \"$SPOTIFY\")\npianobar_pid=$(pgrep -x \"$PIANOBAR\")\n\n# Keep track of music source\n# Reorder items in for-loop to your liking to change order of precendece\n# (i.e. if available, left-most audio source will be used first)\nfor s in \"$CMUS\" \"$ITUNES\" \"$MUSIC\" \"$SPOTIFY\" \"$PIANOBAR\"; do\n  if [[ $s = \"$CMUS\" \u0026\u0026 $cmus_pid ]]; then\n    current_source=\"$CMUS\"\n    break\n  elif [[ $s = \"$ITUNES\" \u0026\u0026 $itunes_pid ]]; then\n    current_source=\"$ITUNES\"\n    break\n  elif [[ $s = \"$MUSIC\" \u0026\u0026 $music_pid ]]; then\n    current_source=\"$MUSIC\"\n    break\n  elif [[ $s = \"$SPOTIFY\" \u0026\u0026 $spotify_pid ]]; then\n    current_source=\"$SPOTIFY\"\n    break\n  elif [[ $s = \"$PIANOBAR\" \u0026\u0026 $pianobar_pid ]]; then\n    current_source=\"$PIANOBAR\"\n    break\n  fi\ndone\n\n# Do not display menu icon if no audio source is active\nif [[ $current_source = \"$NONE\" ]]; then\n  exit\nfi\n\n# Set next track icon based on dark mode setup\nif [[ \"$BitBarDarkMode\" ]]; then\n  icon=$next_icon_dark\nelse\n  icon=$next_icon_light\nfi\n\n# Trigger next track in correct music app\nif [[ $current_source = \"$CMUS\" ]]; then\n  echo \" | image=$icon bash='$0' param1='cmus_next' terminal=false refresh=false\"\nelif [[ $current_source = \"$ITUNES\" ]]; then\n  echo \" | image=$icon bash='$0' param1='itunes_next' terminal=false refresh=false\"\nelif [[ $current_source = \"$MUSIC\" ]]; then\n  echo \" | image=$icon bash='$0' param1='music_next' terminal=false refresh=false\"\nelif [[ $current_source = \"$SPOTIFY\" ]]; then\n  echo \" | image=$icon bash='$0' param1='spotify_next' terminal=false refresh=false\"\nelif [[ $current_source = \"$PIANOBAR\" ]]; then\n  echo \" | image=$icon bash='$0' param1='pianobar_next' terminal=false refresh=false\"\nfi\n"
				}
			],
			"path": "Music/music-controls-next.10s.sh",
			"filename": "music-controls-next.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/music-controls-next.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Controls - Next Track Button",
			"version": "v1.0",
			"author": "Sebastián Barschkis",
			"authors": [
				{
					"name": "Sebastián Barschkis",
					"githubUsername": "sebbas",
					"imageURL": "https://avatars.githubusercontent.com/u/1890600?v=4",
					"bio": "Physics Developer @blender",
					"primary": true
				}
			],
			"desc": "Plays the next track in cmus, iTunes, Music, Spotify or pianobar.",
			"imageURL": "https://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png",
			"dependencies": null,
			"aboutURL": "http://github.com/sebbas/music-controls-bitbar",
			"lastUpdated": "2021-03-08T15:21:57.348401Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/music-controls-playpause.10s.sh",
					"filename": "music-controls-playpause.10s.sh",
					"content": "#!/bin/bash\n\n# Plays / pauses the current track in cmus, iTunes, Music, Spotify or pianobar.\n#\n# Special thanks to Google for providing the open-source icons: https://github.com/google/material-design-icons\n# and to mcchrish and alekseysotnikov for their helpful existing BitBar scripts\n#\n# metadata\n# \u003cbitbar.title\u003eMusic Controls - Play / Pause Button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastián Barschkis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebbas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePlays / pauses the current track in cmus, iTunes, Music, Spotify or pianobar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://github.com/sebbas/music-controls-bitbar\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\nexport LC_CTYPE=\"UTF-8\"\n\npianobar_ctlfile=\"$HOME/.config/pianobar/ctl\"\n\nNONE=\"none\"\nCMUS=\"cmus\"\nITUNES=\"iTunes\"\nMUSIC=\"Music\"\nSPOTIFY=\"Spotify\"\nPIANOBAR=\"pianobar\"\n\nplaypause_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAABYlAAAWJQFJUiTwAAAA5klEQVRo3u3YIU5DQRSF4Q9SGhSmCQaNrMCygmp2wQ5gB6yANWDQXQEWgaxGkZqaiiZkUGOeQLzhdbjJ/ZOj5/wzk7y5jyRJkiRJkqSFMsiQF1z0LtkiUPCJ295FWwQKvvGEWe/CYwVq3nHdu3SLQMEe972LtwjUrLGILFDwhVVkgZpnnEcWKNhgGVmg4IAHnEYVqHnDVWSBgh3uflv8aMfUwHzqBfIKDXLAoz+8HSdHFNjgZtLtnlAg7IdsK/BTYo3LnuXHCoR+Tn8IOtDUkfKsd+ExAqGH+lf//LdKkiRJkiRJVH4AdugWuakjkxMAAAAASUVORK5CYII=\"\nplaypause_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAABYlAAAWJQFJUiTwAAAA8UlEQVRo3u3YMUoDQRSA4SgqgqCFYGNtaZE2J7D2FrmB3sATeAYb65zA1sIytZWkSWMRkM9qCIhKyM7u5MH72sC++ZdNZiejUUoppZRS2poffvn8CacV550NHQDvmFSad9IiAL7wgIOO8/ZbBRSvuKq6iIED4BPT1mvvElDMcB45AD5wEzmgeMTxBvP2djUA5riOHAAr3Pnj5zJCQPGCy8gBsMTtf/Pr7mr9OOr16kM/QhECVrgX9Es8x7j3u95TwEYb2S4GLAR+lZjhotniOwSEfp1+E/RAU46Uh63XvE1AtUN9i4BnFf9WSSmllFJKa98ifb5bWzSaAAAAAABJRU5ErkJggg==\"\n\n# Play / pause music application\nif [[ \"$1\" = 'cmus_playpause' ]]; then\n  cmus-remote --pause\n  exit\nfi\nif [[ \"$1\" = 'itunes_playpause' ]]; then\n  osascript -e 'tell application \"iTunes\" to playpause'\n  exit\nfi\nif [[ \"$1\" = 'music_playpause' ]]; then\n  osascript -e 'tell application \"Music\" to playpause'\n  exit\nfi\nif [[ \"$1\" = 'spotify_playpause' ]]; then\n  osascript -e 'tell application \"Spotify\" to playpause'\n  exit\nfi\nif [[ \"$1\" = 'pianobar_playpause' ]]; then\n  echo -ne \"\\np\" \u003e \"$pianobar_ctlfile\"\n  exit\nfi\n\n# Ensure that pianobar fifo config file exists\nif [ ! -e \"$pianobar_ctlfile\" ]; then\n  mkfifo \"$pianobar_ctlfile\"\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\ncurrent_source=\"$NONE\"\n\n# Get pid of music apps to see if they are currently running\ncmus_pid=$(pgrep -x \"$CMUS\")\nitunes_pid=$(pgrep -x \"$ITUNES\")\nmusic_pid=$(pgrep -x \"$MUSIC\")\nspotify_pid=$(pgrep -x \"$SPOTIFY\")\npianobar_pid=$(pgrep -x \"$PIANOBAR\")\n\n# Keep track of music source\n# Reorder items in for -loop to your liking to change order of precendece\n# (i.e. if available, left-most audio source will be used first)\nfor s in \"$CMUS\" \"$ITUNES\" \"$MUSIC\" \"$SPOTIFY\" \"$PIANOBAR\"; do\n  if [[ $s = \"$CMUS\" \u0026\u0026 $cmus_pid ]]; then\n    current_source=\"$CMUS\"\n    break\n  elif [[ $s = \"$ITUNES\" \u0026\u0026 $itunes_pid ]]; then\n    current_source=\"$ITUNES\"\n    break\n  elif [[ $s = \"$MUSIC\" \u0026\u0026 $music_pid ]]; then\n    current_source=\"$MUSIC\"\n    break\n  elif [[ $s = \"$SPOTIFY\" \u0026\u0026 $spotify_pid ]]; then\n    current_source=\"$SPOTIFY\"\n    break\n  elif [[ $s = \"$PIANOBAR\" \u0026\u0026 $pianobar_pid ]]; then\n    current_source=\"$PIANOBAR\"\n    break\n  fi\ndone\n\n# Do not display menu icon if no audio source is active\nif [[ $current_source = \"$NONE\" ]]; then\n  exit\nfi\n\n# Set play / pause icon based on dark mode setup\nif [[ \"$BitBarDarkMode\" ]]; then\n  icon=$playpause_icon_dark\nelse\n  icon=$playpause_icon_light\nfi\n\n# Play / pause track in correct music app\nif [[ $current_source = \"$CMUS\" ]]; then\n  echo \" | image=$icon bash='$0' param1='cmus_playpause' terminal=false refresh=false\"\nelif [[ $current_source = \"$ITUNES\" ]]; then\n  echo \" | image=$icon bash='$0' param1='itunes_playpause' terminal=false refresh=false\"\nelif [[ $current_source = \"$MUSIC\" ]]; then\n  echo \" | image=$icon bash='$0' param1='music_playpause' terminal=false refresh=false\"\nelif [[ $current_source = \"$SPOTIFY\" ]]; then\n  echo \" | image=$icon bash='$0' param1='spotify_playpause' terminal=false refresh=false\"\nelif [[ $current_source = \"$PIANOBAR\" ]]; then\n  echo \" | image=$icon bash='$0' param1='pianobar_playpause' terminal=false refresh=false\"\nfi\n"
				}
			],
			"path": "Music/music-controls-playpause.10s.sh",
			"filename": "music-controls-playpause.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/music-controls-playpause.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Controls - Play / Pause Button",
			"version": "v1.0",
			"author": "Sebastián Barschkis",
			"authors": [
				{
					"name": "Sebastián Barschkis",
					"githubUsername": "sebbas",
					"imageURL": "https://avatars.githubusercontent.com/u/1890600?v=4",
					"bio": "Physics Developer @blender",
					"primary": true
				}
			],
			"desc": "Plays / pauses the current track in cmus, iTunes, Music, Spotify or pianobar.",
			"imageURL": "https://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png",
			"dependencies": null,
			"aboutURL": "http://github.com/sebbas/music-controls-bitbar",
			"lastUpdated": "2021-03-08T15:21:57.353083Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/music-controls-previous.10s.sh",
					"filename": "music-controls-previous.10s.sh",
					"content": "#!/bin/bash\n\n# Plays the previous track in cmus, iTunes Music, or Spotify.\n#\n# Special thanks to Google for providing the open-source icons: https://github.com/google/material-design-icons\n# and to mcchrish and alekseysotnikov for their helpful existing BitBar scripts\n#\n# metadata\n# \u003cbitbar.title\u003eMusic Controls - Previous Track Button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastián Barschkis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esebbas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePlays the previous track in cmus, iTunes, Music or Spotify.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://github.com/sebbas/music-controls-bitbar\u003c/bitbar.abouturl\u003e\n\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:$PATH\"\nexport LC_CTYPE=\"UTF-8\"\n\nNONE=\"none\"\nCMUS=\"cmus\"\nITUNES=\"iTunes\"\nMUSIC=\"Music\"\nSPOTIFY=\"Spotify\"\nPIANOBAR=\"pianobar\"\n\nprev_icon_light=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAYBJREFUaAXtWDFKBEEQPASFS0yES4wNLzD1Bcb+whfcD/QHvsHk4nuBqYGhsZGYGB0oojVgQ9Ess9t7PcFADTQzPdNd1V17eju3WGhIASkgBaSAFJACUkAKRBT4RTBbJLcWe4rDx1pA1hkXX9YZ4wogb7AsvGpNmQ0cg+kO9vNffFcNXKDoZyrchMFW22FENs9hu0XSHmYYPM/BC+UwWVlHxhmCdzCPwX4Eb1Ysk0UauAbb+0jxEbxZxZekaANL5DwM5Hkc8wtH02FENtfI1jh8hVnslLmGl3LmixgCPcLmBvYF8/Fj/hBe6p4vwIOfY+MJ5uOm+h4v3feFMMENnE+Yj4n4jDe6Lo86c5xkgrXC8mp6nq4/QtaM/RF/Y8M3POYbRrPZF1AjusRhl/9Guamuv8i4kfIq8QHzT9D7nNNkfQjhChV1+zLHanb7Os1NlAvNC+yQJ8p4k9eZhOVKeQ/r8krJinV7qecmys8qW97QWgpIASkgBaSAFJACUqCuwB/4tRa49HkbAgAAAABJRU5ErkJggg==\"\nprev_icon_dark=\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAZhJREFUaAXtmDtKhEEQhH8EBRMTwcTY0MDUExh7C0/gDfQGnsHE2BOYGhgaG4mJkaDI+k3Q0FvszuN/IAM9UMz0TnX1dLGPf3YYYoQD4UA4EA6EA+FAOBAOVDuwklGdWCAiewDuC7Tp23L+1XTFYUDzHLwl7Tn0shqpiB9ZcmETnV1wA35Ns5AyfdsK2TxWkfwT8Gw6No/Vq86zQjZXJzoiuVfgyzT87GjLLH2xtG6pAv0QPKa8baNFbxRXC9eKkHcB3jVf41q90bzWgvD3wZ3mbYtHH6w2UQvn8uCeglfNycU5vVn2tPgmUTg74Bp8K78Ub9Kb9TU9gIqzfwyelFcbq97ssR7EF2DvEnwqpyX2ejXrnRpSA2evgfs/VHVTT8F+v28ha4Ym7EP8ow2XYtNYbNYD5ArBPQP9fY36pmig3x8yaSQ9SnyA7PA5i6y1eksRco9Anw9zvlGa6PNxWppIF5oXsDY8Z5H1WjWCKUVIT1fKW9DfldI3TgN9XuqlifS3yoN/LdbhQDgQDoQD4UA4EA6EA3kH/gDrwKZSdCEqDwAAAABJRU5ErkJggg==\"\n\n# Trigger previous track in music application\nif [[ \"$1\" = 'cmus_prev' ]]; then\n  cmus-remote --prev\n  exit\nfi\nif [[ \"$1\" = 'itunes_prev' ]]; then\n  osascript -e 'tell application \"iTunes\" to previous track'\n  exit\nfi\nif [[ \"$1\" = 'music_prev' ]]; then\n  osascript -e 'tell application \"Music\" to previous track'\n  exit\nfi\nif [[ \"$1\" = 'spotify_prev' ]]; then\n  osascript -e 'tell application \"Spotify\" to previous track'\n  exit\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\ncurrent_source=\"$NONE\"\n\n# Get pid of music apps to see if they are currently running\ncmus_pid=$(pgrep -x \"$CMUS\")\nitunes_pid=$(pgrep -x \"$ITUNES\")\nmusic_pid=$(pgrep -x \"$MUSIC\")\nspotify_pid=$(pgrep -x \"$SPOTIFY\")\npianobar_pid=$(pgrep -x \"$PIANOBAR\")\n\n# Keep track of music source\n# Reorder items in for -loop to your liking to change order of precendece\n# (i.e. if available, left-most audio source will be used first)\nfor s in \"$CMUS\" \"$ITUNES\" \"$MUSIC\" \"$SPOTIFY\" \"$PIANOBAR\"; do\n  if [[ $s = \"$CMUS\" \u0026\u0026 $cmus_pid ]]; then\n    current_source=\"$CMUS\"\n    break\n  elif [[ $s = \"$ITUNES\" \u0026\u0026 $itunes_pid ]]; then\n    current_source=\"$ITUNES\"\n    break\n  elif [[ $s = \"$MUSIC\" \u0026\u0026 $music_pid ]]; then\n    current_source=\"$MUSIC\"\n    break\n  elif [[ $s = \"$SPOTIFY\" \u0026\u0026 $spotify_pid ]]; then\n    current_source=\"$SPOTIFY\"\n    break\n  elif [[ $s = \"$PIANOBAR\" \u0026\u0026 $pianobar_pid ]]; then\n    # pianobar does not support previous song trigger\n    exit\n  fi\ndone\n\n# Do not display menu icon if no audio source is active\nif [[ $current_source = \"$NONE\" ]]; then\n  exit\nfi\n\n# Set previous track icon based on dark mode setup\nif [[ \"$BitBarDarkMode\" ]]; then\n  icon=$prev_icon_dark\nelse\n  icon=$prev_icon_light\nfi\n\n# Trigger previous track in correct music app\nif [[ $current_source = \"$CMUS\" ]]; then\n  echo \" | image=$icon bash='$0' param1='cmus_prev' terminal=false refresh=false\"\nelif [[ $current_source = \"$ITUNES\" ]]; then\n  echo \" | image=$icon bash='$0' param1='itunes_prev' terminal=false refresh=false\"\nelif [[ $current_source = \"$MUSIC\" ]]; then\n  echo \" | image=$icon bash='$0' param1='music_prev' terminal=false refresh=false\"\nelif [[ $current_source = \"$SPOTIFY\" ]]; then\n  echo \" | image=$icon bash='$0' param1='spotify_prev' terminal=false refresh=false\"\nfi\n"
				}
			],
			"path": "Music/music-controls-previous.10s.sh",
			"filename": "music-controls-previous.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/music-controls-previous.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Controls - Previous Track Button",
			"version": "v1.0",
			"author": "Sebastián Barschkis",
			"authors": [
				{
					"name": "Sebastián Barschkis",
					"githubUsername": "sebbas",
					"imageURL": "https://avatars.githubusercontent.com/u/1890600?v=4",
					"bio": "Physics Developer @blender",
					"primary": true
				}
			],
			"desc": "Plays the previous track in cmus, iTunes, Music or Spotify.",
			"imageURL": "https://raw.githubusercontent.com/sebbas/music-controls-bitbar/master/music-controls-screenshot.png",
			"dependencies": null,
			"aboutURL": "http://github.com/sebbas/music-controls-bitbar",
			"lastUpdated": "2021-03-08T15:21:57.373492Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/music.10s.sh",
					"filename": "music.10s.sh",
					"content": "#!/bin/bash\n\n# Get current Music status with play/pause button\n#\n# based on Spotify script by Jason Tokoph (jason@tokoph.net),\n# tweaked by Dan Turkel (daturkel@gmail.com),\n# additionally tweaked by Aleš Farčnik (@alesf)\n# additionally tweaked by Jeffrey Munowitch (@jmunowitch)\n#\n# Shows current track information from Music\n# 10 second refresh might be a little too quick. Tweak to your liking.\n\n# metadata\n# \u003cbitbar.title\u003eMusic Now Playing\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDan Turkel, Jason Tokoph, Aleš Farčnik, Jeffrey Munowitch\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edaturkel\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay currently playing Music song with artwork. Play/pause, skip forward, skip backward.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/lBfoFdY.png\u003c/bitbar.image\u003e\n\nif [ \"$1\" = 'launch' ]; then\n  osascript -e 'tell application \"Music\" to activate'\n  exit\nfi\n\nif [ \"$1\" = 'open' ]; then\n  osascript -e 'tell application \"Music\" to reopen'\n  osascript -e 'tell application \"Music\" to activate'\n  exit\nfi\n\nif [ \"$(osascript -e 'application \"Music\" is running')\" = \"false\" ]; then\n  echo \"♫ | size=12\"\n  echo \"---\"\n  echo \"Music is not running\"\n  echo \"Launch Music | bash='$0' param1=launch terminal=false\"\n  exit\nfi\n\nif [ \"$1\" = 'playpause' ]; then\n  osascript -e 'tell application \"Music\" to playpause'\n  exit\nfi\n\nif [ \"$1\" = 'previous' ]; then\n  osascript -e 'tell application \"Music\" to previous track'\n  exit\nfi\n\nif [ \"$1\" = 'next' ]; then\n  osascript -e 'tell application \"Music\" to next track';\n  exit\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\nif [ \"$BitBarDarkMode\" ]; then\n  COLOR0=\"#666666\"\n  COLOR1=\"#ffffff\"\n  COLOR2=\"#666666\"\n  COLOR3=\"#333333\"\nelse\n  COLOR0=\"#333333\"\n  COLOR1=\"#000000\"\n  COLOR2=\"#666666\"\n  COLOR3=\"#999999\"\nfi\n\nstate=$(osascript -e '\ntry \n  tell application \"Music\"\n    with timeout 3 seconds\n      player state as string\n    end timeout\n  end tell\non error errText\n  \"not available\"\nend try  \n');\nif [ \"$state\" = \"not available\" ]; then\n  echo \"♫ | size=12\"\n  echo \"---\"\n  echo \"Music is not available\"\n  exit\nfi\n\ntrack=$(osascript -e'\ntry\ntell application \"Music\" to name of current track as string\non error errText\n  \"no track selected\"\nend try\n');\n\nartist=$(osascript -e'\ntry\n\ttell application \"Music\" to artist of current track as string\non error errText\n    \"\"\nend try\n');\n\nalbum=$(osascript -e'\ntry\n\ttell application \"Music\" to album of current track as string\non error errText\n    \"\"\nend try\n');\n\ntmp_file=$(osascript -e'\ntry\n    tell application \"Music\"\n        tell artwork 1 of current track\n            if format is JPEG picture then\n                set imgFormat to \".jpg\"\n\t\t    else\n                set imgFormat to \".png\"\n            end if\n\t    end tell\n        set albumName to album of current track\n        set albumArtist to album artist of current track\n        if length of albumArtist is 0\n            set albumArtist to artist of current track\n        end if\n        set fileName to (do shell script \"echo \" \u0026 quoted form of albumArtist \u0026 quoted form of albumName \u0026 \" | sed \\\"s/[^a-zA-Z0-9]//g\\\"\") \u0026 imgFormat\n    end tell\n\t(POSIX path of (path to temporary items from user domain)) \u0026 fileName\non error errText\n    \"\"\nend try\n');\n\nif [ ! -f \"$tmp_file\" ]; then\n    osascript -e'\n    try\n        tell application \"Music\"\n            tell artwork 1 of current track\n                set srcBytes to raw data\n                if format is JPEG picture then\n                    set imgFormat to \".jpg\"\n                else\n                    set imgFormat to \".png\"\n                end if\n            end tell\n            set albumName to album of current track\n            set albumArtist to album artist of current track\n            if length of albumArtist is 0\n                set albumArtist to artist of current track\n            end if\n            set fileName to (do shell script \"echo \" \u0026 quoted form of albumArtist \u0026 quoted form of albumName \u0026 \" | sed \\\"s/[^a-zA-Z0-9]//g\\\"\") \u0026 imgFormat\n        end tell\n        set tmpName to ((path to temporary items from user domain) as text) \u0026 fileName\n        set outFile to open for access file tmpName with write permission\n        set eof outFile to 0\n        write srcBytes to outFile\n        close access outFile\n        tell application \"Image Events\"\n            set resImg to open tmpName\n            scale resImg to size 200\n            save resImg\n            close resImg\n        end tell\n    on error errText\n        \"\"\n    end try\n    '\nfi\n\nif [ -f \"$tmp_file\" ]; then\n    base64img=$(base64 \u003c \"$tmp_file\")\nfi\n\nif [ \"$state\" = \"playing\" ]; then\n  state_icon=\"▶︎\"\nelse\n  state_icon=\"𝝞𝝞\"\nfi\n\nif [ \"$track\" != \"no track selected\" ]; then\n    echo \"♫ $state_icon $track - $artist | color=$COLOR0 size=12\"\nelse\n    echo \"♫ ◼︎ | color=$COLOR0 size=12\"\nfi\n\necho \"---\"\n\nif [ \"$state\" = \"playing\" ]; then\n  echo \"𝝞𝝞 Pause | bash='$0 'param1=playpause terminal=false refresh=true color=$COLOR0\"\n  echo \"« Previous | bash='$0' param1=previous terminal=false refresh=true color=$COLOR0\"\n  echo \"» Next | bash='$0' param1=next terminal=false refresh=true color=$COLOR0\"\nelse\n  echo \"▶︎ Play | bash='$0' param1=playpause terminal=false refresh=true color=$COLOR0\"\nfi\n\necho \"---\"\n\nif [ \"$track\" != \"no track selected\" ] \u0026\u0026 [ \"$base64img\" != \"\" ]; then\n    echo \"| image=$base64img bash='$0' param1=open terminal=false\"\nfi\n\nif [ \"$track\" != \"no track selected\" ]; then\n    echo \"$track | color=$COLOR1\"\n    echo \"$artist | color=$COLOR2\"\n    echo \"$album | size=12 color=$COLOR3 length=30\"\nfi\n\necho '---'\n"
				}
			],
			"path": "Music/music.10s.sh",
			"filename": "music.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/music.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Now Playing",
			"version": "v1.1",
			"author": "Dan Turkel,  Jason Tokoph,  Aleš Farčnik,  Jeffrey Munowitch",
			"authors": [
				{
					"name": "Dan Turkel",
					"githubUsername": "daturkel",
					"imageURL": "https://avatars.githubusercontent.com/u/1828387?v=4",
					"bio": "",
					"primary": true
				},
				{
					"name": "Jason Tokoph",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				},
				{
					"name": "Aleš Farčnik",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				},
				{
					"name": "Jeffrey Munowitch",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				}
			],
			"desc": "Display currently playing Music song with artwork. Play/pause, skip forward, skip backward.",
			"imageURL": "http://i.imgur.com/lBfoFdY.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.396045Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/musicRating.10s.sh",
					"filename": "musicRating.10s.sh",
					"content": "#!/bin/bash\n\n# Get current Music rating, compatible with Mac OS 10.15 and old versions.\n#\n# based on iTunes script by \n# Sebastian Winkler (sw2@github), Dan Turkel (daturkel@gmail.com) \n\n# metadata\n# \u003cbitbar.title\u003eMusic Rating\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eWeibing Chen, Sebastian Winkler, Dan Turkel\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eweibingchen17\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay currently rating from Music song and modify it.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://www.mindfuckbox.com/wp-content/uploads/2016/01/iTunes_Rating.png\u003c/bitbar.image\u003e\n\nvercomp () {\n    if [[ $1 == \"$2\" ]]; then\n        return 0\n    fi\n    local IFS=.\n    local i ver1=($1) ver2=($2)\n    # fill empty fields in ver1 with zeros\n    for ((i=${#ver1[@]}; i\u003c${#ver2[@]}; i++)); do\n        ver1[i]=0\n    done\n    for ((i=0; i\u003c${#ver1[@]}; i++)); do\n        if [[ -z ${ver2[i]} ]]; then\n            # fill empty fields in ver2 with zeros\n            ver2[i]=0\n        fi\n        if ((10#${ver1[i]} \u003c 10#${ver2[i]})); then\n            return 1\n        fi\n        if ((10#${ver1[i]} \u003e 10#${ver2[i]})); then\n            return 2\n        fi\n    done\n    return 0\n}\n\nMusicApp=\"Music\"\nSysVersion=$(sw_vers -productVersion)\nMacOSCatalina=\"10.15\"\nvercomp $MacOSCatalina \"$SysVersion\"\nif (($? \u003e  1)); then\n    MusicApp=\"iTunes\"\nfi\n\nLAUNCH=\"tell application \\\"$MusicApp\\\" to activate\"\nQUERY_RUNNING=\"application \\\"$MusicApp\\\" is running\"\nSET_TO_00=\"tell application \\\"$MusicApp\\\" to set rating of current track to 00\"\nSET_TO_20=\"tell application \\\"$MusicApp\\\" to set rating of current track to 20\"\nSET_TO_40=\"tell application \\\"$MusicApp\\\" to set rating of current track to 40\"\nSET_TO_60=\"tell application \\\"$MusicApp\\\" to set rating of current track to 60\"\nSET_TO_80=\"tell application \\\"$MusicApp\\\" to set rating of current track to 80\"\nSET_TO_100=\"tell application \\\"$MusicApp\\\" to set rating of current track to 100\"\nGET_NAME=\"tell application \\\"$MusicApp\\\" to name of current track as string\"\nGET_ARTIST=\"tell application \\\"$MusicApp\\\" to artist of current track as string\"\nGET_RATING=\"tell application \\\"$MusicApp\\\" to rating of current track as string\"\n\nif [ \"$1\" = 'launch' ]; then\n  osascript -e \"$LAUNCH\"\n  exit\nfi\n\nif [ \"$(osascript -e \"$QUERY_RUNNING\")\" = \"false\" ]; then\n  echo \"♫\"\n  echo \"---\"\n  echo \"Music is not running\"\n  echo \"Launch Music | bash='$0' param1=launch terminal=false\"\n  exit\nfi\n\ncase $1 in \n    'zero')\n        osascript -e \"$SET_TO_00\"\n        exit\n        ;;\n    'one')\n        osascript -e \"$SET_TO_20\"\n        exit\n        ;;\n    'two')\n        osascript -e \"$SET_TO_40\"\n        exit\n        ;;\n    'three')\n        osascript -e \"$SET_TO_60\"\n        exit\n        ;;\n    'four')\n        osascript -e \"$SET_TO_80\"\n        exit\n        ;;\n    'five')\n        osascript -e \"$SET_TO_100\"\n        exit\n        ;;\nesac\n\nrating_icon_black=\"★\"\nrating_icon_white=\"☆\"\n\ntrack=$(osascript -e \"$GET_NAME\" 2\u003e/dev/null);\nartist=$(osascript -e \"$GET_ARTIST\" 2\u003e/dev/null);\nrating=$(osascript -e \"$GET_RATING\" 2\u003e/dev/null);\n\ncase $rating in\n    00)\n        echo $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\n    20)\n        echo $rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\n    40)\n        echo $rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white \n        ;;\n    60)\n        echo $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white \n        ;;\n    80)\n        echo $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white \n        ;;\n    100)\n        echo $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black\n        ;;\n    *)\n        echo $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\nesac\n\necho \"---\"\n\ncase \"$0\" in\n  *\\ * )\n   echo \"Your script path | color=#ff0000\"\n   echo \"($0) | color=#ff0000\"\n   echo \"has a space in it, which BitBar does not support. | color=#ff0000\"\n   echo \"Play/Pause/Next/Previous buttons will not work. | color=#ff0000\"\n  ;;\nesac\n\necho \"$artist -- $track\"\n\ncase $rating in\n    00)\n        echo Rating: $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\n    20)\n        echo Rating: $rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\n    40)\n        echo Rating: $rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white \n        ;;\n    60)\n        echo Rating: $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white \n        ;;\n    80)\n        echo Rating: $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white \n        ;;\n    100)\n        echo Rating: $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black\n        ;;\n    *)\n        echo Rating: $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\nesac\n\necho '---'\necho 'Rerate'\necho \"$rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white | bash='$0' param1=zero refresh=true terminal=false \"\necho \"$rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white | bash='$0' param1=one refresh=true terminal=false \"\necho \"$rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white | bash='$0' param1=two refresh=true terminal=false \"\necho \"$rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white | bash='$0' param1=three refresh=true terminal=false \"\necho \"$rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white | bash='$0' param1=four refresh=true terminal=false \"\necho \"$rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black | bash='$0' param1=five refresh=true terminal=false \"\n"
				}
			],
			"path": "Music/musicRating.10s.sh",
			"filename": "musicRating.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/musicRating.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Music Rating",
			"version": "v0.1",
			"author": "Weibing Chen,  Sebastian Winkler,  Dan Turkel",
			"authors": [
				{
					"name": "Weibing Chen",
					"githubUsername": "weibingchen17",
					"imageURL": "https://avatars.githubusercontent.com/u/25602873?v=4",
					"bio": "",
					"primary": true
				},
				{
					"name": "Sebastian Winkler",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				},
				{
					"name": "Dan Turkel",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				}
			],
			"desc": "Display currently rating from Music song and modify it.",
			"imageURL": "http://www.mindfuckbox.com/wp-content/uploads/2016/01/iTunes_Rating.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.4625Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/nowplaying.5s.sh",
					"filename": "nowplaying.5s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eNow playing\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAdam Kenyon\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eadampk90\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows and controls the music that is now playing. Currently supports Spotify, iTunes, and Vox.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://pbs.twimg.com/media/CbKmTS7VAAA84VS.png:small\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\n# first, determine if there's an app that's playing or paused\napps=(Music Spotify Vox)\nplaying=\"\"\npaused=\"\"\n\n# Determine if we are running a pre-Catalina OS X version and adjust the apps accordingly.\nosx_ver_before_catalina=$(sw_vers -productVersion | grep -E \"10\\.\\d[0-4]+\\..*\")\nif [ -n \"$osx_ver_before_catalina\" ]; then\n  apps=(iTunes Spotify Vox)\nfi\n\nfor i in \"${apps[@]}\"; do\n\t# is the app running?\n\tapp_state=$(osascript -e \"application \\\"$i\\\" is running\")\n\n\t# shellcheck disable=SC2181\n\tif [ \"$?\" != \"0\" ]; then\n\t\t# just exit if there was an error determining the app's state\n\t\t# (the app might be in the middle of quitting)\n\t\texit\n\tfi\n\n\tif [ \"$app_state\" = \"true\" ] \u0026\u0026 [ \"$track\" = \"\" ]; then\n\t\t# yes, it's running\n\t\t# is it playing music currently?\n\t\tapp_playing=$(osascript -e \"tell application \\\"$i\\\" to player state as string\")\n\t\tif [ \"$app_playing\" = \"paused\" ] || [ \"$app_playing\" = \"0\" ]; then\n\t\t\t# nope, it's paused\n\t\t\tpaused=\"$i\"\n\t\telif [ \"$app_playing\" = \"playing\" ] || [ \"$app_playing\" = \"1\" ]; then\n\t\t\t# yes, it's playing\n\t\t\tplaying=\"$i\"\n\t\tfi\n\tfi\ndone\n\n\n# open a specified app\nif [ \"$1\" = \"open\" ]; then\n\tosascript -e \"tell application \\\"$2\\\" to activate\"\n\texit\nfi\n# play/pause\nif [ \"$1\" = \"play\" ] || [ \"$1\" = \"pause\" ]; then\n\tosascript -e \"tell application \\\"$2\\\" to $1\"\n\texit\nfi\n# next/previous\nif [ \"$1\" = \"next\" ] || [ \"$1\" = \"previous\" ]; then\n\tosascript -e \"tell application \\\"$2\\\" to $1 track\"\n\t# tell spotify to hit \"Previous\" twice so it actually plays the previous track\n\t# instead of just starting from the beginning of the current one\n\tif [ \"$playing\" = \"Spotify\" ] \u0026\u0026 [ \"$1\" = \"previous\" ]; then\n\t\tosascript -e \"tell application \\\"$2\\\" to $1 track\"\n\tfi\n\tosascript -e \"tell application \\\"$2\\\" to play\"\n\texit\nfi\n\n\n# start outputting information to bitbar\nif [ \"$playing\" = \"\" ] \u0026\u0026 [ \"$paused\" = \"\" ]; then\n\t# nothing is even paused\n\techo \"🙉 No music playing | color=gray\"\nelse\n\t# something is playing or is paused\n\ttrack=\"\"\n\tartist=\"\"\n\n\tif [ \"$playing\" = \"\" ]; then\n\t\techo \"$paused is paused | color=#888888\"\n\t\techo \"---\"\n\t\tapp=\"$paused\"\n\telse\n\t\tapp=\"$playing\"\n\tfi\n\n\ttrack_query=\"name of current track\"\n\tartist_query=\"artist of current track\"\n\t# Vox uses a different syntax for track and artist names\n\tif [ \"$app\" = \"Vox\" ]; then\n\t\ttrack_query=\"track\"\n\t\tartist_query=\"artist\"\n\tfi\n\n\t# output the track and artist\n\ttrack=$(osascript -e \"tell application \\\"$app\\\" to $track_query\")\n\tartist=$(osascript -e \"tell application \\\"$app\\\" to $artist_query\")\n\n\techo \"$track | length=40\" | awk -F '\\ -' '{print $1}'\n\techo \"---\"\n\techo \"$artist\"\n\n\tif [ \"$playing\" != \"\" ]; then\n\t\techo \"Now playing on $app | color=gray bash='$0' param1=open param2=$app terminal=false\"\n\t\techo \"---\"\n\t\techo \"⏸ Pause | bash='$0' param1=pause param2=$app refresh=true terminal=false\"\n\telse\n\t\techo \"▶️ Play | bash='$0' param1=play param2=$app refresh=true terminal=false\"\n\tfi\n\n\techo \"⏭ Next | bash='$0' param1=next param2=$app refresh=true terminal=false\"\n\techo \"⏮ Previous | bash='$0' param1=previous param2=$app refresh=true terminal=false\"\nfi\n\n# add an Open option for each service\necho \"---\"\nfor i in \"${apps[@]}\"; do\n\techo \"Open $i | bash='$0' param1=open param2=$i terminal=false\"\ndone\n"
				}
			],
			"path": "Music/nowplaying.5s.sh",
			"filename": "nowplaying.5s.sh",
			"dir": "Music",
			"docsPlugin": "Music/nowplaying.5s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Now playing",
			"version": "v1.1",
			"author": "Adam Kenyon",
			"authors": [
				{
					"name": "Adam Kenyon",
					"githubUsername": "adampk90",
					"imageURL": "https://avatars.githubusercontent.com/u/2799877?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows and controls the music that is now playing. Currently supports Spotify, iTunes, and Vox.",
			"imageURL": "https://pbs.twimg.com/media/CbKmTS7VAAA84VS.png:small",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.494058Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/pianobarctl.15s.sh",
					"filename": "pianobarctl.15s.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003ePianoBar Control\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003edanlogan\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edanlogan\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSimple pianobar controls from the menu bar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/xWjlIDr.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\n# pianobar should not already be running when you start this script\n\n# pianobar must be installed and updated for this script to run\n#   brew install pianobar \n# you must have logged in to pianobar at least once outside this script and set the start station so it autoplays on launch\n# user and password must be set in your pianobar config (~/.config/pianobar/config)\n# your pianobar config must have the fifo line enabled and set to file \"ctl\" file path set below.  The fifo file will be created if it doesnt exist\n#   e.g. fifo = ~/.config/pianobar/ctl\n#\n# if you want to get the current song to display in the pianobar menu you must do two things.  \n# First, create a file called nowplaying in the pianobar config directory\n#   touch ~/.config/pianobar/nowplaying\n# Second uncomment the eventcmd in your pianobar config \n#   e.g. event_command = ~/.config/pianobar/eventcmd.sh\n# and create eventcmd.sh a file with the following contents in to your config folder.  \n# make it executable \"chmod +x ~/.config/pianobar/eventcmd.sh\" \n#\n#  touch ~/.config/pianobar/eventcmd.sh\n#  chmod +x ~/.config/pianobar/eventcmd.sh\n#\n##--eventcmd.sh start--\n#  #!/bin/bash\n#\n#  # create variables\n#  while read L; do\n#  \tk=\"`echo \"$L\" | cut -d '=' -f 1`\"\n#  \tv=\"`echo \"$L\" | cut -d '=' -f 2`\"\n#  \texport \"$k=$v\"\n#  done \u003c \u003c(grep -e '^\\(title\\|artist\\|album\\|stationName\\|songStationName\\|pRet\\|pRetStr\\|wRet\\|wRetStr\\|songDuration\\|songPlayed\\|rating\\|coverArt\\|stationCount\\|station[0-9]*\\)=' /dev/stdin) # don't overwrite $1...\n#  \n#  case \"$1\" in\n#  \tsongstart)\n#     echo \"$title -- $artist\" \u003e ~/.config/pianobar/nowplaying\n#    ;;\n#  \n#    *)\n#      echo \"nothing yet\" \u003e ~/.config/pianobar/nowplaying\n#    ;;\n#  esac\n##--eventcmd.sh end--\n\n# troubleshooting\n# - make sure pianobar is up to date\n# - make sure this file is executable\n#     chmod +x pianobarctl.15s.sh\n# - if you are not getting results in the script double check your config\n# - check your running prcesses for \"pianobar\" and \"screen\" and kill them if they are running\n\n# create the fifo file for pianobar if it doesnt exist\n# allow for pause/unpause, next, quit, and launch\n# read nowplaying if eventcmd is configured\n# refresh every 15s\n[ ! -e ~/.config/pianobar/ctl ] \u0026\u0026 mkfifo ~/.config/pianobar/ctl\necho \"$1\"\n\ncase \"$1\" in\n\n  togglepause)\n    echo -n 'p' \u003e ~/.config/pianobar/ctl\n    ;;\n\n  next)\n    echo -n 'n' \u003e ~/.config/pianobar/ctl\n    ;;\n\n  quit)\n    echo -n 'q' \u003e ~/.config/pianobar/ctl\n    sleep 2\n    ;;\n\n  launch)\n    \n    num=$(pgrep \"pianobar\")\n    \n    if [ -z \"$num\" ] \n      then\n        screen -dmS pb /usr/local/bin/pianobar\n    fi\n    sleep 5\n    ;;\n\n  *)\n    #echo -n \"unknown\"\n    ;;\nesac\n\n[ -e ~/.config/pianobar/nowplaying ] \u0026\u0026 nowplaying=$(\u003c~/.config/pianobar/nowplaying)\n\nnum=$(pgrep \"pianobar\")\n# (ps aux | grep -v grep | grep -v pianobarctl.15s.sh | grep -ci \"pianobar\") \n# echo $num\nif [ -z \"$num\" ] \n  then\n    state=\"off\";\nelse\n    state=\"on\";\nfi\n\necho pianobar #$state\n\necho ---\n[ $state = \"on\" ] \u0026\u0026 echo \"$nowplaying\" \n[ $state = \"off\" ] \u0026\u0026 echo \"Launch | bash=\\\"$0\\\" param1=launch terminal=false refresh=true\"\n[ $state = \"on\" ] \u0026\u0026 echo \"Pause / Unpause | bash=\\\"$0\\\" param1=togglepause terminal=false\"\n[ $state = \"on\" ] \u0026\u0026 echo \"Next | bash=\\\"$0\\\" param1=next terminal=false\"\n[ $state = \"on\" ] \u0026\u0026 echo \"Quit | bash=\\\"$0\\\" param1=quit terminal=false refresh=true\"\n"
				}
			],
			"path": "Music/pianobarctl.15s.sh",
			"filename": "pianobarctl.15s.sh",
			"dir": "Music",
			"docsPlugin": "Music/pianobarctl.15s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "PianoBar Control",
			"version": "v1.0",
			"author": "danlogan",
			"authors": [
				{
					"name": "danlogan",
					"githubUsername": "danlogan",
					"imageURL": "https://avatars.githubusercontent.com/u/1816584?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple pianobar controls from the menu bar.",
			"imageURL": "https://i.imgur.com/xWjlIDr.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.598294Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/plex-status.1m.sh",
					"filename": "plex-status.1m.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003ePlex Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.3\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eChris Bergeron\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003echrisbergeron\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSee what's currently playing on your Plex\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://res.cloudinary.com/cyberge/image/upload/v1550627901/icons/plex_878759_eey690.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash,imagemagick\u003c/bitbar.dependencies\u003e\n\n# Put your plex hostname here\nplexhost=\"plex-01\"\n#curlcmd=$(command -v curl)\n\n# Put host to ping here (useful for vpn connections)\npinghost=\"plex-01\"\n\n# To do: Automate this from a curl response\n# The UUID of your Plex Server.  This can be obtained from the browser address bar after selecting an item (it's between /server/ and /detail/)\nserverid=\"YOUR SERVER ID HERE\"\n\n# Temp filename\ntmpfile=\"/tmp/image.jpg\"\ntouch $tmpfile\necho \u003e /tmp/output.txt\n\n# To do, retrieve Plex Token automatically, send username/password in Auth Request Header\n#plextoken=$(curl -s -X POST \\\n#  'https://my.plexapp.com/users/sign_in.xml?X-Plex-Client-Identifier=my-app\u0026Content-Length=0' \\\n#  -H 'cache-control: no-cache')\n\n# Put your Plex API token here\nplextoken=YOUR_PLEX_API_TOKEN_HERE\n\n# If host is unreachable, display message and stop\nif ! (ping -c1 -W1 $plexhost \u003e /dev/null 2\u003e\u00261); then\n  echo \"❌\"\n  echo \"---\"\n  echo \"Can't connect to $pinghost\"\n  exit\nfi\n\n# If we can connect to Plex, let's see what's playing and display it\nif ! (curl -s http://$plexhost:32400/identity \u003e /dev/null 2\u003e\u00261); then\n  echo \"❌\"\n  echo \"---\"\n  echo \"Plex is unreachable | color=red\"\n  echo \"$plexhost\"\nfi\n\n# Get our session data from Plex\nxmldata=$(curl -s -X GET \\\n  \"http://plex-01:32400/status/sessions?X-Plex-Token=$plextoken\" \\\n  -H 'Content-Length: 0' \\\n  -H 'X-Plex-Client-Identifier: my-app' \\\n  -H 'cache-control: no-cache')\n\necho \"XMLDATA is: ($xmldata)\" \u003e\u003e /tmp/output.txt\n\nif (echo \"$xmldata\" | grep \"Unauthorized\"\u003e /dev/null 2\u003e\u00261); then\n  echo -en \"❌\\n---\\nUnauthorized.\\nCheck your API Key.\"\n  exit\nfi\n  \n# Check to see if anything is playing, if not, say so and exit\nif ! (echo \"$xmldata\" | grep \"Video\" \u003e /dev/null 2\u003e\u00261); then\n  echo \"○\"\n  echo \"---\"\n  echo \"Nothing playing\"\n  exit\nfi\n\n# Check to see if a trailer is playing, if so, exit\n# To do: Display trailer info\nif ! (echo \"$xmldata\" | grep \"subtype=\\\"trailer\\\"\" \u003e /dev/null 2\u003e\u00261); then\n  echo \"D\"\n  echo \"---\"\n  echo \"Preview Trailer Playing\"\n  exit\nfi\n\n# If metadata is a movie, parse it separately\nif (echo \"$xmldata\" | grep \"movie\" \u003e /dev/null 2\u003e\u00261); then\n  # We're watching a movie, parse as such\n  thumblink=$(echo \"$xmldata\" | sed -e 's/\u003e/\\\u003e\\n/g' | head -n3 | tail -n1 | cut -f4 -d \"\\\"\" | sed -e 's/art/thumb/g')\n  keydata=\"%2Flibrary%2Fmetadata%2F\"$(echo \"$thumblink\" | cut -f4 -d \"/\")\nelse\n  # We're watching TV, parse as such\n  thumblink=$(echo \"$xmldata\" | sed -e 's/\" /\\n/g' | grep grandparentThumb | cut -f2 -d \"\\\"\"| head -n1)\n  keydata=$(echo \"$xmldata\" | sed -e 's/\" /\\n/g' | grep \"key\" | head -n1 | cut -f2 -d \"\\\"\" | sed -e 's/\\//%2F/g' | head -n1)\nfi\n\n# Debug info\n#echo \"thumbnail link is: ($thumblink)\" \u003e\u003e /tmp/output.txt\n#echo \"keydata for url is: ($keydata)\" \u003e\u003e /tmp/output.txt\n\ncurl -s -o /tmp/image.jpg -X GET \\\n  \"http://plex-01:32400$thumblink?X-Plex-Token=$plextoken\" \\\n  -H 'Content-Length: 0' \\\n  -H 'X-Plex-Client-Identifier: my-app' \\\n  -H 'cache-control: no-cache'\n\n# Resize our image to a small thumbnail\n#mogrify -scale 75x100 $tmpfile\nif ! (mogrify -scale 75x100 /tmp/image.jpg \u003e\u003e /tmp/output.txt 2\u003e\u00261); then\n  echo \"---\"\n  echo \"Couldn't render thumbnail image\"\n  exit\nfi\n\n# Encode our image into base64 text for BitBar\nimgstr=$(base64 /tmp/image.jpg)\n\n# Display our menu output\necho \"| templateImage=iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAQAAAC1+jfqAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAJcEhZcwAAC4kAAAuJATfJy60AAAAHdElNRQfjAhMPKzgxRmpXAAAAuUlEQVQoz5XRMU4CYRQE4O93LbCFtZDQ2dGItS2n4AKchFNwAbnIVhYmW1GTEBJDgiGRbh+FGyPwR+I0r5iZvHlvgGSmEcLeUBalWghhofubKNr55dNYBw823sW5gLW+Z0lH6c3mUnCw8mQgGbhVOZwL+FB4cSd5tFTnonYt2qi1Mn/N0F4IjZkEN/6FKysKU1sh7Exy/pFKIzTmepd0z7ylK6Ocf2InhK3pyXda3P+U9Xpa1jf+qPsIyJ5B7rJwvZwAAAAldEVYdGRhdGU6Y3JlYXRlADIwMTktMDItMTlUMjA6NDQ6MDAtMDU6MDBDoNoZAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDE5LTAyLTE5VDIwOjQzOjU2LTA1OjAw+xFCggAAAABJRU5ErkJggg==\"\necho \"---\"\n#  echo \"Now Playing | color=green\"\necho \"Now Playing | color=orange\"\necho \"| image=$imgstr href=http://plex-01:32400/web/index.html#!/server/$serverid/details?key=$keydata\"\n"
				}
			],
			"path": "Music/plex-status.1m.sh",
			"filename": "plex-status.1m.sh",
			"dir": "Music",
			"docsPlugin": "Music/plex-status.1m.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Plex Status",
			"version": "v0.3",
			"author": "Chris Bergeron",
			"authors": [
				{
					"name": "Chris Bergeron",
					"githubUsername": "chrisbergeron",
					"imageURL": "https://avatars.githubusercontent.com/u/20324315?v=4",
					"bio": "IT Professional with over 25 years of experience including: Cloud, Infrastructure, Virtualization, Systems Administration, Network and DB Administration.",
					"primary": true
				}
			],
			"desc": "See what's currently playing on your Plex",
			"imageURL": "https://res.cloudinary.com/cyberge/image/upload/v1550627901/icons/plex_878759_eey690.png",
			"dependencies": [
				"bash",
				"imagemagick"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.645934Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/plex-status-improved-30s.py",
					"filename": "plex-status-improved-30s.py",
					"content": "import xml.etree.ElementTree as ET\nimport os\nimport urllib.request\nimport ssl\n\n# \u003cbitbar.title\u003ePlex Status - Improved\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ePatrick Coffey\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003epatricktcb\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSee what's currently playing on your Plex Server\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://res.cloudinary.com/cyberge/image/upload/v1550627901/icons/plex_878759_eey690.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# plextoken will need to be set manually. You can follow this guide from Plex on how to get one: https://support.plex.tv/articles/204059436-finding-an-authentication-token-x-plex-token/\n# plexhost should be whatever IP/domain name your local machine uses to connect.\n# myip is used in two ways. The first is to show where media is being played if it's not local, the second is when there are multiple streams being played to prefer the local one over another.\n# myuserid is the id of your preferred watcher. This is typically 1, but depending on how your server admin set things up it could be different\n\ndef plexMusicInfo(el):\n    trackInfo = \"[\" + el.attrib['title'] + \" by \" + el.attrib['grandparentTitle'] + \"]\\n---\\nAlbum: \" + el.attrib['parentTitle']\n    if el.find(\"Player\").attrib[\"state\"] == \"paused\":\n        trackInfo = \"  \" + trackInfo\n    return trackInfo\n\ndef plexMovieInfo(el):\n    trackInfo = \"[🎥  \" + el.attrib['title']\n    return trackInfo\n\ndef plexTVInfo(el):\n    trackInfo = \"[📺  \" + el.attrib['grandparentTitle'] + \" - \" + el.attrib['title'] + \"]\\n---\\n\" + el.attrib['parentTitle'] + \" Episode \" + el.attrib['parentIndex']\n    return trackInfo\n\ndef plexMediaInfo(mc, myip, myuserid):\n    trackInfo = \"❯\\n---\\nNothing Playing\"\n    if mc.find(\"User\").attrib[\"id\"] == myuserid:\n        if str(mc.tag) == \"Track\":\n            if mc.find(\"Player\").attrib[\"state\"] == \"playing\":\n                trackInfo = plexMusicInfo(mc)\n        elif str(mc.tag) == \"Video\":\n            if mc.find(\"Player\").attrib[\"state\"] == \"playing\":\n                if mc.attrib['type'] == \"movie\":\n                    trackInfo = plexMovieInfo(mc)\n                elif mc.attrib['type'] == \"episode\":\n                    trackInfo = plexTVInfo(mc)\n        if mc.find(\"Player\").attrib['address'] != myip:\n            trackInfo = trackInfo + \"\\n\" + mc.find(\"Player\").attrib['product'] + \" on \" + mc.find(\"Player\").attrib['platform']\n    return trackInfo\n\ndef getPlexStatus(plextoken, plexhost):\n    ctx = ssl.create_default_context()\n    ctx.check_hostname = False\n    ctx.verify_mode = ssl.CERT_NONE\n    # Plex uses self signed certs, so they can't be verified.\n    plexAddress = 'https://' + plexhost + ':32400/status/sessions?X-Plex-Token=' + plextoken \n    plexXML = urllib.request.urlopen(plexAddress, context=ctx).read()\n    return plexXML\n\ndef parseXML(rawXML, myip, myuserid):\n    tree = ET.ElementTree(ET.fromstring(rawXML))\n    root = tree.getroot()\n    trackInfo = \"❯\\n---\\nNothing Playing\"\n    if root.attrib['size'] == \"1\":\n        trackInfo = plexMediaInfo(root[0], myip, myuserid)\n    else:\n        for mc in root:\n            if mc.find(\"Player\").attrib['address'] == myip:\n                trackInfo = plexMediaInfo(mc, myip, myuserid)\n    return trackInfo\n\n#This is the function to be used with the script is called by itself by BitBar. But the file is written so that if you want, you can just import these functions into another python script if you want to.\nif __name__ == '__main__':\n    plextoken = \"YOUR TOKEN\"\n    plexhost = \"YOUR PLEX HOST\"\n    myip = \"YOUR IP\" #This is your IP, from the Plex Host's perspective. So your local IP if the server is on your network, and public IP if it's not\n    myuserid = \"1\" #This is usually 1, but might not be.\n    try:\n        plexXML = getPlexStatus(plextoken, plexhost)\n        print(parseXML(plexXML, myip, myuserid))\n    except:\n        print(\"🚫\\n---\\nCould not connect to Plex server \" + plexhost + \"\\nServer may be offline, or token may be invalid.\")\n"
				}
			],
			"path": "Music/plex-status-improved-30s.py",
			"filename": "plex-status-improved-30s.py",
			"dir": "Music",
			"docsPlugin": "Music/plex-status-improved-30s.py.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Plex Status - Improved",
			"version": "v1.0",
			"author": "Patrick Coffey",
			"authors": [
				{
					"name": "Patrick",
					"githubUsername": "patricktcb",
					"imageURL": "https://avatars.githubusercontent.com/u/15157503?v=4",
					"bio": "IT Consultant",
					"primary": true
				}
			],
			"desc": "See what's currently playing on your Plex Server",
			"imageURL": "https://res.cloudinary.com/cyberge/image/upload/v1550627901/icons/plex_878759_eey690.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.595763Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/quodlibet-control.1s.py",
					"filename": "quodlibet-control.1s.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eQuod Libet Control\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSean Lane\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eseanlane\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eControl Quoid Libet via Bitbar\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/VA8ZEbR.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003equodlibet, python\u003c/bitbar.dependencies\u003e\n\nimport os, subprocess, sys\n\nCUR_PATH = os.path.expanduser('~/.quodlibet/current')\nCONTROL_PATH = os.path.expanduser('~/.quodlibet/control')\n\ndef get_current():\n  with open(CUR_PATH, 'r') as cur:\n    lines = cur.readlines()\n  lines = [x.strip().lstrip('~').lstrip('#').split('=', 1) \n    for x in lines]\n  return {x[0]: x[1] for x in lines}\n\ndef run_cmd(cmd_in):\n  if cmd_in == 'delete':\n    status = get_current()\n    run_cmd('next')\n    if os.path.exists(status['filename']):\n      subprocess.check_output('mv \"{}\" {}'.format(\n        status['filename'], os.path.expanduser('~/.Trash/')), shell=True)\n  elif cmd_in == 'menu-previous':\n      run_cmd('force-previous')\n  elif cmd_in == 'open-ql':\n    subprocess.check_output('open -a QuodLibet', shell=True)\n  else:\n    subprocess.check_output('echo {} \u003e {}'.format(cmd_in, CONTROL_PATH), shell=True)\n\ndef cmd(phrase, param1):\n  return '{} | bash={} param1={} terminal=false'.format(\n    phrase, sys.argv[0], param1) \n\nif len(sys.argv) == 2:\n    run_cmd(sys.argv[1])\nelse:\n  if not os.path.exists(CUR_PATH) and not os.path.exists(CONTROL_PATH):\n    print('♫')\n    print('---')\n    print(cmd('Open Quod Libet', 'open-ql'))\n    sys.exit()\n\n  if not os.path.exists(CUR_PATH):\n    print('♫')\n    print('---')\n    print(cmd('Show window', 'focus'))\n    sys.exit()\n\n  status = get_current()\n\n  print('♫ {} - {} | length=30'.format(\n    status['title'], status['artist']))\n  print('---')\n  print(status['title'])\n  print(status['album'])\n  print(status['artist'])\n  print(cmd('Play / Pause', 'play-pause'))\n  print(cmd('Next', 'next'))\n  print(cmd('Previous', 'menu-previous'))\n  print('---')\n  print(cmd('Delete', 'delete'))\n"
				}
			],
			"path": "Music/quodlibet-control.1s.py",
			"filename": "quodlibet-control.1s.py",
			"dir": "Music",
			"docsPlugin": "Music/quodlibet-control.1s.py.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Quod Libet Control",
			"version": "v1.0",
			"author": "Sean Lane",
			"authors": [
				{
					"name": "Sean Lane",
					"githubUsername": "seanlane",
					"imageURL": "https://avatars.githubusercontent.com/u/5761232?v=4",
					"bio": "BYU Graduate CS student, currently working with the BYU IDeA Labs and PNNL",
					"primary": true
				}
			],
			"desc": "Control Quoid Libet via Bitbar",
			"imageURL": "https://i.imgur.com/VA8ZEbR.png",
			"dependencies": [
				"quodlibet",
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.625781Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/songkick.1d.py",
					"filename": "songkick.1d.py",
					"content": "#!/usr/bin/env python\n\n# \u003cbitbar.title\u003eSongkick - Upcoming events\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eNobuhide Yayoshi\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eyayoc\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eUpcoming music events on Songkick\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/pu8gJh2.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://www.songkick.com/\u003c/bitbar.abouturl\u003e\n\nimport json\nimport urllib2\n\ndef get_events():\n    try:\n        ip = get_my_ip()\n        request = urllib2.Request('http://api.songkick.com/api/3.0/events.json?apikey=' + configs['apikey'] + '\u0026location=ip:' + ip)\n        response = urllib2.urlopen(request)\n        response = json.load(response)\n        return map(format_events, response['resultsPage']['results']['event'])\n    except Exception:\n        print ':('\n\ndef format_events(event):\n    return (u'%s / %s | href=%s' % (event['displayName'], event['location']['city'], event['uri'])).encode('utf-8')\n\ndef get_my_ip():\n    request = urllib2.Request('http://ip.42.pl/raw')\n    response = urllib2.urlopen(request)\n    return response.read()\n\nconfigs = {\n    'apikey': 'Your API Key'\n}\n\nprint (u'\\u24c8 | size=18').encode('utf-8')\nprint '---'\nprint '\\n'.join(get_events())\nprint '---'\nprint 'Songkick - Upcoming events | href=https://songkick.com'\n\n\n"
				}
			],
			"path": "Music/songkick.1d.py",
			"filename": "songkick.1d.py",
			"dir": "Music",
			"docsPlugin": "Music/songkick.1d.py.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Songkick - Upcoming events",
			"version": "v1.0.0",
			"author": "Nobuhide Yayoshi",
			"authors": [
				{
					"name": "yayoc",
					"githubUsername": "yayoc",
					"imageURL": "https://avatars.githubusercontent.com/u/6383334?v=4",
					"bio": "Software engineer in Tokyo.",
					"primary": true
				}
			],
			"desc": "Upcoming music events on Songkick",
			"imageURL": "http://i.imgur.com/pu8gJh2.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://www.songkick.com/",
			"lastUpdated": "2021-03-08T15:21:57.629769Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/sonosBar.py",
					"filename": "sonosBar.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nControl you Sonos system from you Mac Menu Bar\n\"\"\"\n\n# \u003cbitbar.title\u003eSonosBar\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJonas Marcello\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eanergictcell\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eControl you Sonos system from you Mac Menu Bar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/anergictcell/SonosBar/master/resources/SonosBar.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython,SoCo\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/anergictcell/SonosBar/\u003c/bitbar.abouturl\u003e\n\nimport argparse\nimport socket\nimport os\nimport sys\nimport warnings\n\ntry:\n    import soco\n    from soco.music_services import MusicService\n    from soco.data_structures import DidlItem, to_didl_string\nexcept ImportError:\n    print(\"Error\")\n    print(\"---\")\n    print(\"You need to install \u003e\u003esoco\u003c\u003c | href=https://github.com/SoCo/SoCo\")\n    sys.exit(0)\n\ndef parse_ip(ip_string):\n    \"\"\"Parsing the user supplied IP address to use on the local subnet\"\"\"\n    host_ip = socket.gethostbyname(socket.gethostname())\n    subnets = host_ip.split(\".\")\n    sonos_subnets = ip_string.split(\".\")\n    new_ip = subnets[0:(4-len(sonos_subnets))] + sonos_subnets\n    return \".\".join(new_ip)\n\n\ndef parse_cli_arguments():\n    \"\"\"Main function that parses command line arguments\"\"\"\n    parser = argparse.ArgumentParser(description='Control your Sonos')\n\n    player_args = parser.add_mutually_exclusive_group()\n    player_args.add_argument(\n        \"-p\", \"--player\",\n        metavar=\"SPEAKER_NAME\",\n        type=str,\n        # default=\"Living Room\",\n        help=\"The name of the player/zone\")\n\n    player_args.add_argument(\n        \"-i\", \"--ip\",\n        metavar=\"IP_ADDRESS\",\n        type=str,\n        help=\"The IP address of the player/zone\")\n\n    control_args = parser.add_mutually_exclusive_group()\n    control_args.add_argument(\n        \"-l\", \"--playlist\",\n        metavar=\"PLAYLIST_NAME\",\n        type=str,\n        help=\"The name of the playlist to play\")\n\n    control_args.add_argument(\n        \"-r\", \"--radio\",\n        metavar=\"RADIO_STATION\",\n        type=str,\n        help=\"The name of the radio station to play\")\n\n    control_args.add_argument(\n        \"-v\", \"--vol\",\n        metavar=\"VOLUME\",\n        type=int,\n        choices=range(0, 101),\n        help=\"0-100\")\n\n    control_args.add_argument(\n        \"-j\", \"--join\",\n        metavar=\"SPEAKER_NAME\",\n        type=str,\n        help=\"Name of the speaker to join\")\n\n    control_args.add_argument(\n        \"-k\", \"--ipjoin\",\n        metavar=\"SPEAKER_IP\",\n        type=str,\n        help=\"IP of the speaker to join\")\n\n    control_args.add_argument(\n        \"-u\", \"--unjoin\",\n        action='store_const',\n        const=True,\n        help=\"Unjoin the player from all groups\")\n\n    control_args.add_argument(\n        'action',\n        metavar='action',\n        nargs=\"?\",\n        choices=[\"play\", \"pause\", \"next\", \"previous\", \"shuffle\", \"normal\"],\n        help=\"\"\"Action to take if non is set via flags.\n          Can be either: play, pause, next, previous, shuffle, normal\"\"\")\n\n    parser.add_argument(\n        \"-g\", \"--group\",\n        action='store_const',\n        const=True,\n        help=\"Apply the action to the whole group\")\n\n    output = parser.add_mutually_exclusive_group()\n    output.add_argument(\n        \"-o\", \"--verbose\",\n        action='store_const',\n        const=True,\n        help=\"Display feedback about current actions\")\n\n    output.add_argument(\n        \"-b\", \"--bitbar\",\n        action='store_const',\n        const=True,\n        help=\"Display bitbar controls\")\n\n    args = parser.parse_args()\n\n    if args.ip:\n        args.ip = parse_ip(args.ip)\n\n    if args.ipjoin:\n        args.ipjoin = parse_ip(args.ipjoin)\n\n    return args\n\ndef output_for_bitbar(zones):\n    \"\"\"Prints the topology display\"\"\"\n    print(\"🔊Sonos\")\n    print(\"---\")\n    for zone in zones:\n        print_zone(zone)\n\ndef print_zone(zone):\n    \"\"\"Prints basic info about the zone and calls functions to\n    print more detailed info\"\"\"\n    print(\"---\")\n    print(\"Zone:\")\n    print(\"{0}: {1}\".format(zone[\"kind\"], zone[\"master\"].player_name))\n    if zone[\"kind\"] == \"P\":\n        print_single_player(zone[\"master\"])\n    else:\n        print_group(zone[\"master\"])\n\ndef print_single_player(player):\n    \"\"\"Controls printing of control elements for a single-player zone\"\"\"\n    print_music_controls(player, \"--\")\n    print_player_controls(player, \"--\")\n    print_top_level_controls(player, \"\")\n\ndef print_group(master):\n    \"\"\"Controls printing of control elements for a multi-player zone\"\"\"\n    print_music_controls(master, \"--\")\n    print_top_level_controls(master, \"\")\n    for player in master.group.members:\n        print(\"➤ {0}\".format(player.player_name))\n        print_player_controls(player, \"--\")\n        print(\"--Volume\")\n        print_volume_controls(player, \"--\")\n\ndef create_command(player, *params):\n    \"\"\"Creates the Bitbar specific command\"\"\"\n    string = \"bash={0} param1=-i param2={1}\"\n    i = 3\n    for param in params:\n        string += \" param{0}={1}\".format(i, param)\n        i += 1\n    string += \" terminal=false refresh=true\"\n    return string.format(PATH_TO_SCRIPT, player.ip_address)\n\ndef print_player_controls(player, indent):\n    \"\"\"Prints Player controls for Bitbar\"\"\"\n\n    print(\"{0}Join\".format(indent))\n    for single_player in player.all_zones:\n        if single_player != player:\n            print(\"{0}--{1} | \".format(indent, single_player.player_name) +\n                  create_command(player, \"--ipjoin\", single_player.ip_address)\n                 )\n    print(\"{0}Unjoin | \".format(indent) +\n          create_command(player, \"--unjoin\")\n         )\n\ndef print_music_controls(player, indent):\n    \"\"\"Prints Music controls for Bitbar\"\"\"\n    print(\"{0}Playlists\".format(indent))\n    for playlist in player.get_sonos_playlists():\n        print(\"{0}--{1} | \".format(indent, playlist.title) +\n              create_command(player, \"-gl\", '\"' + playlist.title + '\"')\n             )\n\n    print(\"{0}Radios\".format(indent))\n    for station in player.get_favorite_radio_stations()[\"favorites\"]:\n        print(\"{0}--{1} | \".format(indent, station[\"title\"]) +\n              create_command(player, \"-gr\", '\"' + station[\"uri\"] + '\"')\n            )\n\ndef print_top_level_controls(player, indent):\n    \"\"\"Prints the controls that are displayed on the base level for each\n    player / group\"\"\"\n    playing = player.get_current_transport_info()[\"current_transport_state\"]\n    if playing == \"PLAYING\":\n        print(\"{0}├ Pause | \".format(indent) +\n              create_command(player, \"pause\", \"-g\"))\n        print(\"{0}├ Next | \".format(indent) +\n              create_command(player, \"next\", \"-g\"))\n    else:\n        print(\"{0}├ Play | \".format(indent) +\n              create_command(player, \"play\", \"-g\"))\n\n    print(\"{0}└ Volume | \".format(indent))\n    print_volume_controls(player, indent)\n\ndef print_volume_controls(player, indent):\n    \"\"\"Prints controls to adjust the volume\"\"\"\n    for vol in range(0, 11):\n        if (vol-1) * 10 \u003c player.volume and vol*10 \u003e= player.volume:\n            # print checkmark\n            print((\"{0}--{1}{2}\").format(indent, u'\\u2713'.encode(\"utf-8\"), vol))\n        else:\n            print(\"{0}--{1} | \".format(indent, vol) +\n                  create_command(player, \"--vol\", vol*10)\n                 )\n\n# soco prints some usage warnings about functions where the output\n# will change in the future\n# Those warnings don't work well with the output for Bitbar\nwarnings.filterwarnings(\"ignore\")\n\nPATH_TO_SCRIPT = os.path.realpath(__file__)\nARGUMENTS = parse_cli_arguments()\nGROUP = ARGUMENTS.group\n\ndef get_player_by_name(name):\n    \"\"\"Returns a SoCo object for the given name (if it exists)\"\"\"\n    for device in soco.discover():\n        if device.player_name == name:\n            return device\n\ndef define_player(ip_address, name):\n    \"\"\"Returning a SoCo object of the chosen player\"\"\"\n    player = None\n    if ip_address:\n        player = soco.SoCo(ip_address)\n    if name:\n        player = get_player_by_name(name)\n\n    if player and GROUP:\n        # Change player to be the coordinator of the group\n        player = player.group.coordinator\n\n    return player\n\ndef find_random_player():\n    \"\"\"Searches the network for Sonos zones and picks one randomly\"\"\"\n    zones = soco.discover()\n\n    if zones:\n        # picking a random player\n        player = next(iter(zones))\n        return player\n\n    return None\n\ndef parse_zone_groups(player):\n    \"\"\"Creates a list of all Zones with attrbute\n    whether they are a group or a single player\"\"\"\n    all_zones = []\n    for group in player.all_groups:\n        if len(group.members) \u003e 1:\n            all_zones.append({\"kind\":\"G\", \"master\":group.coordinator})\n        else:\n            all_zones.append({\"kind\":\"P\", \"master\":group.coordinator})\n    return all_zones\n\n\n\ndef verbose_output(string):\n    \"\"\"Printing the passed commands to stdout\"\"\"\n    if ARGUMENTS.verbose:\n        print(\"{0}: {1}\".format(\n            (\"Group \" if GROUP else \"Player \"), string))\n\ndef group_coordinate(function):\n    \"\"\"Wrapper function to ensure unjoining for single players\"\"\"\n    def inner_function(*arguments):\n        \"\"\"Inner function\"\"\"\n        if GROUP:\n            function(*arguments)\n        else:\n            # First argument always has to be the player SoCo object\n            arguments[0].unjoin()\n            function(*arguments)\n    return inner_function\n\ndef get_songs_from_playlist(player, playlist_name):\n    \"\"\"Returns a list of songs from the given playlist\"\"\"\n    lists = player.get_sonos_playlists()\n    for playlist in lists:\n        if playlist.title == playlist_name:\n            return player.music_library.browse(playlist)\n\n@group_coordinate\ndef play_playlist(player, playlist_name):\n    \"\"\"Replaces the queue with the selected playlist\"\"\"\n    verbose_output(\"Play playlist {0}\".format(playlist_name))\n    songs = get_songs_from_playlist(player, playlist_name)\n    player.clear_queue()\n    for song in songs:\n        player.add_to_queue(song)\n    player.play_from_queue(0)\n\n@group_coordinate\ndef play_radio_station(player, uri):\n    \"\"\"Plays the selected radio station. The URI must be in the\n    format as it is currently returned from soco:\n        x-sonosapi-stream:s25111?sid=254\u0026flags=32\n    \"\"\"\n    verbose_output(\"Switching to radio station {0}\".format(uri))\n    service = MusicService('TuneIn')\n    didl = DidlItem(\n        title=\"DUMMY\", parent_id=\"DUMMY\", item_id=\"DUMMY\", desc=service.desc)\n    meta = to_didl_string(didl)\n    player.avTransport.SetAVTransportURI(\n        [('InstanceID', 0), ('CurrentURI', uri), ('CurrentURIMetaData', meta)])\n    player.play()\n\n@group_coordinate\ndef play(player):\n    \"\"\"Play the selected song\"\"\"\n    verbose_output(\"Play\")\n    player.play()\n\n@group_coordinate\ndef pause(player):\n    \"\"\"Pause the current playback\"\"\"\n    verbose_output(\"Pause\")\n    player.pause()\n\n@group_coordinate\ndef next_track(player):\n    \"\"\"Play the next track\"\"\"\n    verbose_output(\"Next track\")\n    player.next()\n\n@group_coordinate\ndef previous_track(player):\n    \"\"\"Play the previous track\"\"\"\n    verbose_output(\"Previous track\")\n    player.previous()\n\n@group_coordinate\ndef turn_on_shuffle(player):\n    \"\"\"Turn on shuffle\"\"\"\n    verbose_output(\"Shuffle ON\")\n    player.play_mode = \"SHUFFLE_NOREPEAT\"\n\n@group_coordinate\ndef turn_off_shuffle(player):\n    \"\"\"Turn off shuffle\"\"\"\n    verbose_output(\"Shuffle OFF\")\n    player.play_mode = \"NORMAL\"\n\ndef set_volume(player, volume):\n    \"\"\"Sets the volume\"\"\"\n    verbose_output(\"Setting the volume to {0}\".format(volume))\n    player.volume = volume\n\ndef join(source, target):\n    \"\"\"Joining another group\"\"\"\n    if target is None:\n        return invalid_command(\"Target to join is not known\")\n    if GROUP:\n        for single_player in source.group.members:\n            single_player.join(target.group.coordinator)\n    else:\n        source.join(target.group.coordinator)\n\ndef invalid_command(err):\n    \"\"\"Handles errors and prints error messages\"\"\"\n    print(\"ERROR: {0}\".format(err))\n    return\n\ndef main(args):\n    \"\"\"Main function\"\"\"\n    player = define_player(args.ip, args.player)\n\n    if player is None or args.bitbar:\n        player = player or find_random_player()\n        print_bitbar_controls(player)\n        return\n\n    if GROUP:\n        # Change player to the coordinator of the group\n        player = player.group.coordinator\n\n    if args.playlist:\n        return play_playlist(player, args.playlist)\n\n    if args.radio:\n        return play_radio_station(player, args.radio)\n\n    if args.vol is not None:\n        return set_volume(player, args.vol)\n\n    if args.join:\n        verbose_output(\"Joining {0}\".format(args.join))\n        to_join = define_player(None, args.join)\n        return join(player, to_join)\n\n    if args.ipjoin:\n        verbose_output(\"Joining {0}\".format(args.ipjoin))\n        to_join = define_player(args.ipjoin, None)\n        return join(player, to_join)\n\n    if args.unjoin:\n        verbose_output(\"Unjoin\")\n        player.unjoin()\n        return\n\n    if args.action is None:\n        return\n\n    if args.action.lower() == \"play\":\n        play(player)\n        return\n\n    if args.action.lower() == \"pause\":\n        pause(player)\n        return\n\n    if args.action.lower() == \"next\":\n        next_track(player)\n        return\n\n    if args.action.lower() == \"previous\":\n        previous_track(player)\n        return\n\n    if args.action.lower() == \"shuffle\":\n        turn_on_shuffle(player)\n        return\n\n    if args.action.lower() == \"normal\":\n        turn_off_shuffle(player)\n        return\n\ndef print_bitbar_controls(player):\n    \"\"\"Prints the lines used for Bitbar to stdout\"\"\"\n    if player is None:\n        print(\"🔇 Sonos\")\n        print(\"---\")\n        print(\"No Sonos Zone present\")\n    else:\n        output_for_bitbar(parse_zone_groups(player))\n\nif __name__ == \"__main__\":\n    main(ARGUMENTS)\n"
				}
			],
			"path": "Music/sonosBar.py",
			"filename": "sonosBar.py",
			"dir": "Music",
			"docsPlugin": "Music/sonosBar.py.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "SonosBar",
			"version": "v1.0",
			"author": "Jonas Marcello",
			"authors": [
				{
					"name": "Jonas Marcello",
					"githubUsername": "anergictcell",
					"imageURL": "https://avatars.githubusercontent.com/u/875703?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Control you Sonos system from you Mac Menu Bar.",
			"imageURL": "https://raw.githubusercontent.com/anergictcell/SonosBar/master/resources/SonosBar.png",
			"dependencies": [
				"python",
				"SoCo"
			],
			"aboutURL": "https://github.com/anergictcell/SonosBar/",
			"lastUpdated": "2021-03-08T15:21:57.646057Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/spotify-next.1d.sh",
					"filename": "spotify-next.1d.sh",
					"content": "#!/bin/bash\n\n# Switch Spotify to the next track in one click.\n#\n# by Aleksei Sotnikov (asotnikov.100@gmail.com) \n# metadata\n# \u003cbitbar.title\u003eSpotify \"Next track\" button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAleksei Sotnikov\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ealekseysotnikov\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSwitch Spotify to the next track in one click. Or you can easily reconfigure it for switching to the previous track.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/523Eszv.png\u003c/bitbar.image\u003e\n\ncase \"$1\" in\n    'previous track' | 'next track')\n        osascript -e \"tell application \\\"Spotify\\\" to $1\"\n    exit\nesac\n\necho \"▶▶ | bash='$0' param1='next track' terminal=false refresh=false\"\n"
				}
			],
			"path": "Music/spotify-next.1d.sh",
			"filename": "spotify-next.1d.sh",
			"dir": "Music",
			"docsPlugin": "Music/spotify-next.1d.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Spotify \"Next track\" button",
			"version": "v1.0",
			"author": "Aleksei Sotnikov",
			"authors": [
				{
					"name": "Aleksei Sotnikov",
					"githubUsername": "alekseysotnikov",
					"imageURL": "https://avatars.githubusercontent.com/u/1889355?v=4",
					"bio": "Clojure(Script), Java. \r\nHealthy lifestyle.",
					"primary": true
				}
			],
			"desc": "Switch Spotify to the next track in one click. Or you can easily reconfigure it for switching to the previous track.",
			"imageURL": "https://i.imgur.com/523Eszv.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.890358Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/spotify.10s.sh",
					"filename": "spotify.10s.sh",
					"content": "#!/bin/bash\n\n# Get current Spotify status with play/pause button\n#\n# by Jason Tokoph (jason@tokoph.net)\n#    Marcin Swieczkowski (scatman@bu.edu)\n#\n# Shows current track information for Spotify\n\n# metadata\n# \u003cbitbar.title\u003eSpotify Now Playing\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMarcin S., Jason Tokoph\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejtokoph\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay currently playing Spotify song. Play/pause, skip forward, skip backward.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/y1SZwfq.png\u003c/bitbar.image\u003e\n\n# Comment the following line to disable showing times.\nSHOW_TIME=1\n\n# By default we remove anything after \" - \", as it usually is stuff like\n# \"Remastered\", \"Single Version\", or other garbage that Spotify likes to\n# include.\n#\n# Comment out this line if you want the full track names.\nCLEAN_TRACK_NAMES=1\n# Comment out this line if you want the full album names.\nCLEAN_ALBUM_NAMES=1\n\n# The length of a track/artist name after which to truncate.\nTRUNC_LEN=18\n# String used when replacing truncated text.\nTRUNC_SUFFIX=\"...\"\n\n# Send a series of semicolon-delimited commands to Spotify\nfunction tellspotify() {\n  commands=\"$(echo \"$1\" | tr \";\" \"\\\\n\")\"\n\n  osascript -e \"\n            tell application \\\"Spotify\\\"\n                $commands\n            end tell\";\n}\n\n## Handle early-return cases\n\nif [ \"$1\" = 'launch' ]; then\n  tellspotify 'activate'\n  exit\nfi\n\nfirst=\"$(echo \"$1\" | head -n 1 | awk '{print $1;}')\"\ncase \"$first\" in\n  'playpause' | 'previous' | 'next' | 'set')\n    tellspotify \"$1\"\n    exit\nesac\n\nif [ \"$(osascript -e 'application \"Spotify\" is running')\" = \"false\" ]; then\n  echo \"♫\"\n  echo \"---\"\n  echo \"Spotify is not running\"\n  echo \"Launch Spotify | bash='$0' param1=launch terminal=false\"\n  exit\nfi\n\n## Get Spotify info\n\nstate=$(tellspotify 'player state as string');\ntrack=$(tellspotify 'name of current track as string');\nartist=$(tellspotify 'artist of current track as string');\nalbum=$(tellspotify 'album of current track as string');\n\n# Handle last early-return case (needed $track and $artist to look up lyrics).\nif [ \"$1\" = 'lyrics' ]; then\n  open \"https://www.musixmatch.com/search/$track $artist\"\n  exit\nfi\n\nif [ \"$state\" = \"playing\" ]; then\n  state_icon=\"▶\"\nelse\n  state_icon=\"❚❚\"\nfi\n\n# Clean up track and/or album names\nif [[ $CLEAN_TRACK_NAMES ]]; then\n  track=\"$(echo -e \"${track/ - /\\\\n}\" | head -n 1)\"\n  track=\"$(echo -e \"${track/ (Remastered/\\\\n}\" | head -n 1)\"\nfi\nif [[ $CLEAN_ALBUM_NAMES ]]; then\n  album=\"$(echo -e \"${album/ - /\\\\n}\" | head -n 1)\"\n  album=\"$(echo -e \"${album/ (Remastered/\\\\n}\" | head -n 1)\"\nfi\n\n## Truncate track and artist\ntrunc_track=$track\nif [ ${#trunc_track} -gt $TRUNC_LEN ];then\n  trunc_track=${trunc_track:0:$TRUNC_LEN-${#TRUNC_SUFFIX}}$TRUNC_SUFFIX\nfi\n\ntrunc_artist=$artist\nif [ ${#trunc_artist} -gt $TRUNC_LEN ];then\n  trunc_artist=${trunc_artist:0:$TRUNC_LEN-${#TRUNC_SUFFIX}}$TRUNC_SUFFIX\nfi\n\n# Get position and duration of track\nif [[ $SHOW_TIME ]]; then\n  position=$(osascript -e \\\n                       \"tell application \\\"Spotify\\\"\n                            set pos_sec to player position\n                            set time_min to (pos_sec / 60 div 1) as text\n                            set raw_sec to (pos_sec mod 60 div 1) as text\n                            if length of raw_sec is greater than 1 then\n                                set time_sec to raw_sec\n                            else\n                                set time_sec to \\\"0\\\" \u0026 raw_sec\n                            end if\n                            return time_min as text \u0026 \\\":\\\" \u0026 time_sec as text\n                        end tell\");\n  duration=$(osascript -e \\\n                       \"tell application \\\"Spotify\\\"\n                            set total_sec to (duration of current track / 1000) as text\n                            set time_min to (total_sec / 60 div 1) as text\n                            set raw_sec to (total_sec mod 60 div 1) as text\n                            if length of raw_sec is greater than 1 then\n                                set time_sec to raw_sec\n                            else\n                                set time_sec to \\\"0\\\" \u0026 raw_sec\n                            end if\n                            return time_min as text \u0026 \\\":\\\" \u0026 time_sec as text\n                        end tell\");\nfi\n\n## Print the display\n\necho \"$state_icon $trunc_track - $trunc_artist\"\necho \"---\"\n\necho -e \"Track:\\\\t$track\"\necho -e \"Artist:\\\\t$artist\"\necho -e \"Album:\\\\t$album\"\necho \"---\"\n\nif [[ $SHOW_TIME ]]; then\n  echo \"${position} / ${duration}\"\n  echo '---'\nfi\n\nif [ \"$state\" = \"playing\" ]; then\n  echo -e \"❚❚\\\\tPause | bash='$0' param1=playpause terminal=false refresh=true\"\n  echo -e \"↩\\\\tPrevious | bash='$0' param1='set player position to 0;previous track' terminal=false refresh=true\"\n  echo -e \"↪\\\\tNext | bash='$0' param1='next track' terminal=false refresh=true\"\n  echo -e \"↻\\\\tReplay | bash = '$0' param1='set player position to 0' terminal=false\"\nelse\n  echo -e \"▶\\\\tPlay | bash='$0' param1=playpause terminal=false refresh=true\"\n  echo -e \"↩\\\\tPrevious | bash='$0' param1='set player position to 0;previous track;play' terminal=false refresh=true\"\n  echo -e \"↪\\\\tNext | bash='$0' param1='next track;play' terminal=false refresh=true\"\n  echo -e \"↻\\\\tReplay | bash = '$0' param1='set player position to 0;play' terminal=false refresh=true\"\nfi\n\necho '---'\necho -e \"♫\\\\tLyrics | bash='$0' param1='lyrics' terminal=false\"\necho '---'\n\necho '---'\necho \"Open Spotify | bash='$0' param1=launch terminal=false\"\n"
				}
			],
			"path": "Music/spotify.10s.sh",
			"filename": "spotify.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/spotify.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Spotify Now Playing",
			"version": "v1.2",
			"author": "Marcin S.,  Jason Tokoph",
			"authors": [
				{
					"name": "Jason Tokoph",
					"githubUsername": "jtokoph",
					"imageURL": "https://avatars.githubusercontent.com/u/346225?v=4",
					"bio": "wigglezipheartpeach",
					"primary": true
				},
				{
					"name": "Jason Tokoph",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				}
			],
			"desc": "Display currently playing Spotify song. Play/pause, skip forward, skip backward.",
			"imageURL": "http://i.imgur.com/y1SZwfq.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.007801Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/spotctl.10s.sh",
					"filename": "spotctl.10s.sh",
					"content": "#!/bin/bash\n\n# Display current Spotify status with play/pause/skip buttons\n#\n# by Igor Borges (igor@borges.me)\n# heavily inspired by Jason Tokoph's spotify.10s.sh\n#\n# Shows current track information from Spotify\n# Make sure you have spotctl installed and configured.\n\n# metadata\n# \u003cbitbar.title\u003eSpotify Now Playing (via spotctl)\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eIgor Borges\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eIgor1201\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay currently playing Spotify song using spotctl. Play/pause, skip forward, skip backward.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/zAGFguy.png\u003c/bitbar.image\u003e\n\n# That's \"$(brew --prefix)/bin\" path, but we don't have brew on the $PATH to run it ¯\\_(ツ)_/¯\nexport PATH=\"$PATH:/usr/local/bin\"\n\nfunction shorten {\n  length=20\n  ellipsis='…'\n  read -r string\n  echo \"$string\" | sed -E \"s/(.{${length}}).*$/\\\\1${ellipsis}/\"\n}\n\ncase \"$1\" in\n  'play' | 'pause' | 'prev' | 'next')\n    spotctl \"$1\"\n    sleep 1\n    exit\nesac\n\nstate=$(spotctl status 2\u003e /dev/null | sed -n 1p | grep -o playing || echo paused)\n\nif [ \"$state\" = \"playing\" ]; then\n  status=$(spotctl status)\n  track=$(echo \"$status\" | sed -n 4p | cut -c 8-)\n  artist=$(echo \"$status\" | sed -n 2p | cut -c 9-)\n  album=$(echo \"$status\" | sed -n 3p | cut -c 8-)\n  shortened_track=$(echo \"$track\" | shorten)\n  shortened_artist=$(echo \"$artist\" | shorten)\n\n  echo \"▶ $shortened_track - $shortened_artist\"\n  echo \"---\"\n  echo \"Track: $track | color=#666666\"\n  echo \"Artist: $artist | color=#666666\"\n  echo \"Album: $album | color=#666666\"\n  echo '---'\n  echo \"❚❚ Pause | bash='$0' param1=pause terminal=false refresh=true\"\n  echo \"↩ Previous | bash='$0' param1=prev terminal=false refresh=true\"\n  echo \"↪ Next | bash='$0' param1=next terminal=false refresh=true\"\nelse\n  echo \"♫\"\n  echo '---'\n  echo \"▶ Play | bash='$0' param1=play terminal=false refresh=true\"\nfi\n"
				}
			],
			"path": "Music/spotctl.10s.sh",
			"filename": "spotctl.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/spotctl.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Spotify Now Playing (via spotctl)",
			"version": "v1.0",
			"author": "Igor Borges",
			"authors": [
				{
					"name": "Igor Borges",
					"githubUsername": "Igor1201",
					"imageURL": "https://avatars.githubusercontent.com/u/52727902?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display currently playing Spotify song using spotctl. Play/pause, skip forward, skip backward.",
			"imageURL": "https://i.imgur.com/zAGFguy.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.866222Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/spotify-pause.9999d.sh",
					"filename": "spotify-pause.9999d.sh",
					"content": "#!/bin/bash\n\n# Play/pause Spotify button\n#\n# by Aleksei Sotnikov (asotnikov.100@gmail.com) \n# thanks for contribution by Doug Cotler (dcotler@seas.upenn.edu)\n# metadata\n# \u003cbitbar.title\u003eSpotify play/pause button\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAleksei Sotnikov\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ealekseysotnikov\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePlay or pause Spotify in one click\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/kLaa2uz.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n\nfunction tellspotify() {\n  osascript -e \"tell application \\\"Spotify\\\" to $1\"\n}\n\ncase \"$1\" in\n  'playpause' )\n    tellspotify \"$1\"\n    exit\nesac\n\nstate=$(tellspotify 'player state as string');\n\nif [ \"$state\" = \"playing\" ]; then\n  state_icon=\"❚❚\"\nelse\n  state_icon=\"▶\"\nfi\n\necho \"$state_icon | bash='$0' param1=playpause terminal=false refresh=false\""
				}
			],
			"path": "Music/spotify-pause.9999d.sh",
			"filename": "spotify-pause.9999d.sh",
			"dir": "Music",
			"docsPlugin": "Music/spotify-pause.9999d.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Spotify play/pause button",
			"version": "v1.1",
			"author": "Aleksei Sotnikov",
			"authors": [
				{
					"name": "Aleksei Sotnikov",
					"githubUsername": "alekseysotnikov",
					"imageURL": "https://avatars.githubusercontent.com/u/1889355?v=4",
					"bio": "Clojure(Script), Java. \r\nHealthy lifestyle.",
					"primary": true
				}
			],
			"desc": "Play or pause Spotify in one click",
			"imageURL": "https://i.imgur.com/kLaa2uz.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.985333Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/vox.30s.sh",
					"filename": "vox.30s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eVox\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eDaniel Kay\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejessor\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGet current track info from Vox status with play/pause button\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/480451/12141683/ee53ea2a-b471-11e5-8429-ada2ef579883.png\u003c/bitbar.image\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n#\n# Get current Vox status with play/pause button\n#\n# by Daniel Kay (daniel@enthusiasm.cc)\n# inspired by Jason Tokoph (jason@tokoph.net)\n#\n# Shows current track information from vox\n\nif [ \"$1\" = 'launch' ]; then\n  osascript -e 'tell application \"Vox\" to activate'\n  exit\nfi\n\nif [ \"$(osascript -e 'application \"Vox\" is running')\" = \"false\" ]; then\n  echo \"♫\"\n  echo \"---\"\n  echo \"Vox is not running\"\n  echo \"Launch Vox| bash='$0' param1=launch terminal=false\"\n  exit\nfi\n\nif [ \"$1\" = 'playpause' ]; then\n  osascript -e 'tell application \"Vox\" to playpause'\n  exit\nfi\n\nstate=$(osascript -e 'tell application \"Vox\" to set state to player state');\n\nif [ \"$state\" = \"1\" ]; then\n  state_icon=\"🎵\"\nelse\n  state_icon=\"⚫\"\nfi\n\ntrack=$(osascript -e 'tell application \"Vox\" to set trackname to track');\ntrack=${track//|/-}\nartist=$(osascript -e 'tell application \"Vox\" to set artistname to artist');\nalbum=$(osascript -e 'tell application \"Vox\" to set albumname to album');\ntrackURL=$(osascript -e 'tell application \"Vox\" to set state to trackURL');\n\nif [[ $trackURL =~ soundcloud ]]\nthen\n    echo \"$state_icon $track\"\nelse\n    echo \"$state_icon $artist - $track [$album]\"\nfi\n\necho \"---\"\n\ncase \"$0\" in\n  *\\ * )\n   echo \"Your script path | color=#ff0000\"\n   echo \"($0) | color=#ff0000\"\n   echo \"has a space in it, which BitBar does not support. | color=#ff0000\"\n   echo \"Play/Pause/Next/Previous buttons will not work. | color=#ff0000\"\n  ;;\nesac\n\nif [ \"$state\" = \"1\" ]; then\n  echo \"❚❚ Pause | bash='$0' param1=playpause terminal=false\"\nelse\n  echo \"▶ Play | bash='$0' param1=playpause terminal=false\"\nfi\n"
				}
			],
			"path": "Music/vox.30s.sh",
			"filename": "vox.30s.sh",
			"dir": "Music",
			"docsPlugin": "Music/vox.30s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "Vox",
			"version": "1.0",
			"author": "Daniel Kay",
			"authors": [
				{
					"name": "Daniel Kay",
					"githubUsername": "jessor",
					"imageURL": "https://avatars.githubusercontent.com/u/480451?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Get current track info from Vox status with play/pause button",
			"imageURL": "https://cloud.githubusercontent.com/assets/480451/12141683/ee53ea2a-b471-11e5-8429-ada2ef579883.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.028851Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/bbitunes.10s.sh",
					"filename": "bbitunes.10s.sh",
					"content": "#!/bin/bash\n#\n# Lightweight iTunes status plugin for BitBar\n#\n# Author: Padraic Renaghan\n#\n# based on iTunes script:\n# https://github.com/matryer/bitbar-plugins/blob/master/Music/itunes.10s.sh\n\n# metadata\n# \u003cbitbar.title\u003eiTunes Lite\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ePadraic Renaghan\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eprenagha\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay current track info from iTunes\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://github.com/prenagha/bitbar-itunes/raw/master/bbitunes.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eiTunes Lite applescript\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/prenagha/bitbar-itunes\u003c/bitbar.abouturl\u003e\n\n# set this to the directory of the cloned/downloaded github repo\nBBITUNES_DIR=\"$HOME/Dev/bitbar-itunes\"\n\n# this will point to the .applescript source file in the repo\nAPPLESCRIPT=\"${BBITUNES_DIR}/bbitunes.applescript\"\n\n# this will be the compiled version of the source file\nCOMPILED=\"${BBITUNES_DIR}/bbitunes.scpt\"\n\n# link to installation instructions\nSETUP=\"View Setup Instructions | bash=/usr/bin/open param1=https://github.com/prenagha/bitbar-itunes terminal=false\"\n\n# check that we can find the repo dir\nif [ ! -d \"${BBITUNES_DIR}\" ]\nthen\n  echo -e \"Dir not found\\n---\\n${BBITUNES_DIR} not found\\n${SETUP}\"\n  exit 1\nfi\n\n# check that the source file is in the repo dir\nif [ ! -f \"${APPLESCRIPT}\" ]\nthen\n  echo -e \"Applescript not found\\n---\\n${APPLESCRIPT} not found\\n${SETUP}\"\n  exit 2\nfi\n\n# if the compiled file is missing, or the source is newer than\n# the compiled file, then recompile\nif [ ! -f \"${COMPILED}\" ] || [ \"${APPLESCRIPT}\" -nt \"${COMPILED}\" ]\nthen\n  /usr/bin/osacompile -o \"${COMPILED}\" \"${APPLESCRIPT}\"\nfi\n\n# run the compiled applescript which does all the work to talk to iTunes\n/usr/bin/osascript \"${COMPILED}\" \"${BASH_SOURCE[0]}\" \"$1\"\n"
				}
			],
			"path": "Music/bbitunes.10s.sh",
			"filename": "bbitunes.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/bbitunes.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "iTunes Lite",
			"version": "v1.0",
			"author": "Padraic Renaghan",
			"authors": [
				{
					"name": "Padraic Renaghan",
					"githubUsername": "prenagha",
					"imageURL": "https://avatars.githubusercontent.com/u/194250?v=4",
					"bio": "Software Engineering \u0026 Architecture. Distributed Systems, Performance, Scalability, Security",
					"primary": true
				}
			],
			"desc": "Display current track info from iTunes",
			"imageURL": "https://github.com/prenagha/bitbar-itunes/raw/master/bbitunes.png",
			"dependencies": [
				"iTunes Lite applescript"
			],
			"aboutURL": "https://github.com/prenagha/bitbar-itunes",
			"lastUpdated": "2021-03-08T15:21:56.815768Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/itunes.10s.sh",
					"filename": "itunes.10s.sh",
					"content": "#!/bin/bash\n\n# Get current iTunes status with play/pause button\n#\n# based on Spotify script by Jason Tokoph (jason@tokoph.net),\n# tweaked by Dan Turkel (daturkel@gmail.com),\n# additionally tweaked by Aleš Farčnik (@alesf)\n#\n# Shows current track information from iTunes\n# 10 second refresh might be a little too quick. Tweak to your liking.\n\n# metadata\n# \u003cbitbar.title\u003eiTunes Now Playing\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDan Turkel, Jason Tokoph, Aleš Farčnik\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edaturkel\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay currently playing iTunes song with artwork. Play/pause, skip forward, skip backward.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/lBfoFdY.png\u003c/bitbar.image\u003e\n\nif [ \"$1\" = 'launch' ]; then\n  osascript -e 'tell application \"iTunes\" to activate'\n  exit\nfi\n\nif [ \"$1\" = 'open' ]; then\n  osascript -e 'tell application \"iTunes\" to reopen'\n  osascript -e 'tell application \"iTunes\" to activate'\n  exit\nfi\n\nif [ \"$(osascript -e 'application \"iTunes\" is running')\" = \"false\" ]; then\n  echo \"♫ | size=12\"\n  echo \"---\"\n  echo \"iTunes is not running\"\n  echo \"Launch iTunes | bash='$0' param1=launch terminal=false\"\n  exit\nfi\n\nif [ \"$1\" = 'playpause' ]; then\n  osascript -e 'tell application \"iTunes\" to playpause'\n  exit\nfi\n\nif [ \"$1\" = 'previous' ]; then\n  osascript -e 'tell application \"iTunes\" to previous track'\n  exit\nfi\n\nif [ \"$1\" = 'next' ]; then\n  osascript -e 'tell application \"iTunes\" to next track';\n  exit\nfi\n\nBitBarDarkMode=${BitBarDarkMode}\nif [ \"$BitBarDarkMode\" ]; then\n  COLOR0=\"#666666\"\n  COLOR1=\"#ffffff\"\n  COLOR2=\"#666666\"\n  COLOR3=\"#333333\"\nelse\n  COLOR0=\"#333333\"\n  COLOR1=\"#000000\"\n  COLOR2=\"#666666\"\n  COLOR3=\"#999999\"\nfi\n\nstate=$(osascript -e '\ntry \n  tell application \"iTunes\"\n    with timeout 3 seconds\n      player state as string\n    end timeout\n  end tell\non error errText\n  \"not available\"\nend try  \n');\nif [ \"$state\" = \"not available\" ]; then\n  echo \"♫ | size=12\"\n  echo \"---\"\n  echo \"iTunes is not available\"\n  exit\nfi\n\ntrack=$(osascript -e'\ntry\ntell application \"iTunes\" to name of current track as string\non error errText\n  \"no track selected\"\nend try\n');\n\nartist=$(osascript -e'\ntry\n\ttell application \"iTunes\" to artist of current track as string\non error errText\n    \"\"\nend try\n');\n\nalbum=$(osascript -e'\ntry\n\ttell application \"iTunes\" to album of current track as string\non error errText\n    \"\"\nend try\n');\n\ntmp_file=$(osascript -e'\ntry\n    tell application \"iTunes\"\n        tell artwork 1 of current track\n            if format is JPEG picture then\n                set imgFormat to \".jpg\"\n\t\t    else\n                set imgFormat to \".png\"\n            end if\n\t    end tell\n        set albumName to album of current track\n        set albumArtist to album artist of current track\n        if length of albumArtist is 0\n            set albumArtist to artist of current track\n        end if\n        set fileName to (do shell script \"echo \" \u0026 quoted form of albumArtist \u0026 quoted form of albumName \u0026 \" | sed \\\"s/[^a-zA-Z0-9]//g\\\"\") \u0026 imgFormat\n    end tell\n\t(POSIX path of (path to temporary items from user domain)) \u0026 fileName\non error errText\n    \"\"\nend try\n');\n\nif [ ! -f \"$tmp_file\" ]; then\n    osascript -e'\n    try\n        tell application \"iTunes\"\n            tell artwork 1 of current track\n                set srcBytes to raw data\n                if format is JPEG picture then\n                    set imgFormat to \".jpg\"\n                else\n                    set imgFormat to \".png\"\n                end if\n            end tell\n            set albumName to album of current track\n            set albumArtist to album artist of current track\n            if length of albumArtist is 0\n                set albumArtist to artist of current track\n            end if\n            set fileName to (do shell script \"echo \" \u0026 quoted form of albumArtist \u0026 quoted form of albumName \u0026 \" | sed \\\"s/[^a-zA-Z0-9]//g\\\"\") \u0026 imgFormat\n        end tell\n        set tmpName to ((path to temporary items from user domain) as text) \u0026 fileName\n        set outFile to open for access file tmpName with write permission\n        set eof outFile to 0\n        write srcBytes to outFile\n        close access outFile\n        tell application \"Image Events\"\n            set resImg to open tmpName\n            scale resImg to size 200\n            save resImg\n            close resImg\n        end tell\n    on error errText\n        \"\"\n    end try\n    '\nfi\n\nif [ -f \"$tmp_file\" ]; then\n    base64img=$(base64 \u003c \"$tmp_file\")\nfi\n\nif [ \"$state\" = \"playing\" ]; then\n  state_icon=\"▶︎\"\nelse\n  state_icon=\"𝝞𝝞\"\nfi\n\nif [ \"$track\" != \"no track selected\" ]; then\n    echo \"♫ $state_icon $track - $artist | color=$COLOR0 size=12\"\nelse\n    echo \"♫ ◼︎ | color=$COLOR0 size=12\"\nfi\n\necho \"---\"\n\nif [ \"$state\" = \"playing\" ]; then\n  echo \"𝝞𝝞 Pause | bash='$0 'param1=playpause terminal=false refresh=true color=$COLOR0\"\n  echo \"« Previous | bash='$0' param1=previous terminal=false refresh=true color=$COLOR0\"\n  echo \"» Next | bash='$0' param1=next terminal=false refresh=true color=$COLOR0\"\nelse\n  echo \"▶︎ Play | bash='$0' param1=playpause terminal=false refresh=true color=$COLOR0\"\nfi\n\necho \"---\"\n\nif [ \"$track\" != \"no track selected\" ] \u0026\u0026 [ \"$base64img\" != \"\" ]; then\n    echo \"| image=$base64img bash='$0' param1=open terminal=false\"\nfi\n\nif [ \"$track\" != \"no track selected\" ]; then\n    echo \"$track | color=$COLOR1\"\n    echo \"$artist | color=$COLOR2\"\n    echo \"$album | size=12 color=$COLOR3 length=30\"\nfi\n\necho '---'\n"
				}
			],
			"path": "Music/itunes.10s.sh",
			"filename": "itunes.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/itunes.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "iTunes Now Playing",
			"version": "v1.1",
			"author": "Dan Turkel,  Jason Tokoph,  Aleš Farčnik",
			"authors": [
				{
					"name": "Dan Turkel",
					"githubUsername": "daturkel",
					"imageURL": "https://avatars.githubusercontent.com/u/1828387?v=4",
					"bio": "",
					"primary": true
				},
				{
					"name": "Jason Tokoph",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				},
				{
					"name": "Aleš Farčnik",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				}
			],
			"desc": "Display currently playing iTunes song with artwork. Play/pause, skip forward, skip backward.",
			"imageURL": "http://i.imgur.com/lBfoFdY.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.017597Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/itunesRating.10s.sh",
					"filename": "itunesRating.10s.sh",
					"content": "#!/bin/bash\n\n# Get current iTunes rating\n#\n# Sebastian Winkler\n#\n# based on iTunes script by Dan\n# Turkel (daturkel@gmail.com) \n\n# metadata\n# \u003cbitbar.title\u003eiTunes Rating\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSebastian Winkler, Dan Turkel\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esw82\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay currently rating from iTunes song and modify it.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://www.mindfuckbox.com/wp-content/uploads/2016/01/iTunes_Rating.png\u003c/bitbar.image\u003e\n\n\nif [ \"$1\" = 'launch' ]; then\n  osascript -e 'tell application \"iTunes\" to activate'\n  exit\nfi\n\nif [ \"$(osascript -e 'application \"iTunes\" is running')\" = \"false\" ]; then\n  echo \"♫\"\n  echo \"---\"\n  echo \"iTunes is not running\"\n  echo \"Launch iTunes | bash='$0' param1=launch terminal=false\"\n  exit\nfi\n\nif [ \"$1\" = 'zero' ]; then\n  osascript -e 'tell application \"iTunes\" to set rating of current track to 00'\n  exit\nfi\n\nif [ \"$1\" = 'one' ]; then\n  osascript -e 'tell application \"iTunes\" to set rating of current track to 20'\n  exit\nfi\n\nif [ \"$1\" = 'two' ]; then\n  osascript -e 'tell application \"iTunes\" to set rating of current track to 40'\n  exit\nfi\n\nif [ \"$1\" = 'three' ]; then\n  osascript -e 'tell application \"iTunes\" to set rating of current track to 60'\n  exit\nfi\n\nif [ \"$1\" = 'four' ]; then\n  osascript -e 'tell application \"iTunes\" to set rating of current track to 80'\n  exit\nfi\n\nif [ \"$1\" = 'five' ]; then\n  osascript -e 'tell application \"iTunes\" to set rating of current track to 100'\n  exit\nfi\n\nrating_icon_black=\"★\"\nrating_icon_white=\"☆\"\n\ntrack=$(osascript -e 'tell application \"iTunes\" to name of current track as string' 2\u003e/dev/null);\nartist=$(osascript -e 'tell application \"iTunes\" to artist of current track as string' 2\u003e/dev/null);\nrating=$(osascript -e 'tell application \"iTunes\" to rating of current track as string' 2\u003e/dev/null);\n\ncase $rating in\n    00)\n        echo $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\n    20)\n        echo $rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\n    40)\n        echo $rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white \n        ;;\n    60)\n        echo $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white \n        ;;\n    80)\n        echo $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white \n        ;;\n    100)\n        echo $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black\n        ;;\n    *)\n        echo $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\nesac\n\necho \"---\"\n\ncase \"$0\" in\n  *\\ * )\n   echo \"Your script path | color=#ff0000\"\n   echo \"($0) | color=#ff0000\"\n   echo \"has a space in it, which BitBar does not support. | color=#ff0000\"\n   echo \"Play/Pause/Next/Previous buttons will not work. | color=#ff0000\"\n  ;;\nesac\n\necho \"$artist -- $track\"\n\ncase $rating in\n    00)\n        echo Rating: $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\n    20)\n        echo Rating: $rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\n    40)\n        echo Rating: $rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white \n        ;;\n    60)\n        echo Rating: $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white \n        ;;\n    80)\n        echo Rating: $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white \n        ;;\n    100)\n        echo Rating: $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black\n        ;;\n    *)\n        echo Rating: $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white\n        ;;\nesac\n\necho '---'\necho 'Rerate'\necho \"$rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white | bash='$0' param1=zero refresh=true terminal=false \"\necho \"$rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white $rating_icon_white | bash='$0' param1=one refresh=true terminal=false \"\necho \"$rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white $rating_icon_white | bash='$0' param1=two refresh=true terminal=false \"\necho \"$rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white $rating_icon_white | bash='$0' param1=three refresh=true terminal=false \"\necho \"$rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_white | bash='$0' param1=four refresh=true terminal=false \"\necho \"$rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black $rating_icon_black | bash='$0' param1=five refresh=true terminal=false \"\n"
				}
			],
			"path": "Music/itunesRating.10s.sh",
			"filename": "itunesRating.10s.sh",
			"dir": "Music",
			"docsPlugin": "Music/itunesRating.10s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "iTunes Rating",
			"version": "v1.0",
			"author": "Sebastian Winkler,  Dan Turkel",
			"authors": [
				{
					"name": "sw",
					"githubUsername": "sw82",
					"imageURL": "https://avatars.githubusercontent.com/u/688064?v=4",
					"bio": "",
					"primary": true
				},
				{
					"name": "Dan Turkel",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				}
			],
			"desc": "Display currently rating from iTunes song and modify it.",
			"imageURL": "http://www.mindfuckbox.com/wp-content/uploads/2016/01/iTunes_Rating.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.075323Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Music/mpd-control.20s.sh",
					"filename": "mpd-control.20s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003empd-control\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSlamet Kristanto\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edrselump14\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eMPD control (mopidy spotify, mopidy soundcloud , etc)\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://www.dropbox.com/s/cgkjb7hv6s1yx1a/Screenshot%202017-02-08%2020.40.02.png?raw=1\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003empd, mpc\u003c/bitbar.dependencies\u003e\n\ncount=\"$( /usr/local/bin/mpc | wc -l )\"\n\nif [ \"$count\" -gt 2 ]\nthen\n  echo \"$(/usr/local/bin/mpc | head -1) | bash='/usr/local/bin/mpc' param1=toggle terminal=false length=25 size=12\"\nelse\n  echo \"\"\nfi\n"
				}
			],
			"path": "Music/mpd-control.20s.sh",
			"filename": "mpd-control.20s.sh",
			"dir": "Music",
			"docsPlugin": "Music/mpd-control.20s.sh.html",
			"docsCategory": "Music.html",
			"pathSegments": [
				"Music"
			],
			"categoryPathSegments": [
				{
					"path": "Music",
					"text": "Music",
					"isLast": true
				}
			],
			"title": "mpd-control",
			"version": "v1.0",
			"author": "Slamet Kristanto",
			"authors": [
				{
					"name": "Kris",
					"githubUsername": "drselump14",
					"imageURL": "https://avatars.githubusercontent.com/u/1251454?v=4",
					"bio": "vim,tmux,alfred, ruby, rails, python, golang, typescript, swift, java, c, c++, elixir, terraform, terragrunt, serverless, AWS\r\n",
					"primary": true
				}
			],
			"desc": "MPD control (mopidy spotify, mopidy soundcloud , etc)",
			"imageURL": "https://www.dropbox.com/s/cgkjb7hv6s1yx1a/Screenshot%202017-02-08%2020.40.02.png?raw=1",
			"dependencies": [
				"mpd",
				"mpc"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:57.090411Z",
			"vars": null
		}
	]
}