{
	"plugin": {
		"files": [
			{
				"path": "Network/aria2.3s.py",
				"filename": "aria2.3s.py",
				"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 python3\n# -*- coding: utf-8 -*-\n\n# Bitbar Metadata\n# \u003cbitbar.title\u003eAria2\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003esinkerine\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003e15cm\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eMonitor Aria2 Tasks\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/15cm/bitbar-plugin/master/aria2/screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython3\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/15cm/bitbar-plugin/tree/master/aria2\u003c/bitbar.abouturl\u003e\n\n# { Aria2\nimport json\nfrom urllib import request\n\nclass Aria2:\n    def __init__(self, host, port, secret = None):\n        self.url = \"http://%s:%d/jsonrpc\" % (host, port)\n        self.secret = secret\n\n    def call(self, method, params = None):\n        if params and type(params) != list:\n            raise Exception('Params should be a list')\n        data_dict = {\n            'jsonrpc': '2.0',\n            'id': '15cm',\n            'method': 'aria2.%s' % method\n        }\n        if self.secret:\n            data_dict['params'] = ['token:%s' % self.secret]\n            if params:\n                data_dict['params'].extend(params)\n        else:\n            data_dict['params'] = params\n        data = json.dumps(data_dict).encode('utf-8')\n        return json.loads(request.urlopen(self.url, data).read().decode('utf-8'))['result']\n\n    def getGlobalStat(self,):\n        return self.call('getGlobalStat')\n\n    def tellActive(self):\n        return self.call('tellActive')\n\n    def tellWaiting(self):\n        return self.call('tellWaiting', [-1, 10])\n\n    def tellStopped(self):\n        return self.call('tellStopped', [-1, 10])\n\n# }\n\nimport os\n\nhost = 'localhost'\nport = 6800\nsecret = ''\ntitle_format = 'üíª ‚¨áÔ∏è' + '%s/s'\n\ndef bytes_to_readable(speed_in_bytes, precision = 1):\n    width = 5\n    display_format = '%{0}.{1}f %s'.format(width, precision)\n    if(speed_in_bytes \u003e 1e9):\n        return display_format % (speed_in_bytes / 1e9, 'GB')\n    elif(speed_in_bytes \u003e 1e6):\n        return display_format % (speed_in_bytes / 1e6, 'MB')\n    else:\n        return display_format % (speed_in_bytes / 1e3, 'KB')\n\nclass Task:\n    def __init__(self, type, path, size, completed_size, dl_speed):\n        self.type = type\n        self.name = os.path.basename(path)\n        self.size = size\n        self.percentage = completed_size / size\n        self.dl_speed = dl_speed\n\n    def __str__(self):\n        stype_dict = {\n            'active': 'üì∂',\n            'waiting': 'üïí',\n            'paused': '‚è∏',\n            'complete': '‚úÖ'\n        }\n        name_width = 40\n        progress_bar_width = 20\n        progress_bar_length = int(self.percentage * progress_bar_width)\n\n        sname = '%-{0}.{0}s'.format(name_width) % self.name\n        # Padding task name with '...' if it is too long\n        if len(self.name) \u003e name_width:\n            sname = sname[0:-3] + '...'\n        stype = stype_dict[self.type] if self.type in stype_dict else '‚ùé'\n        ssize = bytes_to_readable(self.size)\n        sprogress = ('[%-{0}s]%-5.1f'.format(progress_bar_width) % \\\n                    ('=' * progress_bar_length, self.percentage * 100)) + '%'\n        stask = '%s %s %s %s' % (sname, stype, ssize, sprogress)\n        if self.type == 'active':\n            sspeed = '  ‚¨áÔ∏è %s/s' % bytes_to_readable(self.dl_speed)\n            stask += sspeed\n        return stask\n\nif __name__ == '__main__':\n    aria2 = Aria2(host, port, secret)\n    global_stat = aria2.getGlobalStat()\n    [active_tasks, waiting_tasks, stopped_tasks] = [[Task(t['status'], t['files'][0]['path'],\n                              int(t['totalLength']), int(t['completedLength']),\n                                                                      int(t['downloadSpeed'])) for t in t_list if 'files' in t and t['files'] and int(t['totalLength']) \u003e 0]\n                        for t_list in (aria2.tellActive(), aria2.tellWaiting(), aria2.tellStopped())]\n    print(title_format % bytes_to_readable(int(global_stat['downloadSpeed'])) + '|')\n    print('---')\n    print('Active Tasks|color=\"#1b42eb\"')\n    for task in active_tasks:\n        print('%s|font=\"Monaco\"' % task)\n    print('---')\n    print('---')\n    print('Other Tasks|color=\"#7553fc\"')\n    print('---')\n    for task in waiting_tasks :\n        print('%s|font=\"Monaco\"' % task)\n    for task in stopped_tasks:\n        print('%s|font=\"Monaco\"' % task)\n"
			}
		],
		"path": "Network/aria2.3s.py",
		"filename": "aria2.3s.py",
		"dir": "Network",
		"docsPlugin": "Network/aria2.3s.py.html",
		"docsCategory": "Network.html",
		"pathSegments": [
			"Network"
		],
		"categoryPathSegments": [
			{
				"path": "Network",
				"text": "Network",
				"isLast": true
			}
		],
		"title": "Aria2",
		"version": "v1.0",
		"author": "sinkerine",
		"authors": [
			{
				"name": "Sinkerine",
				"githubUsername": "15cm",
				"imageURL": "https://avatars.githubusercontent.com/u/7759556?v=4",
				"bio": "Live \u0026 Sink",
				"primary": true
			}
		],
		"desc": "Monitor Aria2 Tasks",
		"imageURL": "https://raw.githubusercontent.com/15cm/bitbar-plugin/master/aria2/screenshot.png",
		"dependencies": [
			"python3"
		],
		"aboutURL": "https://github.com/15cm/bitbar-plugin/tree/master/aria2",
		"lastUpdated": "2021-03-08T15:21:58.043276Z",
		"vars": null
	}
}