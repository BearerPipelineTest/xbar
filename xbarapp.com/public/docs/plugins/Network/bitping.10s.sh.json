{
	"plugin": {
		"files": [
			{
				"path": "Network/bitping.10s.sh",
				"filename": "bitping.10s.sh",
				"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003ebitping/track/graph\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSimon Hudson\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eSimonSays13\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSends pings to one or more sites, display connectivity status, record results to file (separated daily) and graph the last X minutes performance via the dropdown with no external dependencies\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://www.provulo.com/\u003c/bitbar.abouturl\u003e\n\n# This is a plugin for Bitbar\n# https://github.com/matryer/bitbar\n#\n# Author: (Simon Hudson) simon.hudson@gmail.com\n# Based on original bitbar ping by Trung ƒêinh Quang, Grant Sherrick and Kent Karlsson.\n# Includes bitbash code by GaneshV to render bitmap to menu ( https://github.com/ganeshv )\n# Theme from http://colorbrewer2.org/\n\nRED_GREEN_THEME=(\"#d73027\" \"#fc8d59\" \"#fee08b\" \"#d9ef8b\" \"#91cf60\" \"#1a9850\")\n\n# Configuration\n\nCOLORS=(${RED_GREEN_THEME[@]})\nMENUFONT=\"\"\nFONT=\"\"\nMAX_PING=1000\nSITES=(8.8.8.8) #Google DNS; SITES=(google.com youtube.com wikipedia.org github.com) using only one site is recommended for graph consistency\nGRAPHMINUTES=30\nSITE_INDEX=0\nPING_TIMES=\nbpp=4\nrowbytes=$((width * bpp))\npixbytes=$((width * height * bpp))\nOLDIFS=$IFS\nbmp_header=()\npixels=()\n\nFILE_OUT=\"$HOME/Documents/PingTest/$(date +%Y%m%d).txt\"\n\n#Uncomment if header row required in output file\n#if [ ! -f \"$FILE_OUT\" ]; then\n#    echo \"date, host, response\" \u003e\u003e $FILE_OUT\n#fi\n\n# Functions, etc\n\nfunction colorize {\n\n    if [ \"$1\" -ge $MAX_PING ]; then\n\n        echo \"${COLORS[0]}\"\n\n    elif [ \"$1\" -ge 600 ]; then\n\n        echo \"${COLORS[1]}\"\n\n    elif [ \"$1\" -ge 400 ]; then\n\n        echo \"${COLORS[2]}\"\n\n    elif [ \"$1\" -ge 200 ]; then\n\n        echo \"${COLORS[3]}\"\n\n    elif [ \"$1\" -ge 100 ]; then\n\n        echo \"${COLORS[4]}\"\n\n    else\n\n        echo \"${COLORS[5]}\"\n\n    fi\n\n}\n\nhexle32() {\n\n    local num\n    printf -v num \"%08x\" \"$1\"\n    retval=\"${num:6:2} ${num:4:2} ${num:2:2} ${num:0:2}\"\n\n}\n\nerrmsg() {\n\n    \u003e\u00262 echo \"$@\"\n\n}\n\nmake_bmp_header() {\n\n    local headerbytes comp pixoffset filebytes _filebytes _pixoffset\n    local _headerbytes _width _height _pixbytes\n    bmp_header=()\n    headerbytes=40\n    comp=\"00\"\n\n    if [ \"$bmp_ver\" -eq 5 ]; then\n\n        headerbytes=124\n        comp=\"03\"\n\n    fi\n\n    pixoffset=$((headerbytes + 14))\n    filebytes=$((pixbytes + pixoffset))\n\n    hexle32 $filebytes\n    _filebytes=$retval\n    hexle32 $pixoffset\n    _pixoffset=$retval\n    hexle32 $headerbytes\n    _headerbytes=$retval\n    hexle32 \"$width\"\n    _width=$retval\n    hexle32 \"$height\"\n    _height=$retval\n    hexle32 $pixbytes\n    _pixbytes=$retval\n\n    bmp_header+=(\n        42 4d\n        $_filebytes\n        00 00\n        00 00\n        $_pixoffset\n        $_headerbytes\n        $_width\n        $_height\n        01 00\n        20 00\n        $comp 00 00 00\n        $_pixbytes\n        13 0b 00 00\n        13 0b 00 00\n        00 00 00 00\n        00 00 00 00\n    )\n\n    if [ \"$bmp_ver\" -eq 5 ]; then\n\n        bmp_header+=(\n            00 00 ff 00\n            00 ff 00 00\n            ff 00 00 00\n            00 00 00 ff\n            42 47 52 73\n            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n            00 00 00 00\n            00 00 00 00\n            00 00 00 00\n            00 00 00 00\n            00 00 00 00\n            00 00 00 00\n            00 00 00 00\n        )\n\n    fi\n\n}\n\npoint() {\n\n    local off\n    off=$(($2 * rowbytes + $1 * bpp))\n    pixels[$off]=${curcol[0]}\n    pixels[$((off + 1))]=${curcol[1]}\n    pixels[$((off + 2))]=${curcol[2]}\n    pixels[$((off + 3))]=${curcol[3]}\n\n}\n\nline() {\n\n    local x1 y1 x2 y2 x y\n\n    if [ \"$1\" -eq \"$3\" ]; then\n\n        if [ \"$2\" -gt \"$4\" ]; then y1=$4; y2=$2; else y1=$2; y2=$4; fi\n        for ((y = y1; y \u003c= y2; y++)); do\n            point \"$1\" $y\n        done\n\n    elif [ \"$2\" -eq \"$4\" ]; then\n\n        if [ \"$1\" -gt \"$3\" ]; then x1=$3; x2=$1; else x1=$1; x2=$3; fi\n        for ((x = x1; x \u003c= x2; x++)); do\n            point $x \"$2\"\n        done\n\n    else\n\n        errmsg \"Only vertical and horizontal lines supported\" \"$@\"\n\n    fi\n\n}\n\noutput_bmp() {\n\n    local _bmp=(${bmp_header[@]/#/'\\x'})\n    _bmp+=(${pixels[@]/#/'\\x'})\n\n    local IFS=''\n    echo -ne \"${_bmp[*]}\"\n    IFS=$OLDIFS\n\n}\n\ninit_bmp() {\n\n    local i\n    bmp_ver=${1:-$bmp_ver}\n    width=${2:-$width}\n    height=${3:-$height}\n\n    rowbytes=$((width * bpp))\n    pixbytes=$((width * height * bpp))\n\n    make_bmp_header\n\n    if [ ${#pixels[@]} -ne $pixbytes ]; then\n\n        pixels=()\n        for ((i = 0; i \u003c width * height; i++)); do\n\n            pixels+=(${curcol[@]});\n\n        done\n\n    fi\n}\n\n#Generate Output\n\nwhile [ $SITE_INDEX -lt ${#SITES[@]} ]; do\n\n    NEXT_SITE=\"${SITES[$SITE_INDEX]}\"\n    NEXT_PING_TIME=$(ping -c 2 -n -q \"$NEXT_SITE\" 2\u003e/dev/null | awk -F '/' 'END {printf \"%.0f\\n\", $5}')\n\n    if [ \"$NEXT_PING_TIME\" -eq 0 ]; then\n\n        NEXT_PING_TIME=$MAX_PING\n\n    fi\n\n    if [ -z \"$PING_TIMES\" ]; then\n\n        PING_TIMES=($NEXT_PING_TIME)\n\n    else\n\n        PING_TIMES=(${PING_TIMES[@]} $NEXT_PING_TIME)\n\n    fi\n\n    SITE_INDEX=$(( SITE_INDEX + 1 ))\n\ndone\n\nif [ $NEXT_PING_TIME -ge $MAX_PING ]; then\n\n    MSG=\"DOWN\"\n\nelse\n\n    MSG=\"UP\"\n\nfi\n\necho \"$MSG | color=$(colorize $NEXT_PING_TIME) $MENUFONT\"\necho \"---\"\n\nSITE_INDEX=0\n\nwhile [ $SITE_INDEX -lt ${#SITES[@]} ]; do\n\n    PING_TIME=${PING_TIMES[$SITE_INDEX]}\n\n    echo \"$(date '+%d/%m/%Y %H:%M:%S'), ${SITES[$SITE_INDEX]}, $PING_TIME\" \u003e\u003e \"$FILE_OUT\"\n\n    if [ $PING_TIME -eq $MAX_PING ]; then\n\n        PING_TIME=\"FAIL\"\n\n    else\n\n        PING_TIME=\"$PING_TIME ms | color=$(colorize $PING_TIME) $FONT\"\n\n    fi\n\n    echo \"${SITES[$SITE_INDEX]}: $PING_TIME\"\n    SITE_INDEX=$(( SITE_INDEX + 1 ))\n\ndone\n\necho \"---\"\n\npixels=()\ncurcol=(00 00 00 00)\ninit_bmp 5 $((GRAPHMINUTES*6)) 50\ncurcol=(00 ff 00 ff)\nmax_height=50\n\nreadings=$(tail -$((GRAPHMINUTES*6)) \"$FILE_OUT\" | cut -f3 -d ','  | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n/ /g')\nheights=($readings)\n\nfor ((i = 0; i \u003c ${#heights[@]}; i++)); do\n\n    if [ ${#heights[$i]} -gt $max_height ]; then\n\n        line $i 1 $i $max_height\n\n    else\n\n        line $i 1 $i $((1 + ${heights[$i]}))\n\n    fi\n\ndone\n\nIMAGE=$(output_bmp | base64)\necho \" | image=$IMAGE\"\n\necho \"Refresh... | refresh=true\"\n"
			}
		],
		"path": "Network/bitping.10s.sh",
		"filename": "bitping.10s.sh",
		"dir": "Network",
		"docsPlugin": "Network/bitping.10s.sh.html",
		"docsCategory": "Network.html",
		"pathSegments": [
			"Network"
		],
		"categoryPathSegments": [
			{
				"path": "Network",
				"text": "Network",
				"isLast": true
			}
		],
		"title": "bitping/track/graph",
		"version": "v1.1",
		"author": "Simon Hudson",
		"authors": [
			{
				"name": "Simon Hudson",
				"githubUsername": "SimonSays13",
				"imageURL": "https://avatars.githubusercontent.com/u/24798358?v=4",
				"bio": "founder/CTO provulo.com",
				"primary": true
			}
		],
		"desc": "Sends pings to one or more sites, display connectivity status, record results to file (separated daily) and graph the last X minutes performance via the dropdown with no external dependencies",
		"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
		"dependencies": [],
		"aboutURL": "http://www.provulo.com/",
		"lastUpdated": "2021-03-08T15:21:58.478075Z",
		"vars": null
	}
}