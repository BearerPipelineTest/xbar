{
	"plugins": [
		{
			"files": [
				{
					"path": "Network/wifiname.sh",
					"filename": "wifiname.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eActive WIFI Name\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eJiri\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eCzechJiri\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays currently connected WIFI Name\u003c/bitbar.desc\u003e\n\nWIFINAME=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}')\n\necho \"WIFI: $WIFINAME\"\n"
				}
			],
			"path": "Network/wifiname.sh",
			"filename": "wifiname.sh",
			"dir": "Network",
			"docsPlugin": "Network/wifiname.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Active WIFI Name",
			"version": "",
			"author": "Jiri",
			"authors": [
				{
					"name": "Jiri",
					"githubUsername": "CzechJiri",
					"imageURL": "https://avatars.githubusercontent.com/u/6222611?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays currently connected WIFI Name",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:00.3691Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/wifisignal.sh",
					"filename": "wifisignal.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eActive WIFI Signal\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eBryan Stone\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eaegixx\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays currently connected WIFI Signal\u003c/bitbar.desc\u003e\n\n# Themes copied from here: http://colorbrewer2.org/\n# shellcheck disable=SC2034\nRED_GREEN_THEME=(\"#d73027\" \"#fc8d59\" \"#fee08b\" \"#d9ef8b\" \"#91cf60\" \"#1a9850\")\nCOLORS=(\"${RED_GREEN_THEME[@]}\")\n\nWIFIDATA=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I)\nSSID=$(echo \"$WIFIDATA\" | awk '/ SSID/ {print substr($0, index($0, $2))}')\nSIGNAL=$(echo \"$WIFIDATA\" | awk '/ agrCtlRSSI/ {print substr($0, index($0, $2))}')\nNOISE=$(echo \"$WIFIDATA\" | awk '/ agrCtlNoise/ {print substr($0, index($0, $2))}')\n\nSNR=\"$((SIGNAL - NOISE))\"\n\n# Signal Strength – 0dBm (strongest) and --100dBm (weakest). \n## -30 dBm  Amazing\n## -50 dBm\tExcellent\n## -60 dBm\tGood\n## -67 dBm\tReliable\n## -70 dBm\tOkay\n## -80 dBm\tNot Good\n## -90 dBm\tUnusable\nif ((\"$SIGNAL\" \u003e= -30)); then\n    RATING=\"Amazing\"\n    COLOR=${COLORS[6]}\nelif ((\"$SIGNAL\" \u003e= -50)); then\n    RATING=\"Excellent\"\n    COLOR=${COLORS[5]}\nelif ((\"$SIGNAL\" \u003e= -60)); then\n    RATING=\"Good\"\n    COLOR=${COLORS[4]}\nelif ((\"$SIGNAL\" \u003e= -67)); then\n    RATING=\"Reliable\"\n    COLOR=${COLORS[3]}\nelif ((\"$SIGNAL\" \u003e= -70)); then\n    RATING=\"Okay\"\n    COLOR=${COLORS[2]}\nelif ((\"$SIGNAL\" \u003e= -80)); then\n    RATING=\"Not Good\"\n    COLOR=${COLORS[1]}\nelif ((\"$SIGNAL\" \u003e= -90)); then\n    RATING=\"Unusable\"\n    COLOR=${COLORS[0]}\nelse\n    RATING=\"Unknown\"\n    COLOR=\"#ccc\"\nfi\n\n# Signal Quality - quality ~= 2* (dBm + 100)\n## High quality: 90% ~= -55dBm\n## Medium quality: 50% ~= -75dBm\n## Low quality: 30% ~= -85dBm\n## Unusable quality: 8% ~= -96dBm\nQUALITY=\"$((2 * SNR))\"\nQUALITY=\"$((QUALITY \u003c 100 ? QUALITY : 100))\"\n\necho \"📶 $SSID | color=$COLOR\"\necho \"---\"\necho \"Signal: $SIGNAL dbM ($RATING)\"\necho \"Quality: $QUALITY% ($SNR dBm SNR)\"\necho \"---\"\necho \"Refresh... | refresh=true\"\n"
				}
			],
			"path": "Network/wifisignal.sh",
			"filename": "wifisignal.sh",
			"dir": "Network",
			"docsPlugin": "Network/wifisignal.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Active WIFI Signal",
			"version": "",
			"author": "Bryan Stone",
			"authors": [
				{
					"name": "Bryan Stone",
					"githubUsername": "aegixx",
					"imageURL": "https://avatars.githubusercontent.com/u/7032283?v=4",
					"bio": "Cloud Architect / Platform Engineer / Sr. Software Engineer\r\n\r\nLove bleeding edge and challenges!",
					"primary": true
				}
			],
			"desc": "Displays currently connected WIFI Signal",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:00.369599Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/umbrella_status.15m.sh",
					"filename": "umbrella_status.15m.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eAnyConnect Umbrella Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.3\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJason Masker\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejasmas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eCheck and toggle status of Umbrella Roaming Security Module for Cisco AnyConnect.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/Jznovev.png\u003c/bitbar.image\u003e\n\nPLUGIN_BASE='/opt/cisco/anyconnect/bin/plugins'\n\nIMG_DISABLED=''\nIMG_ENABLED=''\n\n# Check plugin status, return 0 if enabled, 1 if disabled\nfunction check_status {\n    [[ -f $PLUGIN_BASE/libacumbrellaapi.dylib ]] \u0026\u0026\n    [[ -f $PLUGIN_BASE/libacumbrellactrl.dylib ]] \u0026\u0026\n    [[ -f $PLUGIN_BASE/libacumbrellaplugin.dylib ]]\n}\n\n# Check if plugin disabled by utility, return 0 if yes, 1 if no\nfunction verify_plugin_disabled {\n    [[ -f $PLUGIN_BASE/disabled/libacumbrellaapi.dylib ]] \u0026\u0026\n    [[ -f $PLUGIN_BASE/disabled/libacumbrellactrl.dylib ]] \u0026\u0026\n    [[ -f $PLUGIN_BASE/disabled/libacumbrellaplugin.dylib ]]\n}\n\n# Disable plugin\nfunction disable_plugin {\n    /usr/bin/osascript -e \"do shell script \\\"mkdir -p $PLUGIN_BASE/disabled \u0026\u0026 mv -f $PLUGIN_BASE/libacumbrellaapi.dylib $PLUGIN_BASE/libacumbrellactrl.dylib $PLUGIN_BASE/libacumbrellaplugin.dylib $PLUGIN_BASE/disabled/\\\" with administrator privileges\"\n}\n\n# Enable plugin\nfunction enable_plugin {\n    /usr/bin/osascript -e \"do shell script \\\"mv -f $PLUGIN_BASE/disabled/libacumbrellaapi.dylib $PLUGIN_BASE/disabled/libacumbrellactrl.dylib $PLUGIN_BASE/disabled/libacumbrellaplugin.dylib $PLUGIN_BASE/\\\" with administrator privileges\"\n}\n\ncase \"$1\" in\n    'enable')\n        verify_plugin_disabled \u0026\u0026\n        enable_plugin\n        ;;\n    'disable')\n        check_status \u0026\u0026\n        disable_plugin\n        ;;\n    *)\n        check_status \u0026\u0026\n        echo \"| image=$IMG_ENABLED\" ||\n        echo \"| image=$IMG_DISABLED\"\n\n        echo '---'\n\n        (check_status \u0026\u0026\n        echo \"Disable Cisco Umbrella| terminal=false refresh=true bash='$0' param1=disable\") ||\n        (verify_plugin_disabled \u0026\u0026\n        echo \"Enable Cisco Umbrella| terminal=false refresh=true bash='$0' param1=enable\")\n\nesac\n"
				}
			],
			"path": "Network/umbrella_status.15m.sh",
			"filename": "umbrella_status.15m.sh",
			"dir": "Network",
			"docsPlugin": "Network/umbrella_status.15m.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "AnyConnect Umbrella Status",
			"version": "v1.3",
			"author": "Jason Masker",
			"authors": [
				{
					"name": "Jason Masker",
					"githubUsername": "jasmas",
					"imageURL": "https://avatars.githubusercontent.com/u/6385332?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Check and toggle status of Umbrella Roaming Security Module for Cisco AnyConnect.",
			"imageURL": "https://i.imgur.com/Jznovev.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.966367Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/aria2.3s.py",
					"filename": "aria2.3s.py",
					"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 python3\n# -*- coding: utf-8 -*-\n\n# Bitbar Metadata\n# \u003cbitbar.title\u003eAria2\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003esinkerine\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003e15cm\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eMonitor Aria2 Tasks\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/15cm/bitbar-plugin/master/aria2/screenshot.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython3\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/15cm/bitbar-plugin/tree/master/aria2\u003c/bitbar.abouturl\u003e\n\n# { Aria2\nimport json\nfrom urllib import request\n\nclass Aria2:\n    def __init__(self, host, port, secret = None):\n        self.url = \"http://%s:%d/jsonrpc\" % (host, port)\n        self.secret = secret\n\n    def call(self, method, params = None):\n        if params and type(params) != list:\n            raise Exception('Params should be a list')\n        data_dict = {\n            'jsonrpc': '2.0',\n            'id': '15cm',\n            'method': 'aria2.%s' % method\n        }\n        if self.secret:\n            data_dict['params'] = ['token:%s' % self.secret]\n            if params:\n                data_dict['params'].extend(params)\n        else:\n            data_dict['params'] = params\n        data = json.dumps(data_dict).encode('utf-8')\n        return json.loads(request.urlopen(self.url, data).read().decode('utf-8'))['result']\n\n    def getGlobalStat(self,):\n        return self.call('getGlobalStat')\n\n    def tellActive(self):\n        return self.call('tellActive')\n\n    def tellWaiting(self):\n        return self.call('tellWaiting', [-1, 10])\n\n    def tellStopped(self):\n        return self.call('tellStopped', [-1, 10])\n\n# }\n\nimport os\n\nhost = 'localhost'\nport = 6800\nsecret = ''\ntitle_format = '💻 ⬇️' + '%s/s'\n\ndef bytes_to_readable(speed_in_bytes, precision = 1):\n    width = 5\n    display_format = '%{0}.{1}f %s'.format(width, precision)\n    if(speed_in_bytes \u003e 1e9):\n        return display_format % (speed_in_bytes / 1e9, 'GB')\n    elif(speed_in_bytes \u003e 1e6):\n        return display_format % (speed_in_bytes / 1e6, 'MB')\n    else:\n        return display_format % (speed_in_bytes / 1e3, 'KB')\n\nclass Task:\n    def __init__(self, type, path, size, completed_size, dl_speed):\n        self.type = type\n        self.name = os.path.basename(path)\n        self.size = size\n        self.percentage = completed_size / size\n        self.dl_speed = dl_speed\n\n    def __str__(self):\n        stype_dict = {\n            'active': '📶',\n            'waiting': '🕒',\n            'paused': '⏸',\n            'complete': '✅'\n        }\n        name_width = 40\n        progress_bar_width = 20\n        progress_bar_length = int(self.percentage * progress_bar_width)\n\n        sname = '%-{0}.{0}s'.format(name_width) % self.name\n        # Padding task name with '...' if it is too long\n        if len(self.name) \u003e name_width:\n            sname = sname[0:-3] + '...'\n        stype = stype_dict[self.type] if self.type in stype_dict else '❎'\n        ssize = bytes_to_readable(self.size)\n        sprogress = ('[%-{0}s]%-5.1f'.format(progress_bar_width) % \\\n                    ('=' * progress_bar_length, self.percentage * 100)) + '%'\n        stask = '%s %s %s %s' % (sname, stype, ssize, sprogress)\n        if self.type == 'active':\n            sspeed = '  ⬇️ %s/s' % bytes_to_readable(self.dl_speed)\n            stask += sspeed\n        return stask\n\nif __name__ == '__main__':\n    aria2 = Aria2(host, port, secret)\n    global_stat = aria2.getGlobalStat()\n    [active_tasks, waiting_tasks, stopped_tasks] = [[Task(t['status'], t['files'][0]['path'],\n                              int(t['totalLength']), int(t['completedLength']),\n                                                                      int(t['downloadSpeed'])) for t in t_list if 'files' in t and t['files'] and int(t['totalLength']) \u003e 0]\n                        for t_list in (aria2.tellActive(), aria2.tellWaiting(), aria2.tellStopped())]\n    print(title_format % bytes_to_readable(int(global_stat['downloadSpeed'])) + '|')\n    print('---')\n    print('Active Tasks|color=\"#1b42eb\"')\n    for task in active_tasks:\n        print('%s|font=\"Monaco\"' % task)\n    print('---')\n    print('---')\n    print('Other Tasks|color=\"#7553fc\"')\n    print('---')\n    for task in waiting_tasks :\n        print('%s|font=\"Monaco\"' % task)\n    for task in stopped_tasks:\n        print('%s|font=\"Monaco\"' % task)\n"
				}
			],
			"path": "Network/aria2.3s.py",
			"filename": "aria2.3s.py",
			"dir": "Network",
			"docsPlugin": "Network/aria2.3s.py.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Aria2",
			"version": "v1.0",
			"author": "sinkerine",
			"authors": [
				{
					"name": "Sinkerine",
					"githubUsername": "15cm",
					"imageURL": "https://avatars.githubusercontent.com/u/7759556?v=4",
					"bio": "Live \u0026 Sink",
					"primary": true
				}
			],
			"desc": "Monitor Aria2 Tasks",
			"imageURL": "https://raw.githubusercontent.com/15cm/bitbar-plugin/master/aria2/screenshot.png",
			"dependencies": [
				"python3"
			],
			"aboutURL": "https://github.com/15cm/bitbar-plugin/tree/master/aria2",
			"lastUpdated": "2021-03-08T15:21:58.043276Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/bandwidth.1s.sh",
					"filename": "bandwidth.1s.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eBandwidth\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAnt Cosentino\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eskibz\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays TX and RX bitrate of your main ethernet interface in the status bar and hides other interfaces in the context menu.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eifstat\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/2462211/12748504/584bbcea-c9b3-11e5-8109-ad8fdcefdc75.png\u003c/bitbar.image\u003e\n\nexport PATH=\"/usr/local/bin:${PATH}\"\nINTERFACES=$(ifconfig -lu)\n\necho \"▼ $(ifstat -n -w -i en0 0.1 1 | tail -n 1 | awk '{print $1, \" - \", $2;}') ▲\"\necho \"---\"\nfor INTERFACE in ${INTERFACES}; do\n  if [[ ${INTERFACE} != \"en0\" ]]; then\n    echo \"${INTERFACE}: ▼ $(ifstat -n -w -i \"${INTERFACE}\" 0.1 1 | tail -n 1 | awk '{print $1, \" - \", $2;}') ▲\"\n  fi\ndone\n"
				}
			],
			"path": "Network/bandwidth.1s.sh",
			"filename": "bandwidth.1s.sh",
			"dir": "Network",
			"docsPlugin": "Network/bandwidth.1s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Bandwidth",
			"version": "v0.0.0",
			"author": "Ant Cosentino",
			"authors": [
				{
					"name": "Ant Cosentino",
					"githubUsername": "skibz",
					"imageURL": "https://avatars.githubusercontent.com/u/2462211?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays TX and RX bitrate of your main ethernet interface in the status bar and hides other interfaces in the context menu.",
			"imageURL": "https://cloud.githubusercontent.com/assets/2462211/12748504/584bbcea-c9b3-11e5-8109-ad8fdcefdc75.png",
			"dependencies": [
				"ifstat"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.398521Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/bandwidth_primary.1s.sh",
					"filename": "bandwidth_primary.1s.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eBandwidth (Mbit/s)\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKaspars Mickevics\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003efxlv\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays bandwidth usage for the primary interface in Megabits/s\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eifstat\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/2462211/12748504/584bbcea-c9b3-11e5-8109-ad8fdcefdc75.png\u003c/bitbar.image\u003e\n\n# based on bandwidth.1s.sh by Ant Cosentino\n\n# only gather stats from interface en0\n# no need to samlpe unused interfaces\nINTERFACE=\"en0\"\n\n\nif [ ! -e /usr/local/bin/ifstat ]; then\n    echo \"Please install ifstat or change the path to it in the script.\"\n    exit 1\nfi\n\nfunction kilo_to_mega {\n  # in networking 1 mbit is 1000 kilobits (not 1024)\n  printf \"%0.3f\\n\" \"$(bc -q \u003c\u003c\u003c scale=3\\;\"${1}\"/1000)\"\n}\n\nfunction get_ifstat {\n    interface=$1\n    # 1 sample for 0.5 second interval\n    # outputs two values (in/out) in kilobits per second\n    /usr/local/bin/ifstat -n -w -i \"${interface}\" -b 0.5 1 | tail -n 1\n}\n\nfunction print_ifstat {\n    kbits_in=$(echo \"$1\" | awk '{ print $1 }')\n    kbits_out=$(echo \"$1\" | awk '{ print $2 }')\n    mbits_in=$(kilo_to_mega \"$kbits_in\")\n    mbits_out=$(kilo_to_mega \"$kbits_out\")\n    echo \"▼ $mbits_in - $mbits_out ▲\"\n\n}\n\nprint_ifstat \"$(get_ifstat ${INTERFACE})\"\necho \"---\"\n"
				}
			],
			"path": "Network/bandwidth_primary.1s.sh",
			"filename": "bandwidth_primary.1s.sh",
			"dir": "Network",
			"docsPlugin": "Network/bandwidth_primary.1s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Bandwidth (Mbit/s)",
			"version": "v0.0.1",
			"author": "Kaspars Mickevics",
			"authors": [
				{
					"name": "Kaspars Mickēvičs",
					"githubUsername": "fxlv",
					"imageURL": "https://avatars.githubusercontent.com/u/591664?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays bandwidth usage for the primary interface in Megabits/s",
			"imageURL": "https://cloud.githubusercontent.com/assets/2462211/12748504/584bbcea-c9b3-11e5-8109-ad8fdcefdc75.png",
			"dependencies": [
				"ifstat"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.429034Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/bandwidth_all.1s.sh",
					"filename": "bandwidth_all.1s.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eBandwidth (Mbit/s)\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.0.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDan Rohtbart\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edanrohtbart\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays total bandwidth usage for all interfaces in Megabits/s. Especially useful if you are frequently switching between wi-fi and ethernet connections.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eifstat\u003c/bitbar.dependencies\u003e\n\n# based on bandwidth.1s.sh by Ant Cosentino\n# based on bandwidth_primary.1s.sh by Kaspars Mickevics\n\n\nif [ ! -e /usr/local/bin/ifstat ]; then\n    echo \"Please install ifstat or change the path to it in the script.\"\n    exit 1\nfi\n\nfunction kilo_to_mega {\n  # in networking 1 mbit is 1000 kilobits (not 1024)\n  printf \"%0.1f\\\\n\" \"$(bc -q \u003c\u003c\u003c scale=3\\;\"${1}\"/1000)\"\n}\n\nfunction get_ifstat {\n    interface=$1\n    # 1 sample for 0.5 second interval\n    # outputs two values (in/out) in kilobits per second\n    /usr/local/bin/ifstat -n -w -i \"${interface}\" -b 0.5 1 | tail -n 1\n}\n\nfunction print_ifstat {\n    kbits_in=$(echo \"$1\" | awk '{ print $1 }')\n    kbits_out=$(echo \"$1\" | awk '{ print $2 }')\n    mbits_in=$(kilo_to_mega \"$kbits_in\")\n    mbits_out=$(kilo_to_mega \"$kbits_out\")\n    echo \"▼$mbits_in-$mbits_out▲\"\n}\n\nINTERFACES=$(ifconfig -lu)\n\nTOTAL_KBITS_IN=0\nTOTAL_KBITS_OUT=0\n\nfor INTERFACE in ${INTERFACES}\n  do\n    IFSTAT_OUTPUT=\"$(get_ifstat \"${INTERFACE}\")\"\n    KBITS_IN=$(echo \"$IFSTAT_OUTPUT\" | awk '{ print $1 }')\n    KBITS_OUT=$(echo \"$IFSTAT_OUTPUT\" | awk '{ print $2 }')\n    if [ \"$KBITS_IN\" != \"n/a\" ]\n    then\n      TOTAL_KBITS_IN=$(echo \"$TOTAL_KBITS_IN + $KBITS_IN\" | bc)\n      TOTAL_KBITS_OUT=$(echo \"$TOTAL_KBITS_OUT + $KBITS_OUT\" | bc)\n    fi\n\tdone\n\nprint_ifstat \"$TOTAL_KBITS_IN $TOTAL_KBITS_OUT\"\n"
				}
			],
			"path": "Network/bandwidth_all.1s.sh",
			"filename": "bandwidth_all.1s.sh",
			"dir": "Network",
			"docsPlugin": "Network/bandwidth_all.1s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Bandwidth (Mbit/s)",
			"version": "v0.0.2",
			"author": "Dan Rohtbart",
			"authors": [
				{
					"name": "Dan Rohtbart",
					"githubUsername": "danrohtbart",
					"imageURL": "https://avatars.githubusercontent.com/u/25237824?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays total bandwidth usage for all interfaces in Megabits/s. Especially useful if you are frequently switching between wi-fi and ethernet connections.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"ifstat"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.425902Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/bandwidth_total.2s.lua",
					"filename": "bandwidth_total.2s.lua",
					"content": "#!/usr/local/bin/lua\n\n-- 1. install lua with e.g. \"brew install lua\"\n-- 2. use this plugin\n\n-- Written in lua, this plugin is smaller and faster than shell versions with similar function.\n\n-- \u003cbitbar.title\u003eBandwidth Total\u003c/bitbar.title\u003e\n-- \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n-- \u003cbitbar.author\u003eCharl P. Botha\u003c/bitbar.author\u003e\n-- \u003cbitbar.author.github\u003ecpbotha\u003c/bitbar.author.github\u003e\n-- \u003cbitbar.desc\u003eDisplays total TX and RX KBytes/s for all active interfaces. Lua = smaller than .sh.\u003c/bitbar.desc\u003e\n-- \u003cbitbar.dependencies\u003eifstat, lua\u003c/bitbar.dependencies\u003e\n-- \u003cbitbar.image\u003ehttps://cpbotha.net/thingies/bitbar_bandwidth_total_lua.jpg\u003c/bitbar.image\u003e\n\n-- to find the network interface connected to default route you could use this:\n-- https://superuser.com/a/627581/130835\n\n-- use ifstat to read current network throughput\n-- example output:\n--        en0                 en10               Total\n-- KB/s in  KB/s out   KB/s in  KB/s out   KB/s in  KB/s out\n-- 20.67      0.00     17.54      0.00     38.21      0.00\nlocal file = io.popen('/usr/local/bin/ifstat -n -w -z -T 0.1 1')\nlocal output = file:read('*all')\n\n-- split into lines\n-- https://stackoverflow.com/a/32847589/532513\nlocal lines = {}\nfor l in output:gmatch(\"[^\\r\\n]+\") do\n    table.insert(lines, l)\nend\n\nlocal speeds = {}\nfor speed in lines[3]:gmatch(\"%S+\") do\n    table.insert(speeds, speed)\nend\n\nlocal ifaces = {}\nfor iface in lines[1]:gmatch(\"%S+\") do\n    table.insert(ifaces, iface)\nend\n\n-- lua tables start from 1\n-- #name is the number of elements, so name[#name] will give you the last element\nprint(string.format(\"▼%.2f ▲%.2f\", speeds[#speeds-1], speeds[#speeds]))\nprint(\"---\")\n\nfor i = 1,#ifaces-1 do\n    -- remember lua is 1-based (hence the *2+1 and *2+2)\n    -- speeds are already %.2f formatted strings, or \"n/a\" if iface not available\n    print(string.format(\"%s: ▼%s ▲%s\", ifaces[i], speeds[i*2-1], speeds[i*2]))\nend\n"
				}
			],
			"path": "Network/bandwidth_total.2s.lua",
			"filename": "bandwidth_total.2s.lua",
			"dir": "Network",
			"docsPlugin": "Network/bandwidth_total.2s.lua.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Bandwidth Total",
			"version": "v1.0.0",
			"author": "Charl P. Botha",
			"authors": [
				{
					"name": "Charl P. Botha",
					"githubUsername": "cpbotha",
					"imageURL": "https://avatars.githubusercontent.com/u/937871?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays total TX and RX KBytes/s for all active interfaces. Lua = smaller than .sh.",
			"imageURL": "https://cpbotha.net/thingies/bitbar_bandwidth_total_lua.jpg",
			"dependencies": [
				"ifstat",
				"lua"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.430743Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/bandwidth.1s.py",
					"filename": "bandwidth.1s.py",
					"content": "#!/usr/bin/env -S PATH=\"${PATH}:/usr/local/bin\" python3\n\n# \u003cbitbar.title\u003eBandwidth.py\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eChTBoner\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003echtboner\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays upload and download speeds\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/qDPtOxl.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython3, psutil\u003c/bitbar.dependencies\u003e\n#\n# by ChTBoner\n\n\"\"\"\n    An implementation in python of the Bandwith Bitbar Plugin\n    Should work on Linux too with Argos or other status bar (Polybar for example)\n    https://getbitbar.com/plugins/Network/bandwidth.1s.sh\n\n    Unlike the shell status bar, here he result displayed in the bar will the total of all interfaces\n\"\"\"\n\nimport psutil\nfrom time import sleep\n\n\ndef human_bytes(n):\n    \"\"\"\n        convert bytes to human readable format\n        'borrowed' from https://github.com/giampaolo/psutil/blob/master/scripts/ifconfig.py\n    \"\"\"\n\n    symbols = ('K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')\n    prefix = {}\n    for i, s in enumerate(symbols):\n        prefix[s] = 1 \u003c\u003c (i + 1) * 10\n\n    for symbol in reversed(symbols):\n        if n \u003e= prefix[symbol]:\n            value = n / prefix[symbol]\n            return '{} {}'.format(round(value, 2), symbol)\n    return \"{} B\".format(round(n, 2))\n\n\ndef print_stats(upload, download):\n    \"\"\"\n    pretty prints the results\n    upload and download values are multiplied by 2 to compensate 0.5 second sleep\n    \"\"\"\n    return \"▼ {} - {} ▲\".format(human_bytes(upload * 2), human_bytes(download * 2))\n\n\ndef main():\n    # create dict to store results for every interface\n    results = {}\n\n    # set original data and store it in dict\n    results.update(\n        {'total': {\n            'up': psutil.net_io_counters(pernic=False).bytes_sent,\n            'down': psutil.net_io_counters(pernic=False).bytes_recv}\n        })\n\n    # loops through all interfaces to store upload and download data\n    for interface in psutil.net_io_counters(pernic=True):\n        results.update(\n            {interface: {\n                'up': psutil.net_io_counters(pernic=True)[interface].bytes_sent,\n                'down': psutil.net_io_counters(pernic=True)[interface].bytes_recv}\n            })\n\n    sleep(0.5)\n\n    # after sleeping, updates the data to be the difference between the two iterations\n    results.update(\n        {'total': {\n            'up': psutil.net_io_counters(pernic=False).bytes_sent - results[\"total\"][\"up\"],\n            'down': psutil.net_io_counters(pernic=False).bytes_recv - results[\"total\"][\"down\"]}\n        })\n\n    # iterates over interfaces to update data\n    for interface in results:\n        if interface != 'total':\n            results.update({\n                interface: {\n                    'up': psutil.net_io_counters(pernic=True)[interface].bytes_sent - results[interface][\"up\"],\n                    'down': psutil.net_io_counters(pernic=True)[interface].bytes_recv - results[interface][\"down\"]}\n            })\n\n    # print the result to the bar\n    print(print_stats(results[\"total\"][\"up\"], results[\"total\"][\"down\"]))\n\n    print('---')\n    # print in dropdown\n    for interface in results:\n        if interface != 'total':\n            print(\"{}: {}\".format(interface, print_stats(results[interface][\"up\"], results[interface][\"down\"])))\n\n\nif __name__ == '__main__':\n    main()\n"
				}
			],
			"path": "Network/bandwidth.1s.py",
			"filename": "bandwidth.1s.py",
			"dir": "Network",
			"docsPlugin": "Network/bandwidth.1s.py.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Bandwidth.py",
			"version": "v1.0",
			"author": "ChTBoner",
			"authors": [
				{
					"name": "ChTBoner",
					"githubUsername": "chtboner",
					"imageURL": "https://avatars.githubusercontent.com/u/14848356?v=4",
					"bio": "2 Masters Degrees in History. Somehow became a computer engineer...",
					"primary": true
				}
			],
			"desc": "Displays upload and download speeds",
			"imageURL": "https://i.imgur.com/qDPtOxl.png",
			"dependencies": [
				"python3",
				"psutil"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.383476Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/bandwidth-test.2h.sh",
					"filename": "bandwidth-test.2h.sh",
					"content": "#!/bin/sh\n#\n# Bandwith test, using speedtest-cli (https://github.com/sivel/speedtest-cli) \n#\n# \u003cbitbar.title\u003eBandwith test\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAlexandre Espinosa Menor\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ealexandregz\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eBandwith tester, from https://speedtest.net using speedtest-cli\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003espeedtest-cli\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/mrPw9MV.png\u003c/bitbar.image\u003e\n#\n# Dependencies: \n#   speedtest-cli (https://github.com/sivel/speedtest-cli)\n\n# modify this path according your prefs\nif command -v \"/usr/local/bin/speedtest-cli\" \u003e/dev/null 2\u003e\u00261; then\n\tOUTPUT=$(/usr/local/bin/speedtest-cli --simple)\nelse\n\tOUTPUT=$(~/bin/speedtest-cli --simple)\nfi\n\necho \"$OUTPUT\"\n"
				}
			],
			"path": "Network/bandwidth-test.2h.sh",
			"filename": "bandwidth-test.2h.sh",
			"dir": "Network",
			"docsPlugin": "Network/bandwidth-test.2h.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Bandwith test",
			"version": "v1.0",
			"author": "Alexandre Espinosa Menor",
			"authors": [
				{
					"name": "Alexandre Espinosa Menor",
					"githubUsername": "alexandregz",
					"imageURL": "https://avatars.githubusercontent.com/u/1374718?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Bandwith tester, from https://speedtest.net using speedtest-cli",
			"imageURL": "http://i.imgur.com/mrPw9MV.png",
			"dependencies": [
				"speedtest-cli"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.271719Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/bandwidth-test-min.2h.sh",
					"filename": "bandwidth-test-min.2h.sh",
					"content": "#!/bin/bash\n#\n# Bandwith test, using speedtest-cli (https://github.com/sivel/speedtest-cli)\n# Mini version! \n#\n# \u003cbitbar.title\u003eBandwith test (minified)\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJonny Lin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003erangedsp\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eModified mini version of Alexandre Espinosa Menor's Bandwith tester, which uses https://speedtest.net via speedtest-cli\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003espeedtest-cli\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/mrPw9MV.png\u003c/bitbar.image\u003e\n#\n# Dependencies: \n#   speedtest-cli (https://github.com/sivel/speedtest-cli)\n\n# modify this path according your prefs\n\nif command -v \"/usr/local/bin/speedtest-cli\" \u003e/dev/null 2\u003e\u00261; then\n\tOUTPUT=$(/usr/local/bin/speedtest-cli --simple)\nelse\n\tOUTPUT=$(~/bin/speedtest-cli --simple)\nfi\n\nresult_string=\"${OUTPUT/Ping: /P:}\"\nresult_string=\"${result_string/Download: /D:}\"\nresult_string=\"${result_string/Upload: /U:}\"\nresult_string=\"${result_string/ Mbit/Mb}\"\nresult_string=\"${result_string/ Mbit/Mb}\"\nresult_string=\"${result_string/ ms/ms}\"\necho \"$result_string\"\n"
				}
			],
			"path": "Network/bandwidth-test-min.2h.sh",
			"filename": "bandwidth-test-min.2h.sh",
			"dir": "Network",
			"docsPlugin": "Network/bandwidth-test-min.2h.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Bandwith test (minified)",
			"version": "v1.0",
			"author": "Jonny Lin",
			"authors": [
				{
					"name": "Jonny Lin",
					"githubUsername": "rangedsp",
					"imageURL": "https://avatars.githubusercontent.com/u/4970707?v=4",
					"bio": "like an elevator, i move between all levels of software",
					"primary": true
				}
			],
			"desc": "Modified mini version of Alexandre Espinosa Menor's Bandwith tester, which uses https://speedtest.net via speedtest-cli",
			"imageURL": "http://i.imgur.com/mrPw9MV.png",
			"dependencies": [
				"speedtest-cli"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.254675Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/dnsswitcher.1d.sh",
					"filename": "dnsswitcher.1d.sh",
					"content": "#!/usr/bin/env bash\n#\n# DNS Switcher\n# The list of DNS options should be defined on this file\n#\n# \u003cbitbar.title\u003eDNS Switcher\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.4\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eM Saiqul Haq\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esaiqulhaq\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSwitch DNS to your defined DNS options.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://oi66.tinypic.com/2yplm4h.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/Network/dnsswitcher.1d.sh\u003c/bitbar.abouturl\u003e\n\n\n# Configuration\n# set your network service\nnetwork_service=\"Wi-FI\"\n\n# add or remove list of DNS options below, don't forget to make it enabled. see below\n# shellcheck disable=2034\ncloudflare=\"1.1.1.1\n            1.0.0.1\"\n\n# shellcheck disable=2034\ngoogle=\"8.8.8.8\n        8.8.4.4\n\n        2001:4860:4860::8888\n        2001:4860:4860::8844\"\n\n# shellcheck disable=2034\nlevel3=\"209.244.0.3\n        209.244.0.4\n\n        4.2.2.1\n        4.2.2.2\n\n        4.2.2.3\n        4.2.2.4\"\n\n# shellcheck disable=2034\nopendns=\"208.67.222.222\n        208.67.220.220\"\n\n# shellcheck disable=2034\nnorton=\"199.85.126.10\n        199.85.127.10\n\n        199.85.126.20\n        199.85.127.20\n\n        199.85.126.30\n        199.85.127.30\"\n\n# shellcheck disable=2034\ndefault=\"empty\"\n\nenabled_dns_address=(cloudflare google level3 opendns norton default)\n########################\n\n\nselected_dns=\"Unknown\"\ncurrent_dns_output=\"$(networksetup -getdnsservers $network_service)\"\n\nif [[ $current_dns_output == There* ]] # For e.g. \"There aren't any DNS Servers set on Wi-Fi.\"\nthen\n    selected_dns=\"default\"\nelse\n    IFS=', ' read -r -a current_dns_address \u003c\u003c\u003c \"$current_dns_output\"\n\n    for dns_name in \"${enabled_dns_address[@]}\"\n    do\n        for current_dns in \"${current_dns_address[@]}\"\n        do\n        dns_option=\"$(eval echo \\$\"${dns_name}\" | xargs)\"\n            if [[ $dns_option == *\"$current_dns\"* ]]\n            then\n                selected_dns=\"$dns_name\"\n            fi\n        done\n    done\nfi\n\n\n### Bitbar Menu\nif [[ $selected_dns == \"Unknown\" ]]\nthen\n    echo \"Unrecognized DNS\"\nelse\n    echo \"$selected_dns\"\nfi\n\necho \"---\"\n\ntmp_dir=\"/tmp\"\nfor dns_name in \"${enabled_dns_address[@]}\"\ndo\n  switcher=\"$tmp_dir/bitbar_dns_switcher_${dns_name}\"\n  cat \u003c\u003cEOF \u003e \"$switcher\"\ndns_address='$(eval \"echo \\${${dns_name[*]}}\")'\nnetworksetup -setdnsservers $network_service \\$(echo \\$dns_address)\nEOF\n  chmod 700 \"$switcher\"\n  echo \"$dns_name | bash=$switcher | terminal=false | refresh=true\"\ndone\n"
				}
			],
			"path": "Network/dnsswitcher.1d.sh",
			"filename": "dnsswitcher.1d.sh",
			"dir": "Network",
			"docsPlugin": "Network/dnsswitcher.1d.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "DNS Switcher",
			"version": "v1.4",
			"author": "M Saiqul Haq",
			"authors": [
				{
					"name": "Saiqul Haq",
					"githubUsername": "saiqulhaq",
					"imageURL": "https://avatars.githubusercontent.com/u/1275215?v=4",
					"bio": "CTO hungryhub.com",
					"primary": true
				}
			],
			"desc": "Switch DNS to your defined DNS options.",
			"imageURL": "http://oi66.tinypic.com/2yplm4h.jpg",
			"dependencies": null,
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/Network/dnsswitcher.1d.sh",
			"lastUpdated": "2021-03-08T15:21:58.765425Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/emoji-active-network-interface.sh",
					"filename": "emoji-active-network-interface.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eEmoji Active Network Interface Indicator\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eZachary O. Toups\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etoupsz\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays an emoji to indicate if the active network interface is wifi or another connection.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/toupsz/emoji-active-network-interface-indicator\u003c/bitbar.abouturl\u003e\n\n# Text above --- displays an antenna emoji if the active network interface name contains \"Wi-Fi\", shows a plug otherwise.\n\n# Get the active network metadata\nActiveNetwork=$(route get default | grep interface | awk '{print $2}')\n\n# Get the name of the active network from the metadata\nActiveNetworkName=$(networksetup -listallhardwareports | grep -B 1 \"$ActiveNetwork\" | awk '/Hardware Port/{ print }'|cut -d \" \" -f3-)\n\n# Select an emoji based on the name\nif [[ $ActiveNetworkName = *\"Wi-Fi\"* ]]; then\n\techo \"📡\"\nelse\n\techo \"🔌\"\nfi\n"
				}
			],
			"path": "Network/emoji-active-network-interface.sh",
			"filename": "emoji-active-network-interface.sh",
			"dir": "Network",
			"docsPlugin": "Network/emoji-active-network-interface.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Emoji Active Network Interface Indicator",
			"version": "v1.0",
			"author": "Zachary O. Toups",
			"authors": [
				{
					"name": "Z O. Toups",
					"githubUsername": "toupsz",
					"imageURL": "https://avatars.githubusercontent.com/u/3452924?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays an emoji to indicate if the active network interface is wifi or another connection.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/toupsz/emoji-active-network-interface-indicator",
			"lastUpdated": "2021-03-08T15:21:58.80611Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/ip-flag.2m.rb",
					"filename": "ip-flag.2m.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eExternal IP country flag emoji\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.5 beta 1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBruce Steedman\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eMatzFan\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays country flag emoji - e.g. for VPN use\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eOS X 10.11\u003c/bitbar.dependencies\u003e\n\nrequire 'open-uri'\nrequire 'json'\n\nbegin\n  cc = JSON.load(open('http://ip-api.com/json'))\n  country_code = cc['countryCode'].chomp.split ''\n  c1, c2 = *country_code.map { |c| (c.ord + 0x65).chr.force_encoding 'UTF-8' }\n  puts \"\\xF0\\x9F\\x87#{c1}\\xF0\\x9F\\x87#{c2}\"\n  puts \"---\"\n  puts \"Public IP : \" + cc['query']\n  puts \"ISP : \" + cc['isp']\nrescue StandardError =\u003e err\n  puts \"🚩\"\n  puts \"---\"\n  puts err.to_s\nend\n"
				}
			],
			"path": "Network/ip-flag.2m.rb",
			"filename": "ip-flag.2m.rb",
			"dir": "Network",
			"docsPlugin": "Network/ip-flag.2m.rb.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "External IP country flag emoji",
			"version": "v1.5 beta 1",
			"author": "Bruce Steedman",
			"authors": [
				{
					"name": "Bruce Steedman",
					"githubUsername": "MatzFan",
					"imageURL": "https://avatars.githubusercontent.com/u/3764715?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays country flag emoji - e.g. for VPN use",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"OS X 10.11"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.075945Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/got-internet.2s.sh",
					"filename": "got-internet.2s.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eGot Internet?\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eFederico Brigante\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebfred-it\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eChecks the connection to Internet and tells you in a single character.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/I8lF8st.png\u003c/bitbar.image\u003e\n\nping_timeout=1 #integers only, ping's fault\nping_address=8.8.8.8\n\nif ! ping -c 1 -t $ping_timeout -q $ping_address \u003e /dev/null 2\u003e\u00261; then\n\techo \"✧|color=#f23400 dropdown=false\"\n\techo \"---\"\n\techo \"You're offline\"\n\t# echo \"Ping to Google DNS failed\"\nelse\n\techo \"✦|dropdown=false\"\n\techo \"---\"\n\techo \"You're online\"\nfi\n"
				}
			],
			"path": "Network/got-internet.2s.sh",
			"filename": "got-internet.2s.sh",
			"dir": "Network",
			"docsPlugin": "Network/got-internet.2s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Got Internet?",
			"version": "v1.0",
			"author": "Federico Brigante",
			"authors": [
				{
					"name": "Federico Brigante",
					"githubUsername": "bfred-it",
					"imageURL": "https://avatars.githubusercontent.com/u/53252526?v=4",
					"bio": "This profile was renamed to @fregante",
					"primary": true
				}
			],
			"desc": "Checks the connection to Internet and tells you in a single character.",
			"imageURL": "http://i.imgur.com/I8lF8st.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.862244Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/netstats.5s.sh",
					"filename": "netstats.5s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eIP Address Info\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJack Higgins\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eskhg\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays your local IP address with useful extra info\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/skhg/BitBar-Plugins/master/NetworkInfo/ip_info.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/skhg/BitBar-Plugins/tree/master/NetworkInfo\u003c/bitbar.abouturl\u003e\n\n\n\n\n\n# When the connection to the router drops below this speed (Mbps)\n# your IP address will be highlighted in orange\n\nWARNING_SPEED=20\n\n\n\n\n\n\n\n\n\n\n\n# You don't need to change anything below here...\n\nLOCAL_IP=$(ipconfig getifaddr en0 2\u003e\u00261)\nLOCAL_OK=$?\n\nif [ $LOCAL_OK != 0 ] ; then\n    LOCAL_PART=\"❌\"\n    ROUTER_PART=\"❌ - Router | font=Courier\"\nelse\n    LOCAL_PART=$LOCAL_IP\n\n    ROUTER=$(netstat -nr | grep default | grep -E -o '\\d+\\.\\d+\\.\\d+\\.\\d+' 2\u003e\u00261)\n    ROUTER_OK=$?\n\n    if [ $ROUTER_OK != 0 ] ; then\n        ROUTER_PART=\"Unable to determine router IP? | color=orange font=Courier\"\n    else\n        ROUTER_PART=\"$ROUTER\"\" - Router | font=Courier\"\n    fi\nfi\n\nREMOTE_IP=$(dig +short myip.opendns.com @resolver1.opendns.com 2\u003e\u00261)\n# Alternatively, you can use:\n# REMOTE_IP=$(curl ifconfig.me 2\u003e\u00261)\n\nREMOTE_OK=$?\n\nif [ $REMOTE_OK != 0 ] ; then\n    REMOTE_PART=\"❌\"\nelse\n    REMOTE_PART=\"$REMOTE_IP\"\nfi\n\nSPEED=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'lastTxRate:' | grep -o '\\d\\+' 2\u003e\u00261)\n\nif [ $LOCAL_OK != 0 ] ; then\n    SPEED_PART=\"❌\"\n    SPEED_WARNING=0\nelse\n    SPEED_PART=\"$SPEED\"\"Mbps\"\n\n    if [ \"$SPEED\" -lt $WARNING_SPEED ] ; then\n        SPEED_WARNING=1\n    else\n        SPEED_WARNING=0\n    fi\nfi\n\n\n\nif [ $REMOTE_OK != 0 ] ; then\n    REMOTE_WARNING=1\nelse\n    REMOTE_WARNING=0\nfi\n\nfunction speedcolour {\n    SPEED=$1\n\n    if [ \"$SPEED\" == 1 ] ; then\n        echo \" color=orange\"\n        return\n    fi\n\n    echo \"\"\n}\n\nfunction wancolour {\n    WAN=$1\n\n    if [ \"$WAN\" == 1 ] ; then\n        echo \" color=red\"\n        return\n    fi\n\n    echo \"\"\n}\n\nfunction topcolour {\n    SPEED=$1\n    WAN=$2\n\n    if [ \"$WAN\" == 1 ] ; then\n        wancolour \"$WAN\"\n        return\n    fi\n\n    if [ \"$SPEED\" == 1 ] ; then\n        speedcolour \"$SPEED\"\n        return\n    fi\n\n    echo \"\"\n}\n\necho \"$LOCAL_PART | $(topcolour $SPEED_WARNING $REMOTE_WARNING) font=Courier\"\n\necho \"---\"\n\necho \"$LOCAL_PART - Local | font=Courier\"\necho \"$ROUTER_PART\"\necho \"$SPEED_PART - LAN Speed | $(speedcolour $SPEED_WARNING) font=Courier\"\necho \"$REMOTE_PART - WAN | $(wancolour $REMOTE_WARNING) font=Courier\"\n\necho \"---\"\n\necho \"Terminal: ifconfig| bash='ifconfig'\"\necho \"Terminal: Adapter Info| bash='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I'\"\necho \"Terminal: Wireless Scan| bash='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s''\"\n\necho \"---\"\n\necho \"Router Web Config | href=http://$ROUTER_PART\"\n"
				}
			],
			"path": "Network/netstats.5s.sh",
			"filename": "netstats.5s.sh",
			"dir": "Network",
			"docsPlugin": "Network/netstats.5s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "IP Address Info",
			"version": "v1.0",
			"author": "Jack Higgins",
			"authors": [
				{
					"name": "Jack Higgins",
					"githubUsername": "skhg",
					"imageURL": "https://avatars.githubusercontent.com/u/1479627?v=4",
					"bio": "Product Manager and Software Engineer",
					"primary": true
				}
			],
			"desc": "Displays your local IP address with useful extra info",
			"imageURL": "https://raw.githubusercontent.com/skhg/BitBar-Plugins/master/NetworkInfo/ip_info.jpg",
			"dependencies": [],
			"aboutURL": "https://github.com/skhg/BitBar-Plugins/tree/master/NetworkInfo",
			"lastUpdated": "2021-03-08T15:21:59.166689Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/isccond.5m.sh",
					"filename": "isccond.5m.sh",
					"content": "#!/bin/bash\n\n# disabling a linter check which doesn't like unquoted tr\n# shellcheck disable=SC2060\n\n# \u003cbitbar.title\u003eISC Condition Monitor\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003epanzertime\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003epanzertime\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGets ISC's condition code and displays it\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003e\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/panzertime/bitbar-plugins\u003c/bitbar.abouturl\u003e\n\ncolor=$(curl --silent -m 1 https://isc.sans.edu/infocon.txt | tr [a-z] [A-Z])\necho \"ISC Cond ${color} | color=${color}\"\n"
				}
			],
			"path": "Network/isccond.5m.sh",
			"filename": "isccond.5m.sh",
			"dir": "Network",
			"docsPlugin": "Network/isccond.5m.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "ISC Condition Monitor",
			"version": "v1.0",
			"author": "panzertime",
			"authors": [
				{
					"name": "RT Hatfield",
					"githubUsername": "panzertime",
					"imageURL": "https://avatars.githubusercontent.com/u/6854027?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Gets ISC's condition code and displays it",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [],
			"aboutURL": "https://github.com/panzertime/bitbar-plugins",
			"lastUpdated": "2021-03-08T15:21:59.031665Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/mrd-quick-connect.5s.js",
					"filename": "mrd-quick-connect.5s.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n/*\n  \u003cbitbar.title\u003eMicrosoft Remote Desktop - Quick Connect\u003c/bitbar.title\u003e\n  \u003cbitbar.version\u003ev0.1.1\u003c/bitbar.version\u003e\n  \u003cbitbar.author\u003eMarco Ferrer\u003c/bitbar.author\u003e\n  \u003cbitbar.author.github\u003emarrferr\u003c/bitbar.author.github\u003e\n  \u003cbitbar.desc\u003eQuick and easy access to Microsoft Remote Desktop from any desktop space. Allows connection opening and switching. Only displays connections with labels assigned.\u003c/bitbar.desc\u003e\n  \u003cbitbar.image\u003ehttps://www.dropbox.com/s/aiodjoketuujbaf/mrd-quick-connect.png?raw=1\u003c/bitbar.image\u003e\n  \u003cbitbar.dependencies\u003enode,node-simple-plist,node-bitbar\u003c/bitbar.dependencies\u003e\n\n\t************** Decoded Contents of the Apple Script Helper ****************\n\t***************************************************************************\n\ton run connectionLabel\n\t\tset appTitle to \"Microsoft Remote Desktop\"\n\t\tset connectionLabel to (text of item 1 of connectionLabel as string)\n\t\t#set connectionLabel to \"show_connection_list\"\n\t\ttell application appTitle\n\t\t\tactivate\n\t\t\ttell application \"System Events\"\n\t\t\t\ttell process appTitle\n\t\t\t\t\t\n\t\t\t\t\t#Make sure the frontmost windows from mrdp is the connection list\n\t\t\t\t\tset frontmost to true\n\t\t\t\t\tdelay 0.4\n\t\t\t\t\tset menuItems to every menu item of menu \"Window\" of menu bar 1\n\t\t\t\t\tset connectionListMenuItem to false\n\t\t\t\t\tset targetMenuItem to false\n\t\t\t\t\t\n\t\t\t\t\ttry\n\t\t\t\t\t\trepeat with menuItem in menuItems\n\t\t\t\t\t\t\tif (name of menuItem as string) is (connectionLabel \u0026 \" \") then\n\t\t\t\t\t\t\t\tset targetMenuItem to menuItem\n\t\t\t\t\t\t\telse if name of menuItem as string is appTitle then\n\t\t\t\t\t\t\t\tset connectionListMenuItem to menuItem\n\t\t\t\t\t\t\tend if\n\t\t\t\t\t\tend repeat\n\t\t\t\t\tend try\n\t\t\t\t\t\n\t\t\t\t\tif targetMenuItem is not false then\n\t\t\t\t\t\tclick targetMenuItem\n\t\t\t\t\telse\n\t\t\t\t\t\tclick connectionListMenuItem\n\t\t\t\t\t\tdelay 0.3\n\t\t\t\t\t\t\n\t\t\t\t\t\tset connectionListWindow to windows where title contains appTitle\n\t\t\t\t\t\t--Initial focusing of window to prevent problems with closing it later on.\n\t\t\t\t\t\trepeat with w in connectionListWindow\n\t\t\t\t\t\t\tset focused of w to true\n\t\t\t\t\t\tend repeat\n\t\t\t\t\t\t\n\t\t\t\t\t\t--Clear the search input\n\t\t\t\t\t\tkeystroke tab\n\t\t\t\t\t\tkey code 115 --home\n\t\t\t\t\t\tperform action \"AXRaise\" of (first window whose title is appTitle)\n\t\t\t\t\t\tkeystroke \"f\" using {command down} --Focus on search input\n\t\t\t\t\t\tkeystroke \"a\" using {command down} --Select all of inputs contents\n\t\t\t\t\t\tkey code 51 --delete\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (connectionLabel as string) is not \"show_connection_list\" then\n\t\t\t\t\t\t\t--Clear any previously selected list item before filtering\n\t\t\t\t\t\t\tkeystroke tab\n\t\t\t\t\t\t\tkey code 115 --home\n\t\t\t\t\t\t\tperform action \"AXRaise\" of (first window whose title is appTitle)\n\t\t\t\t\t\t\tkeystroke \"f\" using {command down} --Focus on search input\n\t\t\t\t\t\t\tkeystroke connectionLabel --search query\n\t\t\t\t\t\t\tdelay 0.1\n\t\t\t\t\t\t\tkeystroke tab\n\t\t\t\t\t\t\tkey code 123 --left arrow \n\t\t\t\t\t\t\tkey code 124 --right arrow \n\t\t\t\t\t\t\tkey code 125 --down\n\t\t\t\t\t\t\tdelay 0.3\n\t\t\t\t\t\t\tkey code 36 --enter\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t--This method of closing connection window is unreliable \n\t\t\t\t\t\t\t#perform action \"AXPress\" of button 1 of (first window whose title is appTitle)\n\t\t\t\t\t\t\t--Work around for consisten results. Using two forms of closing the connection list window\n\t\t\t\t\t\t\t--Each method covers a particular window state\n\t\t\t\t\t\t\t--Closes window when it is outside of a desktop with a open rdc connection.\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t\trepeat with w in windows\n\t\t\t\t\t\t\t\t\tif title of w contains appTitle then\n\t\t\t\t\t\t\t\t\t\tset focused of w to true\n\t\t\t\t\t\t\t\t\t\tperform action \"AXPress\" of button 1 of w\n\t\t\t\t\t\t\t\t\tend if\n\t\t\t\t\t\t\t\tend repeat\n\t\t\t\t\t\t\tend try\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t--Allows window to be close it is focused into a desktop with a running rdc connection\n\t\t\t\t\t\t\ttell process \"Finder\"\n\t\t\t\t\t\t\t\tclick button 1 of item 1 of connectionListWindow\n\t\t\t\t\t\t\tend tell\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tend if\n\t\t\t\t\tend if\n\t\t\t\tend tell\n\t\t\tend tell\n\t\tend tell\n\tend run\n\t*******************************************************************\n\t*******************************************************************\n */\n\n'use strict';\n\nvar mrdIcon = \"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\",\n\tmrdAppleScriptHelper = '',\n\tpackageJson\t= {\n  \t\tname: \"mrd-quick-connect\",\n  \t\tversion: \"0.1.1\",\n  \t\tdescription: \"BitBar plugin for quick and easy access to Microsoft Remote Desktop from any desktop space. Allows connection opening and switching. Only displays connections with labels assigned.\",\n  \t\trepository: \"\",\n  \t\tlicense: \"MIT\",\n  \t\tdependencies: {\n    \t\t\"bitbar\": \"^0.3.0\",\n    \t\t\"simple-plist\": \"^0.2.1\",\n    \t\t\"find-process\": \"^1.0.5\"\n  \t\t},\n  \t\tappleScriptVer: \"0.1.0\"\n\t},\n\tos \t\t= require('os'),\n\tfs  \t= require('fs'),\n\tbitbar \t= null,\n\tplist \t= null,\n\tfind \t= null,\n\tdependencyDirPath \t= __dirname + '/' + packageJson.name,\n\tmrdContainerBasePath= os.homedir() + '/Library/Containers/com.microsoft.rdc.mac',\n\tmrdPreferencePath \t= mrdContainerBasePath + '/Data/Library/Preferences/com.microsoft.rdc.mac.plist',\n\tmrdWindowListPath\t= mrdContainerBasePath + '/Data/Library/Saved Application State/com.microsoft.rdc.mac.savedState/windows.plist',\n\tappleScriptPath\t\t= dependencyDirPath + '/'+ packageJson.name + '.' + packageJson.appleScriptVer + '.scpt';\n\t\n\nfunction getBarContents(mrdIsRunning){\n\tvar barContents = [{\n\t\t\ttext: ' ',\n\t\t\timage: mrdIcon,\n\t\t\tdropdown: false\n\t\t},\n\t\tbitbar.sep,\n\t\t{\n\t\t\ttext: \"☰  Open Connection List\",\n\t\t\tbash: \"/bin/bash\",\n\t\t\tparam1: \"-c\",\n\t\t\tparam2: \"osascript \" + bitbarEscape(appleScriptPath) + \" show_connection_list\",\n\t\t\tterminal: false\n\t\t},\n\t\tbitbar.sep\n\t];\n\n\tvar mrdPrefs = getPlistJson(mrdPreferencePath);\n\tif(mrdPrefs == null){\n\t\tbarContents.push({\n\t\t\ttext: '❌ Preference file could not be found.'\n\t\t});\n\t\tbarContents.push({\n\t\t\ttext: mrdPreferencePath\n\t\t});\n\t\treturn barContents;\n\t}\n\n\t//mrd wont always clear windows.plist upon exit. Only get windows if mrd is running\n    var windowList = (mrdIsRunning ? getWindowList() : {} ),\n\t\tconnectionIds = mrdPrefs[\"bookmarkorder.ids\"];\n\n\tfor (var i = 0; i \u003c connectionIds.length; i++) {\t\t\n\t\t\n\t\tvar id \t\t = connectionIds[i],\n\t\t\tlabel \t = mrdPrefs[\"bookmarks.bookmark.\"+id+\".label\"],\n\t\t\tusername = mrdPrefs[\"bookmarks.bookmark.\"+id+\".username\"],\n\t\t\thostname = mrdPrefs[\"bookmarks.bookmark.\"+id+\".hostname\"];\n\t\t\n\t\t//For now only connections with labels will be displayed\n\t\tif(label != undefined \u0026\u0026 label != ''){\n\t\t\tvar connectionIsOpen = windowList.hasOwnProperty(label);\n\n\t\t\t//◉ ◯ ◎\t\t\t\n\t\t\tvar barItem = {\n\t\t\t\t\ttext: (connectionIsOpen ? '◉  ' : '◯  ') + label,\n\t\t\t\t\tsize: \"13\",\n\t\t\t\t\t//Only config that succesfully runs apple script help with terminal false\n\t\t\t\t\t//https://github.com/matryer/bitbar/issues/162 \n\t\t\t\t\tbash: \"/bin/bash\",\n\t\t\t\t\tparam1: \"-c\",\n\t\t\t\t\tparam2: \"osascript \" + bitbarEscape(appleScriptPath) + \" \" + bitbarEscape(label),\n\t\t\t\t\tterminal: false\n\t\t\t};\n\n\t\t\t//Stylize connection based on state\n\t\t\tif(connectionIsOpen){\n\t\t\t\tbarItem.font = \"HelveticaNeue-Bold\";\n\t\t\t} else {\n\t\t\t\tbarItem.color = \"gray\";\n\t\t\t}\n\n\t\t\tbarContents.push(barItem);\n\t\t\tbarContents.push({ \n\t\t\t\ttext: \"Username: \" + username,\n\t\t\t\tsize: \"10\"\n\t\t\t});\n\t\t\tbarContents.push(bitbar.sep);\n\t\t}\n\t}\t\n\n\treturn barContents;\n}\n\nfunction bitbarEscape(text){\n\treturn text.replace(\" \",\"\\\\\\ \");\n}\n\nfunction getWindowList(){\n\tvar mrdWindowStates = getPlistJson(mrdWindowListPath),\n\t\twindowList = {};\n\n\tif (mrdWindowStates != null){\n\t\tfor(var i = 0; i \u003c mrdWindowStates.length; i++){\n\n\t\t\tvar mrdWindow = mrdWindowStates[i];\n\t\t\tif(mrdWindow.hasOwnProperty(\"NSTitle\")){\n\n\t\t\t\t//The window title is stored in the plist with trailing spaces. Triming before storing\n\t\t\t\tmrdWindow.NSTitle = mrdWindow.NSTitle.trim();\n\t\t\t\twindowList[mrdWindow.NSTitle] = mrdWindow;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn windowList;\n}\n\nfunction getPlistJson(filePath){\n\tvar result = null;\n\ttry{\n\t\tresult = plist.readFileSync(filePath);\t\t\n\t}catch(ignored){\n\t\t//When an mrd connection is holding up the quiting of the application\n\t\t//it deletes the window plist and fails to quit.\n\t}\n\treturn result;\n}\n\nfunction initDependencies(){\n\tif (!fs.existsSync(dependencyDirPath)){\n\t\tfs.mkdirSync(dependencyDirPath);\t\n\t} \t\t\n\n\tif (!fs.existsSync(appleScriptPath)){\n\t\tfs.writeFileSync(appleScriptPath, Buffer.from(mrdAppleScriptHelper, 'base64'));\n\t}\n\n\ttry{\n\t\tbitbar \t= require( dependencyDirPath + '/node_modules/bitbar' );\n\t\tplist \t= require( dependencyDirPath + '/node_modules/simple-plist' );\n        find    = require( dependencyDirPath + '/node_modules/find-process' );\n\t\treturn true;\n\t}catch(e){\n\t\ttry{\n\t\t\tfs.unlinkSync( dependencyDirPath + \"/package.json\" );\n\t\t}catch(ignored){}\n\t}\n\treturn false;\n}\n\nfunction prepareForInstall(){\n\n\tif (!fs.existsSync(dependencyDirPath + \"/package.json\")){\n\t\tfs.writeFileSync(dependencyDirPath + \"/package.json\", JSON.stringify(packageJson), { flag: 'wx' });\n\t}\n\n\tconsole.log(\n\t\t\"⬇\\n---\\n Click to Install Dependencies | bash='cd \" + \n\t\tdependencyDirPath.replace(\" \",\"\\\\\\\\ \") + \" \u0026\u0026 npm install'\"\n\t);\n}\n\nif(initDependencies()){\n\tfind('name', 'Microsoft Remote Desktop').then(function (list) {\n        bitbar(getBarContents(list.length \u003e 0));\n    }); \t\n}else{\n\tprepareForInstall();\n}\n\n"
				}
			],
			"path": "Network/mrd-quick-connect.5s.js",
			"filename": "mrd-quick-connect.5s.js",
			"dir": "Network",
			"docsPlugin": "Network/mrd-quick-connect.5s.js.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Microsoft Remote Desktop - Quick Connect",
			"version": "v0.1.1",
			"author": "Marco Ferrer",
			"authors": [
				{
					"name": "Marco Ferrer",
					"githubUsername": "marrferr",
					"imageURL": "https://avatars.githubusercontent.com/u/29710945?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Quick and easy access to Microsoft Remote Desktop from any desktop space. Allows connection opening and switching. Only displays connections with labels assigned.",
			"imageURL": "https://www.dropbox.com/s/aiodjoketuujbaf/mrd-quick-connect.png?raw=1",
			"dependencies": [
				"node",
				"node-simple-plist",
				"node-bitbar"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.074532Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/external-ip-1.0.1h.sh",
					"filename": "external-ip-1.0.1h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eMy External IP\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eCodinCafe\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecodincafe\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin will show your current external / public IP and allow you to copy the same to clipboard\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/Ar1JABA.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ecurl\u003c/bitbar.dependencies\u003e\n\necho \"🌎\"\necho '---' \n\nif [ $(curl -LI http://google.com -o /dev/null -w '%{http_code}\\n' -s) == \"200\" ]; then\n    OUTPUT=$(curl -s https://ipinfo.io/ip)\n    result_string=\"$OUTPUT | bash='/bin/bash' param1='-c' param2='/bin/echo $OUTPUT | pbcopy' terminal=false\";\nelse\n    result_string=\"No Internet Connection\"\nfi\n\necho \"$result_string\"\necho ---\necho \"Refresh... | refresh=true\"\n"
				}
			],
			"path": "Network/external-ip-1.0.1h.sh",
			"filename": "external-ip-1.0.1h.sh",
			"dir": "Network",
			"docsPlugin": "Network/external-ip-1.0.1h.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "My External IP",
			"version": "v1.0",
			"author": "CodinCafe",
			"authors": [
				{
					"name": "CodinCafe",
					"githubUsername": "codincafe",
					"imageURL": "https://avatars.githubusercontent.com/u/3754089?v=4",
					"bio": "Caffeine for your coding thoughts",
					"primary": true
				}
			],
			"desc": "This plugin will show your current external / public IP and allow you to copy the same to clipboard",
			"imageURL": "https://i.imgur.com/Ar1JABA.png",
			"dependencies": [
				"curl"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.815234Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/netinfo.60s.sh",
					"filename": "netinfo.60s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eNetwork Info\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.01\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRaymond Kuiper\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eq1x\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eProvides network status information about your Mac: Internal and external IPv4+IPv6 addresses, Whois information and Speedtest.net results.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003espeedtest-cli\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/zFv3RvI.png\u003c/bitbar.image\u003e\n#\n#\n# This bitbar plugin was based on the original \"external-ip\" Bitbar plugin by Mat Ryer.\n# A lot of new functionality has been added, including adding support for speedtest.net and listing internal interface information.\n#\n\n# Set path and Speedtest tmp file\nPATH=/usr/local/bin:$PATH\nSPEEDTEST=\"/tmp/speedtest.txt\"\n\n\n# Function to notify the user via Aple Script\nnotify () {\n    osascript -e \"display notification \\\"$1\\\" with title \\\"Netinfo\\\"\"\n}\n\n# If called with parameter \"copy\", copy the second parameter to the clipboard\nif [ \"$1\" = \"copy\" ]; then\n  # Copy to clipboard\n  echo \"$2\" | pbcopy\n  notify \"Copied $2 to clipboard\"\n  exit 0\nfi\n\n# If called with parameter \"speedtest\", run speedtest-cli\nif [ \"$1\" = \"speedtest\" ]; then\n  # test if speedtest-cli is found\n  if [[ \"$(which speedtest-cli)\" != \"\" ]]; then\n    # Perform a speedtest\n    if speedtest-cli --simple --share \u003e \"$SPEEDTEST\"; then\n      notify \"Speedtest is finished\"\n    else\n      notify \"Speedtest failed\"\n    fi\n  else\n     notify \"Speedtest-cli not found!\"\n  fi\n  exit 0\nfi\n\n# Get external IPs\nEXTERNAL_IP4=$(curl -4 --connect-timeout 3 -s http://v4.ipv6-test.com/api/myip.php || echo None)\nEXTERNAL_IP6=$(curl -6 --connect-timeout 3 -s http://v6.ipv6-test.com/api/myip.php || echo None)\n\n# Perform whois lookup on the external IPv4 address.\n[[ \"$EXTERNAL_IP4\" == \"None\" ]] \u0026\u0026 WHOIS=\"\" || WHOIS=$(whois \"$EXTERNAL_IP4\" | awk '/descr: / {$1=\"\"; print $0 }' | head -n 1)\n\n# Find interfaces\nINTERFACES=$(ifconfig | grep UP | egrep -o '(^en[0-9]*|^utun[0-9]*)' | sort -n)\n\n# Start building output\n[[ \"$EXTERNAL_IP4\" == \"None\" \u0026\u0026 \"$EXTERNAL_IP6\" == \"None\" ]]  \u0026\u0026 echo \"❌\" || echo \"🌐\"\necho \"---\"\necho \"🔄 Refresh | colo=black refresh=true\"\necho \"---\"\necho \"Public: \"\necho \"IPv4: ${EXTERNAL_IP4}${WHOIS} | terminal=false bash='$0' param1=copy param2=$EXTERNAL_IP4\"\necho \"IPv6: ${EXTERNAL_IP6} | terminal=false bash='$0' param1=copy param2=$EXTERNAL_IP6\"\necho \"---\"\necho \"📈 Perform Speedtest | terminal=false refresh=true bash='$0' param1=speedtest\"\n\n# Pretty format the last speedtest if the tmp file is found\nif [[ -e \"$SPEEDTEST\" ]]; then\n     LAST=$(stat -f \"%Sm\" -t \"%Y-%m-%d %H:%M:%S\" \"$SPEEDTEST\")\n     PING=$(awk '/Ping: / { $1=\"\"; print $0 }' \"$SPEEDTEST\")\n     UP=$(awk '/Upload: / { $1=\"\"; print $0 }' \"$SPEEDTEST\")\n     DOWN=$(awk '/Download: / { $1=\"\"; print $0 }' \"$SPEEDTEST\")\n     LINK=$(awk '/Share results: / { $1=\"\"; $2=\"\"; print $0 }' \"$SPEEDTEST\")\n     echo \"Last checked: $LAST\"\n     [[ \"$PING\" != \"\" ]] \u0026\u0026 echo \"⏱$PING ▼$DOWN ▲$UP | href=$LINK\"|| echo \"No results...\"\nelse\n     echo \"Last checked: Never\"\nfi\n\n# Loop through the interfaces and output MAC, IPv4 and IPv6 information\necho \"---\"\nfor INT in $INTERFACES; do\n     echo \"$INT:\"\n     ifconfig \"$INT\" | awk \"/ether/ { print \\\"MAC: \\\" \\$2 \\\" | terminal=false bash='$0' param1=copy param2=\\\" \\$2 }; /inet / { print \\\"IPv4: \\\" \\$2 \\\" | terminal=false bash='$0' param1=copy param2=\\\" \\$2 };  /inet6/ { print \\\"IPv6: \\\" \\$2 \\\" | terminal=false bash='$0' param1=copy param2=\\\" \\$2 }\" | sed -e 's/%utun[0-9]*//g' -e 's/%en[0-9]*//g' | sort\n     echo \"---\"\ndone\n\n# EoF\n"
				}
			],
			"path": "Network/netinfo.60s.sh",
			"filename": "netinfo.60s.sh",
			"dir": "Network",
			"docsPlugin": "Network/netinfo.60s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Network Info",
			"version": "v1.01",
			"author": "Raymond Kuiper",
			"authors": [
				{
					"name": "Raymond Kuiper",
					"githubUsername": "q1x",
					"imageURL": "https://avatars.githubusercontent.com/u/1175880?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Provides network status information about your Mac: Internal and external IPv4+IPv6 addresses, Whois information and Speedtest.net results.",
			"imageURL": "http://i.imgur.com/zFv3RvI.png",
			"dependencies": [
				"speedtest-cli"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.153334Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/sent-received.1s.sh",
					"filename": "sent-received.1s.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eNetwork Sent/Received Totals\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ePaul W. Rankin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ernkn\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays total sent and received wifi data for current sesssion.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/KxXfbKn.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n\n# BitBar Network Sent/Received plugin\n\nINTERFACE=\"en0\"\nTMPFILE=\"${TMPDIR}/bitbar-sent-received\"\n\nif [[ -r \"${TMPFILE}\" ]]\nthen\n    read -ra offsets \u003c \"${TMPFILE}\"\nelse\n    echo \"0 0\" \u003e \"${TMPFILE}\"\n    offsets=(0 0)\nfi\n\ntotals=$(netstat -I \"${INTERFACE}\" -b)\n\nif [[ $1 == reset ]]\nthen\n    awk 'NR-1==1 {print $7, $10}' \u003c\u003c\u003c \"${totals}\" \u003e \"${TMPFILE}\"\nfi\n\nif [[ $1 == undo_reset ]]\nthen\n    rm \"${TMPFILE}\"\nfi\n\nin_bytes=$(awk 'NR-1==1 {print $7}' \u003c\u003c\u003c \"${totals}\")\noffset_in_bytes=$(bc \u003c\u003c\u003c \"${in_bytes} - ${offsets[0]}\")\n\nout_bytes=$(awk 'NR-1==1 {print $10}' \u003c\u003c\u003c \"$totals\")\noffset_out_bytes=$(bc \u003c\u003c\u003c \"${out_bytes} - ${offsets[1]}\")\n\n\nfunction convert_bytes {\n    if [[ $1 -lt 1000000000 ]]\n    then\n        printf \"%0.1f MB\" \"$(bc \u003c\u003c\u003c \"scale = 1; $1 / 1048576\")\"\n    else\n        printf \"%0.2f GB\" \"$(bc \u003c\u003c\u003c \"scale = 2; $1 / 1073741824\")\"\n    fi\n}\n\n# shellcheck disable=SC2086\necho \"▼ $(convert_bytes ${offset_in_bytes}) ▲ $(convert_bytes ${offset_out_bytes})\"\necho \"---\"\necho \"Reset Counters | bash='$0' param1=reset terminal=false\"\necho \"Restore Counters | alternate=true bash='$0' param1=undo_reset terminal=false\"\necho \"---\"\necho \"Refresh | refresh=true terminal=false\"\n"
				}
			],
			"path": "Network/sent-received.1s.sh",
			"filename": "sent-received.1s.sh",
			"dir": "Network",
			"docsPlugin": "Network/sent-received.1s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Network Sent/Received Totals",
			"version": "v1.0",
			"author": "Paul W. Rankin",
			"authors": [
				{
					"name": "Paul W. Rankin",
					"githubUsername": "rnkn",
					"imageURL": "https://avatars.githubusercontent.com/u/1256849?v=4",
					"bio": "Filmmaker. Hobbyist programmer. Most repositories relate to screenwriting.",
					"primary": true
				}
			],
			"desc": "Displays total sent and received wifi data for current sesssion.",
			"imageURL": "https://i.imgur.com/KxXfbKn.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.618431Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/nord-vpn-status.js",
					"filename": "nord-vpn-status.js",
					"content": "#!/usr/local/bin/node\n\n// \u003cbitbar.title\u003eNordVPN Status\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eDustin McBride\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003edustinmcbride\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eYour nordVPN protected status for bit bar\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/dustinmcbride/bitbar-nord-vpn-status/master/screenshots/protected.png\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.abouturl\u003ehttps://github.com/dustinmcbride/bitbar-nord-vpn-status\u003c/bitbar.abouturl\u003e\n\n'use strict';\n\nvar nordUri = 'https://nordvpn.com/wp-admin/admin-ajax.php?action=get_user_info_data';\nvar https = require('https');\n\nfunction createOutput (res) {\n  var titleMessage = res.status ? 'NordVPN | color=green' : '⛔ NordVPN | color=red';\n  var statusMessage = res.status ? 'Protected' : 'Unprotected';\n  \n  console.log(titleMessage);\n  console.log('---');\n  console.log('Status: ' + statusMessage);\n  console.log('ISP: ' + res.isp);\n  console.log('IP: ' + res.ip);\n}\n\nhttps.get(nordUri, function (res) {\n  res.setEncoding('utf8');\n  var body = '';\n  res.on('data', function (data) {\n    body += data;\n  });\n  res.on('end', function () {\n    createOutput(JSON.parse(body));\n  });\n});\n\n"
				}
			],
			"path": "Network/nord-vpn-status.js",
			"filename": "nord-vpn-status.js",
			"dir": "Network",
			"docsPlugin": "Network/nord-vpn-status.js.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "NordVPN Status",
			"version": "v1.0",
			"author": "Dustin McBride",
			"authors": [
				{
					"name": "Dustin McBride",
					"githubUsername": "dustinmcbride",
					"imageURL": "https://avatars.githubusercontent.com/u/4693713?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Your nordVPN protected status for bit bar",
			"imageURL": "https://raw.githubusercontent.com/dustinmcbride/bitbar-nord-vpn-status/master/screenshots/protected.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "https://github.com/dustinmcbride/bitbar-nord-vpn-status",
			"lastUpdated": "2021-03-08T15:21:59.250835Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/openfortivpn.sh",
					"filename": "openfortivpn.sh",
					"content": "#!/bin/bash\n\n# Get current status of a OpenFortiVPN connection with options to connect/disconnect.\n# Commands that require admin permissions should be whitelisted with 'visudo', e.g.:\n# YOURUSERNAME ALL=(ALL) NOPASSWD: /usr/local/bin/openfortivpn\n# YOURUSERNAME ALL=(ALL) NOPASSWD: /usr/bin/killall -2 openfortivpn\n# To use openfortivpn in an easy way you can create file like: /Documents/.fortivpn-config and put your crential in it as following:\n#\n# host=123.45.678.9\n# port=1234\n# username=FOO\n# password=MYPASSWORDCHARACHTERS\n# trusted-cert=MYCERTIFICATECHARACHTERS\n\n# \u003cbitbar.title\u003eOpenFortiVPN\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEmran Mobaraki Novin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eemranovin\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays status of a OpenFortiVPN interface with option to connect/disconnect.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/v2aW5mo.png\u003c/bitbar.image\u003e\n\nVPN_EXECUTABLE=/usr/local/bin/openfortivpn\nVPN_EXECUTABLE_PARAMS=\"-c$HOME/Documents/.fortivpn-config\" # Optional\nVPN_INTERFACE=ppp0\n# Command to determine if OpenFortiVPN is connected or disconnected\nVPN_CONNECTED=\"/sbin/ifconfig | egrep -A1 $VPN_INTERFACE | grep inet\"\n# Command to run to disconnect OpenFortiVPN\nVPN_DISCONNECT_CMD=\"sudo killall -2 openfortivpn\"\n\ncase \"$1\" in\n    connect)\n        # VPN connection command, should eventually result in $VPN_CONNECTED,\n        sudo \"$VPN_EXECUTABLE\" \"$VPN_EXECUTABLE_PARAMS\" \u0026\u003e /dev/null \u0026\n        # Wait for connection so menu item refreshes instantly\n        until eval \"$VPN_CONNECTED\"; do sleep 1; done\n        ;;\n    disconnect)\n            eval \"$VPN_DISCONNECT_CMD\"\n        # Wait for disconnection so menu item refreshes instantly\n        until [ -z \"$(eval \"$VPN_CONNECTED\")\" ]; do sleep 1; done\n        ;;\nesac\n\nif [ -n \"$(eval \"$VPN_CONNECTED\")\" ]; then\n    echo \"✔\"\n    echo '---'\n    echo \"Disconnect OpenFortiVPN | bash='$0' param1=disconnect terminal=false refresh=true\"\n    exit\nelse\n    echo \"✘\"\n    echo '---'\n    echo \"Connect OpenFortiVPN | bash='$0' param1=connect terminal=false refresh=true\"\n    exit\nfi\n"
				}
			],
			"path": "Network/openfortivpn.sh",
			"filename": "openfortivpn.sh",
			"dir": "Network",
			"docsPlugin": "Network/openfortivpn.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "OpenFortiVPN",
			"version": "v1.0",
			"author": "Emran Mobaraki Novin",
			"authors": [
				{
					"name": "Emran",
					"githubUsername": "emranovin",
					"imageURL": "https://avatars.githubusercontent.com/u/24988058?v=4",
					"bio": "I've just felled in love with Swift!",
					"primary": true
				}
			],
			"desc": "Displays status of a OpenFortiVPN interface with option to connect/disconnect.",
			"imageURL": "https://i.imgur.com/v2aW5mo.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.497764Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/pia-vpn-status.5m.sh",
					"filename": "pia-vpn-status.5m.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003ePIA VPN Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eParvez\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eparvez\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays PIA VPN connection status\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/YqBwZed.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/parvez/bitbar-plugins\u003c/bitbar.abouturl\u003e\n#\n# by Parvez\npia1=$(curl --silent https://www.privateinternetaccess.com/pages/whats-my-ip/)\npia2=$(echo \"$pia1\" | tr -d \"\\n\" | /usr/local/bin/gsed -r \"s/\u003cscript([^\u003c]|\u003c[^\\/]|\u003c\\/[^s]|\u003c\\/s[^c])*\u003c\\/script\u003e|\u003cstyle([^\u003c]|\u003c[^\\/]|\u003c\\/[^s]|\u003c\\/s[^t])*\u003c\\/style\u003e//g\" | grep -o '\u003cdiv class=\"ipbox-footer\"\u003e.*\u003cdiv class=\"ipbox-map\"\u003e' | /usr/local/bin/gsed -r \"s/\u003c[^\u003e]*\u003e//g\" | /usr/local/bin/gsed -r \"s/:\\s+/: /g\" | /usr/local/bin/gsed -r \"s/\\s\\s+/\\r\\n/g\")\n\nif [[ $pia1 == *\"You are protected by PIA\"* ]]\nthen\n  echo \"✅\"\nelse\n  echo \"🚫\"\nfi\n\necho \"---\"\necho \"$pia2\"\n"
				}
			],
			"path": "Network/pia-vpn-status.5m.sh",
			"filename": "pia-vpn-status.5m.sh",
			"dir": "Network",
			"docsPlugin": "Network/pia-vpn-status.5m.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "PIA VPN Status",
			"version": "v1.0",
			"author": "Parvez",
			"authors": [
				{
					"name": "Parvez",
					"githubUsername": "parvez",
					"imageURL": "https://avatars.githubusercontent.com/u/126749?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays PIA VPN connection status",
			"imageURL": "http://i.imgur.com/YqBwZed.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/parvez/bitbar-plugins",
			"lastUpdated": "2021-03-08T15:21:59.457684Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/pi-hole.1m.py",
					"filename": "pi-hole.1m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003ePi-hole status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev3.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eFelipe Martin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003efmartingr\u003c/bitbar.author.github\u003e\n# \u003cbitbar.author\u003eSiim Ots\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esiimots\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow summary and manage Pi-Hole from menubar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://files.fmartingrlabs.com/github/bitbar-plugins/pihole.1m.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epi-hole,python\u003c/bitbar.dependencies\u003e\nimport json\nimport os\n\ntry:  # Python 3\n    from urllib.request import urlopen\nexcept ImportError:  # Python 2\n    from urllib2 import urlopen  # noqa\n\n\nPLUGIN_PATH = os.path.join(os.getcwd(), __file__)\n\n# ---\n# Variables\n# ---\n\n# URL to the pi-hole admin path without trailing slash\nbase_url = \"http://pi.hole/admin\"\n\n# Your Pi-hole password hash (used for management)\n# THIS IS NOT YOUR PIHOLE ADMIN PASSWORD\n# You can find this password hash in the setupVars.conf file of your pihole\n# server which is typically is found in /etc/pihole/setupVars.conf.\n# Look for the PASSWORDHASH key.\npassword = \"\"\n\n# Menubar icon type ('color' or 'bw')\nicon_type = 'bw'\n\n# Menubar icon\nicon_bw = 'iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAActpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+d3d3Lmlua3NjYXBlLm9yZzwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGMtVWAAAA2dJREFUWAnFlluITWEUx4dmGPdcHlA8yClK1MyTS03G0xByV5TEeCKKlAYRkoaUJ0Lz4FbkUngwNC8uDUoI5TrRFHIZzCAzZvj92auWbZ8znLPPmVW/+da3vvWtteY7a3975+W1Lz3bd8mdxwlS/YDPcArKoEOliewqyHOReaKjqqoNFWOFNWDvkNNakqQgFdYMpZBM1HtFUJDMIR27gt0FO5nw+I61QaHA3Zjvhq8g/+MQqxQTzYKHC9J8u8tWiH4VvN8ltx6buohIbaFElvSey7IuwmeBW49VXUG0qKJkGwz6eevBCtVYDVmVWUT/AD6pdPXMypD9BvP+kHUZSIZKuA/fIVycLtEq6AU5FxV3EHxRi3NehUvYGX0M+N56xVyF5lTUwFvgPfjTMf0m9u6QE1GjXgFLrvEyqLEbnP08ehfIquhW1r1jxXxD13VgkkB5CbZ+Bl2nmRXRyejJsmSv0SdEZJrjfOR7EmIvSv3g3/yfmI+FKJmJUYWcDkbp+q7Kh1ikE1H0grST8eND7AdgFSwD9VEjnIO54H2PMddTmbFUEMECP0CfDuWgYsweHieytjdifSu2jEQ/Swv4hK3Mj4DeXypM945f1ymp3z6CPl1GwnOQj+4rnVxa0pVdT0CB3sAG0Ju7BmR7Ckqs/poNq6EEJCpKPvamnxfMZXsLA+C/ZS07FEAooMk4FLNvMqMbh6E3g3yGBHb1of+J9wT2v4ZUTbbUeT9zuj7WTBKmuFGnUhDMdSdJVNy1X9rvPzOc/oeaqiDvOMpNRjj9kdNNHW4KY6HTeztd/RUpqQqqcjumOl0Xn0SfHmrusOinMRkfKP0YJ5mRcb/T/1nVf1cHOm49HWrqzcFctn2gd9VOeAxnQTd3X9DJyecFrIHrwVw2+ab9jiths05CgTyNzPWJsStkV+Fq2KFwCFrB72throciI9nIbh9U+jYohXBC86tnbT2UQx2YvQI9Y9EjexQsqEZdmLq1lXgK9IA+MB/0M3lf0w9jV6xYRJdkDVhwff9IXw5hWYjB/GzUXsWIVXQKvigl2xGRIdxX2qO9WRG9JqrB/vMm9CKXqRj9i1u/gK49WZV8ousU2kCF6bt6WoB9Y2utEuSbM5lMpttgp2XjLWxl6VaRaddrv5640UEBdxhrQcWlJT8BdaxGflEnmuwAAAAASUVORK5CYII==' # noqa\nicon_color = '' # noqa\n\n# Url to check the service status\nurl_status = \"%s/api.php?status\u0026auth=%s\" % (base_url, password)\n\n# Url to get the summary\nurl_summary = \"%s/api.php?summary\" % base_url\n\n# Urls to enable/disable service\nurl_enable = \"%s/api.php?enable\u0026auth=%s\" % (base_url, password)\nurl_disable = \"%s/api.php?disable\u0026auth=%s\" % (base_url, password)\n\n\n# ---\n# Helper methods\n# ---\ndef convert_to_native(data):\n    return json.loads(data)\n\n\ndef do_request(url, method='GET'):\n    response = urlopen(url)\n    return convert_to_native(response.read())\n\n\ndef get_summary():\n    response = do_request(url_summary)\n    return response\n\n\ndef get_status():\n    response = do_request(url_status)\n    return response['status']\n\n\ndef separator():\n    print('---')\n\n\n# Data\nsummary = get_summary()\nstatus = get_status()\nenabled = status == 'enabled'\n\n\n# Layout\ndef bitbar():\n    # Menubar icon\n    print('| templateImage=%s' % globals()['icon_%s' % icon_type])\n    separator()\n\n    print(\"Open pi-hole admin | href=%s\" % base_url)\n    separator()\n\n    print('Status: %s' % status)\n    if enabled:\n        print('Disable Pi-hole | href=%s' % url_disable)\n    else:\n        print('Enable Pi-hole | href=%s' % url_enable)\n\n    separator()\n    print(\"Domains being locked: %s\" % summary['domains_being_blocked'])\n    print(\"Ads blocked today: %s (%s%%)\" % (summary['ads_blocked_today'],\n                                            summary['ads_percentage_today']))\n    print(\"DNS queries today: %s\" % summary['dns_queries_today'])\n    print(\"Queries cached today: %s\" % summary['queries_cached'])\n    print(\"Queries forwarded today: %s\" % summary['queries_forwarded'])\n    print(\"Unique domains today: %s\" % summary['unique_domains'])\n    separator()\n\n\n# Execution\ntry:\n    bitbar()\nexcept Exception as e:\n    print('Script error:')\n    print(e)\n    separator()\n"
				}
			],
			"path": "Network/pi-hole.1m.py",
			"filename": "pi-hole.1m.py",
			"dir": "Network",
			"docsPlugin": "Network/pi-hole.1m.py.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Pi-hole status",
			"version": "v3.1",
			"author": "Siim Ots",
			"authors": [
				{
					"name": "Siim Ots",
					"githubUsername": "siimots",
					"imageURL": "https://avatars.githubusercontent.com/u/7014925?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show summary and manage Pi-Hole from menubar.",
			"imageURL": "https://files.fmartingrlabs.com/github/bitbar-plugins/pihole.1m.png",
			"dependencies": [
				"pi-hole",
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.436032Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/protonvpn.15m.py",
					"filename": "protonvpn.15m.py",
					"content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# \u003cbitbar.title\u003eProtonVPN Server Monitor\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSai Sasidhar Maddali\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esaisasidhar\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays ProtonVPN server load for free and user defined servers\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/saisasidhar/utils/master/bitbar-argos/ProtonVPN/preview-bitbar.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/saisasidhar/utils/tree/master/bitbar-argos/ProtonVPN\u003c/bitbar.abouturl\u003e\n\ntry:\n    # for python3\n    from urllib.request import urlopen\nexcept ImportError:\n    # fallback to python2 urllib2\n    from urllib2 import urlopen\n\nimport json\n\nmenu_titles = []\nmenu_items = []\nmenu_end = []\nfree_servers = []\ncustom_servers = []\n\n# Change this to track custom VPN servers. For example: [\"NL#1\", \"NL#13\", \"NL#25\"]\ncustom_server_names = []\n# Change this to display/hide free VPN servers\ndisplay_free = True\n# Change this to display/hide country flags (emoji)\ndisplay_flags = False\n# However, flag emojis are not shown in macOS when emoji code such as :in: is used (Tested on macOS 10.12.5)\n# Nevertheless, this flag can be set to true for argos (gnome extension)\n\ntry:\n    api_response = urlopen(\"https://api.protonmail.ch/vpn/logicals\")\n    string_response = api_response.read().decode(\"utf-8\")\n    available_servers = json.loads(string_response)[\"LogicalServers\"]\n\n    if display_free:\n        free_servers = [server for server in available_servers if server[\"Tier\"] == 0]\n\n    if len(custom_server_names) != 0:\n        custom_servers = [server for server in available_servers if server[\"Name\"] in custom_server_names]\n\n    track_servers = custom_servers + free_servers\n\n    if len(track_servers) != 0:\n        min_load_server = min(track_servers, key=lambda x:x[\"Load\"])\n\n        menu_titles.append(str(min_load_server[\"Load\"]) + \"% load on \" + min_load_server[\"Name\"])\n        menu_titles.append(\"---\")\n        for ts in track_servers:\n            menu_items.append(str(\":\"+ts[\"Country\"]+\":\\t\" if display_flags else \"\") +\\\n                            str(ts[\"Load\"]).zfill(2) + \"% on \" + ts[\"Name\"] +\\\n                            \"| color=\" +\\\n                            str(\"#9CCB19\" if ts[\"Load\"] \u003c 33 else (\"#FF9912\" if ts[\"Load\"]\u003c66 else \"#FF4040\")))\n\n        menu_end.append(\"---\")\n        menu_end.append(\"Refresh | refresh=true\")\n\n        for title in menu_titles:\n            print(title)\n        for item in menu_items:\n            print(item)\n        for item in menu_end:\n            print(item)\nexcept Exception as e:\n    print(\"ProtonVPN Error\")\n"
				}
			],
			"path": "Network/protonvpn.15m.py",
			"filename": "protonvpn.15m.py",
			"dir": "Network",
			"docsPlugin": "Network/protonvpn.15m.py.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "ProtonVPN Server Monitor",
			"version": "v1.0",
			"author": "Sai Sasidhar Maddali",
			"authors": [
				{
					"name": "Sai Sasidhar Maddali",
					"githubUsername": "saisasidhar",
					"imageURL": "https://avatars.githubusercontent.com/u/4975157?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays ProtonVPN server load for free and user defined servers",
			"imageURL": "https://raw.githubusercontent.com/saisasidhar/utils/master/bitbar-argos/ProtonVPN/preview-bitbar.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/saisasidhar/utils/tree/master/bitbar-argos/ProtonVPN",
			"lastUpdated": "2021-03-08T15:21:59.558496Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/proxy_status.5s.sh",
					"filename": "proxy_status.5s.sh",
					"content": "#!/bin/bash\n#\n# Proxy Status and toggler\n#\n# \u003cbitbar.title\u003eProxy Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eCameron Currie\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecwc\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays proxy status and allows toggling it on and off.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/7dEg9ki.png\u003c/bitbar.image\u003e\n\ninterface=\"wi-fi\" # You can also set this to e.g. \"ethernet\"\n\nproxy_type=\"SOCKS\"\nproxy_get=\"-getsocksfirewallproxy\"\nproxy_set=\"-setsocksfirewallproxystate\"\n\nstate=$(networksetup $proxy_get $interface | grep \"No\")\n\nif [ \"$1\" = 'toggle' ]; then\n    # Prompts for the user's password, then toggles the SOCKS proxy state\n  if [ -n \"$state\" ]; then\n    networksetup $proxy_set $interface on\n  else\n    networksetup $proxy_set $interface off\n  fi\n\n  exit\nfi\n\nif [ -n \"$state\" ]; then\n  state_icon=\"☐\"\n  action_toggle=\"Enable\"\nelse\n  state_icon=\"☑\"\n  action_toggle=\"Disable\"\nfi\n\necho \"$state_icon $proxy_type | dropdown=false\"\n\necho \"---\"\n\necho \"$action_toggle Proxy | bash='$0' param1=toggle terminal=false refresh=true\"\n"
				}
			],
			"path": "Network/proxy_status.5s.sh",
			"filename": "proxy_status.5s.sh",
			"dir": "Network",
			"docsPlugin": "Network/proxy_status.5s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Proxy Status",
			"version": "v1.0",
			"author": "Cameron Currie",
			"authors": [
				{
					"name": "Cameron Currie",
					"githubUsername": "cwc",
					"imageURL": "https://avatars.githubusercontent.com/u/115420?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays proxy status and allows toggling it on and off.",
			"imageURL": "http://i.imgur.com/7dEg9ki.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.585336Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/sbcdash-client.1h.py",
					"filename": "sbcdash-client.1h.py",
					"content": "#!/usr/bin/env python\n# \u003cbitbar.title\u003eSBCDash\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ephntxx\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ephntxx\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows the CPU temperature, RAM and space usage of your SBC.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://phntxx.github.io/sbcdash\u003c/bitbar.abouturl\u003e\n\n#import required modules\nimport urllib2\nimport json\n\n# Welcome to the SBCDash-Client for BitBar!\n# For usage and prerequisite information, visit https://phntxx.github.io/sbcdash-server\n# This Plugin requires a Single-Board Computer (such as the Raspberry Pi)\n# and the sbcdash-server script installed on it.\n\n# The IPAddrs-Variable is required for storing the IP-Addresses of your SBCs.\n# Add your IP-Addresses in this variable in the following format:\n# \"http://\u003cIP Address and path to sbcdash-server\u003e/api.php\"\n# If you've set a password, add it by appending it to the IP-Address.\n\n# Example (without password):\n# \"http://172.222.69.199/sbcdash-server/api.php\"\n# Example (with password):\n# \"http://172.222.69.199/sbcdash-server/api.php?password=helloworld\"\n\nIPAddresses = []\n\ndef getData(IP):\n    response = urllib2.urlopen(IP)\n    data = response.read()\n    try:\n        appData = json.loads(data)\n        return {\n            'temperature': appData['temperature'],\n            'ram_free': appData['ram_free'] + \"MB\",\n            'ram_used': appData['ram_used'] + \"MB\",\n            'disk_free': appData['disk_free'] + \"B\",\n            'disk_used': appData['disk_used'] + \"B\"\n        }\n    except:\n        return None\n\noutput = []\nfor IP in IPAddresses:\n    output.append(getData(IP))\n\nprint \"sbcDash\"\nprint \"---\"\nfor i in output:\n    print \"CPU: %sC\" % (i['temperature'])\n    print \"RAM: %s free, %s used\" % (i['ram_free'], i['ram_used'])\n    print \"Space: %s free, %s used\" % (i['disk_free'], i['disk_used'])\n    print \"---\"\n"
				}
			],
			"path": "Network/sbcdash-client.1h.py",
			"filename": "sbcdash-client.1h.py",
			"dir": "Network",
			"docsPlugin": "Network/sbcdash-client.1h.py.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "SBCDash",
			"version": "v1.0",
			"author": "phntxx",
			"authors": [
				{
					"name": "Bastian Meissner",
					"githubUsername": "phntxx",
					"imageURL": "https://avatars.githubusercontent.com/u/8216940?v=4",
					"bio": "CompSci @ University of Applied Sciences Regensburg",
					"primary": true
				}
			],
			"desc": "Shows the CPU temperature, RAM and space usage of your SBC.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://phntxx.github.io/sbcdash",
			"lastUpdated": "2021-03-08T15:21:59.575822Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/ssh.sh",
					"filename": "ssh.sh",
					"content": "#!/usr/bin/env bash\n#\n# Quickly SSH to your favorite hosts\n# The list of hosts are extracted from ~/.ssh/config\n#\n# \u003cbitbar.title\u003eSSH\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eThameera Senanayaka\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ethameera\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eQuickly SSH to your favorite hosts listed in your ~/.ssh/config file\u003c/bitbar.desc\u003e\n#\n\necho \"ssh\"\necho \"---\"\nawk  '/^Host / \u0026\u0026 !/\\*/ {print $2\" | bash=ssh param1=\"$2}' ~/.ssh/config\n"
				}
			],
			"path": "Network/ssh.sh",
			"filename": "ssh.sh",
			"dir": "Network",
			"docsPlugin": "Network/ssh.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "SSH",
			"version": "v1.0",
			"author": "Thameera Senanayaka",
			"authors": [
				{
					"name": "Thameera Senanayaka",
					"githubUsername": "thameera",
					"imageURL": "https://avatars.githubusercontent.com/u/1736835?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Quickly SSH to your favorite hosts listed in your ~/.ssh/config file",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.840101Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/ssh-status.10min.sh",
					"filename": "ssh-status.10min.sh",
					"content": "#!/usr/bin/env bash\n#\n# \u003cbitbar.title\u003eSSH Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eOlivier Tille\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eoliviernt\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/s8FMCLG.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eContinuously checks if hosts are available for ssh connection\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eBash\u003c/bitbar.dependencies\u003e\n#\n# SSH Status plugin\n# by Olivier Tille (@oliviernt)\n#\n# Continuously checks if hosts are available for ssh connection on port 22\nHOSTS=(\"example1.com\" \"example2.com\")\n\nhead=\"ssh status\"\nbody=\"\"\nerrors=0\nfor host in \"${HOSTS[@]}\"; do\n  if nc -z -G 2 \"$host\" 22 \u0026\u003e /dev/null; then\n    body=\"$body\\n☀️ $host is up | color=green bash=ssh param1=$host\"\n  else\n    body=\"$body\\n⛈ $host looks down from here | color=red bash=ssh param1=$host\"\n    errors=$((errors + 1))\n  fi\n  body=\"$body\\n---\"\ndone\n\necho -n \"$head\"\n[ \"$errors\" -eq 0 ] || echo -n \" ($((${#HOSTS[@]} - errors))/${#HOSTS[@]}) | color=red\"\necho -e \"\\n---\"\necho -e \"$body\"\n"
				}
			],
			"path": "Network/ssh-status.10min.sh",
			"filename": "ssh-status.10min.sh",
			"dir": "Network",
			"docsPlugin": "Network/ssh-status.10min.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "SSH Status",
			"version": "v0.1.0",
			"author": "Olivier Tille",
			"authors": [
				{
					"name": "Olivier Tille",
					"githubUsername": "oliviernt",
					"imageURL": "https://avatars.githubusercontent.com/u/162120?v=4",
					"bio": "Software Developer at @lexoffice, Loving the WWW. \r\nPGP: https://keybase.io/oliviernt ",
					"primary": true
				}
			],
			"desc": "Continuously checks if hosts are available for ssh connection",
			"imageURL": "http://i.imgur.com/s8FMCLG.png",
			"dependencies": [
				"Bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.694111Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/ssh-tunnel.1s.sh",
					"filename": "ssh-tunnel.1s.sh",
					"content": "#!/usr/bin/env bash\n#\n# Easily start/stop a background SSH forwarding connection\n# The list of hosts are extracted from ~/.ssh/config by default\n#\n# To connect to your favorit host, just click the host name\n# To disconnect the host, click the host name that is displayed as \"(connecting)\"\n#\n# \u003cbitbar.title\u003eSSH Tunnel\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emutsune\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emutsune\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eEasily start/stop a background SSH forwarding connection.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/wiki/mutsune/bitbar-plugins/images/ssh-tunnel.png\u003c/bitbar.image\u003e\n#\n\nif pgrep -qf \"ssh -fN\"; then\n    echo \":earth_americas:\"\nelse\n    echo \":globe_with_meridians:\"\nfi\necho \"---\"\n\n# get host names that are specified forwarding options\nfunction hosts() {\n    awk '\n        $1 == \"Host\" {\n            host = $2;\n            next;\n        }\n        $1 == \"DynamicForward\" || $1 == \"LocalForward\" {\n            print host;\n        }\n    ' \"$1\" | uniq\n}\n\nfor h in $(hosts ~/.ssh/config); do\n    if pgrep -qf \"ssh -fN ${h}\"; then\n        echo \"(connecting) ${h} | color=indianred bash=/usr/bin/pkill param1='-f' param2='\\\"ssh -fN ${h}\\\"' terminal=false\"\n    else\n        echo \"${h} | bash=/usr/bin/ssh param1='-fN' param2=${h} terminal=false\"\n    fi\ndone\n"
				}
			],
			"path": "Network/ssh-tunnel.1s.sh",
			"filename": "ssh-tunnel.1s.sh",
			"dir": "Network",
			"docsPlugin": "Network/ssh-tunnel.1s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "SSH Tunnel",
			"version": "v1.0",
			"author": "mutsune",
			"authors": [
				{
					"name": "mutsune",
					"githubUsername": "mutsune",
					"imageURL": "https://avatars.githubusercontent.com/u/1257964?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Easily start/stop a background SSH forwarding connection.",
			"imageURL": "https://raw.githubusercontent.com/wiki/mutsune/bitbar-plugins/images/ssh-tunnel.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.83734Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/network-location.1h.sh",
					"filename": "network-location.1h.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eShow / Edit network location\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eFlorian Fittschen\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003effittschen\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays the currently active network location and adds the ability to change it.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/in3ZiPi.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/Network/network-location.1h.sh\u003c/bitbar.abouturl\u003e\n\ncurrent_location=$(networksetup -getcurrentlocation)\nnetwork_locations=$(networksetup -listlocations) \n\nif [ ! -z \"$1\" ]; then\n  networksetup -switchtolocation \"$1\"\nfi\n\necho \"📍 $current_location\"\necho '---'\necho -n 'Current location: '\necho \"$current_location\"\necho '---'\necho 'Change to:'\nwhile IFS= read -r location;\ndo\n    if [ \"${location}\" != \"${current_location}\" ]\n    then\n        echo \"${location} | bash=\\\"$0\\\" param1=\\\"$location\\\" terminal=false refresh=true\"\n    fi\ndone \u003c\u003c\u003c \"$network_locations\"\n"
				}
			],
			"path": "Network/network-location.1h.sh",
			"filename": "network-location.1h.sh",
			"dir": "Network",
			"docsPlugin": "Network/network-location.1h.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Show / Edit network location",
			"version": "v0.1",
			"author": "Florian Fittschen",
			"authors": [
				{
					"name": "Florian Fittschen",
					"githubUsername": "ffittschen",
					"imageURL": "https://avatars.githubusercontent.com/u/7734806?v=4",
					"bio": "iOS Engineer @Sixt | M.Sc. graduate @ Technical University of Munich. ",
					"primary": true
				}
			],
			"desc": "Displays the currently active network location and adds the ability to change it.",
			"imageURL": "http://i.imgur.com/in3ZiPi.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/Network/network-location.1h.sh",
			"lastUpdated": "2021-03-08T15:21:59.202492Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/w06_transfer.10s.rb",
					"filename": "w06_transfer.10s.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eSpeedwifi-next W06 transfer amount during 1day\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003epositrium\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003epositrium\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eshow Speedwifi-next w06 transfer amount during 1day for bitbar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/positrium/wifi-transfer-meter/master/image20200122.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/positrium/wifi-transfer-meter\u003c/bitbar.abouturl\u003e\n\nrequire 'open-uri'\nrequire 'nokogiri'\n\nclass TransferAmount\n\tdef initialize\n\t\t@has_error = false\n\n\t\t@scale = {\n\t\t\tkb: 1024,\n\t\t\tmb: 1024 * 1024,\n\t\t\tgb: 1024 * 1024 * 1024,\n\t\t\ttb: 1024 * 1024 * 1024 * 1024\n\t\t}\n\t\t@scale.freeze\n\n\t\t@payload = {\n\t\t\tyesterday_download: -9,\n\t\t\tyesterday_upload: -9,\n\t\t\tyesterday_duration: -9,\n\t\t\ttoday_download: -9,\n\t\t\ttoday_upload: -9,\n\t\t\ttoday_duration: -9,\n\t\t\tis_yesterday_flux_over_limit: -9,\n\t\t\tlast_clear_time_3days: -9\n\t\t}\n\n\t\t@doc = Nokogiri.HTML(open(\"http://speedwifi-next.home/api/monitoring/statistics_3days\"))\n\t\t@doc.xpath('//response/*').each do |e|\n\t\t\tcase e.name\n\t\t\twhen 'toyestodaydownload'\n\t\t\t\t@payload[:yesterday_download] = e.children[0].text\n\t\t\twhen 'toyestodayupload'\n\t\t\t\t@payload[:yesterday_upload] = e.children[0].text\n\t\t\twhen 'toyestodayduration'\n\t\t\t\t@payload[:yesterday_duration] = e.children[0].text\n\t\t\twhen 'totodaydownload'\n\t\t\t\t@payload[:today_download] = e.children[0].text\n\t\t\twhen 'totodayupload'\n\t\t\t\t@payload[:today_upload] = e.children[0].text\n\t\t\twhen 'totodayduration'\n\t\t\t\t@payload[:today_duration] = e.children[0].text\n\t\t\twhen 'isyestodayfluxoverlimit'\n\t\t\t\t@payload[:is_yesterday_flux_over_limit] = e.children[0].text\n\t\t\twhen 'lastcleartime3days'\n\t\t\t\t@payload[:last_clear_time_3days] = e.children[0].text\n\t\t\tend\n\t\tend\n\t\t@payload.freeze\n\trescue\n\t\t@has_error = true\n\tend\n\n\tdef yesterday_data_usage\n\t\tyesterday_data = @payload[:yesterday_download].to_i + @payload[:yesterday_upload].to_i\n\n\t\tscale = transfer_scale(yesterday_data)\n\t\tyesterday_usage = ( yesterday_data.to_f / scale[:size] ).round(2)\n\n\t\t{amount: yesterday_usage, label: scale[:label], percentage: yesterday_usage / 10.00 * 100}\n\tend\n\n\tdef today_data_usage\n\t\ttoday_data = @payload[:today_download].to_i + @payload[:today_upload].to_i\n\n\t\tscale = transfer_scale(today_data)\n\t\ttoday_usage = ( today_data.to_f / scale[:size] ).round(2)\n\n\t\t{amount: today_usage, label: scale[:label], percentage: today_usage / 10.00 * 100}\n\tend\n\n\tdef limited?\n\t\tlimited = @payload[:is_yesterday_flux_over_limit].to_i\n\n\t\tfalse if limited == 0\n\t\ttrue if limited != 0\n\tend\n\n\tdef has_error?\n\t\t@has_error\n\tend\n\n\tdef scale_down(value)\n\t\tvalue * 1024\n\tend\n\n\tprivate\n\n\tdef transfer_scale(byte)\n\t\tscale_info = {size: 0, label: ''}\n\n\t\tif @scale[:mb] \u003e byte\n\t\t\tscale_info[:size] = @scale[:kb]\n\t\t\tscale_info[:label] = 'KB'\n\t\telsif @scale[:gb] \u003e byte\n\t\t\tscale_info[:size] = @scale[:mb]\n\t\t\tscale_info[:label] = 'MB'\n\t\telsif @scale[:tb] \u003e byte\n\t\t\tscale_info[:size] = @scale[:gb]\n\t\t\tscale_info[:label] = 'GB'\n\t\telse\n\t\t\tscale_info[:size] = @scale[:tb]\n\t\t\tscale_info[:label] = 'TB'\n\t\tend\n\n\t\tscale_info\n\tend\n\nend\n\nclass WarningDetector\n\tattr_reader :sign, :amount\n\n\tdef initialize(amount, percentage, symbols={over: \"x\", warn: \"!\", ok: \"o\", limited: \"-\"}, limited=false)\n\t\t@amount = amount.round(2)\n\t\t@percentage = percentage\n\t\t@symbols = symbols\n\t\t@limited = limited\n\tend\n\n\tdef total_status\n\t\t@status = :ok\n\n\t\tif @percentage \u003e= 100.00\n\t\t\t@status = :over\n\t\telsif @percentage \u003e= 70.00\n\t\t\t@status = :warn\n\t\tend\n\n\t\t@sign = @symbols[@status]\n\t\t@status\n\tend\n\n\tdef today_left_value\n\t\tvalue = 0\n\n\t\tcase @status\n\t\twhen :warn\n\t\t\tvalue = scale_down(10.00-@amount).round(2)\n\t\t\tvalue = value.round\n\t\twhen :ok\n\t\t\tvalue = scale_down(7.00-@amount).round(2)\n\t\t\tvalue = value.round\n\t\tend\n\n\t\tvalue = 0 if value \u003c 1\n\n\t\tvalue\n\tend\n\n\tprivate\n\n\tdef scale_down(n)\n\t\tn * 1024\n\tend\nend\n\na = TransferAmount.new\n\nif a.has_error?\n\tputs \"\u003c!\u003e connect to w06\"\n\nelse\n\tsymbols = {over: \":broken_heart:\", warn: \":yellow_heart:\", ok: \":green_heart:\", limited: \":no_entry_sign:\"}\n\tsymbols.freeze\n\n\tusage = a.today_data_usage\n\twc = WarningDetector.new(usage[:amount], usage[:percentage], symbols, a.limited?)\n\twc.total_status\n\n\ty_usage = a.yesterday_data_usage\n\twt = WarningDetector.new(y_usage[:amount], y_usage[:percentage], symbols, false)\n\twt.total_status\n\n\tputs \"#{wc.sign}#{wc.today_left_value}MB(#{wc.amount}#{usage[:label]})\"\n\tputs \"---\"\n\tputs \"admin page|href=http://speedwifi-next.home\"\n\tputs \"hardware page|href=https://www.uqwimax.jp/wimax/products/w06/\"\n\tputs \"---\"\n\tputs \"until today usage\"\n\tputs \"#{wc.sign}#{wc.amount}#{usage[:label]}\"\n\tputs \"--#{symbols[:limited]} restricted now\"\n\tputs \"--#{symbols[:over]} over 10GB (100%)\"\n\tputs \"--#{symbols[:warn]} over  7GB ( 70%)\"\n\tputs \"--#{symbols[:ok]} less 7GB\"\n\tputs \"--today + 1 day ago + 2 days ago\"\n\tputs \"until yesterday usage\"\n\tputs \"#{wt.sign}#{wt.amount}#{y_usage[:label]}\"\n\tputs \"--#{symbols[:over]} over 10GB (100%)\"\n\tputs \"--#{symbols[:warn]} over  7GB ( 70%)\"\n\tputs \"--#{symbols[:ok]} less  7GB\"\n\tputs \"--1 day ago + 2 days ago + 3 days ago\"\nend\n"
				}
			],
			"path": "Network/w06_transfer.10s.rb",
			"filename": "w06_transfer.10s.rb",
			"dir": "Network",
			"docsPlugin": "Network/w06_transfer.10s.rb.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Speedwifi-next W06 transfer amount during 1day",
			"version": "1.0",
			"author": "positrium",
			"authors": [
				{
					"name": "positrium.org",
					"githubUsername": "positrium",
					"imageURL": "https://avatars.githubusercontent.com/u/22125861?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "show Speedwifi-next w06 transfer amount during 1day for bitbar.",
			"imageURL": "https://raw.githubusercontent.com/positrium/wifi-transfer-meter/master/image20200122.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/positrium/wifi-transfer-meter",
			"lastUpdated": "2021-03-08T15:22:00.234129Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/TRIPPing.1h.sh",
					"filename": "TRIPPing.1h.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eTRIPPing\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAnastasios Monachos (secuid0) - [anastasiosm(at)gmail(dot)com]\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003esecuid0\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTRIPPing (TRaceroute-IP-Ping) plugin aims to regularly monitor the path and ping roundtrip, from your network to fixed IPs and determine if they have suddenly been changed. Greetz to Kim DotCom\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/eKxeuxq.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash, osascript\u003c/bitbar.dependencies\u003e\n\n# default refresh interval 1h, to change, rename this file accordingly:\n# traceroute-hops-counter.{time}.sh\n# where {time} can be a integer following by:\n# s for second(s)\n# m for minute(s)\n# h for hour(s)\n# d for day(s)\n\n# Notify the user\nnotify () {\n    osascript -e \"display notification \\\"Number of hops: $1\\\" with title \\\"TRIPPing\\\"\"\t\n}\n\n# Get our public IPv4 and IPv6 addresses\nEXTERNAL_IP4=$(curl -4 --connect-timeout 3 -s http://v4.ipv6-test.com/api/myip.php || echo None)\nEXTERNAL_IP6=$(curl -6 --connect-timeout 3 -s http://v6.ipv6-test.com/api/myip.php || echo None)\n\n# GUI Bar\n[[ \"$EXTERNAL_IP4\" == \"None\" \u0026\u0026 \"$EXTERNAL_IP6\" == \"None\" ]]  \u0026\u0026 echo \":negative_squared_cross_mark:\" || echo \":space_invader:\t\"\n\n# Sites to ping\nSITES_TO_PING=(dns.google www.wikipedia.org www.pastebin.com)\n\n# Traceroute 1.1.1.1\nTRACEROUTE=$(traceroute 1.1.1.1 2\u003e/dev/null)\n\n# GUI\necho \"---\"\necho \":arrows_counterclockwise: Refresh... | color=black refresh=true\"\necho \"---\"\necho \"Public IPs: | color=red\"\necho \"IPv4: ${EXTERNAL_IP4} | color=black terminal=false bash='$0' param2=$EXTERNAL_IP4\"\necho \"IPv6: ${EXTERNAL_IP6} | color=black terminal=false bash='$0' param2=$EXTERNAL_IP6\"\necho \"---\"\necho \"Ping output: | color=red\"\nfor i in \"${SITES_TO_PING[@]}\"\ndo\n\tping -c 1 \"$i\" |grep -vE 'transmitted|statistics|ttl' | sed 's/---//g' | sed '/^$/d'\n   \techo \"-\"\ndone\necho \"---\"\necho \"Traceroute output: | color=red\"\necho \"${TRACEROUTE}\"\n\nHOPS=$(echo \"${TRACEROUTE}\" | awk -F \" \" 'END {print $1}')\nnotify \"$HOPS\"\n"
				}
			],
			"path": "Network/TRIPPing.1h.sh",
			"filename": "TRIPPing.1h.sh",
			"dir": "Network",
			"docsPlugin": "Network/TRIPPing.1h.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "TRIPPing",
			"version": "v0.1",
			"author": "Anastasios Monachos (secuid0) - [anastasiosm(at)gmail(dot)com]",
			"authors": [
				{
					"name": "Anastasios Monachos",
					"githubUsername": "secuid0",
					"imageURL": "https://avatars.githubusercontent.com/u/4008695?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "TRIPPing (TRaceroute-IP-Ping) plugin aims to regularly monitor the path and ping roundtrip, from your network to fixed IPs and determine if they have suddenly been changed. Greetz to Kim DotCom",
			"imageURL": "https://i.imgur.com/eKxeuxq.png",
			"dependencies": [
				"bash",
				"osascript"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.024091Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/updatevpnbookpass.1d.sh",
					"filename": "updatevpnbookpass.1d.sh",
					"content": "#!/bin/sh\n# Bitbar plugin: Automatically update vpn password. The password is collected from the the VPNBOOK page, then changed on the network settings panel. Required: VPNBOOK must be installed\n# metadata\n# \u003cbitbar.title\u003eUsing free VPN more easily: how to automatically update VPNBOOK password\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJoce ‘El Francés’\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejm462\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eAutomatically update VPNBOOK free password. Go and collect password on the VPNBOOK page, then change it on the network settings panel. The password is managed by the keychain application \u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://colombien.somee.com/images/bitbarpluginpicture.PNG\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ehttps://www.vpnbook.com\u003c/bitbar.dependencies\u003e\n#\n# You have to manually give the rights to this script:\n# *  Launch terminal and go inside the bitbar plugins folder\n# *  chmod 751 updatevpnbookpass.1d.sh\n# Some commands of the script needs admin rights.\n# It can be done adding the name of the script to the parameter file 'sudoers', giving the possibility to anybody to execute it:\n# *  Launch terminal\n# *  sudo su - root (to connect with root user)\n# *  (enter the root password)\n# *  sudo visudo\n# *  \u003cyour user\u003e      ALL= NOPASSWD: \u003cyour path\u003e/updatevpnbookpass.1d.sh\n# (This line is to add in the User privilege specification block )\n# (where \u003cyour user\u003e is your session account\n# (and \u003cyour path\u003e is the directory where you place your bitbar plugins)\n# *  :wq! (to leave visudo)\n#\nif [ \"$1\" = 'with_root_rights' ]; then\n\n#echo \"SCRIPT 'updatevpnbookpass' STARTS\"\n#echo \"THIS SCRIPT UPDATES, IF NECESSARY, THE VPN PASSWORDS\"\n\n\nFONT=\"Lucida Grande size=14\"\nIMAGE1=\"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\"\n# GET VPNPAGE\ni=1\nwhile [ $i -lt 6 ]; do\n#echo \"Essai numero \" $i \" de connection a la page VPNBOOK\"\n   if curl https://www.vpnbook.com/freevpn \u003e pagetemp.html; then\n      break\n   fi\ni=$((i+1))\nsleep 5\ndone\n\nif [ $i -eq 6 ]\nthen\necho \"PAGE VPNBOOK INACCESSIBLE | $FONT color=black terminal=true templateImage=$IMAGE1\"\nexit 1\nfi\n\n# GET SERVICE AND PASS FROM KEYCHAIN\nKEYCHAIN_SERV=\"571D5A91-9040-4D11-9BAC-685BCEF36270\"\nKEYCHAIN_PASS=$(sudo security 2\u003e\u00261 \u003e/dev/null find-generic-password -l 'VPN (PPTP)' -ga vpnbook | awk -F'password: \\\"' '{print $2}' | awk -F'\\\"' '{print $1}')\n\n# GET PASSWORD IN VPNBOOK PAGE\nligne=$(grep Password pagetemp.html)\nPAGE_PASS=$(echo \"$ligne\" | awk -F'\u003cstrong\u003e' '{print $2}' | awk -F'\u003c/strong\u003e' '{print $1}')\n#echo \"PAGE_PASS = \" $PAGE_PASS\n#echo \"KEYCHAIN_PASS = \" $KEYCHAIN_PASS\n\n\nif [ \"$KEYCHAIN_PASS\" = '' ] || [ \"$KEYCHAIN_PASS\" != \"$PAGE_PASS\" ]\nthen\n\n# PUT PASS ON KEYCHAIN\n#echo \"----------------\"\n#echo \"KEYPASS DELETING\"\nsudo security \u003e/dev/null delete-generic-password -a vpnbook -s \"$KEYCHAIN_SERV\" /Library/Keychains/System.keychain 2\u003e\u00261\n\n#echo \"----------------\"\n#echo \"KEYPASS CREATING\"\n#sudo security 2\u003e\u00261 \u003e/dev/null add-generic-password -a vpnbook -l \"VPN (PPTP)\" -D \"Mot de passe PPP\" -s $KEYCHAIN_SERV -w $PAGE_PASS -T \"/Applications/Utilities/Keychain Access.app/Contents/Resources/kcproxy\" -T \"/Applications/System Preferences.app/Contents/MacOS/System Preferences\" -T \"/usr/bin/security\" -T \"/usr/sbin/racoon\" -T \"/usr/sbin/pppd\" -T \"/System/Library/CoreServices/SystemUIServer.app/Contents/MacOS/SystemUIServer\" /Library/Keychains/System.keychain\nsudo security \u003e/dev/null add-generic-password -a vpnbook -l \"VPN (PPTP)\" -D \"Mot de passe PPP\" -s \"$KEYCHAIN_SERV\" -w \"$PAGE_PASS\" -A /Library/Keychains/System.keychain 2\u003e\u00261\n#echo \"----------------\"\necho \"PASS VPN RAFRAICHI | $FONT color=black terminal=true templateImage=$IMAGE1\"\nelse\n#echo \"THE KEYCHAIN PASSWORD IS THE SAME THAN THE WEBPAGE PASSWORD: NOTHING TO DO\"\necho \"PASS VPN OK | $FONT color=black terminal=true templateImage=$IMAGE1\"\nfi\n#echo \"SCRIPT 'updatevpnbookpass' ENDS\"\nrm pagetemp.html\nexit 0\n\nelse\n# Script called without parameter $1 'with_root_rights', which means it is the first call\n\nsudo \"$(dirname \"$0\")/updatevpnbookpass.1d.sh\" with_root_rights\n\nfi\n"
				}
			],
			"path": "Network/updatevpnbookpass.1d.sh",
			"filename": "updatevpnbookpass.1d.sh",
			"dir": "Network",
			"docsPlugin": "Network/updatevpnbookpass.1d.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Using free VPN more easily: how to automatically update VPNBOOK password",
			"version": "v1.0",
			"author": "Joce ‘El Francés’",
			"authors": [
				{
					"name": "Jay Min",
					"githubUsername": "jm462",
					"imageURL": "https://avatars.githubusercontent.com/u/6090911?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Automatically update VPNBOOK free password. Go and collect password on the VPNBOOK page, then change it on the network settings panel. The password is managed by the keychain application ",
			"imageURL": "http://colombien.somee.com/images/bitbarpluginpicture.PNG",
			"dependencies": [
				"https://www.vpnbook.com"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.960536Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/vpn-check.3s.sh",
					"filename": "vpn-check.3s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eVPN Checker\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ePierre-Louis Dubouilh\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003epldubouilh\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eChecks the availability of tun0 or ipsec0. Also allows to kill a program on deconnection.\u003c/bitbar.desc\u003e\n\n# From my infamous one-liner\n# ((ifconfig | grep tun0) || (killall Firefox))\n\nif ifconfig | grep -q tun0; then\n\techo \"VPN ⬆ | color=green\"\n\tifconfig utun0 2\u003e /dev/null | grep inet | cut -d' ' -f 2\nelif ifconfig | grep -q ipsec0; then\n\techo \"VPN ⬆ | color=green\"\n\tifconfig ipsec0 2\u003e /dev/null | grep inet | cut -d' ' -f 2\nelse\n\techo \"VPN ⬇ | color=red\"\n\t#killall Firefox 2\u0026\u003e /dev/null\nfi\n"
				}
			],
			"path": "Network/vpn-check.3s.sh",
			"filename": "vpn-check.3s.sh",
			"dir": "Network",
			"docsPlugin": "Network/vpn-check.3s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "VPN Checker",
			"version": "v1.2",
			"author": "Pierre-Louis Dubouilh",
			"authors": [
				{
					"name": "Pierre Dubouilh",
					"githubUsername": "pldubouilh",
					"imageURL": "https://avatars.githubusercontent.com/u/760637?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Checks the availability of tun0 or ipsec0. Also allows to kill a program on deconnection.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:00.009569Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/vpn-country-flag.js",
					"filename": "vpn-country-flag.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n/*\n    \u003cbitbar.title\u003eVPN Country Flag\u003c/bitbar.title\u003e\n    \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n    \u003cbitbar.author\u003eMiguel Laginha\u003c/bitbar.author\u003e\n    \u003cbitbar.author.github\u003ebrecke\u003c/bitbar.author.github\u003e\n    \u003cbitbar.desc\u003eIt shows the country flag corresponding to your IP Address (useful when using VPNs).\u003c/bitbar.desc\u003e\n    \u003cbitbar.image\u003ehttps://user-images.githubusercontent.com/19879/30689083-d8e4d2bc-9eb7-11e7-8d83-d45a9079c287.png\u003c/bitbar.image\u003e\n    \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n    \u003cbitbar.abouturl\u003ehttps://github.com/brecke/bitbar-vpn-flag\u003c/bitbar.abouturl\u003e\n*/\n\nvar ipapi = require('ipapi.co');\nvar https = require('https');\nvar flag = require('country-code-emoji').flag;\n\nvar IPAddress;\nhttps.get('https://ipapi.co/ip/', function(resp) {\n    var body = '';\n    resp.on('data', function(data) {\n        body += data;\n    });\n\n    resp.on('end', function() {\n\t\tIPAddress = body;\n\t\n\t\tipapi.location(function(country) {\n\t\t\tconsole.log(flag(country)); \n\t\t}, IPAddress.toString(), '', 'country');\n    });\n});\n\n\n"
				}
			],
			"path": "Network/vpn-country-flag.js",
			"filename": "vpn-country-flag.js",
			"dir": "Network",
			"docsPlugin": "Network/vpn-country-flag.js.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "VPN Country Flag",
			"version": "v0.1",
			"author": "Miguel Laginha",
			"authors": [
				{
					"name": "Miguel Laginha",
					"githubUsername": "brecke",
					"imageURL": "https://avatars.githubusercontent.com/u/19879?v=4",
					"bio": "Hacker of all trades, manager of none; Open $(web|data|source) developer and enthusiast. Former hacker @OneStopTransport \u0026 Sciencematters. Portuguese.",
					"primary": true
				}
			],
			"desc": "It shows the country flag corresponding to your IP Address (useful when using VPNs).",
			"imageURL": "https://user-images.githubusercontent.com/19879/30689083-d8e4d2bc-9eb7-11e7-8d83-d45a9079c287.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "https://github.com/brecke/bitbar-vpn-flag",
			"lastUpdated": "2021-03-08T15:22:00.226841Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/vpn_advanced.sh",
					"filename": "vpn_advanced.sh",
					"content": "#!/bin/bash\n\n# Get current status of a VPN connection with options to connect/disconnect.\n# Working with OpenConnect, but can work with any executable VPN. Commands\n# that require admin permissions should be whitelisted with 'visudo', e.g.:\n#\n#joesmith ALL=(ALL) NOPASSWD: /usr/local/bin/openconnect\n#joesmith ALL=(ALL) NOPASSWD: /usr/bin/killall -2 openconnect\n\n# \u003cbitbar.title\u003eVPN Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJesse Jarzynka\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejessejoe\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays status of a VPN interface with option to connect/disconnect.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/RkmptwO.png\u003c/bitbar.image\u003e\n\nVPN_EXECUTABLE=/usr/local/bin/openconnect\nVPN_EXECUTABLE_PARAMS=\"--script=$HOME/scripts/vpnc-script-no-dns\" # Optional\nVPN_HOST=\"vpn.mydomain.com\"\nVPN_INTERFACE=\"utun0\"\nVPN_USERNAME=\"joe.smith\"\n# A command that will result in your VPN password. Recommend using\n# \"security find-generic-password -g -a foo\" where foo is an account\n# in your OSX Keychain, to avoid passwords stored in plain text\nGET_VPN_PASSWORD=\"security find-generic-password -g -a joe.smith 2\u003e\u00261 \u003e/dev/null | cut -d'\\\"' -f2\"\n#GET_VPN_PASSWORD=\"cat ~/.vpnpass\"\n#GET_VPN_PASSWORD=\"echo hunter2\" # Not recommended\n# Command to determine if VPN is connected or disconnected\nVPN_CONNECTED=\"/sbin/ifconfig | egrep -A1 $VPN_INTERFACE | grep inet\"\n# Command to run to disconnect VPN\nVPN_DISCONNECT_CMD=\"sudo killall -2 openconnect\"\n\ncase \"$1\" in\n    connect)\n        VPN_PASSWORD=$(eval \"$GET_VPN_PASSWORD\")\n        # VPN connection command, should eventually result in $VPN_CONNECTED,\n        # may need to be modified for VPN clients other than openconnect\n        echo \"$VPN_PASSWORD\" | sudo \"$VPN_EXECUTABLE\" \"$VPN_EXECUTABLE_PARAMS\" --user \"$VPN_USERNAME\" --passwd-on-stdin \"$VPN_HOST\" \u0026\u003e /dev/null \u0026\n        # Wait for connection so menu item refreshes instantly\n        until eval \"$VPN_CONNECTED\"; do sleep 1; done\n        ;;\n    disconnect)\n        eval \"$VPN_DISCONNECT_CMD\"\n        # Wait for disconnection so menu item refreshes instantly\n        until [ -z \"$(eval \"$VPN_CONNECTED\")\" ]; do sleep 1; done\n        ;;\nesac\n\nif [ -n \"$(eval \"$VPN_CONNECTED\")\" ]; then\n    echo \"VPN ✔\"\n    echo '---'\n    echo \"Disconnect VPN | bash='$0' param1=disconnect terminal=false refresh=true\"\n    exit\nelse\n    echo \"VPN ✘\"\n    echo '---'\n    echo \"Connect VPN | bash='$0' param1=connect terminal=false refresh=true\"\n    exit\nfi\n"
				}
			],
			"path": "Network/vpn_advanced.sh",
			"filename": "vpn_advanced.sh",
			"dir": "Network",
			"docsPlugin": "Network/vpn_advanced.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "VPN Status",
			"version": "v1.0",
			"author": "Jesse Jarzynka",
			"authors": [
				{
					"name": "Jesse Jarzynka",
					"githubUsername": "jessejoe",
					"imageURL": "https://avatars.githubusercontent.com/u/1694586?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays status of a VPN interface with option to connect/disconnect.",
			"imageURL": "http://i.imgur.com/RkmptwO.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:00.241711Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/viscosity-active-connection.1s.sh",
					"filename": "viscosity-active-connection.1s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eViscosity active connection\u003c/bitbar.title\u003e\n# \u003cbitbar.desc\u003eShows the name of the first active connection\u003c/bitbar.desc\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAdam Bogdał\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebogdal\u003c/bitbar.author.github\u003e\n# \u003cbitbar.dependencies\u003ebash,viscosity\u003c/bitbar.dependencies\u003e\n\nCONNECTION_NAME=$(osascript -e '\ntell application \"Viscosity\"\n    repeat with _connection in connections\n        if the state of _connection is \"Connected\" then\n            return name of _connection\n        end if\n    end repeat\nend tell\n')\n\nif [ -n \"$CONNECTION_NAME\" ]; then\n    echo \"$CONNECTION_NAME | color=green\"\nelse\n    echo \"NoVPN | color=#b4b4b4\"\nfi\n"
				}
			],
			"path": "Network/viscosity-active-connection.1s.sh",
			"filename": "viscosity-active-connection.1s.sh",
			"dir": "Network",
			"docsPlugin": "Network/viscosity-active-connection.1s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Viscosity active connection",
			"version": "v0.1",
			"author": "Adam Bogdał",
			"authors": [
				{
					"name": "Adam Bogdał",
					"githubUsername": "bogdal",
					"imageURL": "https://avatars.githubusercontent.com/u/1451824?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows the name of the first active connection",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash",
				"viscosity"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.974957Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/wireguard.sh",
					"filename": "wireguard.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eWireguard\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDaniel Barber\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edanbee\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eManages a Wireguard VPN connection\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://f001.backblazeb2.com/file/bitbar/wireguard.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\n# You will need to add the following line to your sudoers file. Remember to edit\n# sudoers with `sudo visudo`.\n#\n# %admin  ALL=(ALL) NOPASSWD: /usr/local/bin/wg-quick\n#\n# Rename WG_CONFIG if your Wireguard config is not called `wg0-client`\n\nPATH=\"/usr/local/bin:$PATH\"\n\nWG_CONNECTED=\"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAY1BMVEVHcEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////Iv5pwAAAAH3RSTlMAA0yMvd6sez0V7/qzbglj5qR0Ncj1KA7VLlQflkGEXYPQGAAAAAFiS0dEILNrPYAAAAAJcEhZcwAAFiUAABYlAUlSJPAAAAAHdElNRQfiCB0GISSxSlkqAAABpklEQVQ4y2VT7YKEIAik1GyzTNus1nbz/d/y8AO3u+OXIMLMgABkTcu4EJ1kvJN9A3/twYYQghqnHvQ8BMMev+/neB2sZEt8++SrcvJWpbEhmdiy3wL0IfBapOlCMZkDezsL9A7KWMq1aVPVThhzpADPXTZVEpzgL/Q9+VRxrX44WB8xCvJdbNKHu6klYhjvJSrCsE7PrbV2R9iUITCbOqo5Qz7fmPEYSrQHT+99FfV9qyvhXU42jcPja/hsX+pj5fDEp8h+QKIPLCYrCFMQ4EuWxMkVqLADV1TEhLEcIjeSQgEdUNUrHrpmRnU+lTsQyw+ARuhumTWireq6WmuMDL31GghNAcnpiDpNrySEnkxNGCvcEK4p7Yv2vtlIyMCqkmaScZInW8/YK1RoZRajhileIOsB8ZI8pinsD8SGIHZH0dI5jiVRZpIPKHCbwy+ahUqoaPa+Ls9Js2B5AQYCDM1RxgGWGkfr8zwEtj5Rlg5HrmPInLQifcY8pT9RpTy279c6Ew7V1p+ITty8m3061ENde9654Ozr3//ePeOHsNfCxsvrGv4BOvFCaHw59FkAAAAldEVYdGRhdGU6Y3JlYXRlADIwMTgtMDgtMjlUMTA6MzM6MzYtMDQ6MDCYYoC0AAAAJXRFWHRkYXRlOm1vZGlmeQAyMDE4LTA4LTI5VDEwOjMzOjM2LTA0OjAw6T84CAAAAABJRU5ErkJggg==\"\nWG_DISCONNECTED=\"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAY1BMVEVHcEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////Iv5pwAAAAIHRSTlMAAhsxQk09K0Q6FgEHVFk/JVEoEklWDyAKBBkNHTUfLpaxL30AAAABYktHRCCzaz2AAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4ggdBiEgtiedMwAAAaFJREFUOMtdU1GigyAMKyIiKihOVDY373/LVypl7vVHSjFNEwDgEJWslWq0bI3uevgfg7QOY5w6EJN1Xg6/9YnKRstZYPaolxD0DUUYR6HWK68AOufaAtI3LofO/apNYbbwiTmXfUWojfJe0UYtqL6GfCCo+oH5xjkjLiV3i+wSR8V52IHo3GPGrTjeIZrv/9NjfRoTcSw+oXoYSn26KL8knhhs3uzg4PrBU+/vG66Gd14ZsuOTRn+u39FHaPMKBxxwHpu+CKaZBOSRAmokSZwLgYEtZFU89/XQp9mKFMALVPVM30ZM+10cRsB5ICJEmDc8KpiZCwWrSRN+zEH+yAKgyhRJp+m6D2L25cBY6Dp3zq9UjtshVhbSyaKkn3VycpdtcrByhVrMFCIkHw/kbPFgn5t4lIeMW5DbhhrSTF4UoZItT2qla3vkNcmevSBW7P1W9HmxF/Ky1zJhEEu2A+ghqHhdgO5SU2HrvUa+aHlMP/kXX5HOl+sIMbKU/IyoCxkZnpxvaYD48zi7JvU5aXN4O2tW+B/DJz1/c85yPI/v339ndyeoPSR2pwAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOC0wOC0yOVQxMDozMzozMy0wNDowMMparxMAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTgtMDgtMjlUMTA6MzM6MzItMDQ6MDAdcBwbAAAAAElFTkSuQmCC\"\n\nWG_EXECUTABLE=/usr/local/bin/wg-quick\n\nWG_CONFIG=\"wg0-client\"\n\nWG_PIDFILE=\"/var/run/wireguard/$WG_CONFIG.name\"\n\ncase \"$1\" in\n    connect)\n        sudo $WG_EXECUTABLE up $WG_CONFIG\n\n        # Wait for connection so menu item refreshes instantly\n        until [ -f $WG_PIDFILE ]; do sleep 1; done\n        ;;\n    disconnect)\n        sudo $WG_EXECUTABLE down $WG_CONFIG\n\n        # Wait for disconnection so menu item refreshes instantly\n        until [ ! -f $WG_PIDFILE ]; do sleep 1; done\n        ;;\nesac\n\nif [ -f $WG_PIDFILE ]; then\n    echo \"| templateImage=$WG_CONNECTED\"\n    echo '---'\n    echo \"Disconnect Wireguard | bash='$0' param1=disconnect terminal=false refresh=true\"\n    exit\nelse\n    echo \"| templateImage=$WG_DISCONNECTED\"\n    echo '---'\n    echo \"Connect Wireguard | bash='$0' param1=connect terminal=false refresh=true\"\n    exit\nfi\n"
				}
			],
			"path": "Network/wireguard.sh",
			"filename": "wireguard.sh",
			"dir": "Network",
			"docsPlugin": "Network/wireguard.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "Wireguard",
			"version": "v1.0",
			"author": "Daniel Barber",
			"authors": [
				{
					"name": "Daniel Barber",
					"githubUsername": "danbee",
					"imageURL": "https://avatars.githubusercontent.com/u/165531?v=4",
					"bio": "Drums and code.",
					"primary": true
				}
			],
			"desc": "Manages a Wireguard VPN connection",
			"imageURL": "https://f001.backblazeb2.com/file/bitbar/wireguard.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:00.400775Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/aria2.sh",
					"filename": "aria2.sh",
					"content": "#!/usr/bin/env bash\n#\n# Quickly aria2c\n#\n# \u003cbitbar.title\u003earia2c\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ecnsworder\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecnsworder\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eQuickly aria2c\u003c/bitbar.desc\u003e\n\necho \"aria2c\"\necho \"---\"\ncount=$(pgrep \"aria2c\")\nif ((count \u003c 1)); then\n    echo 'not running | bash=aria2c param1=\"-D --enable-rpc --rpc-allow-origin-all --rpc-listen-all -c -x 10 -s 10\"'\nelse\n    echo 'runing | color=green  href=\"http://ziahamza.github.io/webui-aria2/\"'\nfi\n"
				}
			],
			"path": "Network/aria2.sh",
			"filename": "aria2.sh",
			"dir": "Network",
			"docsPlugin": "Network/aria2.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "aria2c",
			"version": "v1.0",
			"author": "cnsworder",
			"authors": [
				{
					"name": "伊冲",
					"githubUsername": "cnsworder",
					"imageURL": "https://avatars.githubusercontent.com/u/137293?v=4",
					"bio": "开发者说",
					"primary": true
				}
			],
			"desc": "Quickly aria2c",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.09456Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/bitping.10s.sh",
					"filename": "bitping.10s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003ebitping/track/graph\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSimon Hudson\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eSimonSays13\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSends pings to one or more sites, display connectivity status, record results to file (separated daily) and graph the last X minutes performance via the dropdown with no external dependencies\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://www.provulo.com/\u003c/bitbar.abouturl\u003e\n\n# This is a plugin for Bitbar\n# https://github.com/matryer/bitbar\n#\n# Author: (Simon Hudson) simon.hudson@gmail.com\n# Based on original bitbar ping by Trung Đinh Quang, Grant Sherrick and Kent Karlsson.\n# Includes bitbash code by GaneshV to render bitmap to menu ( https://github.com/ganeshv )\n# Theme from http://colorbrewer2.org/\n\nRED_GREEN_THEME=(\"#d73027\" \"#fc8d59\" \"#fee08b\" \"#d9ef8b\" \"#91cf60\" \"#1a9850\")\n\n# Configuration\n\nCOLORS=(${RED_GREEN_THEME[@]})\nMENUFONT=\"\"\nFONT=\"\"\nMAX_PING=1000\nSITES=(8.8.8.8) #Google DNS; SITES=(google.com youtube.com wikipedia.org github.com) using only one site is recommended for graph consistency\nGRAPHMINUTES=30\nSITE_INDEX=0\nPING_TIMES=\nbpp=4\nrowbytes=$((width * bpp))\npixbytes=$((width * height * bpp))\nOLDIFS=$IFS\nbmp_header=()\npixels=()\n\nFILE_OUT=\"$HOME/Documents/PingTest/$(date +%Y%m%d).txt\"\n\n#Uncomment if header row required in output file\n#if [ ! -f \"$FILE_OUT\" ]; then\n#    echo \"date, host, response\" \u003e\u003e $FILE_OUT\n#fi\n\n# Functions, etc\n\nfunction colorize {\n\n    if [ \"$1\" -ge $MAX_PING ]; then\n\n        echo \"${COLORS[0]}\"\n\n    elif [ \"$1\" -ge 600 ]; then\n\n        echo \"${COLORS[1]}\"\n\n    elif [ \"$1\" -ge 400 ]; then\n\n        echo \"${COLORS[2]}\"\n\n    elif [ \"$1\" -ge 200 ]; then\n\n        echo \"${COLORS[3]}\"\n\n    elif [ \"$1\" -ge 100 ]; then\n\n        echo \"${COLORS[4]}\"\n\n    else\n\n        echo \"${COLORS[5]}\"\n\n    fi\n\n}\n\nhexle32() {\n\n    local num\n    printf -v num \"%08x\" \"$1\"\n    retval=\"${num:6:2} ${num:4:2} ${num:2:2} ${num:0:2}\"\n\n}\n\nerrmsg() {\n\n    \u003e\u00262 echo \"$@\"\n\n}\n\nmake_bmp_header() {\n\n    local headerbytes comp pixoffset filebytes _filebytes _pixoffset\n    local _headerbytes _width _height _pixbytes\n    bmp_header=()\n    headerbytes=40\n    comp=\"00\"\n\n    if [ \"$bmp_ver\" -eq 5 ]; then\n\n        headerbytes=124\n        comp=\"03\"\n\n    fi\n\n    pixoffset=$((headerbytes + 14))\n    filebytes=$((pixbytes + pixoffset))\n\n    hexle32 $filebytes\n    _filebytes=$retval\n    hexle32 $pixoffset\n    _pixoffset=$retval\n    hexle32 $headerbytes\n    _headerbytes=$retval\n    hexle32 \"$width\"\n    _width=$retval\n    hexle32 \"$height\"\n    _height=$retval\n    hexle32 $pixbytes\n    _pixbytes=$retval\n\n    bmp_header+=(\n        42 4d\n        $_filebytes\n        00 00\n        00 00\n        $_pixoffset\n        $_headerbytes\n        $_width\n        $_height\n        01 00\n        20 00\n        $comp 00 00 00\n        $_pixbytes\n        13 0b 00 00\n        13 0b 00 00\n        00 00 00 00\n        00 00 00 00\n    )\n\n    if [ \"$bmp_ver\" -eq 5 ]; then\n\n        bmp_header+=(\n            00 00 ff 00\n            00 ff 00 00\n            ff 00 00 00\n            00 00 00 ff\n            42 47 52 73\n            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n            00 00 00 00\n            00 00 00 00\n            00 00 00 00\n            00 00 00 00\n            00 00 00 00\n            00 00 00 00\n            00 00 00 00\n        )\n\n    fi\n\n}\n\npoint() {\n\n    local off\n    off=$(($2 * rowbytes + $1 * bpp))\n    pixels[$off]=${curcol[0]}\n    pixels[$((off + 1))]=${curcol[1]}\n    pixels[$((off + 2))]=${curcol[2]}\n    pixels[$((off + 3))]=${curcol[3]}\n\n}\n\nline() {\n\n    local x1 y1 x2 y2 x y\n\n    if [ \"$1\" -eq \"$3\" ]; then\n\n        if [ \"$2\" -gt \"$4\" ]; then y1=$4; y2=$2; else y1=$2; y2=$4; fi\n        for ((y = y1; y \u003c= y2; y++)); do\n            point \"$1\" $y\n        done\n\n    elif [ \"$2\" -eq \"$4\" ]; then\n\n        if [ \"$1\" -gt \"$3\" ]; then x1=$3; x2=$1; else x1=$1; x2=$3; fi\n        for ((x = x1; x \u003c= x2; x++)); do\n            point $x \"$2\"\n        done\n\n    else\n\n        errmsg \"Only vertical and horizontal lines supported\" \"$@\"\n\n    fi\n\n}\n\noutput_bmp() {\n\n    local _bmp=(${bmp_header[@]/#/'\\x'})\n    _bmp+=(${pixels[@]/#/'\\x'})\n\n    local IFS=''\n    echo -ne \"${_bmp[*]}\"\n    IFS=$OLDIFS\n\n}\n\ninit_bmp() {\n\n    local i\n    bmp_ver=${1:-$bmp_ver}\n    width=${2:-$width}\n    height=${3:-$height}\n\n    rowbytes=$((width * bpp))\n    pixbytes=$((width * height * bpp))\n\n    make_bmp_header\n\n    if [ ${#pixels[@]} -ne $pixbytes ]; then\n\n        pixels=()\n        for ((i = 0; i \u003c width * height; i++)); do\n\n            pixels+=(${curcol[@]});\n\n        done\n\n    fi\n}\n\n#Generate Output\n\nwhile [ $SITE_INDEX -lt ${#SITES[@]} ]; do\n\n    NEXT_SITE=\"${SITES[$SITE_INDEX]}\"\n    NEXT_PING_TIME=$(ping -c 2 -n -q \"$NEXT_SITE\" 2\u003e/dev/null | awk -F '/' 'END {printf \"%.0f\\n\", $5}')\n\n    if [ \"$NEXT_PING_TIME\" -eq 0 ]; then\n\n        NEXT_PING_TIME=$MAX_PING\n\n    fi\n\n    if [ -z \"$PING_TIMES\" ]; then\n\n        PING_TIMES=($NEXT_PING_TIME)\n\n    else\n\n        PING_TIMES=(${PING_TIMES[@]} $NEXT_PING_TIME)\n\n    fi\n\n    SITE_INDEX=$(( SITE_INDEX + 1 ))\n\ndone\n\nif [ $NEXT_PING_TIME -ge $MAX_PING ]; then\n\n    MSG=\"DOWN\"\n\nelse\n\n    MSG=\"UP\"\n\nfi\n\necho \"$MSG | color=$(colorize $NEXT_PING_TIME) $MENUFONT\"\necho \"---\"\n\nSITE_INDEX=0\n\nwhile [ $SITE_INDEX -lt ${#SITES[@]} ]; do\n\n    PING_TIME=${PING_TIMES[$SITE_INDEX]}\n\n    echo \"$(date '+%d/%m/%Y %H:%M:%S'), ${SITES[$SITE_INDEX]}, $PING_TIME\" \u003e\u003e \"$FILE_OUT\"\n\n    if [ $PING_TIME -eq $MAX_PING ]; then\n\n        PING_TIME=\"FAIL\"\n\n    else\n\n        PING_TIME=\"$PING_TIME ms | color=$(colorize $PING_TIME) $FONT\"\n\n    fi\n\n    echo \"${SITES[$SITE_INDEX]}: $PING_TIME\"\n    SITE_INDEX=$(( SITE_INDEX + 1 ))\n\ndone\n\necho \"---\"\n\npixels=()\ncurcol=(00 00 00 00)\ninit_bmp 5 $((GRAPHMINUTES*6)) 50\ncurcol=(00 ff 00 ff)\nmax_height=50\n\nreadings=$(tail -$((GRAPHMINUTES*6)) \"$FILE_OUT\" | cut -f3 -d ','  | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n/ /g')\nheights=($readings)\n\nfor ((i = 0; i \u003c ${#heights[@]}; i++)); do\n\n    if [ ${#heights[$i]} -gt $max_height ]; then\n\n        line $i 1 $i $max_height\n\n    else\n\n        line $i 1 $i $((1 + ${heights[$i]}))\n\n    fi\n\ndone\n\nIMAGE=$(output_bmp | base64)\necho \" | image=$IMAGE\"\n\necho \"Refresh... | refresh=true\"\n"
				}
			],
			"path": "Network/bitping.10s.sh",
			"filename": "bitping.10s.sh",
			"dir": "Network",
			"docsPlugin": "Network/bitping.10s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "bitping/track/graph",
			"version": "v1.1",
			"author": "Simon Hudson",
			"authors": [
				{
					"name": "Simon Hudson",
					"githubUsername": "SimonSays13",
					"imageURL": "https://avatars.githubusercontent.com/u/24798358?v=4",
					"bio": "founder/CTO provulo.com",
					"primary": true
				}
			],
			"desc": "Sends pings to one or more sites, display connectivity status, record results to file (separated daily) and graph the last X minutes performance via the dropdown with no external dependencies",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [],
			"aboutURL": "http://www.provulo.com/",
			"lastUpdated": "2021-03-08T15:21:58.478075Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/dnscrypt-proxy-switcher.10s.sh",
					"filename": "dnscrypt-proxy-switcher.10s.sh",
					"content": "#!/usr/bin/env ksh\n#\n# dnscrypt-proxy switcher\n#\n# \u003cbitbar.author.github\u003ejedisct1\u003c/bitbar.author.github\u003e\n# \u003cbitbar.author\u003eFrank Denis\u003c/bitbar.author\u003e\n# \u003cbitbar.desc\u003eToggle dnscrypt-proxy usage\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/jedisct1/bitbar-dnscrypt-proxy-switcher/master/bitbar-dnscrypt-proxy.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.title\u003ednscrypt-proxy switcher\u003c/bitbar.title\u003e\n# \u003cbitbar.url\u003ehttps://github.com/jedisct1/bitbar-dnscrypt-proxy-switcher\u003c/bitbar.url\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n\n# Theme: classic or emoji\nTHEME=\"emoji\"\n\n# Non-authenticated resolver IP addresses\nADDITIONAL_IPS=\"9.9.9.9\"\n\n# Name of the non-authenticated resolver\nADDITIONAL_NAME=\"quad9\"\n\n# IP address of the proxy\nDNSCRYPT_PROXY_IPS=\"127.0.0.1\"\n\n# -- do not change anything below this line --\n\nif test -t 0; then\n\tTHEME=\"emoji\"\nfi\n\ncase \"$THEME\" in\nclassic)\n\tPROXY_ICON=\"| dropdown=false templateImage=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agoyNjEyCmVuZG9iago3IDAgb2JqClsgL0lDQ0Jhc2VkIDggMCBSIF0KZW5kb2JqCjMgMCBvYmoKPDwgL1R5cGUgL1BhZ2VzIC9NZWRpYUJveCBbMCAwIDE2IDE2XSAvQ291bnQgMSAvS2lkcyBbIDIgMCBSIF0gPj4KZW5kb2JqCjEwIDAgb2JqCjw8IC9UeXBlIC9DYXRhbG9nIC9QYWdlcyAzIDAgUiA+PgplbmRvYmoKMTEgMCBvYmoKKE1hYyBPUyBYIDEwLjkuNSBRdWFydHogUERGQ29udGV4dCkKZW5kb2JqCjEyIDAgb2JqCihEOjIwMTYwMzA0MjExMjA0WjAwJzAwJykKZW5kb2JqCjEgMCBvYmoKPDwgL1Byb2R1Y2VyIDExIDAgUiAvQ3JlYXRpb25EYXRlIDEyIDAgUiAvTW9kRGF0ZSAxMiAwIFIgPj4KZW5kb2JqCnhyZWYKMCAxMwowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDM4NzQgMDAwMDAgbiAKMDAwMDAwMDcxMSAwMDAwMCBuIAowMDAwMDAzNjQ5IDAwMDAwIG4gCjAwMDAwMDAwMjIgMDAwMDAgbiAKMDAwMDAwMDY5MiAwMDAwMCBuIAowMDAwMDAwODEzIDAwMDAwIG4gCjAwMDAwMDM2MTQgMDAwMDAgbiAKMDAwMDAwMDg4MSAwMDAwMCBuIAowMDAwMDAzNTk0IDAwMDAwIG4gCjAwMDAwMDM3MzAgMDAwMDAgbiAKMDAwMDAwMzc4MCAwMDAwMCBuIAowMDAwMDAzODMyIDAwMDAwIG4gCnRyYWlsZXIKPDwgL1NpemUgMTMgL1Jvb3QgMTAgMCBSIC9JbmZvIDEgMCBSIC9JRCBbIDw1NGY5OWIwZmViMWMxNzViOGE0NmQ3NTM2MTdlNmFhMD4KPDU0Zjk5YjBmZWIxYzE3NWI4YTQ2ZDc1MzYxN2U2YWEwPiBdID4+CnN0YXJ0eHJlZgozOTQ5CiUlRU9GCg==\"\n\tPROXY_ADDITIONAL_ICON=\"$PROXY_ICON\"\n\tOTHER_ICON=\"| dropdown=false templateImage=\"\n\tADDITIONAL_ICON=\"$OTHER_ICON\"\n\tERROR_ICON=\"| dropdown=false templateImage=\"\n\t;;\n*)\n\tPROXY_ICON='🔒'\n\tPROXY_ADDITIONAL_ICON='🔓'\n\tOTHER_ICON='🤷'\n\tADDITIONAL_ICON='☘'\n\tERROR_ICON='🧟'\n\t;;\nesac\n\nosversion=$(sw_vers -productVersion)\nosmajor=$(echo \"$osversion\" | awk -F. '{print $1}')\nosminor=$(echo \"$osversion\" | awk -F. '{print $2}')\nospatch=$(echo \"$osversion\" | awk -F. '{print $3}')\n[[ \"$osmajor\" -eq 10 \u0026\u0026 \"$osminor\" -lt 7 ]] \u0026\u0026 exit 14\n[ \"$osmajor\" -lt 10 ] \u0026\u0026 exit 15\n\nget_current_service() {\n\tservices=$(networksetup -listnetworkserviceorder | grep -F 'Hardware Port')\n\techo \"$services\" | while read -r line; do\n\t\tsname=$(echo \"$line\" | awk -F \"(, )|(: )|[)]\" '{print $2}')\n\t\tsdev=$(echo \"$line\" | awk -F \"(, )|(: )|[)]\" '{print $4}')\n\t\tif [ -n \"$sdev\" ]; then\n\t\t\tifout=\"$(ifconfig \"$sdev\" 2\u003e/dev/null)\"\n\t\t\tif echo \"$ifout\" | grep -Fq 'status: active'; then\n\t\t\t\tcurrentservice=\"$sname\"\n\t\t\t\tbreak\n\t\t\tfi\n\t\tfi\n\tdone\n\n\tif [ -n \"$currentservice\" ]; then\n\t\techo \"$currentservice\"\n\telse\n\t\texit 1\n\tfi\n}\n\nget_service_resolvers() {\n\tservice=\"$1\"\n\tips=\"\"\n\tfor ip in $(networksetup -getdnsservers \"$service\" | sort -u); do\n\t\tif [ \"$ips\" ]; then\n\t\t\tips=\"$ips \"\n\t\tfi\n\t\tips=\"$ips$ip\"\n\tdone\n\techo \"$ips\"\n}\n\nget_current_resolvers() {\n\t[ -r /etc/resolv.conf ] || exit 0\n\tips_i=\"\"\n\tsort -u /etc/resolv.conf | while read -r line; do\n\t\tcase \"$line\" in\n\t\tnameserver\\ *)\n\t\t\tip=$(echo \"$line\" | sed -e 's/nameserver *//' -e 's/ *//')\n\t\t\tips_i=\"$ips_i $ip\"\n\t\t\t;;\n\t\tesac\n\tdone\n\n\ttypeset -A found\n\tips=\"\"\n\tfor ip_i in $ips_i; do\n\t\t# shellcheck disable=SC2086\n\t\tif [ ! ${found[\"$ip_i\"]} ]; then\n\t\t\tif [ \"$ips\" ]; then\n\t\t\t\tips=\"$ips \"\n\t\t\tfi\n\t\t\tips=\"$ips$ip_i\"\n\t\t\tfound[\"$ip_i\"]=1\n\t\tfi\n\tdone\n\n\techo \"$ips\"\n}\n\nflush_dns_cache() {\n\tif [ \"$osmajor\" -eq 10 ]; then\n\t\tif [ \"$osminor\" -le 8 ]; then\n\t\t\tkillall -HUP mDNSResponder 2\u003e/dev/null\n\t\telif [ \"$osminor\" = 9 ]; then\n\t\t\tdscacheutil -flushcache 2\u003e/dev/null\n\t\t\tkillall -HUP mDNSResponder 2\u003e/dev/null\n\t\telif [ \"$osminor\" = 10 ]; then\n\t\t\tif [ \"$ospatch\" -le 3 ]; then\n\t\t\t\tdiscoveryutil mdnsflushcache 2\u003e/dev/null\n\t\t\t\tdiscoveryutil udnsflushcaches 2\u003e/dev/null\n\t\t\telse\n\t\t\t\tdscacheutil -flushcache 2\u003e/dev/null\n\t\t\t\tkillall -HUP mDNSResponder 2\u003e/dev/null\n\t\t\tfi\n\t\telif [ \"$osminor\" = 11 ]; then\n\t\t\tdscacheutil -flushcache 2\u003e/dev/null\n\t\t\tkillall -HUP mDNSResponder 2\u003e/dev/null\n\t\telif [ \"$osminor\" = 12 ]; then\n\t\t\tif [ \"$ospatch\" -le 2 ]; then\n\t\t\t\tkillall -HUP mDNSResponder 2\u003e/dev/null\n\t\t\telse\n\t\t\t\tkillall -HUP mDNSResponder 2\u003e/dev/null\n\t\t\t\tkillall mDNSResponderHelper 2\u003e/dev/null\n\t\t\t\tdscacheutil -flushcache 2\u003e/dev/null\n\t\t\tfi\n\t\telif [ \"$osminor\" = 15 ]; then\n\t\t\tdscacheutil -flushcache 2\u003e/dev/null\n\t\t\tkillall -HUP mDNSResponder 2\u003e/dev/null\n\t\telse\n\t\t\tkillall -HUP mDNSResponder 2\u003e/dev/null\n\t\tfi\n\telif [ \"$osmajor\" -eq 11 ]; then\n\t\tdscacheutil -flushcache 2\u003e/dev/null\n\t\tkillall -HUP mDNSResponder 2\u003e/dev/null\n\tfi\n}\n\ndisplay_name_for_resolvers() {\n\tresolvers=\"$1\"\n\tcase \"$resolvers\" in\n\t\"$DNSCRYPT_PROXY_IPS\") echo \"dnscrypt-proxy\" ;;\n\t\"${DNSCRYPT_PROXY_IPS} ${ADDITIONAL_IPS}\") echo \"dnscrypt-proxy + ${ADDITIONAL_NAME}\" ;;\n\t\"$ADDITIONAL_IPS\") echo \"$ADDITIONAL_NAME\" ;;\n\t^$ | There*) echo \"default\" ;;\n\t*) echo \"$resolvers\" ;;\n\tesac\n}\n\nservice=$(get_current_service)\nif [ -z \"$service\" ]; then\n\techo \"$ERROR_ICON\"\n\texit 0\nfi\n\nif [ \"$#\" -gt 0 ]; then\n\twanted_resolvers=\"$*\"\n\t# shellcheck disable=2086\n\tnetworksetup -setdnsservers \"$service\" $wanted_resolvers\n\tflush_dns_cache 2\u003e/dev/null\n\texit 0\nfi\n\nservice_resolvers=$(get_service_resolvers \"$service\")\ncurrent_resolvers=$(get_current_resolvers)\nservice_resolvers_name=$(display_name_for_resolvers \"$service_resolvers\")\ncurrent_resolvers_name=$(display_name_for_resolvers \"$current_resolvers\")\n\nif [ \"$current_resolvers_name\" = \"dnscrypt-proxy\" ]; then\n\techo \"$PROXY_ICON\"\nelif [ \"$current_resolvers_name\" = \"dnscrypt-proxy + ${ADDITIONAL_NAME}\" ]; then\n\techo \"$PROXY_ADDITIONAL_ICON\"\nelif [ \"$current_resolvers_name\" = \"${ADDITIONAL_NAME}\" ]; then\n\techo \"$ADDITIONAL_ICON\"\nelse\n\techo \"$OTHER_ICON\"\nfi\necho \"---\"\n\necho \"${service} resolvers: ${service_resolvers_name}\"\nif [ \"$service_resolvers_name\" != \"$current_resolvers_name\" ]; then\n\techo \"Current resolvers: ${current_resolvers_name} | color=red\"\nfi\n\necho \"Use default DNS | terminal=false refresh=true bash=\\\"${0}\\\" param1=empty\"\necho \"Use dnscrypt-proxy | terminal=false refresh=true bash=\\\"${0}\\\" param1='${DNSCRYPT_PROXY_IPS}'\"\necho \"Use dnscrypt-proxy + ${ADDITIONAL_NAME} | terminal=false refresh=true bash=\\\"${0}\\\" param1='${DNSCRYPT_PROXY_IPS} ${ADDITIONAL_IPS}'\"\necho \"Use ${ADDITIONAL_NAME} | terminal=false refresh=true bash=\\\"${0}\\\" param1='${ADDITIONAL_IPS}'\"\necho \"View the dnscrypt-proxy public servers list | href=https://dnscrypt.info/public-servers\"\n"
				}
			],
			"path": "Network/dnscrypt-proxy-switcher.10s.sh",
			"filename": "dnscrypt-proxy-switcher.10s.sh",
			"dir": "Network",
			"docsPlugin": "Network/dnscrypt-proxy-switcher.10s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "dnscrypt-proxy switcher",
			"version": "v0.1",
			"author": "Frank Denis",
			"authors": [
				{
					"name": "Frank Denis",
					"githubUsername": "jedisct1",
					"imageURL": "https://avatars.githubusercontent.com/u/124872?v=4",
					"bio": "Parisian fashion photographer with a knack for cryptography, computer vision, opensource software and infosec.\r\nGet my public keys here: https://sk.tl/7CPRo8kn",
					"primary": true
				}
			],
			"desc": "Toggle dnscrypt-proxy usage",
			"imageURL": "https://raw.githubusercontent.com/jedisct1/bitbar-dnscrypt-proxy-switcher/master/bitbar-dnscrypt-proxy.jpg",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.650879Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/external-ip.1h.sh",
					"filename": "external-ip.1h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eexternal-ip\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eMat Ryer\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ematryer\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGets the current external IP address.\u003c/bitbar.desc\u003e\n\nEXTERNAL_IP=$(dig +short myip.opendns.com @resolver1.opendns.com)\n\nif [ \"$1\" = \"copy\" ]; then\n  # Copy the IP to clipboard\n  echo -n \"$EXTERNAL_IP\" | pbcopy\nfi\n\necho \"$EXTERNAL_IP\"\necho \"---\"\necho \"(External IP address)\"\necho \"Copy IP | terminal=false bash='$0' param1=copy\"\n"
				}
			],
			"path": "Network/external-ip.1h.sh",
			"filename": "external-ip.1h.sh",
			"dir": "Network",
			"docsPlugin": "Network/external-ip.1h.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "external-ip",
			"version": "",
			"author": "Mat Ryer",
			"authors": [
				{
					"name": "Mat Ryer",
					"githubUsername": "matryer",
					"imageURL": "https://avatars.githubusercontent.com/u/101659?v=4",
					"bio": "Building pace.dev and firesearch.dev - Gopher, developer, speaker, author (Go Programming Blueprints) - BitBar app getbitbar.com - Co-creator Gopherize.me",
					"primary": true
				}
			],
			"desc": "Gets the current external IP address.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.825233Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/internal-ip.1h.sh",
					"filename": "internal-ip.1h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003einternal-ip\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eMat Ryer\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ematryer\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGets the current internal IP address, and shows more information in the details.\u003c/bitbar.desc\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n\nifconfig | grep -e \"^en\" | sort -u | while read line ; do\n    ACTIVE_ADAPTER=$(echo $line | awk -F: '{print $1}')\n    INTERNAL_IP_ADDRESS=$(ifconfig $ACTIVE_ADAPTER | grep \"inet \" | awk '{print $2}')\n    if [ -n \"$INTERNAL_IP_ADDRESS\" ]; then\n        echo $INTERNAL_IP_ADDRESS\n        echo \"---\"\n        echo \"(Internal IP address)\"\n        echo \"---\"\n        ifconfig ${ACTIVE_ADAPTER}\n\n        break\n    fi\ndone\n"
				}
			],
			"path": "Network/internal-ip.1h.sh",
			"filename": "internal-ip.1h.sh",
			"dir": "Network",
			"docsPlugin": "Network/internal-ip.1h.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "internal-ip",
			"version": "1.0",
			"author": "Mat Ryer",
			"authors": [
				{
					"name": "Mat Ryer",
					"githubUsername": "matryer",
					"imageURL": "https://avatars.githubusercontent.com/u/101659?v=4",
					"bio": "Building pace.dev and firesearch.dev - Gopher, developer, speaker, author (Go Programming Blueprints) - BitBar app getbitbar.com - Co-creator Gopherize.me",
					"primary": true
				}
			],
			"desc": "Gets the current internal IP address, and shows more information in the details.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:58.905298Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/ping.10s.sh",
					"filename": "ping.10s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eping\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTrung Đinh Quang, Grant Sherrick and Kent Karlsson\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ethealmightygrant\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSends pings to a range of sites to determine network latency\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/lk3iGat.png?1\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eping\u003c/bitbar.dependencies\u003e\n\n# This is a plugin of Bitbar\n# https://github.com/matryer/bitbar\n# It shows current ping to some servers at the top Menubar\n# This helps me to know my current connection speed\n#\n# Authors: (Trung Đinh Quang) trungdq88@gmail.com and (Grant Sherrick) https://github.com/thealmightygrant\n\n# Themes copied from here: http://colorbrewer2.org/\n# shellcheck disable=SC2034\nPURPLE_GREEN_THEME=(\"#762a83\" \"#9970ab\" \"#c2a5cf\" \"#a6dba0\" \"#5aae61\" \"#1b7837\")\n# shellcheck disable=SC2034\nRED_GREEN_THEME=(\"#d73027\" \"#fc8d59\" \"#fee08b\" \"#d9ef8b\" \"#91cf60\" \"#1a9850\")\n# shellcheck disable=SC2034\nORIGINAL_THEME=(\"#acacac\" \"#ff0101\" \"#cc673b\" \"#ce8458\" \"#6bbb15\" \"#0ed812\")\n\n# Configuration\nCOLORS=(${RED_GREEN_THEME[@]})\nMENUFONT=\"\" #size=10 font=UbuntuMono-Bold\"\nFONT=\"\"\nMAX_PING=1000\nSITES=(google.com youtube.com wikipedia.org github.com)\n\n#grab ping times for all sites\nSITE_INDEX=0\nPING_TIMES=\n\nwhile [ $SITE_INDEX -lt ${#SITES[@]} ]; do\n    NEXT_SITE=\"${SITES[$SITE_INDEX]}\"\n    if RES=$(ping -c 2 -n -q \"$NEXT_SITE\" 2\u003e/dev/null); then\n        NEXT_PING_TIME=$(echo \"$RES\" | awk -F '/' 'END {printf \"%.0f\\n\", $5}')\n    else\n        NEXT_PING_TIME=$MAX_PING\n    fi\n\n    if [ -z \"$PING_TIMES\" ]; then\n        PING_TIMES=($NEXT_PING_TIME)\n    else\n        PING_TIMES=(${PING_TIMES[@]} $NEXT_PING_TIME)\n    fi\n    SITE_INDEX=$(( SITE_INDEX + 1 ))\ndone\n\n# Calculate the average ping\nSITE_INDEX=0\nAVG=0\nwhile [ $SITE_INDEX -lt ${#SITES[@]} ]; do\n    AVG=$(( (AVG + ${PING_TIMES[$SITE_INDEX]}) ))\n    SITE_INDEX=$(( SITE_INDEX + 1 ))\ndone\nAVG=$(( AVG / ${#SITES[@]} ))\n\n# Calculate STD dev\nSITE_INDEX=0\nAVG_DEVS=0\nwhile [ $SITE_INDEX -lt ${#SITES[@]} ]; do\n    AVG_DEVS=$(( AVG_DEVS + (${PING_TIMES[$SITE_INDEX]} - AVG)**2 ))\n    SITE_INDEX=$(( SITE_INDEX + 1 ))\ndone\nAVG_DEVS=$(( AVG_DEVS / ${#SITES[@]} ))\nSD=$(echo \"sqrt ( $AVG_DEVS )\" | bc -l | awk '{printf \"%d\\n\", $1}')\n\nif [ $AVG -ge $MAX_PING ]; then\n  MSG=\" ☠ \"\nelse\n  MSG='⚡'\"$AVG\"'±'\"$SD\"\nfi\n\nfunction colorize {\n  if [ \"$1\" -ge $MAX_PING ]; then\n    echo \"${COLORS[0]}\"\n  elif [ \"$1\" -ge 600 ]; then\n    echo \"${COLORS[1]}\"\n  elif [ \"$1\" -ge 300 ]; then\n    echo \"${COLORS[2]}\"\n  elif [ \"$1\" -ge 100 ]; then\n    echo \"${COLORS[3]}\"\n  elif [ \"$1\" -ge 50 ]; then\n    echo \"${COLORS[4]}\"\n  else\n    echo \"${COLORS[5]}\"\n  fi\n}\n\necho \"$MSG | color=$(colorize $AVG) $MENUFONT\"\necho \"---\"\nSITE_INDEX=0\nwhile [ $SITE_INDEX -lt ${#SITES[@]} ]; do\n    PING_TIME=${PING_TIMES[$SITE_INDEX]}\n    if [ $PING_TIME -eq $MAX_PING ]; then\n        PING_TIME=\"☠\"\n    else\n        PING_TIME=\"$PING_TIME ms | color=$(colorize $PING_TIME) $FONT\"\n    fi\n\n    echo \"${SITES[$SITE_INDEX]}: $PING_TIME\"\n    SITE_INDEX=$(( SITE_INDEX + 1 ))\ndone\n\necho \"---\"\necho \"Refresh... | refresh=true\"\n"
				}
			],
			"path": "Network/ping.10s.sh",
			"filename": "ping.10s.sh",
			"dir": "Network",
			"docsPlugin": "Network/ping.10s.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "ping",
			"version": "v1.1",
			"author": "Trung Đinh Quang,  Grant Sherrick and Kent Karlsson",
			"authors": [
				{
					"name": "Grant Sherrick",
					"githubUsername": "thealmightygrant",
					"imageURL": "https://avatars.githubusercontent.com/u/4055018?v=4",
					"bio": "My goal is to make myself better at something everyday.",
					"primary": true
				},
				{
					"name": "Grant Sherrick and Kent Karlsson",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				}
			],
			"desc": "Sends pings to a range of sites to determine network latency",
			"imageURL": "http://i.imgur.com/lk3iGat.png?1",
			"dependencies": [
				"ping"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.454729Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/ssid_info.sh",
					"filename": "ssid_info.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003essid-info\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eÖrjan Berglin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eorjanb\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow the SSID of your current Wi-Fi connection. The SSID is green if the network is secure and red if it is an open network.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/0kHyHnn.png\u003c/bitbar.image\u003e\n\n# Get ssid and auth type \nssid=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}')\nauth=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ link auth/ {print substr($0, index($0, $3))}')\n\ncolor=green\nif [ \"$auth\" = \"none\" ]; then\n\tcolor=red\nelse\n\tcolor=green\nfi\n\necho \"$ssid | color=$color \"\necho \"---\"\necho \"SSID: $ssid | color=$color\"\necho \"Auth: $auth | color=$color\"\n"
				}
			],
			"path": "Network/ssid_info.sh",
			"filename": "ssid_info.sh",
			"dir": "Network",
			"docsPlugin": "Network/ssid_info.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "ssid-info",
			"version": "1.0",
			"author": "Örjan Berglin",
			"authors": [
				{
					"name": "Örjan Berglin",
					"githubUsername": "orjanb",
					"imageURL": "https://avatars.githubusercontent.com/u/422764?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show the SSID of your current Wi-Fi connection. The SSID is green if the network is secure and red if it is an open network.",
			"imageURL": "http://i.imgur.com/0kHyHnn.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:21:59.885459Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/wakeonlan.sh",
					"filename": "wakeonlan.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003ewakeonlan\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eShinya Fujino\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emorinokami\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSends 'magic packets' to turn on a computer.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ewakeonlan\u003c/bitbar.dependencies\u003e\n\n# Dependancies:\n#   wakeonlan (brew install wakeonlan)\n\nexport PATH=\"/usr/local/bin:$PATH\"\n\nMAC_ADDRESS='01:23:45:67:89:AB' # Replace this with the target computer's MAC address\nCOMMAND_PATH=$(command -v wakeonlan)\n\necho 'WoL'\necho '---'\n\nif [[ $COMMAND_PATH ]]; then\n  echo \"Turn on ${MAC_ADDRESS} | bash=/bin/bash param1=${COMMAND_PATH} param2=${MAC_ADDRESS} terminal=false\"\nelse\n  echo 'wakeonlan not installed'\nfi\n"
				}
			],
			"path": "Network/wakeonlan.sh",
			"filename": "wakeonlan.sh",
			"dir": "Network",
			"docsPlugin": "Network/wakeonlan.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "wakeonlan",
			"version": "v1.0",
			"author": "Shinya Fujino",
			"authors": [
				{
					"name": "Shinya Fujino",
					"githubUsername": "morinokami",
					"imageURL": "https://avatars.githubusercontent.com/u/7889778?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Sends 'magic packets' to turn on a computer.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"wakeonlan"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:00.278831Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Network/website-status.sh",
					"filename": "website-status.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003ewebsite-status\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eMarc Oehler\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekemar220\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGets the status of your website\u003c/bitbar.desc\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n\nurl='http://www.kemar.ch' # replace with your url\n\ncode=$(curl -o /dev/null --silent --head --write-out '%{http_code}\\n' $url)\n\ncase \"$code\" in\n\"200\")\n    echo \"ok\"\n    ;;\n\"301\" | \"302\")\n    echo \"redirected\"\n    ;;\n*)\n    echo \"error\"\n    ;;\nesac\n\necho \"---\"\necho $url\necho \"http code $code\"\n"
				}
			],
			"path": "Network/website-status.sh",
			"filename": "website-status.sh",
			"dir": "Network",
			"docsPlugin": "Network/website-status.sh.html",
			"docsCategory": "Network.html",
			"pathSegments": [
				"Network"
			],
			"categoryPathSegments": [
				{
					"path": "Network",
					"text": "Network",
					"isLast": true
				}
			],
			"title": "website-status",
			"version": "1.0",
			"author": "Marc Oehler",
			"authors": [
				{
					"name": "Marc",
					"githubUsername": "kemar220",
					"imageURL": "https://avatars.githubusercontent.com/u/7531652?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Gets the status of your website",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:00.350712Z",
			"vars": null
		}
	]
}