{
	"plugins": [
		{
			"files": [
				{
					"path": "Politics/five-thirty-eight.15m.rb",
					"filename": "five-thirty-eight.15m.rb",
					"content": "#!/usr/bin/env ruby\n # \u003cbitbar.title\u003eElection Tracker\u003c/bitbar.title\u003e\n # \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n # \u003cbitbar.author\u003eChris Metcalf\u003c/bitbar.author\u003e\n # \u003cbitbar.author.github\u003echrismetcalf\u003c/bitbar.author.github\u003e\n # \u003cbitbar.desc\u003eScrapes election odds from FiveThirtyEight's election tracker\u003c/bitbar.desc\u003e\n # \u003cbitbar.image\u003ehttp://i.imgur.com/1NeqVZ6.png\u003c/bitbar.image\u003e\n # \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n # \u003cbitbar.abouturl\u003ehttps://github.com/chrismetcalf/bitbar-plugins\u003c/bitbar.abouturl\u003e\n\nrequire 'open-uri'\nrequire 'nokogiri'\nrequire 'csv'\n\nfeed = Nokogiri::XML(open(\"https://fivethirtyeight.com/tag/2020-election/feed/\"))\n\ntable = []\nprojectDataLink = 'https://projects.fivethirtyeight.com/2020-general-data/presidential_national_toplines_2020.csv'\nbegin\n  open(projectDataLink) do |f|\n    table = CSV.parse(f, headers: true)\n  end\nrescue =\u003e e\n  puts \"‚ö†Ô∏è‚ö†Ô∏è\"\n  puts \"something went wrong with this link: #{projectDataLink}\"\nreturn\nend\n\nd_pct = \"%.1f\" % (table[0][\"ecwin_chal\"].to_f*100.0)\nr_pct = \"%.1f\" % (table[0][\"ecwin_inc\"].to_f*100.0)\n\nputs d_pct \u003e r_pct ? \"üòé #{d_pct}%\" : \":imp: #{r_pct}%\"\n\ndemocratName = \"üòé #{table[0][\"candidate_chal\"]}\"\nrepublicanName = \":imp: #{table[0][\"candidate_inc\"]}\"\nthirdParty = table[0][\"candidate_3rd\"]\nthirdPartyName = \"ü§¶ #{thirdParty}\"\nputs \"---\"\nputs \"Chance of Winning:\"\nputs \"#{democratName}: #{d_pct}%\"\nputs \"#{republicanName}: #{r_pct}%\"\n\nputs \"---\"\nputs \"Electoral Votes:\"\nputs \"#{democratName}: #{table[0][\"ev_chal\"].to_i}\"\nputs \"#{republicanName}: #{table[0][\"ev_inc\"].to_i}\"\nif thirdParty.to_s.length \u003e 0\n  puts \"#{thirdPartyName}: #{table[0][\"ev_3rd\"]}\"\nend\nputs \"üíÜ No majority: #{\"%.1f\" % (table[0][\"ec_nomajority\"].to_f*100.0)}%\"\n\nputs \"---\"\nputs \"Popular Vote:\"\nputs \"#{democratName}: #{\"%.1f\" % table[0][\"national_voteshare_chal\"].to_f}%\"\nputs \"#{republicanName}: #{\"%.1f\" % table[0][\"national_voteshare_inc\"].to_f}%\"\nif thirdParty.to_s.length \u003e 0\n  puts \"#{thirdPartyName}: #{\"%.1f\" % table[0][\"national_voteshare_3rd\"]}%\"\nend\nputs \"ü§∑ Other: #{\"%.1f\" % table[0][\"nat_voteshare_other\"].to_f}%\"\n\nputs \"---\"\nputs \"üìú FiveThirtyEight Election Feed\"\nfeed.css(\"item\")[0..2].each do |item|\n  date = Date::parse(item.css('pubDate').text)\n  puts \"#{date.strftime(\"%Y-%m-%d\")}: #{item.css('title').text} | href=#{item.css('link').text}\"\nend\n\nputs \":wolf: Visit FiveThirtyEight Election Forecast | href=http://projects.fivethirtyeight.com/2020-election-forecast/\"\n\nputs \"---\"\nputs \"Refresh... | refresh=true\"\n"
				}
			],
			"path": "Politics/five-thirty-eight.15m.rb",
			"filename": "five-thirty-eight.15m.rb",
			"dir": "Politics",
			"docsPlugin": "Politics/five-thirty-eight.15m.rb.html",
			"docsCategory": "Politics.html",
			"pathSegments": [
				"Politics"
			],
			"categoryPathSegments": [
				{
					"path": "Politics",
					"text": "Politics",
					"isLast": true
				}
			],
			"title": "Election Tracker",
			"version": "v1.0",
			"author": "Chris Metcalf",
			"authors": [
				{
					"name": "Chris Metcalf",
					"githubUsername": "chrismetcalf",
					"imageURL": "https://avatars.githubusercontent.com/u/19971?v=4",
					"bio": "Head of Delivery Operations at @amperity\r\n\r\n\r\n\"Specialization is for insects\" - Lazarus Long",
					"primary": true
				}
			],
			"desc": "Scrapes election odds from FiveThirtyEight's election tracker",
			"imageURL": "http://i.imgur.com/1NeqVZ6.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/chrismetcalf/bitbar-plugins",
			"lastUpdated": "2021-03-08T15:22:00.795279Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Politics/parliament.uk-count.5m.py",
					"filename": "parliament.uk-count.5m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eParliament.uk Count\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKeith Cirkel\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekeithamus\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSee the vote count for a Parliament.uk petition\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/I38h0UJ.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nimport json\nimport urllib2\nimport locale\nlocale.setlocale(locale.LC_ALL, 'en_GB')\n\nid = '131215'\nname = 'EU 2nd Ref'\nconstituents = False\n\nrequest = urllib2.Request( 'https://petition.parliament.uk/petitions/' + id + '.json' )\nresponse = urllib2.urlopen( request )\ndata = json.load( response )['data']['attributes']\nprint name + ': ' + locale.format('%d', data['signature_count'], grouping=True)\nprint '---'\nif constituents:\n  for cons in data['signatures_by_constituency']:\n    print cons['name'] + ': ' + locale.format('%d', cons['signature_count'], grouping=True)\nprint 'Refresh | refresh=true'\n"
				}
			],
			"path": "Politics/parliament.uk-count.5m.py",
			"filename": "parliament.uk-count.5m.py",
			"dir": "Politics",
			"docsPlugin": "Politics/parliament.uk-count.5m.py.html",
			"docsCategory": "Politics.html",
			"pathSegments": [
				"Politics"
			],
			"categoryPathSegments": [
				{
					"path": "Politics",
					"text": "Politics",
					"isLast": true
				}
			],
			"title": "Parliament.uk Count",
			"version": "v1.0.0",
			"author": "Keith Cirkel",
			"authors": [
				{
					"name": "Keith Cirkel",
					"githubUsername": "keithamus",
					"imageURL": "https://avatars.githubusercontent.com/u/118266?v=4",
					"bio": "\r\n    Works on JavaScript at @github.\r\nMaintainer of @chaijs.\r\n",
					"primary": true
				}
			],
			"desc": "See the vote count for a Parliament.uk petition",
			"imageURL": "https://i.imgur.com/I38h0UJ.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:00.620011Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Politics/PredictIt.sh",
					"filename": "PredictIt.sh",
					"content": "#!/bin/bash\n#Todd Houle\n#Jun2016\n\n#Instructions: At the bottom of the script, add a getData line with the contract or market you'd like to follow. You can get the contract name by looking at the PredictIt page and entering they 'symbol' on that page end the end of this script.\n\n# \u003cbitbar.title\u003ePolitical Outcome Predictions\u003c/bitbar.title\u003e \n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTodd Houle\u003c/bitbar.author\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/WVAdSsD.png\u003c/bitbar.image\u003e\n# \u003cbitbar.author.github\u003etmhoule\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays predictions from PredictIt (who will win elections,etc.) No API key or accounts needed. Watch Trumps chance of winning the election right from your menu bar.\u003c/bitbar.desc\u003e\n\n#Show images in menu.  Comment out one of the lines below.\nuseImages=true\n#useImages=false                                                                                                                                                                                                                                                                 \n\n#must be this percent or higher to show in menu\ncutoff=5\n\necho \"PI\"\necho \"---\"\n\ngetData () {\n    market=$1\n    curl -H \"Accept: application/xml\" -kfs \"https://www.predictit.org/api/marketdata/ticker/$market\" -X GET  | xmllint --format - \u003e \"/private/tmp/$market.$$.xml\" 2\u003e/dev/null\n    Description=$(xpath \"/private/tmp/$market.$$.xml\" 'MarketData/Name' 2\u003e/dev/null| awk -F\\\u003e '{print $2}'|awk -F\\\u003c '{print $1}' 2\u003e/dev/null)\n    echo \"$Description\"\n    IDsInPol=$(xpath \"/private/tmp/$market.$$.xml\" 'MarketData/Contracts' 2\u003e/dev/null|grep -i \"\u003cID\u003e\"| awk -F\\\u003e '{print $2}'|awk -F\\\u003c '{print $1}' 2\u003e/dev/null)\n    PolArry=($IDsInPol)\n    arrayCount=${#PolArry[@]}\n    for onPol in \"${PolArry[@]}\"; do\n        name=$(xmllint --xpath \"string(//Contracts/MarketContract[ID=$onPol]/Name)\" \"/tmp/$market.$$.xml\")\n        curPriceCents=$(xmllint --xpath \"string(//Contracts/MarketContract[ID=$onPol]/LastTradePrice)\" \"/tmp/$market.$$.xml\")\n        curPriceraw=$(echo \"$curPriceCents * 100\" | bc -l|awk -F. '{print $1}')\n        if [ \"$curPriceraw\" -ge \"$cutoff\" ] || [ \"$arrayCount\" = \"1\" ]; then\n            curPrice=$curPriceraw\"%\"\n            imgURL=$(xmllint --xpath \"string(//Contracts/MarketContract[ID=$onPol]/Image)\" \"/tmp/$market.$$.xml\" 2\u003e/dev/null)\n            if [ \"$useImages\" = \"true\" ]; then\n                img=$(curl -kfs \"$imgURL\"|base64)\n            fi\n            linkURL=$(xmllint --xpath \"string(//Contracts/MarketContract[ID=$onPol]/URL)\" \"/tmp/$market.$$.xml\" 2\u003e/dev/null)\n            echo \"--$name - $curPrice |image=$img color=black href=$linkURL\"\n        fi\n    done\n    rm \"/private/tmp/$market.$$.xml\"\n}\n\ngetData DNOM16\ngetData RNOM16\ngetData USPREZ16\n"
				}
			],
			"path": "Politics/PredictIt.sh",
			"filename": "PredictIt.sh",
			"dir": "Politics",
			"docsPlugin": "Politics/PredictIt.sh.html",
			"docsCategory": "Politics.html",
			"pathSegments": [
				"Politics"
			],
			"categoryPathSegments": [
				{
					"path": "Politics",
					"text": "Politics",
					"isLast": true
				}
			],
			"title": "Political Outcome Predictions",
			"version": "v1.0",
			"author": "Todd Houle",
			"authors": [
				{
					"name": "Todd Houle",
					"githubUsername": "tmhoule",
					"imageURL": "https://avatars.githubusercontent.com/u/4460989?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays predictions from PredictIt (who will win elections,etc.) No API key or accounts needed. Watch Trumps chance of winning the election right from your menu bar.",
			"imageURL": "http://i.imgur.com/WVAdSsD.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:00.796328Z",
			"vars": null
		}
	]
}