{
	"plugin": {
		"files": [
			{
				"path": "Sports/live_nba.1m.py",
				"filename": "live_nba.1m.py",
				"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 /usr/local/bin/python3\n\n# \u003cbitbar.title\u003eLive NBA Game Stat\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eChen Luxin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003echenlujjj\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow NBA game scores in bar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://user-images.githubusercontent.com/17081528/101980272-3b763000-3c9f-11eb-9f0e-a14163725805.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython3\u003c/bitbar.dependencies\u003e\n\nimport json\nimport urllib.request\nfrom datetime import datetime, timezone\n\n\ndef time_convert(dt):\n    local_datetime = dt.replace(tzinfo=timezone.utc).astimezone(tz=None)\n    # only care about time, not date\n    return datetime.strftime(local_datetime, '%H:%M')\n\n\nclass Game:\n\n    @classmethod\n    def from_data(cls, data: dict):\n        game = cls()\n        fmt = '%Y-%m-%dT%H:%M:%S.%f%z'\n        game.start_time = datetime.strptime(data['startTimeUTC'], fmt)\n        if 'endTimeUTC' in data:\n            game.end_time = datetime.strptime(data['endTimeUTC'], fmt)\n        else:\n            game.end_time = None\n        game.hTeam = Team.from_data(data['hTeam'])\n        game.vTeam = Team.from_data(data['vTeam'])\n        return game\n\n    def __repr__(self):\n        # example: 09:00-11:35  MIA 98-116 LAL\n        start_time = time_convert(self.start_time)\n        end_time = time_convert(self.end_time) if self.end_time else 'now'\n        return f'{start_time}-{end_time} {self.vTeam.triCode} {self.vTeam.score}-{self.hTeam.score} {self.hTeam.triCode}'\n\n    def details(self):\n        vTeam_linescores = self.vTeam.linescores\n        hTeam_linescores = self.hTeam.linescores\n        return \" \".join([\"%s:%s\" % (vTeam_linescores[i], hTeam_linescores[i]) for i in range(len(vTeam_linescores))])\n\n\nclass Team:\n    def __init__(self, triCode: str, score: int, linescore):\n        self.triCode = triCode\n        self.score = score\n        self.linescore = linescore\n\n    @classmethod\n    def from_data(cls, data: dict):\n        team = cls(data['triCode'], int(data['score'] or 0), data['linescore'])\n        return team\n\n    @property\n    def linescores(self):\n        if not self.linescore:\n            return []\n        return [line['score'] for line in self.linescore]\n\n\nBASE_URL = 'http://data.nba.net/10s'\nTODAY_URL = BASE_URL + '/prod/v1/today.json'\n\ntoday_resp = urllib.request.urlopen(TODAY_URL).read()\ntoday_resp_json = json.loads(today_resp.decode('utf-8'))\n\nscore_board_path = today_resp_json['links']['currentScoreboard']\nscore_board_url = BASE_URL + score_board_path\nscore_board_resp = urllib.request.urlopen(score_board_url).read()\nscore_board_resp_json = json.loads(score_board_resp.decode('utf-8'))\n\ngames_num = score_board_resp_json['numGames']\ngames_data = score_board_resp_json['games']\n\n\nif games_num != 0:\n    print('üèÄ%d' % games_num)\n    print('---')\n    for game_data in games_data:\n        game = Game.from_data(game_data)\n        print(\"%s | size=14 color=black\" % game)\n        print('-- %s | size=13' % game.details())\nelse:\n    print('üèÄ')\n"
			}
		],
		"path": "Sports/live_nba.1m.py",
		"filename": "live_nba.1m.py",
		"dir": "Sports",
		"docsPlugin": "Sports/live_nba.1m.py.html",
		"docsCategory": "Sports.html",
		"pathSegments": [
			"Sports"
		],
		"categoryPathSegments": [
			{
				"path": "Sports",
				"text": "Sports",
				"isLast": true
			}
		],
		"title": "Live NBA Game Stat",
		"version": "v1.0",
		"author": "Chen Luxin",
		"authors": [
			{
				"name": "Chen Luxin",
				"githubUsername": "chenlujjj",
				"imageURL": "https://avatars.githubusercontent.com/u/17081528?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Show NBA game scores in bar.",
		"imageURL": "https://user-images.githubusercontent.com/17081528/101980272-3b763000-3c9f-11eb-9f0e-a14163725805.png",
		"dependencies": [
			"python3"
		],
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:22:01.293215Z",
		"vars": null
	}
}