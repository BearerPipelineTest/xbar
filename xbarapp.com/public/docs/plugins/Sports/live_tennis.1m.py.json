{
	"plugin": {
		"files": [
			{
				"path": "Sports/live_tennis.1m.py",
				"filename": "live_tennis.1m.py",
				"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eLive Tennis Scores\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAnup Sam Abraham\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eanupsabraham\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow live scores for tennis matches using ATP World Tour api\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/5kOPKVv.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\nimport urllib2\nimport json\n\natpworldtour_base_url = \"http://www.atpworldtour.com\"\ninital_scores_url = atpworldtour_base_url + \"/en/-/ajax/Scores/GetInitialScores\"\n\nnbsp = \"\u0026nbsp;\"  # for stripping \u0026nbsp; from data\nteam_keys = ['TeamOne', 'TeamTwo']\nset_key_names = ['SetOne', 'SetTwo', 'SetThree', 'SetFour', 'SetFive']\n\ninital_scores_response = urllib2.urlopen(inital_scores_url)\ninitial_scores_data = json.load(inital_scores_response)\n\ntournaments = initial_scores_data['liveScores']['Tournaments']\n\nfinal_matches_list = []\nfor each_tournament in tournaments:\n    matches = each_tournament['Matches']\n    for match in matches:\n        match_data = {}\n        teams = []\n        for team_name in team_keys:\n            team_data = {}\n            \n            # get the player(s) name for each team\n            player_name = match[team_name]['PlayerOneName']\n            if match[team_name]['PlayerTwoName'].strip():    \n                player_name += \" / \" + match[team_name]['PlayerTwoName']\n            if match[team_name]['TeamStatus'] == \"now-serving\":\n                player_name += \"*\"\n            team_data['player_name'] = player_name\n\n            # get the scores\n            score_string = \"\"\n            set_score_list = []\n            for set_name in set_key_names:\n                if set_name in match[team_name]['Scores'] and match[team_name]['Scores'][set_name] != nbsp:\n                    score_string += match[team_name]['Scores'][set_name]\n                    if match[team_name]['Scores'][set_name]:\n                        set_score_list.append(int(match[team_name]['Scores'][set_name]))\n                    else:\n                        set_score_list.append(0)\n\n                score_string += \" \"\n\n            if \"CurrentScore\" in match[team_name]['Scores'] and match[team_name]['Scores']['CurrentScore'] != nbsp:\n                score_string += match[team_name]['Scores'][\"CurrentScore\"]\n\n            team_data['score'] = score_string\n            team_data['set_score_list'] = set_score_list\n\n            teams.append(team_data)\n        \n        set_lead = [0,0]\n        if not match['MatchInfo'].strip():\n            # if matchinfo is not present in the json response, generate a match info\n            # Calculate the total number of sets won by each team/player\n            for x in xrange(5):\n                if len(teams[0]['set_score_list']) \u003e x:\n                    team1_games = teams[0]['set_score_list'][x]\n                    team2_games = teams[1]['set_score_list'][x]\n                    if x == 4:\n                        # if 5th set, there should be a 2 game difference to be the winner\n                        if team1_games \u003e= 6 and team2_games \u003c 5:\n                            set_lead[0] += 1\n                        elif team2_games \u003e= 6 and team1_games \u003c 5:\n                            set_lead[1] += 1\n                    else:\n                        if (team1_games \u003e= 6 and team2_games \u003c 5) or team1_games \u003e= 7:\n                            set_lead[0] += 1\n                        elif (team2_games \u003e= 6 and team1_games \u003c 5) or team2_games \u003e= 7:\n                            set_lead[1] += 1\n\n            if set_lead[0] \u003e set_lead[1]:\n                match_data['info'] = \"%s leads by %s set%s to %s\" %(teams[0]['player_name'], set_lead[0], \"s\" if set_lead[0] \u003e 1 else \"\", set_lead[1])\n            elif set_lead[1] \u003e set_lead[0]:\n                match_data['info'] = \"%s leads by %s set%s to %s\" %(teams[1]['player_name'], set_lead[1], \"s\" if set_lead[1] \u003e 1 else \"\", set_lead[0])\n            elif not (set_lead[0] \u0026 set_lead[1]):\n                match_data['info'] = \"First set in progress\"\n            else:\n                match_data['info'] = \"Both won %s set%s each\" %(set_lead[0], \"s\" if set_lead[0] \u003e 1 else \"\")\n        else:\n            match_data['info'] = match['MatchInfo']\n            \n        match_data['url'] = atpworldtour_base_url + match['StatsLink']\n        match_data['team_data'] = teams\n        final_matches_list.append(match_data)\n\nif final_matches_list:\n    print \"ðŸŽ¾%s\" % len(final_matches_list)\n    print \"---\"\n    for match in final_matches_list:\n        print match['info'] + \" | size=15 color=blue href=\" + match['url']\n        for team in match['team_data']:\n            print team['score'] + \" \" + team['player_name'] + \" | size=13\"\n        print \"---\"\n\nelse:\n    print \"ðŸŽ¾\"\n"
			}
		],
		"path": "Sports/live_tennis.1m.py",
		"filename": "live_tennis.1m.py",
		"dir": "Sports",
		"docsPlugin": "Sports/live_tennis.1m.py.html",
		"docsCategory": "Sports.html",
		"pathSegments": [
			"Sports"
		],
		"categoryPathSegments": [
			{
				"path": "Sports",
				"text": "Sports",
				"isLast": true
			}
		],
		"title": "Live Tennis Scores",
		"version": "v1.0",
		"author": "Anup Sam Abraham",
		"authors": [
			{
				"name": "Anup Sam Abraham",
				"githubUsername": "anupsabraham",
				"imageURL": "https://avatars.githubusercontent.com/u/2144142?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Show live scores for tennis matches using ATP World Tour api",
		"imageURL": "http://i.imgur.com/5kOPKVv.png",
		"dependencies": [],
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:22:01.415529Z",
		"vars": null
	}
}