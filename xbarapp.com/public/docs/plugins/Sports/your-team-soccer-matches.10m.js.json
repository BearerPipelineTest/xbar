{
	"plugin": {
		"files": [
			{
				"path": "Sports/your-team-soccer-matches.10m.js",
				"filename": "your-team-soccer-matches.10m.js",
				"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eYour Team: Soccer Matches\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eTaylor Sturtz\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003etsturtz\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eShow completed/upcoming and LIVE matches as well as competition standings for your favorite soccer team.\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/tsturtz/your-team-soccer-matches/master/your-team-soccer-matches.jpg\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003enode,npm/bitbar,npm/date-fns,npm/node-fetch\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.abouturl\u003ehttps://github.com/tsturtz/your-team-soccer-matches\u003c/bitbar.abouturl\u003e\n\n// -----------------------------------------------------------------------------\n// üôã‚Äç‚ôÇÔ∏è Start here!\n// -----------------------------------------------------------------------------\n// 1. Ensure you have the proper node (tested on v12.16.3) and npm dependencies installed.\n//    - npm install --global bitbar node-fetch date-fns\n// 2. Get a free API key from https://www.football-data.org/client/register.\n// 3. Configure the USER_OPTIONS object.\n//    - FOOTBALL_DATA_API_KEY: Provide your API key you just got here.\n//    - TEAM_ID: Provide an accurate TEAM_ID or it will default to my team, Tottenham üòé.\n//      - Use the a dictionary of *some* teams and their IDs below to find your team's ID.\n//    - NUMBER_OF_FINISHED_MATCHES: The number of completed matches to retrieve and display.\n//      - DEFAULT: 5; MAX: 7;\n//    - NUMBER_OF_SCHEDULED_MATCHES: The number of upcoming matches to retrieve and display.\n//      - DEFAULT: 3; NO MAX;\n\n// -----------------------------------------------------------------------------\n// üëÄ Below are some incomplete but butter-than-nothing team id lookup dictionaries.\n// Search the file to get your team's football-data ID, but don't touch this code.\n// -----------------------------------------------------------------------------\nconst NATIONAL_TEAM_IDS = { Argentina: 762, Australia: 779, Belgium: 805, Brazil: 764, Colombia: 818, Costa_Rica: 793, Croatia: 799, Denmark: 782, Egypt: 825, England: 770, France: 773, Germany: 759, Iceland: 1066, Iran: 840, Japan: 766, Korea_Republic: 772, Mexico: 769, Morocco: 815, Nigeria: 776, Panama: 1836, Peru: 832, Poland: 794, Portugal: 765, Russia: 808, Saudi_Arabia: 801, Senegal: 804, Serbia: 780, Spain: 760, Sweden: 792, Switzerland: 788, Tunisia: 802, Uruguay: 758, };\nconst GERMAN_LEAGUE_TEAM_IDS = { Augsburg: 16, Bayer_04_Leverkusen: 3, Bayern_M√ºnchen: 5, Borussia_M√∂nchengladbach: 18, Bremen: 12, Dortmund: 4, FC_K√∂ln: 1, Frankfurt: 19, Freiburg: 17, Hannover: 8, Hertha_BSC: 9, Hoffenheim: 2, HSV: 7, Kaiserslautern: 13, Mainz: 15, N√ºrnberg: 14, RB_Leipzig: 721, RB_Salzburg: 1877, Schalke_04: 6, Stuttgart: 10, Wolfsburg: 11, };\nconst ENGLISH_LEAGUE_TEAM_IDS = { Arsenal: 57, Aston_Villa: 58, Barnsley: 357, Birmingham: 332, Blackburn_Rovers: 59, Bolton_Wanderers: 60, Bournemouth: 1044, Brentford: 402, Brighton_And_Hove_Albion: 397, Bristol_City: 387, Burnley: 328, Burton_Albion: 1072, Charlton: 348, Chelsea: 61, Crystal_Palace: 354, Derby: 342, England: 770, Everton: 62, Fulham: 63, Huddersfield: 394, Hull_City: 322, Ipswich_Town: 349, Leeds: 341, Leicester_City: 338, Liverpool: 64, Luton_Town: 389, Manchester_City: 65, Manchester_United: 66, Middlesbrough: 343, Millwall: 384, Newcastle: 67, Norwich: 68, Nottingham_Forest: 351, Preston_North_End: 1081, QPR: 69, Reading: 355, Rotherham_Utd: 385, Sheffield_United: 356, Sheffield_Wednesday: 345, Southampton: 340, Stoke: 70, Sunderland: 71, Swansea: 72, Tottenham_Hotspur: 73, Watford: 346, West_Brom: 74, West_Ham: 563, Wigan: 75, Wolverhampton: 76, };\nconst SPANISH_LEAGUE_TEAM_IDS = { Atl√©tico_de_Madrid: 78, Barcelona: 81, Real_Madrid: 86, Valencia: 95, };\nconst ITALY_LEAGUE_TEAM_IDS = { Atalanta: 102, Inter: 108, Juventus: 109, Napoli: 113, };\nconst FRANCE_LEAGUE_TEAM_IDS = { Lille: 521, Lyon: 523, PSG: 524, };\nconst NETHERLANDS_LEAGUE_TEAM_IDS = { Ajax: 678, PSV: 674, };\nconst MISC_LEAGUE_TEAM_IDS = { AIK_Fotboll: 5277, APOEL: 752, Astana_FK: 1884, Ba≈üak≈üehir: 1897, Basel: 729, BATE: 748, Celtic: 732, Club_Brugge: 851, Crvena_Zvedza: 7283, Dinamo_Zagreb: 755, Dundalk: 1873, Dynamo_Kyiv: 842, F91_Dudelange: 1875, Galatasaray: 610, HJK: 5123, K√∏benhavn: 1876, KRC_Genk: 1858, LASK: 2016, Linfield: 1896, Ludogorets: 1901, Maribor: 734, N√µmme_Kalju: 5106, Olympiakos: 654, PAOK_FC: 6146, Porto: 503, Qarabaƒü_Aƒüdam: 611, Rosenborg: 889, Santa_Coloma: 1879, Sarajevo: 4275, Shaktar: 1887, Sheriff: 1880, SL_Benfica: 1903, Slavia_Praha: 930, The_New_Saints: 1904, Viktoria_Plze≈à: 1881, Young_Boys: 1871, Zenit: 731, };\n\n// -----------------------------------------------------------------------------\n// ‚úçÔ∏è CONFIGURE API KEY AND OPTIONS HERE!\n// -----------------------------------------------------------------------------\nconst USER_OPTIONS = {\n  FOOTBALL_DATA_API_KEY: '',\n  TEAM_ID: ENGLISH_LEAGUE_TEAM_IDS.Tottenham_Hotspur,\n  NUMBER_OF_FINISHED_MATCHES: 5,\n  NUMBER_OF_SCHEDULED_MATCHES: 3,\n};\n\n// -----------------------------------------------------------------------------\n// üö® You shouldn't need to change anything below this line.\n// -----------------------------------------------------------------------------\n\n// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -\u003e numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\nparcelRequire = (function (modules, cache, entry, globalName) {\n  // Save the require from previous bundle to this closure if any\n  var previousRequire = typeof parcelRequire === 'function' \u0026\u0026 parcelRequire;\n  var nodeRequire = typeof require === 'function' \u0026\u0026 require;\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire = typeof parcelRequire === 'function' \u0026\u0026 parcelRequire;\n        if (!jumped \u0026\u0026 currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire \u0026\u0026 typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error('Cannot find module \\'' + name + '\\'');\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = cache[name] = new newRequire.Module(name);\n\n      modules[name][0].call(module.exports, localRequire, module, module.exports, this);\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x){\n      return newRequire(localRequire.resolve(x));\n    }\n\n    function resolve(x){\n      return modules[name][1][x] || x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [function (require, module) {\n      module.exports = exports;\n    }, {}];\n  };\n\n  var error;\n  for (var i = 0; i \u003c entry.length; i++) {\n    try {\n      newRequire(entry[i]);\n    } catch (e) {\n      // Save first error but execute all entries\n      if (!error) {\n        error = e;\n      }\n    }\n  }\n\n  if (entry.length) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(entry[entry.length - 1]);\n\n    // CommonJS\n    if (typeof exports === \"object\" \u0026\u0026 typeof module !== \"undefined\") {\n      module.exports = mainExports;\n\n    // RequireJS\n    } else if (typeof define === \"function\" \u0026\u0026 define.amd) {\n     define(function () {\n       return mainExports;\n     });\n\n    // \u003cscript\u003e\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n\n  // Override the current require with this new one\n  parcelRequire = newRequire;\n\n  if (error) {\n    // throw error from earlier, _after updating parcelRequire_\n    throw error;\n  }\n\n  return newRequire;\n})({\"Focm\":[function(require,module,exports) {\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i \u003c arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst bitbar = require('bitbar');\n\nconst fetch = require('node-fetch').default;\n\nconst {\n  format,\n  parseISO\n} = require('date-fns');\n\nconst OPTIONS = {\n  FOOTBALL_DATA_API_KEY: USER_OPTIONS \u0026\u0026 USER_OPTIONS.FOOTBALL_DATA_API_KEY,\n  TEAM_ID: USER_OPTIONS \u0026\u0026 USER_OPTIONS.TEAM_ID || 73,\n  NUMBER_OF_FINISHED_MATCHES: USER_OPTIONS \u0026\u0026 USER_OPTIONS.NUMBER_OF_FINISHED_MATCHES || 5,\n  NUMBER_OF_SCHEDULED_MATCHES: USER_OPTIONS \u0026\u0026 USER_OPTIONS.NUMBER_OF_SCHEDULED_MATCHES || 3\n};\n\nif (!OPTIONS.FOOTBALL_DATA_API_KEY) {\n  console.log('MISSING API KEY');\n}\n\nif (OPTIONS.NUMBER_OF_FINISHED_MATCHES \u003e 7) {\n  OPTIONS.NUMBER_OF_FINISHED_MATCHES = 7;\n}\n\n(async () =\u003e {\n  const apiUrl = 'https://api.football-data.org/v2';\n  const apiData = {\n    method: 'get',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Auth-Token': OPTIONS.FOOTBALL_DATA_API_KEY\n    }\n  }; // Get team info\n\n  const myTeamResponse = await fetch(`${apiUrl}/teams/${OPTIONS.TEAM_ID}`, apiData);\n  const myTeam = await myTeamResponse.json(); // Get active competitions standings\n  // NOTE: The free API only supports some competitions: https://www.football-data.org/coverage\n\n  const supportedCompetitions = new Set(['BSA', 'PL', 'ELC', 'CL', 'EC', 'FL1', 'BL1', 'SA', 'DED', 'PPL', 'PD', 'WC']);\n  const activeCompetitionsPromises = myTeam.activeCompetitions.filter(comp =\u003e supportedCompetitions.has(comp.code)).map(comp =\u003e fetch(`${apiUrl}/competitions/${comp.code}/standings?standingType=TOTAL`, apiData));\n  const activeCompetitionsPromisesResponses = await Promise.all(activeCompetitionsPromises);\n  const activeCompetitionsStandings = await Promise.all(activeCompetitionsPromisesResponses.map(resp =\u003e resp.json()));\n  let activeCompetitionsStandingsRender = [];\n  activeCompetitionsStandings.forEach(comp =\u003e {\n    activeCompetitionsStandingsRender = [...activeCompetitionsStandingsRender, {\n      text: comp.competition.name,\n      href: `https://www.google.com/search?q=${comp.competition.name.split(' ').join('+')}`,\n      size: 14,\n      submenu: comp.standings.map(standing =\u003e ({\n        text: standing.stage === 'GROUP_STAGE' ? standing.group : standing.stage,\n        size: 14,\n        submenu: [{\n          text: 'Pos. Team - Points'\n        }, bitbar.separator, ...standing.table.map((table, idx) =\u003e {\n          return _objectSpread({\n            text: `${table.position}. ${table.team.name} - ${table.points}`,\n            href: `https://www.google.com/search?q=${table.team.name.split(' ').join('+')}`\n          }, table.team.id === OPTIONS.TEAM_ID \u0026\u0026 {\n            font: 'Helvetica-Bold'\n          });\n        })]\n      }))\n    }];\n  }); // Get matches\n\n  const matchesResponse = await fetch(`${apiUrl}/teams/${OPTIONS.TEAM_ID}/matches`, apiData);\n  const matchesResponseJson = await matchesResponse.json();\n  const finishedMatches = matchesResponseJson.matches.filter(match =\u003e match.status === 'FINISHED');\n  const scheduledMatches = matchesResponseJson.matches.filter(match =\u003e match.status === 'SCHEDULED');\n  const liveMatches = matchesResponseJson.matches.filter(match =\u003e match.status === 'LIVE' || match.status === 'IN_PLAY' || match.status === 'PAUSED'); // Finished/completed matches\n\n  let finishedMatchesRender = [];\n\n  if (finishedMatches) {\n    let idx = 0; // Use for..of here instead of forEach because it plays nice with async/await\n\n    for (const match of finishedMatches) {\n      if (idx \u003e= finishedMatches.length - OPTIONS.NUMBER_OF_FINISHED_MATCHES) {\n        // Determine winner\n        const isDraw = match.score.winner === 'DRAW';\n        let winningTeamName = 'Draw';\n\n        if (match.score.winner === 'HOME_TEAM') {\n          winningTeamName = match.homeTeam.name;\n        } else if (match.score.winner === 'AWAY_TEAM') {\n          winningTeamName = match.awayTeam.name;\n        }\n\n        const myTeamWon = winningTeamName === myTeam.name;\n        const myTeamIsHome = match.homeTeam.name === myTeam.name; // Get TLA\n\n        const opponentTeamId = myTeamIsHome ? match.awayTeam.id : match.homeTeam.id;\n        const opponentTeamResponse = await fetch(`${apiUrl}/teams/${opponentTeamId}`, apiData);\n        const opponentTeam = await opponentTeamResponse.json(); // Check if there was extra time\n\n        const showExtraTime = match.score.extraTime.homeTeam || match.score.extraTime.awayTeam; // Check if there were penalties\n\n        const showPenalties = match.score.penalties.homeTeam || match.score.penalties.awayTeam; // Render regular scores\n\n        const regularScoreRender = `${myTeamIsHome ? myTeam.tla : opponentTeam.tla} ${match.score.fullTime.homeTeam} - ${match.score.fullTime.awayTeam} ${myTeamIsHome ? opponentTeam.tla : myTeam.tla}`; // Render extra time scores\n\n        const extraTimeRender = `(ET: ${match.score.extraTime.homeTeam} - ${match.score.extraTime.awayTeam})`; // Render extra time scores\n\n        const penaltiesRender = `(Pen: ${match.score.penalties.homeTeam} - ${match.score.penalties.awayTeam})`;\n        finishedMatchesRender = [...finishedMatchesRender, {\n          text: `${match.homeTeam.name} vs. ${match.awayTeam.name}`,\n          size: 14,\n          href: `https://www.google.com/search?q=${match.homeTeam.name.split(' ').join('+')}+vs.+${match.awayTeam.name.split(' ').join('+')}`\n        }, {\n          text: `${myTeamWon ? 'üü¢' : isDraw ? '‚ö™Ô∏è' : 'üî¥'} ${regularScoreRender} ${showExtraTime ? extraTimeRender : ''} ${showPenalties ? penaltiesRender : ''}`,\n          size: 14\n        }];\n      }\n\n      idx++;\n    }\n  } // Scheduled/upcoming matches\n\n\n  let scheduledMatchesRender = [];\n\n  if (scheduledMatches) {\n    scheduledMatches.forEach((match, idx) =\u003e {\n      if (idx \u003c OPTIONS.NUMBER_OF_SCHEDULED_MATCHES) {\n        scheduledMatchesRender = [...scheduledMatchesRender, {\n          text: `${match.homeTeam.name} vs. ${match.awayTeam.name}`,\n          size: 14,\n          href: `https://www.google.com/search?q=${match.homeTeam.name.split(' ').join('+')}+vs.+${match.awayTeam.name.split(' ').join('+')}`\n        }, {\n          text: `${match.competition.name} - ${match.group || match.stage}${match.matchday ? ` - Match day: ${match.matchday}` : ''}`,\n          size: 14\n        }, {\n          text: `${format(parseISO(match.utcDate), 'MM/dd/yyyy - hh:mm a')}`,\n          size: 14\n        }];\n      }\n    });\n  } // Live matches\n\n\n  let liveMatchesRender = [];\n\n  if (liveMatches) {\n    liveMatches.forEach(async match =\u003e {\n      liveMatchesRender = [...liveMatchesRender, {\n        text: `${match.homeTeam.name} vs. ${match.awayTeam.name}`,\n        size: 14,\n        href: `https://www.google.com/search?q=${match.homeTeam.name.split(' ').join('+')}+vs.+${match.awayTeam.name.split(' ').join('+')}`\n      }, {\n        text: `${match.competition.name} - ${match.group || match.stage}${match.matchday ? ` - Match day: ${match.matchday}` : ''}`,\n        size: 14\n      }, {\n        text: 'Click here to check the score',\n        size: 14,\n        href: `https://www.google.com/search?q=${match.homeTeam.name.split(' ').join('+')}+vs.+${match.awayTeam.name.split(' ').join('+')}`\n      }];\n    });\n  } // Prepare render sections\n\n\n  const activeCompetitionsStandingsSection = activeCompetitionsStandingsRender.length ? [bitbar.separator, {\n    text: 'Standings',\n    size: 22\n  }, ...activeCompetitionsStandingsRender] : [bitbar.separator, {\n    text: 'Standings',\n    size: 22\n  }, {\n    text: 'No active competitions.',\n    size: 14\n  }];\n  const finishedMatchesSection = finishedMatchesRender.length ? [bitbar.separator, {\n    text: 'Completed Matches',\n    size: 22\n  }, ...finishedMatchesRender] : [bitbar.separator, {\n    text: 'Completed Matches',\n    size: 22\n  }, {\n    text: 'No recently completed matches.',\n    size: 14\n  }];\n  const scheduledMatchesSection = scheduledMatchesRender.length ? [bitbar.separator, {\n    text: 'Upcoming Matches',\n    size: 22\n  }, ...scheduledMatchesRender] : [bitbar.separator, {\n    text: 'Upcoming Matches',\n    size: 22\n  }, {\n    text: 'No upcoming matches.',\n    size: 14\n  }];\n  const liveMatchesSection = liveMatchesRender.length ? [bitbar.separator, {\n    text: 'Live Matches',\n    size: 22\n  }, ...liveMatchesRender] : [bitbar.separator, {\n    text: 'Live Matches',\n    size: 22\n  }, {\n    text: 'No live matches right now.',\n    size: 14\n  }]; // Render the bitbar dropdown\n\n  bitbar([{\n    text: `‚öΩÔ∏é ${myTeam.tla}`,\n    dropdown: false\n  }, bitbar.separator, {\n    text: myTeam.name,\n    size: 30,\n    href: myTeam.website\n  }, ...activeCompetitionsStandingsSection, ...finishedMatchesSection, ...scheduledMatchesSection, ...liveMatchesSection]);\n})();\n},{}]},{},[\"Focm\"], null)"
			}
		],
		"path": "Sports/your-team-soccer-matches.10m.js",
		"filename": "your-team-soccer-matches.10m.js",
		"dir": "Sports",
		"docsPlugin": "Sports/your-team-soccer-matches.10m.js.html",
		"docsCategory": "Sports.html",
		"pathSegments": [
			"Sports"
		],
		"categoryPathSegments": [
			{
				"path": "Sports",
				"text": "Sports",
				"isLast": true
			}
		],
		"title": "Your Team: Soccer Matches",
		"version": "v1.0",
		"author": "Taylor Sturtz",
		"authors": [
			{
				"name": "Taylor Sturtz",
				"githubUsername": "tsturtz",
				"imageURL": "https://avatars.githubusercontent.com/u/6409518?v=4",
				"bio": "npx taylorsturtz",
				"primary": true
			}
		],
		"desc": "Show completed/upcoming and LIVE matches as well as competition standings for your favorite soccer team.",
		"imageURL": "https://raw.githubusercontent.com/tsturtz/your-team-soccer-matches/master/your-team-soccer-matches.jpg",
		"dependencies": [
			"node",
			"npm/bitbar",
			"npm/date-fns",
			"npm/node-fetch"
		],
		"aboutURL": "https://github.com/tsturtz/your-team-soccer-matches",
		"lastUpdated": "2021-03-08T15:22:01.538358Z",
		"vars": null
	}
}