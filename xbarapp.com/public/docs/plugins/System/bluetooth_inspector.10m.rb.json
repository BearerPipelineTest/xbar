{
	"plugin": {
		"files": [
			{
				"path": "System/bluetooth_inspector.10m.rb",
				"filename": "bluetooth_inspector.10m.rb",
				"content": "#!/usr/bin/env ruby\n# \u003cbitbar.title\u003eBluetooth Inspector\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e0.1.4\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRyan Scott Lewis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eRyanScottLewis\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow bluetooth information for all connected bluetooth devices using the `system_profiler` binary.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/RyanScottLewis/bitbar-bluetooth_inspector/master/bitbar-bluetooth_inspector.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/RyanScottLewis/bitbar-bluetooth_inspector\u003c/bitbar.abouturl\u003e\n\n# NOTE: Configuration is at the BOTTOM of this file!\n\n# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n# -= Code -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n\n\nrequire 'open3'\n\nmodule BluetoothInspector\n\n  # The plugin controller.\n  class Controller\n\n    class \u003c\u003c self\n\n      # Collect bluetooth devices, format for bitbar output, and print to output.\n      #\n      # @return [String]\n      def run(\u0026block)\n        new.run(\u0026block)\n      end\n\n    end\n\n    def initialize\n      collect_devices\n      setup_formatter\n    end\n\n    # Get all devices.\n    #\n    # @return [\u003cDevice\u003e]\n    attr_reader :devices\n\n    # Get the formatter.\n    #\n    # @return [Formatter]\n    attr_reader :formatter\n\n    # Collect bluetooth devices, format for bitbar output, and print to output.\n    #\n    # @return [String]\n    def run(\u0026block)\n      run_config_block_if_needed(\u0026block)\n\n      output = @formatter.format(@devices)\n\n      print output\n    end\n\n    protected\n\n    def collect_devices\n      stdout_str, _, _ = Open3.capture3(\"system_profiler SPBluetoothDataType\")\n\n      @devices = Parser.parse(stdout_str)\n    end\n\n    def setup_formatter\n      @formatter = Formatter.new\n    end\n\n    def run_config_block_if_needed(\u0026block)\n      return nil unless block_given?\n\n      block.arity \u003e 0 ? yield(self) : run_in_controller_context(\u0026block)\n    end\n\n    def run_in_controller_context(\u0026block)\n      ControllerContext.new(self).instance_eval(\u0026block)\n    end\n\n  end\n\nend\n\nmodule BluetoothInspector\n\n  # The DSL context for the configuration block given to the Controller.\n  class ControllerContext\n\n    def initialize(controller)\n      @controller = controller\n    end\n\n    # Get all devices.\n    #\n    # @return [\u003cDevice\u003e]\n    def devices\n      @controller.devices\n    end\n\n    # Find a device by it's name or shortname.\n    #\n    # @param [#to_s] value\n    # @return [\u003cDevice\u003e]\n    def device(value, \u0026block)\n      value = value.to_s\n      device = devices.find { |d| d.name == value || d.shortname == value }\n\n      run_device_block_if_needed(device, \u0026block)\n\n      device\n    end\n\n    def bar_format(value)\n      @controller.formatter.bar_format = value\n    end\n\n    def item_format(value)\n      @controller.formatter.item_format = value\n    end\n\n    protected\n\n    def run_device_block_if_needed(device, \u0026block)\n      return nil unless !device.nil? \u0026\u0026 block_given?\n\n      block.arity \u003e 0 ? yield(device) : run_in_device_context(device, \u0026block)\n    end\n\n    def run_in_device_context(device, \u0026block)\n      DeviceContext.new(device).instance_eval(\u0026block)\n    end\n\n  end\n\nend\n\nmodule BluetoothInspector\n\n  # A bluetooth device.\n  class Device\n    def initialize(attributes={})\n      @bar_item = true\n      @menu_item = true\n\n      update_attributes(attributes)\n\n      raise \"name must be given\" if @name.nil?\n    end\n\n    # Get the name of the device.\n    #\n    # @return [String]\n    attr_reader :name\n\n    # Set the name of the device.\n    #\n    # @param [#to_s] value\n    # @return [String]\n    def name=(value)\n      @name = value.to_s\n    end\n\n    # Get the major type of the device.\n    #\n    # @return [String]\n    attr_reader :major_type\n\n    # Set the major_type of the device.\n    #\n    # @param [#to_s] value\n    # @return [String]\n    def major_type=(value)\n      @major_type = value.to_s\n    end\n\n    # Get the minor type of the device.\n    #\n    # @return [String]\n    attr_reader :minor_type\n\n    # Set the minor_type of the device.\n    #\n    # @param [#to_s] value\n    # @return [String]\n    def minor_type=(value)\n      @minor_type = value.to_s\n    end\n\n    # Get whether the device is paired.\n    #\n    # @return [Boolean]\n    def paired?\n      @paired\n    end\n\n    # Get whether the device is not paired.\n    #\n    # @return [Boolean]\n    def unpaired?\n      !@paired\n    end\n\n    # set whether the device is paired.\n    #\n    # @param [Boolean] value\n    # @return [Boolean]\n    def paired=(value)\n      @paired = !!value\n    end\n\n    # Get whether the device is connected.\n    #\n    # @return [Boolean]\n    def connected?\n      @connected\n    end\n\n    # Get whether the device is not connected.\n    #\n    # @return [Boolean]\n    def disconnected?\n      !@connected\n    end\n\n    # set whether the device is connected.\n    #\n    # @param [Boolean] value\n    # @return [Boolean]\n    def connected=(value)\n      @connected = !!value\n    end\n\n    # Get the shortname of the device.\n    #\n    # @return [nil, String]\n    def shortname\n      @shortname.nil? ? @name : @shortname\n    end\n\n    # Set the shortname of the device.\n    #\n    # @param [nil, #to_s] value\n    # @return [nil, String]\n    def shortname=(value)\n      @shortname = value.nil? ? nil : value.to_s\n    end\n\n    # Get whether this device has a shortname.\n    #\n    # @return [Boolean]\n    def shortname?\n      !@shortname.nil?\n    end\n\n    # Get the battery level in a range of `0..100`.\n    #\n    # @return [nil, Float]\n    attr_reader :battery\n\n    # Set the battery level in a range of `0..100`.\n    #\n    # @param [nil, #to_f] value\n    # @return [nil Float]\n    def battery=(value)\n      @battery = value.nil? ? nil : value.to_i\n    end\n\n    # Get whether this device has no battery level.\n    #\n    # @return [Boolean]\n    def no_battery?\n      @battery.nil?\n    end\n\n    # Get whether this device has a battery level.\n    #\n    # @return [Boolean]\n    def battery?\n      !no_battery?\n    end\n\n    # Get the color of the device.\n    #\n    # @return [nil, String]\n    attr_reader :color\n\n    # Set the name of the device.\n    #\n    # @param [nil, #to_s] value\n    # @return [nil, String]\n    def color=(value)\n      @color = value.nil? ? nil : value.to_s\n    end\n\n    # Get whether this device has a color.\n    #\n    # @return [Boolean]\n    def color?\n      !@color.nil?\n    end\n\n    # Get whether this device is shown within the bar.\n    #\n    # @return [Boolean]\n    def bar_item?\n      @bar_item\n    end\n\n    # Set whether this device is shown within the bar.\n    #\n    # @param [Boolean] value\n    # @return [Boolean]\n    def bar_item=(value)\n      @bar_item = !!value\n    end\n\n    # Get whether this device is shown within the menu.\n    #\n    # @return [Boolean]\n    def menu_item?\n      @menu_item\n    end\n\n    # Set whether this device is shown within the menu.\n    #\n    # @param [Boolean] value\n    # @return [Boolean]\n    def menu_item=(value)\n      @menu_item = !!value\n    end\n\n    # Get device's attributes.\n    #\n    # @return [Hash]\n    def to_h\n      {\n        name:      @name,\n        shortname: @shortname,\n        battery:   @battery\n      }\n    end\n\n    protected\n\n    def update_attributes(attributes)\n      attributes.to_h.each do |name, value|\n        next unless self.class.method_defined?(\"#{name}=\")\n\n        send(\"#{name}=\", value)\n      end\n    end\n\n  end\n\nend\n\nmodule BluetoothInspector\n\n  # The DSL context for a device.\n  class DeviceContext\n\n    def initialize(device)\n      @device = device\n    end\n\n    # Get the device.\n    #\n    # @param [String]\n    # @return [String]\n    attr_reader :device\n\n    # Get/set the name of the device.\n    #\n    # @param [String]\n    # @return [String]\n    def name(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set the major type of the device.\n    #\n    # @param [String]\n    # @return [String]\n    def major_type(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set the minor type of the device.\n    #\n    # @param [String]\n    # @return [String]\n    def minor_type(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set whether the device is paired.\n    #\n    # @param [String]\n    # @return [String]\n    def paired?(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set whether the device is connected.\n    #\n    # @param [String]\n    # @return [String]\n    def connected?(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set the shortname of the device.\n    #\n    # @return [nil, String]\n    def shortname(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set the battery level of the device.\n    #\n    # @return [nil, Integer]\n    def battery(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set the color of the device.\n    #\n    # @return [nil, String]\n    def color(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set whether the device is shown within the bar.\n    #\n    # @return [Boolean]\n    def bar_item(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set whether the device is shown within the menu.\n    #\n    # @return [Boolean]\n    def menu_item(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    protected\n\n    def validate_arguments(arguments)\n      raise ArgumentError, \"wrong number of arguments (given #{arguments.count}, expected 0..1)\" if arguments.length \u003e 1\n    end\n\n    def get_or_set_attribute(name, arguments)\n      validate_arguments(arguments)\n\n      arguments.empty? ? @device.send(name) : @device.send(\"#{name}=\", arguments.first)\n    end\n\n  end\n\nend\n\nmodule BluetoothInspector\n\n  # Formats a list of devices for the expected bitbar output.\n  class Formatter\n\n    def initialize\n      @bar_format = \":shortname :battery%\"\n      @item_format = \":name\"\n    end\n\n    # Get the format for a device as a bar item.\n    #\n    # @return [String]\n    attr_reader :bar_format\n\n    # Set the format for a device as a bar item.\n    #\n    # @param [#to_s] value\n    # @return [String]\n    def bar_format=(value)\n      @bar_format = value.to_s\n    end\n\n    # Get the format for a device as a menu item.\n    #\n    # @return [String]\n    attr_reader :item_format\n\n    # Set the format for a device as a menu item.\n    #\n    # @param [#to_s] value\n    # @return [String]\n    def item_format=(value)\n      @item_format = value.to_s\n    end\n\n    def format(devices)\n      lines = []\n\n      devices.find_all(\u0026:bar_item?).each { |device| lines \u003c\u003c format_device(@bar_format, device) }\n\n      lines \u003c\u003c \"---\"\n      devices.find_all(\u0026:menu_item?).each { |device| lines \u003c\u003c format_device(@item_format, device) }\n\n      lines.join(\"\\n\")\n    end\n\n    protected\n\n    def format_device(format_string, device)\n      output = format_string\n      device.to_h.each { |name, value| output = output.gsub(/:#{name}/, value.to_s) }\n\n      device.color.nil? ? output : output + \" | color=#{device.color}\"\n    end\n\n  end\n\nend\n\nrequire \"yaml\"\n\nmodule BluetoothInspector\n\n  # Parses the output of the `system_profiler` command and returns an Array of Device instances.\n  class Parser\n\n    class \u003c\u003c self\n\n      # Parse the command output.\n      #\n      # @param [#to_s] data The command output.\n      # @return [\u003cDevice\u003e]\n      def parse(data)\n        new.parse(data)\n      end\n\n    end\n\n    # Parse the command output.\n    #\n    # @param [#to_s] data The command output.\n    # @return [\u003cDevice\u003e]\n    def parse(data)\n      data = YAML.load(data.to_s)\n\n      data[\"Bluetooth\"][\"Devices (Paired, Configured, etc.)\"].collect do |name, attributes|\n        Device.new(\n          name:       name,\n          battery:    attributes[\"Battery Level\"],\n          major_type: attributes[\"Major Type\"],\n          minor_type: attributes[\"Minor Type\"],\n          paired:     attributes[\"Paired\"],\n          connected:  attributes[\"Connected\"],\n        )\n      end\n    end\n\n  end\n\nend\n\nmodule BluetoothInspector\n\n  class \u003c\u003c self\n\n    # Run the plugin controller.\n    def run(\u0026block)\n      Controller.run(\u0026block)\n    end\n\n  end\n\nend\n\n\n# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n# -= Configuration =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n\n# See https://github.com/RyanScottLewis/bitbar-bluetooth_inspector for configuration documentation.\n\nBluetoothInspector.run do\n  devices.delete_if(\u0026:no_battery?)\n  devices.delete_if(\u0026:disconnected?)\n\n  # Color all low battery level devices red:\n  devices.find_all { |device| device.battery \u003c 20 }.each { |device| device.color = \"red\" }\n\n  # Add device emojis to each shortname\n  devices.each do |device|\n    device.shortname = case device.minor_type\n                            when 'Mouse'    then '🖱'\n                            when 'Keyboard' then '⌨️'\n                       end\n  end\nend\n"
			}
		],
		"path": "System/bluetooth_inspector.10m.rb",
		"filename": "bluetooth_inspector.10m.rb",
		"dir": "System",
		"docsPlugin": "System/bluetooth_inspector.10m.rb.html",
		"docsCategory": "System.html",
		"pathSegments": [
			"System"
		],
		"categoryPathSegments": [
			{
				"path": "System",
				"text": "System",
				"isLast": true
			}
		],
		"title": "Bluetooth Inspector",
		"version": "0.1.4",
		"author": "Ryan Scott Lewis",
		"authors": [
			{
				"name": "Ryan Scott Lewis",
				"githubUsername": "RyanScottLewis",
				"imageURL": "https://avatars.githubusercontent.com/u/39534?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Show bluetooth information for all connected bluetooth devices using the `system_profiler` binary.",
		"imageURL": "https://raw.githubusercontent.com/RyanScottLewis/bitbar-bluetooth_inspector/master/bitbar-bluetooth_inspector.png",
		"dependencies": [
			"ruby"
		],
		"aboutURL": "https://github.com/RyanScottLewis/bitbar-bluetooth_inspector",
		"lastUpdated": "2021-03-08T15:22:02.646826Z",
		"vars": null
	}
}