{
	"plugins": [
		{
			"files": [
				{
					"path": "System/arp-spoof-detector.sh",
					"filename": "arp-spoof-detector.sh",
					"content": "#!/bin/bash\n\n#\n# \u003cbitbar.title\u003eARP Spoof Detector\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTuan Nguyen\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etuannvm\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin detect the ARP spoofing attack on local area network and notify user\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/2jE6g7v.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/tree/master/System/arp-spoof-detector.sh\u003c/bitbar.abouturl\u003e\n#\n\n# check if it's there any duplicated arp address\nduplicated_arp=$(arp -a | awk '{print $4}' | uniq -d)\n\nif [ -z \"$duplicated_arp\" ];then\n    # if not, print OK, no attack on this network\n    echo \"OK\"\nelse\n    # if there's a duplication, notify the user with the attacker's IP\n    result=$(arp -a | grep \"$duplicated_arp\" | cut -d\"(\" -f2 | cut -d\")\" -f1 | tail -n 1)\n    echo \"ATTACK FROM\" \"$result\" \"!\"\nfi"
				}
			],
			"path": "System/arp-spoof-detector.sh",
			"filename": "arp-spoof-detector.sh",
			"dir": "System",
			"docsPlugin": "System/arp-spoof-detector.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "ARP Spoof Detector",
			"version": "v1.0",
			"author": "Tuan Nguyen",
			"authors": [
				{
					"name": "Tommy Nguyen",
					"githubUsername": "tuannvm",
					"imageURL": "https://avatars.githubusercontent.com/u/1461216?v=4",
					"bio": "CKA \u0026 CKAD - Kubernetes enthusiast",
					"primary": true
				}
			],
			"desc": "This plugin detect the ARP spoofing attack on local area network and notify user",
			"imageURL": "http://i.imgur.com/2jE6g7v.png",
			"dependencies": null,
			"aboutURL": "https://github.com/matryer/bitbar-plugins/tree/master/System/arp-spoof-detector.sh",
			"lastUpdated": "2021-03-08T15:22:02.588519Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/ad-pass-expiry.sh",
					"filename": "ad-pass-expiry.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eActive Directory Password Expiration Check\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eGalen Sprague\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003egsprague\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows Active Directory Password Expiration in days\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003e\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\n# Set environment vars\nDOMAIN=\"yourDomain\"\n# Set password policy in days\nPWPOLICY=\"90\"\n\n# Get logged in user\n#CURRENTUSER=$(ls -l /dev/console | cut -d \" \" -f4)\nCURRENTUSER=$(id -un)\n\n# Get data from AD\nLASTPWDMS=$(dscl /Active\\ Directory/\"$DOMAIN\"/All\\ Domains -read /Users/\"$CURRENTUSER\" | grep -i \"SMBPasswordLastSet\" | cut -d ' ' -f 2 | tail -1)\nif [[ $LASTPWDMS == \"\" ]]\nthen\n\t# No access to AD\n\techo \"AD NA\"\nelse\n\t# Get the current UNIX date\n\tTODAYUNIX=$(date +%s)\n\n\t# Convert last set value\n\tLASTPWDUNIX=$((LASTPWDMS/10000000-11644473600))\n\n\t# Subtract last set value from current UNIX date\n\tDIFFUNIX=$((TODAYUNIX-LASTPWDUNIX))\n\n\t# Calculate in days\n\tDIFFDAYS=$((DIFFUNIX/86400))\n\n\t# Subtract password policy from days\n\tPASSWORDEXPIRATION=$((PWPOLICY-DIFFDAYS))\n\n\techo \"Password expires in $PASSWORDEXPIRATION days\"\nfi\n\nexit 0\n"
				}
			],
			"path": "System/ad-pass-expiry.sh",
			"filename": "ad-pass-expiry.sh",
			"dir": "System",
			"docsPlugin": "System/ad-pass-expiry.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Active Directory Password Expiration Check",
			"version": "v1.0",
			"author": "Galen Sprague",
			"authors": [
				{
					"name": "Galen Sprague",
					"githubUsername": "gsprague",
					"imageURL": "https://avatars.githubusercontent.com/u/810706?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows Active Directory Password Expiration in days",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.451134Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/active_gpu.1m.py",
					"filename": "active_gpu.1m.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eActive GPU\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Ripa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeripa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays an image based on the active GPU in multi-GPU machines, such as the MacBook Pro\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/v2MuPOi.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\nfrom __future__ import print_function\nimport subprocess\nimport plistlib\n\n# Base64 encoded icon for displaying the built-in GPU\nBUILTIN_GPU_ICON = ('iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJ'\n                    'QAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD'\n                    '0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1'\n                    'sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAg'\n                    'ICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0ia'\n                    'HR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj'\n                    '4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkR'\n                    'GPgo8L3g6eG1wbWV0YT4KTMInWQAAA3JJREFUWAntlsmKFEEQhtt9X8cVlZHxKvgQend5HG+efAof'\n                    'QRS9ztw9DvgAIigqMrjv6/dV1+9kTVdXV40gDPjD3xkVGRkZERlZXaPRf3RXYFP3dOfsrLW/Oldvl'\n                    'MlZWXblsZfJn1MMNqN/P2WuU72egLbi8Tu8CV9Anz0efTka5FF4HcYWsR9cMBRJ4hgLv8Ft0CCi/4'\n                    'HsnIhu/NTjdz0BpVmf4v85bAsoRxnbHqGMTYZmoL10o9NjF5Vci9UQn094im3vwLK4dNhH3ofRHXg'\n                    'CfoXx48bb4TN4FQ5u7DhibS/sxMoj8hYtwC3QIOJH2Tl76xH06JQ/w16Ioy5jN9CxVVmC89DMrYwB'\n                    'tEG/VspXw2N4Eb6D8YU4DDa7lXDUiTgCDcQghtA1c1Doq/RdKcsfJ9vgeyYw2xyNWe6BizAvRucN0'\n                    'DFQ/gCtzNtaqQ8rXfqup1aHZK8mDt3Il94teAMuwHvwJLQfhFnvgG5iUmGePS6DFwbg2vvwHNSnvt'\n                    '3D5ET2rhyNVau/ZuEb2M29LQZ9FrppEriC/ADaV74IdZgqKVsdbYTPrp2vZX2qW4Hu1YCGbVBvD0k'\n                    '38pZkQ8QKVsmKtAXkXJBgv9SK+HV0roFk3FDy4ObSDFyUhW4uluAp6LFZ9l31uLuWPSJtRAKOj/h2'\n                    'nMC0CiWIOFm70P74CD1WbXRejiaaHkJsIL4byjzMqpB2yUjZIxL2h81qD1kVL4Kj1VJ2TXrINaWPU'\n                    'maqiWkV8qgsdcqd89ZZYAVMKDbOJfuyOtFnr/h1nECMygk38XvGT4i8M14hG2RuxSLyGeiRaZ9eQ6'\n                    'ywn19tLsGse13NjEbHGe0xK2cCDUwoGrPjBxcegm68DHV2Fx6Aa6uDqoJ+rdJl6DW/AK2UibVWBn0'\n                    'nrJzH5GggYg6+gToeQitzGAp9lb4rZfnjZBtyVM4lIHUvoVfc90yCQpxAesmmd03pr5RbF04oOxT2'\n                    'lu8ecRAm2EpR/Ng3Vkb4QjSoXujTQ22OvOK34bQPND9tr8FPcBCGBpSKOJ6Hjh5d/ES2Qg/rOYY/t'\n                    '1O5E9N6aNoiN3KNfZAbZPOrT1DeIq/2MowtYj8MDUiv2Xge2fVtAflqELEdP/X4XU9AHovwE8VPCH'\n                    '2srVCONraY9MPgDAq3/mcZSBv06zfRxsffVGjW2sHHtfHL+S8y+A3HDtV7aIFb0gAAAABJRU5ErkJ'\n                    'ggg==')\nPCIE_GPU_ICON = ('iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAA'\n                 'FiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRv'\n                 'YmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRm'\n                 'PSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpE'\n                 'ZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFk'\n                 'b2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVu'\n                 'dGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K'\n                 'TMInWQAABPxJREFUWAnt1GtoV2UcwPE5l9Oc5nJemmxG1MrKsqvpXEUFSVcJiwgTDCqpV5l0I2OYRYYS'\n                 'kpoZNLB3hb3wRXQxIyJdKqhRWJGsbKTlyktecu7S93v+5zfOjpu92iDyB5//ec5znvM8v+dy/kVFp+M/'\n                 'tgIDcvmWcG9dZ1rflnveb7f5xPpt4PxAJhIrMozysxiOdjRjOY4h2lDs2yjOde+Wmcw41KMMRr+vYH7A'\n                 'UpLYgbFmQ+QTL9T2wa8rYsQhHkS5FaPhs0j0DMquXETUx328H/fZ66na+sx3uz6eSCg6iAcxeEf64Hg0'\n                 '6OtrPqFIwKwte4buRw1+hwkPgQd/IGxn8n/Bw29dzNr6fFv7PISjcNUr0IzXYd2ASCg6KadyNtbDAc7G'\n                 'c/gKjyHifQrfwQQm4C70FrbdCRNwYjMQsY6C472DJKE4rLHPI3iwAGfB1XAFWuDqWH4DzmoZmmCiL8Ov'\n                 '0r8II7Z3BeUxsO1PaMRiVGIVXC37tX/L3SIS8jDPwyXYgknYDZNZCLfKJA5iJqbhWjTAgV6AbZ2U/2ub'\n                 'cAD3oBbR1gksgm1/g+MasUCFu8yvn/t2TISDO7tR2A87WYIbcB9M2romVMPEL8AfsP411MG2l8K6n1EG'\n                 'J+fRGAkjSShWZygVr8LML8JWXIZDmIUZiFltpHwm3FoTcRCthvEo6mHdl4i2u9I661/E3fBodCVUwk1v'\n                 '4UuD4Gz2oArPYxsOw+3yoD6AEbCtidTAd+vxNY7Ctj6fBScxBHOwDrvhsyRMyJeNI3gqKRX+of2C5Cft'\n                 '1cGnYzDW4gu040a4HS1wALfFetu6Mn5ltnWc6+HZ+xMfweQsdy1MsmdUxLZVUHaW5WiDHTt7t+1WnEAz'\n                 'rsIrWISb4YptgO/4id+JVmTbLuT+Fjhx2/pOB0zK95IoSa8m5Aw8R09iB0zGTsfDQ/4D1sPYhWtggh/j'\n                 'SsyHq2lCHuhPYdj2akRbJ/M0vkclquE43SJWysFteB0acTkOYDOG4ReYuPUzMQ3LYJ2fr1+XK1EFz571'\n                 'V8C2dVgK6/ahAo7R7SuLRGxkuJxLcBAD4cq5Xa7GMzDRt1GKPXDlZsMvyWQexALMwRQ0wLO3F2PwEDbi'\n                 'fMzHZNi/Y50yHGgb3IpvsBru9yrYsR0564cxFc52JZyYX5XXFTgHtr0Xtq3FSLyFdryJH+F4RrErIDvw'\n                 '/NTDvV6TepzrB/AP7HZEfEhhJ/7GRNyB3iLamsDFuC3T0Gdu+4X4FcVxqCkn4Sp4wEzQpd6Pl3AensAx'\n                 'lMHP2f8Ov8Am2MZnh9EGt8B+bGd77+1zCz6Bzzwuo/EZPCJGp6tjxCoV7gpLuIGbm+D+G3MxFiY5HM1o'\n                 'QDYe4aYSngtX3AQHw200Oa9+HHF1Vdw+I59DUumsDTv9FuO8ISbgCN6Dg/hntw/xnGLRuTDZtbCNbeMd'\n                 'E3gXrqL13sdzV99wxU6KqIyEvBo18Mz45TSiFlvhikVUU9gOn22CZ8O2cbV+c3rv1b7sczyMZOzYskJV'\n                 'odJzZCIeuOlwWavgXnuuPHe2cd/r4KoYo/A5PDO2cxWGwlXKX92+1pR97IUJdeQPNXVJ+LA8LXvxP2cy'\n                 'HMhD6/U4/NOMaKHgapTiBOzbL8sDnb/ah89tFxNykidFrJgHby6cbb9GJJAd1LrObEVajvOVfZSfVU9t'\n                 'su17Kuf76KlNUvevf+e9vnn6wf9pBf4BZd5O0exv758AAAAASUVORK5CYII=')\n\ndef main():\n    ''' Main function '''\n    output = subprocess.check_output([\"system_profiler\", \"-xml\", \"SPDisplaysDataType\"])\n    plist = plistlib.readPlistFromString(output)\n    cards = [g for g in plist[0]['_items']]\n\n    gpu_in_use = [x for x in cards if 'spdisplays_ndrvs' in x][0]\n    if gpu_in_use['sppci_bus'] == 'spdisplays_builtin':\n        template_image_icon = BUILTIN_GPU_ICON\n    if gpu_in_use['sppci_bus'] == 'spdisplays_pcie_device':\n        template_image_icon = PCIE_GPU_ICON\n    print('| templateImage={}'.format(template_image_icon))\n    print('---')\n    print(gpu_in_use['sppci_model'])\n\nif __name__ == '__main__':\n    main()\n"
				}
			],
			"path": "System/active_gpu.1m.py",
			"filename": "active_gpu.1m.py",
			"dir": "System",
			"docsPlugin": "System/active_gpu.1m.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Active GPU",
			"version": "v1.0",
			"author": "Eric Ripa",
			"authors": [
				{
					"name": "Eric Ripa",
					"githubUsername": "eripa",
					"imageURL": "https://avatars.githubusercontent.com/u/1429673?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays an image based on the active GPU in multi-GPU machines, such as the MacBook Pro",
			"imageURL": "http://i.imgur.com/v2MuPOi.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.364649Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/adobe-flash-update-check.60m.py",
					"filename": "adobe-flash-update-check.60m.py",
					"content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# \u003cbitbar.title\u003eAdobe Flash Versions\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eParvez\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eparvez\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays current Adobe Flash Version for Mac\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/kxWNcl4.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/parvez/bitbar-plugins\u003c/bitbar.abouturl\u003e\n#\n# by Parvez\n\nfrom urllib import urlopen\nfrom xml.dom import minidom\nimport json\n\n# Check current version of Adobe Flash using online API from Adobe.\n# Platform: Macintosh\n# Arch: x86-64\n# Returns JSON with download information for PPAPI and NPAPI\nadobeCheckJsonUrl = urlopen('https://get.adobe.com/flashplayer/webservices/json/?platform_type=Macintosh\u0026platform_dist=\u0026platform_arch=x86-64\u0026platform_misc=\u0026browser_arch=\u0026browser_type=\u0026browser_vers=\u0026browser_dist=\u0026eventname=flashplayerotherversions').read()\nadobeCheckJson = json.loads(adobeCheckJsonUrl)\n\n# To check Current version of NPAPI, read plist file stored in plugins directory\ncurrentVersionNPAPIxml = minidom.parse('/Library/Internet Plug-Ins/Flash Player.plugin/Contents/version.plist').getElementsByTagName('string')\n# Store NPAPI versions for future comparison\ncurrentVersionNPAPI = currentVersionNPAPIxml[0].childNodes[0].nodeValue\nnewVersionNPAPI = adobeCheckJson[0]['Version']\n\n# To check Current version of PPAPI (PepperFlash), read json stored in plugins directory\nwith open('/Library/Internet Plug-Ins/PepperFlashPlayer/manifest.json') as json_file:\n    currentVersionPPAPIjson = json.load(json_file)\n# Store PPAPI versions for future comparison\ncurrentVersionPPAPI = currentVersionPPAPIjson['version']\nnewVersionPPAPI = adobeCheckJson[1]['Version']\n\n# Compare with installed version to show appropriate alert icon\nif currentVersionNPAPI == newVersionNPAPI and currentVersionPPAPI == newVersionPPAPI:\n    print (\"✓\")\nelse:\n    print (\"⚡️\")\nprint (\"---\")\n# Show current NPAPI installed version and online available version with link to the dmg\nprint ('Current NPAPI: ' + currentVersionNPAPI)\nprint (adobeCheckJson[0]['Name'] + ': ' + adobeCheckJson[0]['Version'] + '| href:' + adobeCheckJson[0]['download_url'])\nprint (\"---\")\n# Show current PPAPI installed version and online available version with link to the dmg\nprint ('Current PPAPI: ' + currentVersionPPAPI)\nprint (adobeCheckJson[1]['Name'] + ': ' + adobeCheckJson[1]['Version'] + '| href:' + adobeCheckJson[1]['download_url'])\n"
				}
			],
			"path": "System/adobe-flash-update-check.60m.py",
			"filename": "adobe-flash-update-check.60m.py",
			"dir": "System",
			"docsPlugin": "System/adobe-flash-update-check.60m.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Adobe Flash Versions",
			"version": "v1.0",
			"author": "Parvez",
			"authors": [
				{
					"name": "Parvez",
					"githubUsername": "parvez",
					"imageURL": "https://avatars.githubusercontent.com/u/126749?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays current Adobe Flash Version for Mac",
			"imageURL": "http://i.imgur.com/kxWNcl4.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/parvez/bitbar-plugins",
			"lastUpdated": "2021-03-08T15:22:02.512886Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/AirPodsPower.sh",
					"filename": "AirPodsPower.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eAirPods Power\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eGonzalo Serrano Revuelta\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003egonzaloserrano\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays AirPods battery\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n\n# Based on AirPods Battery CLI, Version 2.3 - https://github.com/duk242/AirPodsBatteryCLI\n\nOUTPUT='🎧'\nBLUETOOTH_DEFAULTS=$(defaults read /Library/Preferences/com.apple.Bluetooth)\nSYSTEM_PROFILER=$(system_profiler SPBluetoothDataType 2\u003e/dev/null)\nMAC_ADDR=$(grep -b2 \"Minor Type: Headphones\"\u003c\u003c\u003c\"${SYSTEM_PROFILER}\"|awk '/Address/{print $3}')\nCONNECTED=$(grep -ia6 \"${MAC_ADDR}\"\u003c\u003c\u003c\"${SYSTEM_PROFILER}\"|awk '/Connected: Yes/{print 1}')\nBLUETOOTH_DATA=$(grep -ia6 '\"'\"${MAC_ADDR}\"'\"'\u003c\u003c\u003c\"${BLUETOOTH_DEFAULTS}\")\nBATTERY_LEVELS=(\"BatteryPercentCombined\" \"HeadsetBattery\" \"BatteryPercentSingle\" \"BatteryPercentCase\" \"BatteryPercentLeft\" \"BatteryPercentRight\")\n\nif [[ \"${CONNECTED}\" ]]; then\n    for I in \"${BATTERY_LEVELS[@]}\"; do\n        declare -x \"${I}\"=\"$(awk -v pat=\"${I}\" '$0~pat{gsub (\";\",\"\"); print $3 }'\u003c\u003c\u003c\"${BLUETOOTH_DATA}\")\"\n        [[ -n \"${!I}\" ]] \u0026\u0026 OUTPUT=\"${OUTPUT} $(awk '/BatteryPercent/{print substr($0,15,1)}'\u003c\u003c\u003c\"${I}\")${!I}\"\n    done\n    echo \"${OUTPUT}\"\nelse\n    printf \"%s\\n---\\nNot connected\" \"${OUTPUT}\"\nfi\n"
				}
			],
			"path": "System/AirPodsPower.sh",
			"filename": "AirPodsPower.sh",
			"dir": "System",
			"docsPlugin": "System/AirPodsPower.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "AirPods Power",
			"version": "v1.0",
			"author": "Gonzalo Serrano Revuelta",
			"authors": [
				{
					"name": "Gonzalo Serrano",
					"githubUsername": "gonzaloserrano",
					"imageURL": "https://avatars.githubusercontent.com/u/349328?v=4",
					"bio": "@gonzaloserrano on twitter",
					"primary": true
				}
			],
			"desc": "Displays AirPods battery",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.684933Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/appearance-options.1d.sh",
					"filename": "appearance-options.1d.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eAppearance Options\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKarl Piper\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eKarlPiper\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSet random desktop image, choose image rotation timing and order. Toggle dark mode. Start screensaver. Set Night Shift warmth level (optional, requires: jenghis/nshift).\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/KarlPiper/Plugins-for-Bitbar/master/images/appearance-preview.gif\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n\n# OPTIONS\n# generic title \"toggle\" (false) | \"enable/disable\" (true) cases bitbar restart\ndarkModeAltTitle=true\n# desktop image folder paths\nsfwPath=\"/Library/Desktop Pictures/Solid Colors/\"\nnsfwPath=\"/Library/Desktop Pictures/\"\n# path to nshift (https://github.com/jenghis/nshift) e.g. nshiftDir=\"/usr/local/bin/nshift\"\nnshiftDir=\"false\"\n\n# MENU BAR ICON\n# templateImage reacts to dark mode (black transparent tiff 36x36px/144ppi)\necho \"| templateImage=\";\necho \"---\"\n\n# APPLESCRIPT FUNCTIONS\nfunction changeDesktopImg () {\nosascript \u003c\u003cEOD\n\ttell application \"Finder\"\n\t\tset img to some file of folder (POSIX file \"$1\") as string\n\tend tell\n\ttell application \"System Events\"\n\t\ttell current desktop\n\t\t\tset pictures folder to \"$1\"\n\t\t\tset picture to img\n\t\tend tell\n\tend tell\nEOD\n}\nfunction toggleDarkMode () {\nosascript \u003c\u003cEOD\n\ttell application \"System Events\" to tell appearance preferences\n\t\tset dark mode to not dark mode\n\tend tell\nEOD\n}\nfunction restartBitBar () {\nosascript \u003c\u003cEOD\n\ttell application \"BitBar\" to quit\n\tdelay 1\n\ttell application \"BitBar\" to activate\nEOD\n}\nfunction launchScreensaver () {\nosascript \u003c\u003cEOD\n\ttry\n\t\ttell application id \"com.apple.ScreenSaver.Engine\" to launch\n\tend try\nEOD\n}\nfunction desktopImgRotation () {\n# $1 = picture rotation mode (0=off, 1=interval, 2=login, 3=sleep)\n# $2 = picture rotation timing (in seconds)\nosascript \u003c\u003cEOD\n\ttell application \"System Events\"\n\t\ttell current desktop\n\t\t\tset picture rotation to \"$1\"\n\t\t\tset change interval to \"$2\"\n\t\tend tell\n\tend tell\nEOD\n}\nfunction checkRotationTiming () {\nosascript \u003c\u003cEOD\n\ttell application \"System Events\"\n\t\ttell current desktop\n\t\t\tget properties\n\t\t\treturn change interval\n\t\tend tell\n\tend tell\nEOD\n}\nfunction checkRandom () {\nosascript \u003c\u003cEOD\n\ttell application \"System Events\"\n\t\ttell current desktop\n\t\t\tget properties\n\t\t\treturn random order\n\t\tend tell\n\tend tell\nEOD\n}\nfunction toggleRandomOrder () {\nosascript \u003c\u003cEOD\n\ttell application \"System Events\"\n\t\ttell current desktop\n\t\t\tget properties\n\t\t\tset random order to not random order\n\t\tend tell\n\tend tell\nEOD\n}\nfunction nightShift () {\nosascript \u003c\u003cEOD\n\tset nshiftOptions to { 0, 25, 50, 75, 100 }\n\tset nshiftDialog to (choose from list nshiftOptions with prompt \"Choose warmth level:\" default items \"0\" with title \"Night Shift Settings\")\n\tif nshiftDialog is not false then\n\t\tdo shell script \"$nshiftDir\" \u0026 \" \" \u0026 nshiftDialog\n\t\treturn\n\tend if\nEOD\n}\n\n# DARK MODE STATUS\nBitBarDarkMode=${BitBarDarkMode}\nif [[ \"$BitBarDarkMode\" ]]; then\n\tisDark=true\nelse\n\tisDark=false\nfi\n\n# MENU ITEM HANDLERS\nif [[ \"$1\" = \"darkMode\" ]]; then\n\tif \"$darkModeAltTitle\" = true ; then\n\t\ttoggleDarkMode;\n\t\trestartBitBar;\n\telse\n\t\ttoggleDarkMode;\n\tfi\nfi\n\nif [[ \"$1\" = \"desktop\" ]]; then\n  if [[ \"$2\" = \"sfw\" ]]; then\n\t\tchangeDesktopImg \"$sfwPath\";\n\telif [[ \"$2\" = \"nsfw\" ]]; then\n\t\tchangeDesktopImg \"$nsfwPath\";\n\tfi\nfi\n\nif [[ \"$1\" = \"rotation\" ]]; then\n\tdesktopImgRotation \"$2\" \"$3\";\n\tcheckRandom;\nelif [[ \"$1\" = \"random\" ]]; then\n\ttoggleRandomOrder;\nelif [[ \"$1\" = \"nightShift\" ]]; then\n\tnightShift;\nelif [[ \"$1\" = \"screensaver\" ]]; then\n\tlaunchScreensaver;\nfi\n\n# MENU ITEMS\necho \"🏞 Set Wallpaper\"\necho \"--🏔 SFW| bash='$0' param1=desktop param2=sfw terminal=false\";\necho \"--🌋 NSFW| bash='$0' param1=desktop param2=nsfw terminal=false\";\necho \"--Rotation\"\n\nif [[ $(checkRotationTiming) = \"300.0\" ]]; then\n\techo \"----Disable| bash='$0' param1=rotation param2=0 param3=1.0 terminal=false refresh=true\";\n\techo \"----✓ 5 min| bash='$0' param1=rotation param2=1 param3=300.0 terminal=false refresh=true\";\n\techo \"----1 hr| bash='$0' param1=rotation param2=1 param3=3600.0 terminal=false refresh=true\";\nelif [[ $(checkRotationTiming) = \"3600.0\" ]]; then\n\techo \"----Disable| bash='$0' param1=rotation param2=0 param3=1.0 terminal=false refresh=true\";\n\techo \"----5 min| bash='$0' param1=rotation param2=1 param3=300.0 terminal=false refresh=true\";\n\techo \"----✓ 1 hr| bash='$0' param1=rotation param2=1 param3=3600.0 terminal=false refresh=true\";\nelse\n\techo \"----5 min| bash='$0' param1=rotation param2=1 param3=300.0 terminal=false refresh=true\";\n\techo \"----1 hr| bash='$0' param1=rotation param2=1 param3=3600.0 terminal=false refresh=true\";\nfi\necho \"-------\"\nif $(checkRandom) = true; then\n\techo \"----✓ Random| bash='$0' param1=random terminal=false refresh=true\";\nelse\n\techo \"----Random| bash='$0' param1=random terminal=false refresh=true\";\nfi\n\nif \"$darkModeAltTitle\" = true; then\n\tif \"$isDark\" = true; then\n\t\techo \"🌔 Go Light| bash='$0' param1=darkMode terminal=false\";\n\telse\n\t\techo \"🌘 Go Dark| bash='$0' param1=darkMode terminal=false\";\n\tfi\nelse\n\techo \"🌘 Toggle Dark Mode| bash='$0' param1=darkMode terminal=false\";\nfi\n\necho \"🌀 Start Screensaver| bash='$0' param1=screensaver terminal=false\";\n\nif [[ \"$nshiftDir\" != false ]]; then\n\techo \"💤 Night Shift| bash='$0' param1=nightShift terminal=false\";\nfi"
				}
			],
			"path": "System/appearance-options.1d.sh",
			"filename": "appearance-options.1d.sh",
			"dir": "System",
			"docsPlugin": "System/appearance-options.1d.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Appearance Options",
			"version": "v1.0",
			"author": "Karl Piper",
			"authors": [
				{
					"name": "☟",
					"githubUsername": "KarlPiper",
					"imageURL": "https://avatars.githubusercontent.com/u/9043540?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Set random desktop image, choose image rotation timing and order. Toggle dark mode. Start screensaver. Set Night Shift warmth level (optional, requires: jenghis/nshift).",
			"imageURL": "https://raw.githubusercontent.com/KarlPiper/Plugins-for-Bitbar/master/images/appearance-preview.gif",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.563954Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Battery/trackpad-system_profiler.1m.rb",
					"filename": "trackpad-system_profiler.1m.rb",
					"content": "#!/usr/bin/env ruby\n# \u003cbitbar.title\u003eBattery Apple Bluetooth Trackpad\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMaxime Bertheau\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emaxoumime\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow battery percentage for Bluetooth Trackpad\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/1FlcPYx.png\u003c/bitbar.image\u003e\n#\n# A lot of thanks to @alexandregz, I just changed \"Keyboard\" to \"Trackpad\" :grin:\n# Works fine with Apple Trackpad\n#\n\nrequire 'yaml'\n\noutput = YAML.load(`system_profiler SPBluetoothDataType`);\n\noutput['Bluetooth']['Devices (Paired, Configured, etc.)'].each do |device|\n        puts \"Trackpad: \"+device[1]['Battery Level'].to_s if device[1]['Minor Type'].eql?('Trackpad') \u0026\u0026 device[1].has_key?('Battery Level')\nend\n"
				}
			],
			"path": "System/Battery/trackpad-system_profiler.1m.rb",
			"filename": "trackpad-system_profiler.1m.rb",
			"dir": "System/Battery",
			"docsPlugin": "System/Battery/trackpad-system_profiler.1m.rb.html",
			"docsCategory": "System/Battery.html",
			"pathSegments": [
				"System",
				"Battery"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": false
				},
				{
					"path": "System/Battery",
					"text": "Battery",
					"isLast": true
				}
			],
			"title": "Battery Apple Bluetooth Trackpad",
			"version": "1.0",
			"author": "Maxime Bertheau",
			"authors": [
				{
					"name": "Maxime Bertheau",
					"githubUsername": "maxoumime",
					"imageURL": "https://avatars.githubusercontent.com/u/3897798?v=4",
					"bio": "Android Engineer @ FrontApp",
					"primary": true
				}
			],
			"desc": "Show battery percentage for Bluetooth Trackpad",
			"imageURL": "http://i.imgur.com/1FlcPYx.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.977293Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Battery/keyboard-system_profiler.1m.rb",
					"filename": "keyboard-system_profiler.1m.rb",
					"content": "#!/usr/bin/env ruby\n# \u003cbitbar.title\u003eBattery Apple Bluetooth keyboard\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAlexandre Espinosa Menor\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ealexandregz\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow battery percentage for Bluetooth Keyboard\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/1FlcPYx.png\u003c/bitbar.image\u003e\n#\n# command from https://github.com/matryer/bitbar-plugins/issues/84 by @keithamus\n# works fine with Apple Keyboard\n#\n\nrequire 'yaml'\n\noutput = YAML.load(`system_profiler SPBluetoothDataType 2\u003e /dev/null`);\n\noutput['Bluetooth']['Devices (Paired, Configured, etc.)'].each do |device|\n        puts \"Keyboard: \"+device[1]['Battery Level'].to_s if device[1]['Minor Type'].eql?('Keyboard') \u0026\u0026 device[1].has_key?('Battery Level')\nend\n"
				}
			],
			"path": "System/Battery/keyboard-system_profiler.1m.rb",
			"filename": "keyboard-system_profiler.1m.rb",
			"dir": "System/Battery",
			"docsPlugin": "System/Battery/keyboard-system_profiler.1m.rb.html",
			"docsCategory": "System/Battery.html",
			"pathSegments": [
				"System",
				"Battery"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": false
				},
				{
					"path": "System/Battery",
					"text": "Battery",
					"isLast": true
				}
			],
			"title": "Battery Apple Bluetooth keyboard",
			"version": "1.0",
			"author": "Alexandre Espinosa Menor",
			"authors": [
				{
					"name": "Alexandre Espinosa Menor",
					"githubUsername": "alexandregz",
					"imageURL": "https://avatars.githubusercontent.com/u/1374718?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show battery percentage for Bluetooth Keyboard",
			"imageURL": "http://i.imgur.com/1FlcPYx.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.741858Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Battery/battery_cycles.12h.sh",
					"filename": "battery_cycles.12h.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eBattery Cycles\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMaxime Bertheau\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emaxoumime\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGet your battery cycles and condition on the menu bar !\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://nothingreally.botler.me/bitbar.battery-cycles.png\u003c/bitbar.image\u003e\n\n# Get cycles number\ncycles=$(system_profiler SPPowerDataType | grep \"Cycle Count\" | awk '{print $3}')\n\n# If you want to change the emoticon before the number, here are some\n#echo \"🔋 $cycles\"\n#echo \"♾ $cycles\"\n#echo \"♽ $cycles\"\n\necho \"♾ $cycles\"\n\necho \"---\"\n\n# 1000 cycles maximum\n# Based on the cycles max number provided by Apple for all Macbooks after 2009\n# No way to get the Macbook age from script directly\n\ncolor=green\nif [ \"$cycles\" -gt 1000 ]; then\n    color=red\nelif [ \"$cycles\" -gt 750 ]; then\n    color=orange\nfi\n\necho \"Cycles: $cycles / 1000 | color=$color href='https://support.apple.com/en-us/HT201585'\"\n\n# Get battery condition\ncondition=$(system_profiler SPPowerDataType | grep \"Condition\" | sed -e 's/^.*: //')\n\ncolor=green\nif [ \"$condition\" != \"Normal\" ]; then\n    color=red\nfi\n\necho \"Battery condition: $condition | color=$color\"\n"
				}
			],
			"path": "System/Battery/battery_cycles.12h.sh",
			"filename": "battery_cycles.12h.sh",
			"dir": "System/Battery",
			"docsPlugin": "System/Battery/battery_cycles.12h.sh.html",
			"docsCategory": "System/Battery.html",
			"pathSegments": [
				"System",
				"Battery"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": false
				},
				{
					"path": "System/Battery",
					"text": "Battery",
					"isLast": true
				}
			],
			"title": "Battery Cycles",
			"version": "1.0",
			"author": "Maxime Bertheau",
			"authors": [
				{
					"name": "Maxime Bertheau",
					"githubUsername": "maxoumime",
					"imageURL": "https://avatars.githubusercontent.com/u/3897798?v=4",
					"bio": "Android Engineer @ FrontApp",
					"primary": true
				}
			],
			"desc": "Get your battery cycles and condition on the menu bar !",
			"imageURL": "https://nothingreally.botler.me/bitbar.battery-cycles.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.71244Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/battery_health.2s.py",
					"filename": "battery_health.2s.py",
					"content": "#!/usr/bin/env python2\n#- * -coding: utf - 8 - * -\n#\n# \u003cbitbar.title\u003eBattery Health\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAndros Fenollosa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etanrax\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows power percentaje and notice when you load\u003c/bitbar.desc\u003e\n\nimport os, math, subprocess, pickle, tempfile\n\n# Get info battery\nSAVE_LOCATION = os.path.join(tempfile.gettempdir(), 'batteryHealth2.pkl')\nLIM_LOWER = 45\nLIM_UPPER = 85\np = subprocess.Popen([\"ioreg\", \"-rc\", \"AppleSmartBattery\"], stdout = subprocess.PIPE)\noutput = p.communicate()[0]\nb_max = 0\no_cur = 0\nis_charging = ''\ndateSave = False\nalertMin = False\nalertMax = False\n\ntry:\n    dateFile = open(SAVE_LOCATION)\n    dateSave = pickle.load(dateFile)\n    alertMin = dateSave['alertMin']\n    alertMax = dateSave['alertMax']\nexcept:\n    pass\n\n# Get variables\nfor l in output.splitlines():\n    if 'MaxCapacity' in l:\n        o_max = l\n    if 'CurrentCapacity' in l:\n        o_cur = l\n    if 'IsCharging' in l:\n        is_charging = l\n\nb_max = float(o_max.rpartition('=')[-1].strip())\nb_cur = float(o_cur.rpartition('=')[-1].strip())\nis_charging = str(is_charging.rpartition('=')[-1].strip())\nif is_charging == 'Yes':\n    is_charging = True\nelse:\n    is_charging = False\n\n# Calculate porcent battery\ncharge = b_cur / b_max\ncharge_porcent = int(math.ceil(100 * charge))\n\n# Logic\n## Alert Min\nif LIM_LOWER \u003e= charge_porcent and not alertMin:\n    alertMin = True\n    os.system('osascript -e \\'display notification \"Battery too low\" with title \"Battery health\" sound name \"Blow\"\\'')\n\n## Alert Max\nif LIM_UPPER \u003c= charge_porcent and not alertMax:\n    alertMax = True\n    os.system('osascript -e \\'display notification \"Very charged battery\" with title \"Battery health\" sound name \"Blow\"\\'')\n\n## Reset alerts\nif LIM_UPPER \u003e charge_porcent \u003e LIM_LOWER:\n    alertMin = False\n    alertMax = False\n    \n# Save\ndateTemp = {'alertMax': alertMax, 'alertMin': alertMin}\ndateSave = open(SAVE_LOCATION, 'w+')\npickle.dump(dateTemp, dateSave)\n\n# Print\nfinal = ''\nif is_charging:\n    final += '⚡️'\nelif alertMin or alertMax:\n    final += '🔴'\nfinal = '{text}{charge}%'.format(text=final, charge=charge_porcent) \nprint(final) \n"
				}
			],
			"path": "System/battery_health.2s.py",
			"filename": "battery_health.2s.py",
			"dir": "System",
			"docsPlugin": "System/battery_health.2s.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Battery Health",
			"version": "v1.1",
			"author": "Andros Fenollosa",
			"authors": [
				{
					"name": "Andros Fenollosa",
					"githubUsername": "tanrax",
					"imageURL": "https://avatars.githubusercontent.com/u/4553672?v=4",
					"bio": "Teacher, Web Developer, CEO of Sapps, blogger, podcaster and Shepherd of Zombie Sheep. Lover of Clojure, Python and Linux.",
					"primary": true
				}
			],
			"desc": "Shows power percentaje and notice when you load",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.623123Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Battery/mAh.10s.sh",
					"filename": "mAh.10s.sh",
					"content": "#!/bin/sh\n\noutput=\"$(system_profiler SPPowerDataType | grep \"Charge Remaining\" | awk '{print $4}')\";\n\ncharge=\"${output} mAh\"\n\necho \"$charge\"\n\n# \u003cbitbar.title\u003eBattery mAh\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eLuca Angioloni\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eLucaAngioloni\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows the mAh of battery remaining.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://s32.postimg.org/6k1iq3051/Screen_Shot_2016_04_27_at_20_0$\n# \u003cbitbar.dependencies\u003enone\u003c/bitbar.dependencies\u003e\n"
				}
			],
			"path": "System/Battery/mAh.10s.sh",
			"filename": "mAh.10s.sh",
			"dir": "System/Battery",
			"docsPlugin": "System/Battery/mAh.10s.sh.html",
			"docsCategory": "System/Battery.html",
			"pathSegments": [
				"System",
				"Battery"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": false
				},
				{
					"path": "System/Battery",
					"text": "Battery",
					"isLast": true
				}
			],
			"title": "Battery mAh",
			"version": "v1.0",
			"author": "Luca Angioloni",
			"authors": [
				{
					"name": "Luca Angioloni",
					"githubUsername": "LucaAngioloni",
					"imageURL": "https://avatars.githubusercontent.com/u/12626501?v=4",
					"bio": "PhD student in Smart Computing at University of Florence.\r\nMaster's Degree in Computer Engineering at University of Florence.\r\n\r\n@LorenzoNorcini is my friend.",
					"primary": true
				}
			],
			"desc": "Shows the mAh of battery remaining.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"none"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.961Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Battery/battery-status.20s.py",
					"filename": "battery-status.20s.py",
					"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 /usr/local/bin/python3\n# -*- coding: utf-8 -*-\n# \u003cbitbar.title\u003eBattery remaining (Python)\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Ripa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeripa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow battery charge percentage and time remaining\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/P6aNey5.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nfrom __future__ import print_function\nimport re\nimport sys\nimport subprocess\n\ndef parse_pmset():\n    output = subprocess.check_output([\"/usr/bin/pmset\", \"-g\", \"batt\"])\n    output = output.decode(\"utf-8\").split('\\n')\n    regex = re.compile(r'^.*\\s(?P\u003ccharge\u003e\\d+%);\\s((?P\u003cstatus\u003edischarging|'\n                       r'charging|finishing charge|charged);\\s(?P\u003cremain\u003e\\(no estimate\\)|\\d+:\\d+) '\n                       r'(remaining )?present|AC attached; not charging present): true$')\n\n    battery = {\n        \"charge\": \"unknown\",\n        \"status\": \"unknown\",\n        \"remaining\": \"unknown\",\n    }\n\n    battery_match = regex.match(output[1])\n    if not battery_match:\n        return battery\n\n    battery[\"charge\"] = battery_match.group(\"charge\")\n    battery[\"status\"] = battery_match.group(\"status\")\n    battery[\"remaining\"] = battery_match.group(\"remain\")\n    if battery[\"remaining\"] == \"(no estimate)\":\n        battery[\"remaining\"] = \"calculating..\"\n    if battery[\"remaining\"] == \"0:00\" and battery[\"status\"] == \"charged\":\n        battery[\"remaining\"] = \"∞\"\n    return battery\n\ndef main():\n    battery = parse_pmset()\n    refresh_interval = sys.argv[0].split('.')[1]\n    print(\"{}| size=12\".format(battery[\"charge\"]))\n    print(\"---\")\n    print(\"Status: {}\".format(battery[\"status\"]))\n    print(\"Remaining: {}\".format(battery[\"remaining\"]))\n    print(\"Refresh (current interval: {}) | refresh=true\".format(refresh_interval))\n\nif __name__ == '__main__':\n    main()\n"
				}
			],
			"path": "System/Battery/battery-status.20s.py",
			"filename": "battery-status.20s.py",
			"dir": "System/Battery",
			"docsPlugin": "System/Battery/battery-status.20s.py.html",
			"docsCategory": "System/Battery.html",
			"pathSegments": [
				"System",
				"Battery"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": false
				},
				{
					"path": "System/Battery",
					"text": "Battery",
					"isLast": true
				}
			],
			"title": "Battery remaining (Python)",
			"version": "v1.0.0",
			"author": "Eric Ripa",
			"authors": [
				{
					"name": "Eric Ripa",
					"githubUsername": "eripa",
					"imageURL": "https://avatars.githubusercontent.com/u/1429673?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show battery charge percentage and time remaining",
			"imageURL": "http://i.imgur.com/P6aNey5.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.707844Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/bluetooth_inspector.10m.rb",
					"filename": "bluetooth_inspector.10m.rb",
					"content": "#!/usr/bin/env ruby\n# \u003cbitbar.title\u003eBluetooth Inspector\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e0.1.4\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRyan Scott Lewis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eRyanScottLewis\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow bluetooth information for all connected bluetooth devices using the `system_profiler` binary.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/RyanScottLewis/bitbar-bluetooth_inspector/master/bitbar-bluetooth_inspector.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/RyanScottLewis/bitbar-bluetooth_inspector\u003c/bitbar.abouturl\u003e\n\n# NOTE: Configuration is at the BOTTOM of this file!\n\n# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n# -= Code -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n\n\nrequire 'open3'\n\nmodule BluetoothInspector\n\n  # The plugin controller.\n  class Controller\n\n    class \u003c\u003c self\n\n      # Collect bluetooth devices, format for bitbar output, and print to output.\n      #\n      # @return [String]\n      def run(\u0026block)\n        new.run(\u0026block)\n      end\n\n    end\n\n    def initialize\n      collect_devices\n      setup_formatter\n    end\n\n    # Get all devices.\n    #\n    # @return [\u003cDevice\u003e]\n    attr_reader :devices\n\n    # Get the formatter.\n    #\n    # @return [Formatter]\n    attr_reader :formatter\n\n    # Collect bluetooth devices, format for bitbar output, and print to output.\n    #\n    # @return [String]\n    def run(\u0026block)\n      run_config_block_if_needed(\u0026block)\n\n      output = @formatter.format(@devices)\n\n      print output\n    end\n\n    protected\n\n    def collect_devices\n      stdout_str, _, _ = Open3.capture3(\"system_profiler SPBluetoothDataType\")\n\n      @devices = Parser.parse(stdout_str)\n    end\n\n    def setup_formatter\n      @formatter = Formatter.new\n    end\n\n    def run_config_block_if_needed(\u0026block)\n      return nil unless block_given?\n\n      block.arity \u003e 0 ? yield(self) : run_in_controller_context(\u0026block)\n    end\n\n    def run_in_controller_context(\u0026block)\n      ControllerContext.new(self).instance_eval(\u0026block)\n    end\n\n  end\n\nend\n\nmodule BluetoothInspector\n\n  # The DSL context for the configuration block given to the Controller.\n  class ControllerContext\n\n    def initialize(controller)\n      @controller = controller\n    end\n\n    # Get all devices.\n    #\n    # @return [\u003cDevice\u003e]\n    def devices\n      @controller.devices\n    end\n\n    # Find a device by it's name or shortname.\n    #\n    # @param [#to_s] value\n    # @return [\u003cDevice\u003e]\n    def device(value, \u0026block)\n      value = value.to_s\n      device = devices.find { |d| d.name == value || d.shortname == value }\n\n      run_device_block_if_needed(device, \u0026block)\n\n      device\n    end\n\n    def bar_format(value)\n      @controller.formatter.bar_format = value\n    end\n\n    def item_format(value)\n      @controller.formatter.item_format = value\n    end\n\n    protected\n\n    def run_device_block_if_needed(device, \u0026block)\n      return nil unless !device.nil? \u0026\u0026 block_given?\n\n      block.arity \u003e 0 ? yield(device) : run_in_device_context(device, \u0026block)\n    end\n\n    def run_in_device_context(device, \u0026block)\n      DeviceContext.new(device).instance_eval(\u0026block)\n    end\n\n  end\n\nend\n\nmodule BluetoothInspector\n\n  # A bluetooth device.\n  class Device\n    def initialize(attributes={})\n      @bar_item = true\n      @menu_item = true\n\n      update_attributes(attributes)\n\n      raise \"name must be given\" if @name.nil?\n    end\n\n    # Get the name of the device.\n    #\n    # @return [String]\n    attr_reader :name\n\n    # Set the name of the device.\n    #\n    # @param [#to_s] value\n    # @return [String]\n    def name=(value)\n      @name = value.to_s\n    end\n\n    # Get the major type of the device.\n    #\n    # @return [String]\n    attr_reader :major_type\n\n    # Set the major_type of the device.\n    #\n    # @param [#to_s] value\n    # @return [String]\n    def major_type=(value)\n      @major_type = value.to_s\n    end\n\n    # Get the minor type of the device.\n    #\n    # @return [String]\n    attr_reader :minor_type\n\n    # Set the minor_type of the device.\n    #\n    # @param [#to_s] value\n    # @return [String]\n    def minor_type=(value)\n      @minor_type = value.to_s\n    end\n\n    # Get whether the device is paired.\n    #\n    # @return [Boolean]\n    def paired?\n      @paired\n    end\n\n    # Get whether the device is not paired.\n    #\n    # @return [Boolean]\n    def unpaired?\n      !@paired\n    end\n\n    # set whether the device is paired.\n    #\n    # @param [Boolean] value\n    # @return [Boolean]\n    def paired=(value)\n      @paired = !!value\n    end\n\n    # Get whether the device is connected.\n    #\n    # @return [Boolean]\n    def connected?\n      @connected\n    end\n\n    # Get whether the device is not connected.\n    #\n    # @return [Boolean]\n    def disconnected?\n      !@connected\n    end\n\n    # set whether the device is connected.\n    #\n    # @param [Boolean] value\n    # @return [Boolean]\n    def connected=(value)\n      @connected = !!value\n    end\n\n    # Get the shortname of the device.\n    #\n    # @return [nil, String]\n    def shortname\n      @shortname.nil? ? @name : @shortname\n    end\n\n    # Set the shortname of the device.\n    #\n    # @param [nil, #to_s] value\n    # @return [nil, String]\n    def shortname=(value)\n      @shortname = value.nil? ? nil : value.to_s\n    end\n\n    # Get whether this device has a shortname.\n    #\n    # @return [Boolean]\n    def shortname?\n      !@shortname.nil?\n    end\n\n    # Get the battery level in a range of `0..100`.\n    #\n    # @return [nil, Float]\n    attr_reader :battery\n\n    # Set the battery level in a range of `0..100`.\n    #\n    # @param [nil, #to_f] value\n    # @return [nil Float]\n    def battery=(value)\n      @battery = value.nil? ? nil : value.to_i\n    end\n\n    # Get whether this device has no battery level.\n    #\n    # @return [Boolean]\n    def no_battery?\n      @battery.nil?\n    end\n\n    # Get whether this device has a battery level.\n    #\n    # @return [Boolean]\n    def battery?\n      !no_battery?\n    end\n\n    # Get the color of the device.\n    #\n    # @return [nil, String]\n    attr_reader :color\n\n    # Set the name of the device.\n    #\n    # @param [nil, #to_s] value\n    # @return [nil, String]\n    def color=(value)\n      @color = value.nil? ? nil : value.to_s\n    end\n\n    # Get whether this device has a color.\n    #\n    # @return [Boolean]\n    def color?\n      !@color.nil?\n    end\n\n    # Get whether this device is shown within the bar.\n    #\n    # @return [Boolean]\n    def bar_item?\n      @bar_item\n    end\n\n    # Set whether this device is shown within the bar.\n    #\n    # @param [Boolean] value\n    # @return [Boolean]\n    def bar_item=(value)\n      @bar_item = !!value\n    end\n\n    # Get whether this device is shown within the menu.\n    #\n    # @return [Boolean]\n    def menu_item?\n      @menu_item\n    end\n\n    # Set whether this device is shown within the menu.\n    #\n    # @param [Boolean] value\n    # @return [Boolean]\n    def menu_item=(value)\n      @menu_item = !!value\n    end\n\n    # Get device's attributes.\n    #\n    # @return [Hash]\n    def to_h\n      {\n        name:      @name,\n        shortname: @shortname,\n        battery:   @battery\n      }\n    end\n\n    protected\n\n    def update_attributes(attributes)\n      attributes.to_h.each do |name, value|\n        next unless self.class.method_defined?(\"#{name}=\")\n\n        send(\"#{name}=\", value)\n      end\n    end\n\n  end\n\nend\n\nmodule BluetoothInspector\n\n  # The DSL context for a device.\n  class DeviceContext\n\n    def initialize(device)\n      @device = device\n    end\n\n    # Get the device.\n    #\n    # @param [String]\n    # @return [String]\n    attr_reader :device\n\n    # Get/set the name of the device.\n    #\n    # @param [String]\n    # @return [String]\n    def name(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set the major type of the device.\n    #\n    # @param [String]\n    # @return [String]\n    def major_type(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set the minor type of the device.\n    #\n    # @param [String]\n    # @return [String]\n    def minor_type(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set whether the device is paired.\n    #\n    # @param [String]\n    # @return [String]\n    def paired?(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set whether the device is connected.\n    #\n    # @param [String]\n    # @return [String]\n    def connected?(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set the shortname of the device.\n    #\n    # @return [nil, String]\n    def shortname(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set the battery level of the device.\n    #\n    # @return [nil, Integer]\n    def battery(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set the color of the device.\n    #\n    # @return [nil, String]\n    def color(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set whether the device is shown within the bar.\n    #\n    # @return [Boolean]\n    def bar_item(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    # Get/set whether the device is shown within the menu.\n    #\n    # @return [Boolean]\n    def menu_item(*arguments)\n      get_or_set_attribute(__method__, arguments)\n    end\n\n    protected\n\n    def validate_arguments(arguments)\n      raise ArgumentError, \"wrong number of arguments (given #{arguments.count}, expected 0..1)\" if arguments.length \u003e 1\n    end\n\n    def get_or_set_attribute(name, arguments)\n      validate_arguments(arguments)\n\n      arguments.empty? ? @device.send(name) : @device.send(\"#{name}=\", arguments.first)\n    end\n\n  end\n\nend\n\nmodule BluetoothInspector\n\n  # Formats a list of devices for the expected bitbar output.\n  class Formatter\n\n    def initialize\n      @bar_format = \":shortname :battery%\"\n      @item_format = \":name\"\n    end\n\n    # Get the format for a device as a bar item.\n    #\n    # @return [String]\n    attr_reader :bar_format\n\n    # Set the format for a device as a bar item.\n    #\n    # @param [#to_s] value\n    # @return [String]\n    def bar_format=(value)\n      @bar_format = value.to_s\n    end\n\n    # Get the format for a device as a menu item.\n    #\n    # @return [String]\n    attr_reader :item_format\n\n    # Set the format for a device as a menu item.\n    #\n    # @param [#to_s] value\n    # @return [String]\n    def item_format=(value)\n      @item_format = value.to_s\n    end\n\n    def format(devices)\n      lines = []\n\n      devices.find_all(\u0026:bar_item?).each { |device| lines \u003c\u003c format_device(@bar_format, device) }\n\n      lines \u003c\u003c \"---\"\n      devices.find_all(\u0026:menu_item?).each { |device| lines \u003c\u003c format_device(@item_format, device) }\n\n      lines.join(\"\\n\")\n    end\n\n    protected\n\n    def format_device(format_string, device)\n      output = format_string\n      device.to_h.each { |name, value| output = output.gsub(/:#{name}/, value.to_s) }\n\n      device.color.nil? ? output : output + \" | color=#{device.color}\"\n    end\n\n  end\n\nend\n\nrequire \"yaml\"\n\nmodule BluetoothInspector\n\n  # Parses the output of the `system_profiler` command and returns an Array of Device instances.\n  class Parser\n\n    class \u003c\u003c self\n\n      # Parse the command output.\n      #\n      # @param [#to_s] data The command output.\n      # @return [\u003cDevice\u003e]\n      def parse(data)\n        new.parse(data)\n      end\n\n    end\n\n    # Parse the command output.\n    #\n    # @param [#to_s] data The command output.\n    # @return [\u003cDevice\u003e]\n    def parse(data)\n      data = YAML.load(data.to_s)\n\n      data[\"Bluetooth\"][\"Devices (Paired, Configured, etc.)\"].collect do |name, attributes|\n        Device.new(\n          name:       name,\n          battery:    attributes[\"Battery Level\"],\n          major_type: attributes[\"Major Type\"],\n          minor_type: attributes[\"Minor Type\"],\n          paired:     attributes[\"Paired\"],\n          connected:  attributes[\"Connected\"],\n        )\n      end\n    end\n\n  end\n\nend\n\nmodule BluetoothInspector\n\n  class \u003c\u003c self\n\n    # Run the plugin controller.\n    def run(\u0026block)\n      Controller.run(\u0026block)\n    end\n\n  end\n\nend\n\n\n# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n# -= Configuration =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #\n\n# See https://github.com/RyanScottLewis/bitbar-bluetooth_inspector for configuration documentation.\n\nBluetoothInspector.run do\n  devices.delete_if(\u0026:no_battery?)\n  devices.delete_if(\u0026:disconnected?)\n\n  # Color all low battery level devices red:\n  devices.find_all { |device| device.battery \u003c 20 }.each { |device| device.color = \"red\" }\n\n  # Add device emojis to each shortname\n  devices.each do |device|\n    device.shortname = case device.minor_type\n                            when 'Mouse'    then '🖱'\n                            when 'Keyboard' then '⌨️'\n                       end\n  end\nend\n"
				}
			],
			"path": "System/bluetooth_inspector.10m.rb",
			"filename": "bluetooth_inspector.10m.rb",
			"dir": "System",
			"docsPlugin": "System/bluetooth_inspector.10m.rb.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Bluetooth Inspector",
			"version": "0.1.4",
			"author": "Ryan Scott Lewis",
			"authors": [
				{
					"name": "Ryan Scott Lewis",
					"githubUsername": "RyanScottLewis",
					"imageURL": "https://avatars.githubusercontent.com/u/39534?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show bluetooth information for all connected bluetooth devices using the `system_profiler` binary.",
			"imageURL": "https://raw.githubusercontent.com/RyanScottLewis/bitbar-bluetooth_inspector/master/bitbar-bluetooth_inspector.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/RyanScottLewis/bitbar-bluetooth_inspector",
			"lastUpdated": "2021-03-08T15:22:02.646826Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/cpu-load.5s.sh",
					"filename": "cpu-load.5s.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eCPU Load\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ePaul W. Rankin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ernkn\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows CPU load as a percentage (without using top).\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/B6VAsDg.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n\n# BitBar CPU Load plugin\n\nncpu=$(sysctl -n hw.logicalcpu)\ntotal=$(ps -Ao %cpu= | paste -sd+ - | bc)\nusage=$(echo \"scale = 2; $total / $ncpu\" | bc)\n\nprintf \"%0.1f%%\\n\" \"$usage\"\necho \"---\"\necho \"Refresh | refresh=true\"\n"
				}
			],
			"path": "System/cpu-load.5s.sh",
			"filename": "cpu-load.5s.sh",
			"dir": "System",
			"docsPlugin": "System/cpu-load.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "CPU Load",
			"version": "v1.0",
			"author": "Paul W. Rankin",
			"authors": [
				{
					"name": "Paul W. Rankin",
					"githubUsername": "rnkn",
					"imageURL": "https://avatars.githubusercontent.com/u/1256849?v=4",
					"bio": "Filmmaker. Hobbyist programmer. Most repositories relate to screenwriting.",
					"primary": true
				}
			],
			"desc": "Shows CPU load as a percentage (without using top).",
			"imageURL": "https://i.imgur.com/B6VAsDg.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.014824Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/cpu-temperature.5s.sh",
					"filename": "cpu-temperature.5s.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eCPU Temperature\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Ripa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeripa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays the current CPU temperature (requires external 'smc' binary)\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003esmc\u003c/bitbar.dependencies\u003e\n#\n# 'smc' can be downloaded from: http://www.eidac.de/smcfancontrol/smcfancontrol_2_4.zip\n# One-liner:\n# curl -LO http://www.eidac.de/smcfancontrol/smcfancontrol_2_4.zip \u0026\u0026 unzip -d temp_dir_smc smcfancontrol_2_4.zip \u0026\u0026 cp temp_dir_smc/smcFanControl.app/Contents/Resources/smc /usr/local/bin/smc ; rm -rf temp_dir_smc smcfancontrol_2_4.zip\n\nFAHRENHEIT=false\nTEMPERATURE_WARNING_LIMIT=80\nTEMPERATURE=$(/usr/local/bin/smc -k TC0P -r | sed 's/.*bytes \\(.*\\))/\\1/' |sed 's/\\([0-9a-fA-F]*\\)/0x\\1/g' | perl -ne 'chomp; ($low,$high) = split(/ /); print (((hex($low)*256)+hex($high))/4/64); print \"\\n\";')\nTEMP_INTEGER=${TEMPERATURE%.*}\n\nif $FAHRENHEIT ; then\n  TEMP_INTEGER=$((TEMP_INTEGER*9/5+32))\n  LABEL=\"°f\"\nelse\n  LABEL=\"°c\"\nfi\n\nif [ \"$TEMP_INTEGER\" -gt \"$TEMPERATURE_WARNING_LIMIT\" ] ; then\n  ICON=\"🔥\"\nelse\n  ICON=\"\"\nfi\necho \"$ICON${TEMP_INTEGER}$LABEL| size=12\"\n"
				}
			],
			"path": "System/cpu-temperature.5s.sh",
			"filename": "cpu-temperature.5s.sh",
			"dir": "System",
			"docsPlugin": "System/cpu-temperature.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "CPU Temperature",
			"version": "v1.0",
			"author": "Eric Ripa",
			"authors": [
				{
					"name": "Eric Ripa",
					"githubUsername": "eripa",
					"imageURL": "https://avatars.githubusercontent.com/u/1429673?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin displays the current CPU temperature (requires external 'smc' binary)",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"smc"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.021858Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/mtop.5s.sh",
					"filename": "mtop.5s.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eCPU Usage Graph\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eGanesh V\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eganeshv\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eCPU usage bar graph\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.github.com/ganeshv/mtop/master/screenshots/mtop2.png\u003c/bitbar.image\u003e\n# \u003cbitbar.about\u003ehttps://github.com/ganeshv/mtop\u003c/bitbar.about\u003e\n\n# CPU utilization bar graph is rendered onto a 25x16 BMP file created from\n# scratch with no external dependencies. The dropdown contains current usage,\n# load average and the top 5 CPU-hogs as reported by `top`.\n#\n# Tested on Mountain Lion through El Capitan. Works with Dark Mode (though\n# you have to restart Bitbar if you change mode).\n#\n# Mountain Lion does not interpret the BITMAPV5HEADER variant of the BMP\n# format, which has alpha channel support. We fall back to a basic version\n# (BITMAPINFOHEADER).\n#\n# Bash builtins are used as much as possible to reduce performance impact.\n\nif [ \"$1\" = 'activity_monitor' ]; then\n    osascript \u003c\u003c END\n    tell application \"Activity Monitor\"\n        reopen\n        activate\n    end tell\nEND\n    exit 0\nfi\n\nHISTORY_FILE=$HOME/.bitbar.mtop\n[ ! -r \"$HISTORY_FILE\" ] \u0026\u0026 touch \"$HISTORY_FILE\"\n[ X\"$(find \"$HISTORY_FILE\" -mtime -2m)\" != X\"$HISTORY_FILE\" ] \u0026\u0026 echo -n \u003e\"$HISTORY_FILE\" # Discard history if older than 2 minutes\n\nOLDIFS=$IFS\nbmp=()\nwidth=25\nheight=16\n\nosver=$(sw_vers -productVersion)\n\n# Colors in BGRA format\nfgcol=\"00 00 00 ff\"\nbgcol=\"00 00 00 00\"\nbmp_ver=5\nicontype=templateImage\n\nif [[ $osver == 10.8.* ]]; then\n    bmp_ver=1\n    bgcol=\"d0 d0 d0 7f\"\n    icontype=image\nfi\n\nborder=$fgcol\nforeground=$fgcol\nbackground=$bgcol\nborder_height=3\n\n# Takes number, prints hex bytes in little endian\n# e.g. hexle32 3142 will output 46 0c 00 00\nhexle32() {\n    printf -v _num \"%08x\" \"$1\"\n    echo \"${_num:6:2}\" \"${_num:4:2}\" \"${_num:2:2}\" \"${_num:0:2}\"\n}\n\n# make_bmp_header version\n# version can be 1 or 5\n# v1 is the most compatible, but the graph will be opaque - no alpha support.\n# v5 supports alpha channel.\nmake_bmp_header() {\n    headertype=$1\n    headerbytes=40\n    comp=\"00\"\n    if [ \"$headertype\" -eq 5 ]; then\n        headerbytes=124\n        comp=\"03\"\n    fi\n    pixoffset=$((headerbytes + 14))\n    pixbytes=$((width * height * 4))\n    filebytes=$((pixbytes + pixoffset))\n        \n    # Common bits for version 1 and 5\n    bmp+=(\n        42 4d                   # \"BM\" magic\n        $(hexle32 $filebytes)   # size of file\n        00 00                   # reserved\n        00 00                   # reserved\n        $(hexle32 $pixoffset)   # offset of pixel data\n        $(hexle32 $headerbytes) # remaining bytes in header\n        $(hexle32 $width)       # width\n        $(hexle32 $height)      # height\n        01 00                   # 1 color plane\n        20 00                   # 32 bits per pixel\n        $comp 00 00 00          # Compression\n        $(hexle32 $pixbytes)    # size of pixel data\n        13 0b 00 00             # ~72 dpi horizontal\n        13 0b 00 00             # ~72 dpi vertical\n        00 00 00 00             # colors in palette\n        00 00 00 00             # all colors are important\n    )\n    if [ \"$headertype\" -eq 5 ]; then\n        bmp+=(\n            00 00 ff 00             # red channel mask (BGRA)\n            00 ff 00 00             # green channel mask\n            ff 00 00 00             # blue channel mask\n            00 00 00 ff             # alpha channel mask\n            42 47 52 73             # sRGB\n            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n            00 00 00 00             # red gamma\n            00 00 00 00             # green gamma\n            00 00 00 00             # blue gamma\n            00 00 00 00             # intent\n            00 00 00 00             # profile data\n            00 00 00 00             # profile size\n            00 00 00 00             # reserved\n        )\n    fi\n}\n\n\n# add_row thickness \"b g r a\"\nadd_row() {\n    thickness=$1\n    for ((i = 0; i \u003c thickness; i++)); do\n        for ((j = 0; j \u003c width; j++)); do\n            bmp+=($2)\n        done\n    done\n}\n\n# add_pixel \"b g r a\"\nadd_pixel() {\n    bmp+=($1)\n}\n\noutput_bmp() {\n    bmp=(${bmp[@]/#/'\\x'})\n    local IFS=''\n    #echo -ne \"${bmp[*]}\" \u003e/tmp/mtop.bmp\n    echo -ne \"${bmp[*]}\"\n}\n\nget_cpu_stats() {\n    local IFS=$'\\n'\n    topdata=($(top -F -R -l2 -o cpu -n 5 -s 2 -stats pid,command,cpu))\n    nlines=${#topdata[@]}\n    histdata=($(tail -$((width - 1)) \"$HISTORY_FILE\"))\n\n    IFS=$OLDIFS\n    for ((i = nlines / 2; i \u003c nlines; i++)); do\n        line=(${topdata[$i]})\n        word=${line[0]}\n        if [ \"$word\" = Load ]; then\n            loadstr=${topdata[$i]}\n        elif [ \"$word\" = CPU ]; then\n            cpustr=${line[*]}\n            histdata+=(\"${line[2]/'%'/} ${line[4]/'%'/} ${line[6]/'%'/}\")\n        elif [ \"$word\" = PID ]; then\n            top5=(\"${topdata[@]:$i}\")\n        fi\n    done\n\n    IFS=$'\\n'\n    echo \"${histdata[*]}\" \u003e\"$HISTORY_FILE\"\n}\n\nrender_graph() {\n    start=$((width - ${#histdata[@]}))\n\n    heights=()\n    for ((i = 0; i \u003c ${#histdata[@]}; i++)); do\n        comps=(${histdata[$i]})\n        heights[$i]=$(((100 - $(printf \"%.0f\" \"${comps[2]}\")) * (height - border_height) / 100))\n    done \n\n    for ((i = 0; i \u003c $((height - border_height)); i++)); do\n        h=0\n        for ((j = 0; j \u003c width; j++)); do\n            if [ $j -lt $start ]; then\n                add_pixel \"$background\"\n            elif [ ${heights[$h]} -gt $i ]; then\n                add_pixel \"$foreground\"\n                h=$((h + 1))\n            else\n                add_pixel \"$background\"\n                h=$((h + 1))\n            fi\n        done\n    done\n}\n\nget_cpu_stats\n\nmake_bmp_header $bmp_ver\nadd_row 2 \"$border\"\nrender_graph\nadd_row 1 \"$border\"\n\necho -n \"| $icontype=\"\noutput_bmp | base64\necho \"---\"\necho \"$cpustr | refresh=true\"\necho \"$loadstr | refresh=true\"\necho \"---\"\ntop5=(\"${top5[@]/%/| font=Menlo}\")\nIFS=$'\\n'\necho \"${top5[*]}\"\nIFS=$OLDIFS\necho \"---\"\necho \"Open Activity Monitor | bash='$0' param1=activity_monitor terminal=false\"\n"
				}
			],
			"path": "System/mtop.5s.sh",
			"filename": "mtop.5s.sh",
			"dir": "System",
			"docsPlugin": "System/mtop.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "CPU Usage Graph",
			"version": "v1.0",
			"author": "Ganesh V",
			"authors": [
				{
					"name": "Ganesh V",
					"githubUsername": "ganeshv",
					"imageURL": "https://avatars.githubusercontent.com/u/827790?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "CPU usage bar graph",
			"imageURL": "https://raw.github.com/ganeshv/mtop/master/screenshots/mtop2.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.0888Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/cpu-usage-kill.5s.sh",
					"filename": "cpu-usage-kill.5s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eCPU Usage, Kill process\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAlex M.\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eAleksandern\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows top 3 consuming processes with opportunity to kill them.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/Aleksandern/devman/master/images/BitBarCpuUsageKill.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n\n\ncounter=1\nps c -Ao pcpu,command,pid -r | head -n 4 | awk 'NR\u003e1'\\\n  | while read -r pcpu command pid ; do\n\n    if [ \"${counter}\" -eq \"1\" ]; then \n      echo \"$pcpu% $command\"\n      echo \"---\"\n    fi\n\n    echo \"$pcpu% $command $pid | bash='kill -9 ${pid//[!0-9]/} ; exit' terminal=true\"\n\n    counter=$((counter +1))\n\ndone\n\n\necho \"---\"\necho \"Refresh | refresh=true terminal=false root=true\""
				}
			],
			"path": "System/cpu-usage-kill.5s.sh",
			"filename": "cpu-usage-kill.5s.sh",
			"dir": "System",
			"docsPlugin": "System/cpu-usage-kill.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "CPU Usage, Kill process",
			"version": "v1.0",
			"author": "Alex M.",
			"authors": [
				{
					"name": "Alex",
					"githubUsername": "Aleksandern",
					"imageURL": "https://avatars.githubusercontent.com/u/5274465?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows top 3 consuming processes with opportunity to kill them.",
			"imageURL": "https://raw.githubusercontent.com/Aleksandern/devman/master/images/BitBarCpuUsageKill.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.098152Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/cpu-thermal-throttle.30s.sh",
					"filename": "cpu-thermal-throttle.30s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eCPU thermal throttling\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSampo Juustila\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eplaa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays the current CPU thermal throttling speed (using `pmset -g therm`).\u003c/bitbar.desc\u003e\n\nOUTPUT=\"$(pmset -g therm)\"\nSCHEDLIMIT=\"$(echo \"$OUTPUT\" | grep CPU_Scheduler_Limit | cut -d= -f2)\"\nSPEEDLIMIT=\"$(echo \"$OUTPUT\" | grep CPU_Speed_Limit | cut -d= -f2)\"\nAVAILCPU=\"$(echo \"$OUTPUT\" | grep CPU_Available_CPUs | cut -d= -f2)\"\nTOTAL=$(($SCHEDLIMIT * $SPEEDLIMIT / 100))\n\nif [ \"$TOTAL\" -ge 80 ]; then\n  SYMBOL=\"🌡\"\nelse\n  SYMBOL=\"🔥\"\nfi\n\ncat \u003c\u003cEOF\n$SYMBOL$TOTAL%\n---\nCPU_Speed_Limit $SPEEDLIMIT%\nCPU_Scheduler_Limit $SCHEDLIMIT%\nCPU_Available_CPUs $AVAILCPU\nEOF\n"
				}
			],
			"path": "System/cpu-thermal-throttle.30s.sh",
			"filename": "cpu-thermal-throttle.30s.sh",
			"dir": "System",
			"docsPlugin": "System/cpu-thermal-throttle.30s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "CPU thermal throttling",
			"version": "v1.0",
			"author": "Sampo Juustila",
			"authors": [
				{
					"name": "Sampo Juustila",
					"githubUsername": "plaa",
					"imageURL": "https://avatars.githubusercontent.com/u/1436281?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays the current CPU thermal throttling speed (using `pmset -g therm`).",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.061722Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/caffeinate.1h.sh",
					"filename": "caffeinate.1h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eCaffeinate\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSteffen Froehlich\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecitoki\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin will give some caffeine, with lots of sugar, to your Mac to stay awake.\n# Technically the commandline tool 'caffeinate' is executed.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/vsCWLwX.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\n\nfunction get_program_state {\n  instances=$(pgrep caffeinate)\n\n  # set state\n  if [[ $instances = 1 ]]; then\n    state=\"stopped\";\n  else\n    state=\"running\";\n  fi\n}\n\nfunction set_program_icon {\n  get_program_state;\n\n  if [[ \"$state\" = \"stopped\" ]]; then\n    icon=\"☕️\";\n  else\n    icon=\"🍵\";\n  fi\n}\n\n# stop all previous processes\nfunction terminate_caffeinate_instances {\n  /usr/bin/killall caffeinate \u0026\u003e /dev/null\n}\n\nif [[ \"$1\" = \"caffeine\" ]]; then\n  terminate_caffeinate_instances;\n  # start caffeinate program and prevent the system and display\n  # from idle sleeping\n  /usr/bin/caffeinate -di;\n\n  exit\nfi\n\nif [[ \"$1\" = \"stop\" ]]; then\n  terminate_caffeinate_instances;\n\n  exit\nfi\n\n# set program icon to default: 'not active state'\nset_program_icon;\n\necho \"$icon\"\necho \"---\"\necho \"program state: ${state}\"\necho \"---\"\necho \"Prevent machine from idle sleep | bash='$0' param1=caffeine terminal=false\"\necho \"Stop program | bash='$0' param1=stop terminal=false\"\n"
				}
			],
			"path": "System/caffeinate.1h.sh",
			"filename": "caffeinate.1h.sh",
			"dir": "System",
			"docsPlugin": "System/caffeinate.1h.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Caffeinate",
			"version": "v0.2",
			"author": "Steffen Froehlich",
			"authors": [
				{
					"name": "Steffen",
					"githubUsername": "citoki",
					"imageURL": "https://avatars.githubusercontent.com/u/7259873?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://i.imgur.com/vsCWLwX.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.73137Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/caffeinate.10h.sh",
					"filename": "caffeinate.10h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eCaffeinate\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSteffen Froehlich\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecitoki\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin will give some caffeine, with lots of sugar, to your Mac to stay awake.\n# Technically the commandline tool 'caffeinate' is executed.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/vsCWLwX.png\u003c/birtbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\nif [ \"$1\" = 'sugar' ]; then\n  # stop all previous processes\n  /usr/bin/killall caffeinate\n\n  # start caffeinate program and prevent the system from idle sleeping when\n  # Mac OSX is running on AC power\n  /usr/bin/caffeinate -s\nfi\n\nif [ \"$1\" = 'caffeine' ]; then\n  # stop all previous processes\n  /usr/bin/killall caffeinate\n\n  # start caffeinate program and prevent the system from idle sleeping\n  /usr/bin/caffeinate -i\nfi\n\nif [ \"$1\" = 'stop' ]; then\n  # send terminate signal to all processes of program 'caffeinate'\n  /usr/bin/killall caffeinate\nfi\n\necho \"☕️\"\necho '---'\necho \"Sugar - stay awake w/ AC power| bash='$0' param1=sugar terminal=false\"\necho \"Caffeine - stay awake w/o AC power | bash='$0' param1=caffeine terminal=false\"\necho \"Stop caffeine dose | bash='$0' param1=stop terminal=false\"\n\n"
				}
			],
			"path": "System/caffeinate.10h.sh",
			"filename": "caffeinate.10h.sh",
			"dir": "System",
			"docsPlugin": "System/caffeinate.10h.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Caffeinate",
			"version": "v0.1",
			"author": "Steffen Froehlich",
			"authors": [
				{
					"name": "Steffen",
					"githubUsername": "citoki",
					"imageURL": "https://avatars.githubusercontent.com/u/7259873?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://i.imgur.com/vsCWLwX.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.698128Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/clipboard-base64-encoder.sh",
					"filename": "clipboard-base64-encoder.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eClipboard BASE64-Encoder\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSteffen Froehlich\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecitoki\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin will encode acutal clipboard item with BASE64.\n# The result will be available in clipboard again. Do not use the result\n# for cryptographic purposes!!\n# It's inspired by the original clipboard-history plugin\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://imgur.com/0Ym6xNC\u003c/birtbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\n# Hack for language not being set properly and unicode support\nexport LANG=\"${LANG:-en_US.UTF-8}\"\n\nPREFIX=\"\"\nAPPENDIX=\"\"\n\n# user clicks on 'encoding'\nif [[ \"$1\" = \"encode\" ]]; then\n  echo -n \"$(echo -n \"${PREFIX}$(pbpaste)${APPENDIX}\" | base64)\" | pbcopy\n  osascript -e \"display notification \\\"Clipboard entry encoded with BASE64\\\" with title \\\"BitBar Clipboard BASE64-Encoder\\\"\" \u0026\u003e /dev/null\n  exit\nfi\n\nif [[ \"$1\" = \"decode\" ]]; then\n  echo -n \"$(echo -n \"${PREFIX}$(pbpaste)${APPENDIX}\" | base64 -D)\" | pbcopy\n  osascript -e \"display notification \\\"Clipboard entry decoded with BASE64\\\" with title \\\"BitBar Clipboard BASE64-Encoder\\\"\" \u0026\u003e /dev/null\n  exit\nfi\n\n\n# Print icon\necho \"🔏\"\necho \"---\"\necho \"Encode clipboard item with BASE64 | bash='$0' param1=encode terminal=false\"\necho \"Decode clipboard item with BASE64 | bash='$0' param1=decode terminal=false\"\n\n"
				}
			],
			"path": "System/clipboard-base64-encoder.sh",
			"filename": "clipboard-base64-encoder.sh",
			"dir": "System",
			"docsPlugin": "System/clipboard-base64-encoder.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Clipboard BASE64-Encoder",
			"version": "v0.1",
			"author": "Steffen Froehlich",
			"authors": [
				{
					"name": "Steffen",
					"githubUsername": "citoki",
					"imageURL": "https://avatars.githubusercontent.com/u/7259873?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://imgur.com/0Ym6xNC",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.771831Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/clipboard-history.3s.sh",
					"filename": "clipboard-history.3s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eClipboard History\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eJason Tokoph (jason@tokoph.net)\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejtokoph\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTracks up to 10 clipboard items.\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# Clicking on a previous item will copy it back to the clipboard.\n# Clicking \"Clear history\" will remove history files from the filesystem.\u003c/bitbar.desc\u003e\n\n# Hack for language not being set properly and unicode support\nexport LANG=\"${LANG:-en_US.UTF-8}\"\n\ntmp_dir=\"/tmp/bitbar-clipboard-history_$USER\"\n\n# Make sure temporary directory exists\nmkdir -p \"$tmp_dir\" \u0026\u003e /dev/null\n\n# If user clicked on a history item, copy it back to the clipboard\nif [[ \"$1\" = \"copy\" ]]; then\n  if [[ -e \"$tmp_dir/item-$2.pb\" ]]; then\n    pbcopy \u003c \"$tmp_dir/item-$2.pb\"\n    osascript -e \"display notification \\\"Copied to Clipboard\\\" with title \\\"BitBar Clipboard History\\\"\" \u0026\u003e /dev/null\n  fi\n  exit\nfi\n\n# If user clicked clear, remove history items\nif [[ \"$1\" = \"clear\" ]]; then\n  rm -f \"$tmp_dir\"/item-*.pb\n  osascript -e \"display notification \\\"Cleared clipboard history\\\" with title \\\"BitBar Clipboard History\\\"\" \u0026\u003e /dev/null\n  exit\nfi\n\nCLIPBOARD=$(pbpaste)\n# Check to see if we have text on the clipboard\nif [ \"$CLIPBOARD\" != \"\" ]; then\n\n  # Check if the current clipboard content is differnt from the previous\n  echo \"$CLIPBOARD\" | diff \"$tmp_dir/item-current.pb\" - \u0026\u003e /dev/null\n\n  # If so, the diff command will exit wit a non-zero status\n  # shellcheck disable=SC2181\n  if [ \"$?\" != \"0\" ]; then\n\n    # Move the history backwards\n    for i in {9..1}\n    do\n      j=$((i+1))\n\n      if [ -e \"$tmp_dir/item-$i.pb\" ]; then\n        cp \"$tmp_dir/item-$i.pb\" \"$tmp_dir/item-$j.pb\" \u0026\u003e /dev/null\n      fi\n    done\n\n    # Move the previous value into the history\n    cp \"$tmp_dir/item-current.pb\" \"$tmp_dir/item-1.pb\" \u0026\u003e /dev/null\n\n    # Save current value\n    echo \"$CLIPBOARD\" \u003e \"$tmp_dir/item-current.pb\"\n  fi\nfi\n\n# Print icon\necho '✄'\necho \"---\"\n\n# Print up to 36 characters of the current clipboard\necho \"Current\"\n\ncontent=\"$(pbpaste | head -c 36)\"\nif (( $(pbpaste | wc -c) \u003e 36 )); then\n  content=\"$content...\"\nfi\necho \"${content//|/ }\"\n\n# Show history section if historical files exist\nif [[ -e \"$tmp_dir/item-1.pb\" ]]; then\n\n  echo \"---\"\n\n  echo 'History (Click to copy)'\n\n  # Print up to 36 characters of each historical item\n  for i in {1..10}\n  do\n    if [ -e \"$tmp_dir/item-$i.pb\" ]; then\n      content=\"$(head -c 36 \"$tmp_dir/item-$i.pb\")\"\n      if (( $(wc -c \"$tmp_dir/item-$i.pb\" | awk '{print $1}') \u003e 36 )); then\n        content=\"$content...\"\n      fi\n      echo \"${content//|/ }|bash='$0' param1=copy param2=$i refresh=true terminal=false\"\n    fi\n  done\n\n  echo \"---\"\n\n  echo \"Clear History |bash='$0' param1=clear refresh=true terminal=false \"\nfi\n"
				}
			],
			"path": "System/clipboard-history.3s.sh",
			"filename": "clipboard-history.3s.sh",
			"dir": "System",
			"docsPlugin": "System/clipboard-history.3s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Clipboard History",
			"version": "1.0",
			"author": "Jason Tokoph (jason@tokoph.net)",
			"authors": [
				{
					"name": "Jason Tokoph",
					"githubUsername": "jtokoph",
					"imageURL": "https://avatars.githubusercontent.com/u/346225?v=4",
					"bio": "wigglezipheartpeach",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.811851Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/ColorfulBatteryLevel.5s.sh",
					"filename": "ColorfulBatteryLevel.5s.sh",
					"content": "#!/bin/bash\n# shellcheck disable=SC2128,SC2178,SC2034\n#\n# \u003cbitbar.title\u003eColorful Battery Indicator\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ehuhu\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ePhlooo\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSimple and colorful battery indicator\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/JaUKQWj.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/Phlooo/\u003c/bitbar.abouturl\u003e\n\n\n# Get info\npower_source=( $(pmset -g batt | awk 'FNR == 1 {print $4$NF}' ) )\nbattery_level=( $(pmset -g batt | awk -F\"\\t\" 'FNR == 2 {print $2}' | grep -o '[0-9]\\+' ) )\nbattery_status=( $(pmset -g batt | awk -F\";\" 'FNR == 2 {print $2}') )\nremaining_time=( $(pmset -g batt | awk -F\";\" 'FNR == 2 {print $3}') )\nbatt_condition=( $(system_profiler SPPowerDataType | grep \"Condition\" | awk '{print $2}') )\nbatt_cycles=( $(system_profiler SPPowerDataType | grep \"Cycle Count\" | awk '{print $3}') )\n\n# Format things\nif [ \"$power_source\" = \"'ACPower'\" ]; then\n\tsource_label=\"AC Power\";\n\ttime_label=\"Charged in:\";\nelse\n\tsource_label=\"Internal Battery\";\n\ttime_label=\"Time remaining:\";\nfi\n\nif [ \"$remaining_time\" = \"(no\" ]; then remaining_time=\"Calculating...\"; fi\n\nif [ \"$battery_status\" = \"charged\" ]; then\n\tbattery_status=\"Charged\";\nelif [ \"$battery_status\" = \"discharging\" ]; then\n\tbattery_status=\"Discharging\";\nelif [ \"$battery_status\" = \"charging\" ]; then\n\tbattery_status=\"Charging\";\nelse\n\tbattery_status=\"Finalising charge\";\nfi\n\n# Icons are split into chunks to lighten up the whole script\n\n# Define the common base\nimg_base=\"\"\n\n# And the different parts\nb0=\"6Br5TlAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAEOSURBVHja7NgxagJBFMbx/4bBPksaIRfwDFFilRCIBxC0CrFMI4qNF4h4g6SyyAFS2S3E1tomKRNSLGsp2EyatzKFRRp3XvE+GHbYbX682dl5bOK9R2POUBqDGcxgBvtnkuub+xowA3pAGsmxBRbACNhny3cc8Aw8RS7QuRh2wKRcyr48bAFJpNESw2MpdcHyrS6GmzbQrbhan/m8MZN5GsLCdIFBxbC1vOP6d2X7tqMS9gPcaYTVgVetH9i6HUkGO3F+NcK+gQenEHapdinLtifMWwTH17GbDijkVG/m80YGZBFwV3Itwl25kPkH4CONlRhewoqNpVnrSycZs7WeHnp++6liMIMZzGCnyd8AVkBLf6SjPgAAAAAASUVORK5CYII=\"\nb1=\"6NOHhHAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAERSURBVHja7Ji/SgNBEIe/C4d9DpuAL5BnMEeuUgR9gANTiZZpQiRNXsAjb6DVFT6Ald1B0lrbaKlYhLMMpLk0s7KV2OR2hPnBsAtbzMfM/vmxUdM0aFQHpTIwAzMwA/ujouHJ+QFQAJdAEojjGyiBKbCtnp+IgTtgHLhAXWHYADPXypEspkAUKFJhuHaksde+1eHkNQPylqr0tl70C5dbxsQH85UDNy2Bvcje/j+nMju9UAn2CZxpBOsBD1ov2J49SQa2Z31pBPsArmKFYEdqW+lsj6/HFvO//7YYA7W86oP1ol8BVYAiHctY+6eylPkSaAKFsz33fsVuxayNxEmGtNbzH89vnyoGZmAGZmD70W4A/l1MQ+FwTCYAAAAASUVORK5CYII=\"\nb2=\"5vFb/3AAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAEPSURBVHja7Jg/igIxFIe/WQZ7xUbwAp5BZa0UQQ8gaCVabiOKjRdQvIFWFh7Aym5gbbe20VKxEC0Fm9nmjQQrmzER3g9CQhLIx3v58yNeGIa4qC8clYIpmIIp2Ivyvsu1BDABmkDKEscVWAB94B6sV/jAGPixHKCkMNyAYZTKlgwWAc9SKQpDJyL1jfRt0r1tCWjEHJ3deZqbPPVtpE6ZYKYaQDdmsD/Z0593KkuVupNgR6DqIlgGmLt6wWb0SVKwmHVyEewAtH0HwbLOpjKyPaaWb1h3/8okH7jIq144T3MBEFgIUl7qi3kqF9L+BUJLJbI9MzNiAzFrLXGSNq316OH59VNFwRRMwRQsHv0PAChcTEOIC8x4AAAAAElFTkSuQmCC\"\nb3=\"61QmSgAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAETSURBVHja7Jg/SgNBFIe/DYN9QpoFL7BnMEu2UgQ9QMCtRMs0oqTxAoa9Qay28ABWdgumtbbRMsFi2ZSCzaZ5K9METDHMCO8Hwwy8gfl4b/78mKhtW0JUj0ClYAqmYAr2R0Xj47MDYA5cAANPHBugBG6Bn+rlGQM8AFPPCeoLwzcw60qZSzAFIk8tFYarjtRY5VsOb94zYOIoKx91kcx3xJbSD2wwWxPg2hHYm+zl/3sqs5PzIMHWwGmIYDHwGOoFG+uTpGCO9RUi2Aq4NAGCHQZbys722HpyuN7nPpMN0MirPqqLpAIqD0k6kr6xT2Up41eg9dQ627OwM3YnZi0XJ+nTWt//en79VFEwBVMwBXOj7QBSTExDwgQduQAAAABJRU5ErkJggg==\"\nb4=\"40S7fMAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAEUSURBVHja7Jg/SgNBFIe/lcU+i81CLpAzmMWtIkI8QMBUoqWNKDZewGVvoNUWHiCV3ULSWtskZUKKEEvBZmzeyHQR2WUm8H4wzMDMMB/vzZ8fExljCFEHBCoFUzAFU7A/KjoZDA+BArgAEk8cn0AF3AHf9duEGHgCbjwHqCMMX8CDTeVYOjMg8lQyYbiypLGTvtnR7UcOjBqOxnxT9oodY2ZSJy6YqxFw3TDYu+zh/T+V+el5kGAr4CxEsBR4CfWCTfVJUrCWtQ4RbAlcxgGCdYNNpbU9rl5bWGfxn0kxsJVXvb8pezVQewjSsdRb91RW0p4CxlOxtufZjdi9mLWxOEmf1vrx1/Prp4qCKZiCKVg7+hkAfDxMQ9shghkAAAAASUVORK5CYII=\"\nb5=\"5nlSNYAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAETSURBVHja7Jg/agJBFIe/DYN9FhshF/AMRmJlCJgDCNkqxDKNKDZeIIs3SCoLD2BltxDb1Gm0NFgsm1Kw2TRvZcpFVmYI7wfDDMwM8/He/PkxQZ7n+KgrPJWCKZiCKVhJBXfdXg2IgScgdMTxC8yBEXBMVksM8Aa8Og7QtTAcgEmRykg620DgqLSF4aUgNVb61vXhdwfoVxiJTTprxiXGraUObTBbfWBQIdiX7N//cSo7949egv0ADz6CNYAPXy/Yhj5JCnZh7X0E2wHPxkOwG29TWdgeW4uK19ieO9EAmbzqt+msmQCJgyC1pM7sUzmX9ieQOyqF7Xm3IzYWsxaJk3Rpracnz6+fKgqmYAqmYJfR3wCRNExDzUCjTAAAAABJRU5ErkJggg==\"\nb6=\"6aRha5AAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAEUSURBVHja7Jg/SgNBFIe/lSV9ljQBL7BnMMFUCYIeIJCtJCltRLHxAi65QVKl8ABWdgtua22jpWKxbErBZmzeyJQGd5khvB88ZmCG4eO9+fNjImMMIeqAQKVgCqZgCvZHRcfj0w6QAzMg8cSxBTbAFfBdPD4QA3fAhecEdYXhC7ixpcxkcAhEnmIoDHNLGjvlK3uXLyNg2kAGXqtlmu8wv5Q2ccFcTYFFA2DPsm/361SOJmdBgn0AJyGC9YF1qBdsX58kBWtZnyGCvQPncYBgh8GW0toeV/cNrf323wVioJZXfVAt0wIoPCTpSNraPZUb6T8BxlNY27NyM3YtZi0TJ+nTWt/+en79VFEwBVMwBWtHPwMAuyRMQwv1BY0AAAAASUVORK5CYII=\"\nb7=\"41gYb0AAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAESSURBVHja7Ji/akIxFIe/W0J3xUXoC/gMVerUItgHEOpU6tilVFz6AhXfwE4OPoBTtwt1dXbRUXG4XEfBJV1OJKNFJaGcH4QEQsKXc/LnRxJrLTHqikilYAqmYAp2pJK7++Y10AeegGIgji0wAt6Bffo9wQCfwGvgABWEYQf0XCrb0lkDkkClJgwvjtR46ZuW3uZ1oHXi6hfZoNL/45ip1EUfzFcL6JwINpM9+/9OZf3hMUqwNdCIEawMfMV6wZb1SVKwC2sTI9gKeDYRgt1Em0pne3yNzzDv8hxwBsjlVa9mg0oKpAGCdCt17p/KkbR/ABuoONsz9CPWFbPWFicZ0lp/HDy/fqoomIIpmIJdRr8DANAcTEOO3K5yAAAAAElFTkSuQmCC\"\nb8=\"4SQK/KAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAEUSURBVHja7Jg/SgNBFIe/lcXexWYhF8gZdHGrSCAeIGAq0dJGFBsv4LI30GqLHCCV3ULSWtskZUKKEEvBZmzeyJTBdZkhvB8MMzDM8M178+fHRMYYQtQBgUrBFEzBFGxHRWe9wSFQAJdA4onjE6iAe+C7fpsQA8/ArecAHQnDF/BoUzmSzgyIPJVMGK4taeykb3Z895EDwwYrn2/KbvGHcTOpExfM1RC4aQD2Lvt1P09lfn4RJNgK6IcIlgKvoV6wqT5JCtay1iGCLYGrOECwTrCptLbH1bjhnIv/gouBrbzqp5uyWwO1hyCdSL11T2Ul7SlgPBVre17ciD2IWRuJk/RprZ9+Pb9+qiiYgimYgrWjnwEA5RRMQwSwfyMAAAAASUVORK5CYII=\"\nb9=\"4SQK/KAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAEUSURBVHja7Jg/SgNBFIe/lcXexWYhF8gZdHGrSCAeIGAq0dJGFBsv4LI30GqLHCCV3ULSWtskZUKKEEvBZmzeyJTBdZkhvB8MMzDM8M178+fHRMYYQtQBgUrBFEzBFGxHRWe9wSFQAJdA4onjE6iAe+C7fpsQA8/ArecAHQnDF/BoUzmSzgyIPJVMGK4taeykb3Z895EDwwYrn2/KbvGHcTOpExfM1RC4aQD2Lvt1P09lfn4RJNgK6IcIlgKvoV6wqT5JCtay1iGCLYGrOECwTrCptLbH1bjhnIv/gouBrbzqp5uyWwO1hyCdSL11T2Ul7SlgPBVre17ciD2IWRuJk/RprZ9+Pb9+qiiYgimYgrWjnwEA5RRMQwSwfyMAAAAASUVORK5CYII=\"\nb10=\"4IU40yAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAEUSURBVHja7Jg/SgNBFIe/lcU+i81CLpAzmMWtIoIeIGAqMaWNKDZewGVvoNUWHsDKbiFprW2SMiFFiKVgMzZvZMqwcZkhvB8MMzDM8M178+fHRMYYQtQBgUrBFEzBFGxLRSeD80OgAC6BxBPHF1ABd8BP/f5GDDwBN54D1BGGb+DBpnIknRkQeSqZMFxb0thJ3/To9jMHhg1XPVuXvaLh2KnUiQvmagiMG07+IXt1f09lfnoRJNgSOAsRLAVeQr1gU32SFKxlrUIEWwBXcYBg3WBTaW2Pq9cd5pv/J1wMbORV76/LXg3UHoJ0LPXGPZWVtCeA8VSs7Xl2I3YvZm0kTtKntX788/z6qaJgCqZgCtaOfgcA+gxMQ8oQyI4AAAAASUVORK5CYII=\"\nb11=\"7H1QFfAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAEUSURBVHja7Jg/SgNBFIe/lcU+i81CLpAzmMWtIoIeIGAqMaWNKDZewGVvoNUWHsDKbiFprW2SMiFFiKVgMzZvZMqwcZkhvB88ZmBg+Oa9+fNjImMMIeqAQKVgCqZgCralopPB+SFQAJdA4onjC6iAO+Cnfn8jBp6AG88J6gjDN/BgSzmSwQyIPEUmDNeWNHbKNz26/cyBYYMVz9Zlr9ghY1NpExfM1RAYN5j4Q/bpfp/K/PQiSLAlcBYiWAq8hHrBpvokKVjLWoUItgCu4gDBusGW0toeV68N55r/N1wMbORV76/LXg3UHpJ0LO3GPZWV9CeA8RTW9jy7GbsXszYSJ+nTWj/+eX79VFEwBVMwBWtHvwMADxNMQyzsmXEAAAAASUVORK5CYII=\"\nb12=\"41b0LmAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAERSURBVHja7Jg/SgNBFIe/DUP6pAt4im3jYirdQDzAQlKJlumUNF7AXEGrLTyARWK3kLTJCbRUrNZSSDM2b2RKY1hmkPeDxwwMDN+8N39+TGKtJUa1iFQKpmAKpmC/VHJyOmoDc2AMdANxfAIlcA3squcnDHAHTAMnqCMMX8DMlXIigxmQBIpMGC4dqfHKt14OtwOg2HO1L/kinR+YsbW0XR/MVwFc7TnpRvbo/z+Vg7PzKMHegWGMYD3gIdYLtqdPkoI1rI8Ywd6ACxMh2FG0pXS2x9fjH+Z5bQLOALW86sf5Iq2AKkCS+tLW/qkspb8CbKBwtufez9iNmLWJOMmQ1vr2x/Prp4qCKZiCKVgz+h4AF6tL0iQRyl4AAAAASUVORK5CYII=\"\nb13=\"6tUebcAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAERSURBVHja7Ji/SsNAHMc/KcHdbAGfoqsNZrIJ6AMEzFTs6KZ08QXMK7RThj6AQ3ULNGt9Ah0Vp3QsuMTlF7kxQ8Md+PvCcQfHHZ/7/e7Pl/PatsVFjXBUCqZgCqZgPeVdXF6dAAVwAwSWOPZACdwDP9XrMz7wBNxZDtCpMByARZfKXDojwLNUImG47Uh9I331S/oWA1mPFb4nm3FxxIjVUgcmmKkMmPeYaCf78n+dynh67STYF5C6CBYCK1cv2FCfJAUbWN8ugn0CM99BsDNnU9nZHlPrnmM/hobzgUZe9UmyGVdAZSFI51I35qkspb0FWkulsz1LM2IPYtZycZI2rfXjn+fXTxUFUzAFU7Bh9DsAUUdL0jh5YGQAAAAASUVORK5CYII=\"\nb14=\"7u8PKuAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAESSURBVHja7Jg/SgNBFIe/lcXe7RY8xbZmSSqThXiAgKlES7sEm1zAXMFUW3gAizXdgmn1BFoqqWIZSDM2b8J0myLJDPh+MMzAMMM3782fHxMZYwhRJwQqBVMwBVOwHRW1L/unwBS4BhJPHL9ACYyATT1/IQYegXvPAToThjXwYFM5lM4ciDyVXBhuLWnspG/xWnx0gEHD6j57VTbdc8QWUicumKsBcNcwybvsyf93KjvdqyDBfoAiRLAUmIV6wab6JCnYgbUMEewbuIkDBDsPNpXW9rh63mHc1zHgYmAlr3qrV2U1UHsI0oXUK/dUltJ+A4ynYm3PkxuxsZi1oThJn9Z6svX8+qmiYAqmYAp2GP0NAGR7S9KQJgZGAAAAAElFTkSuQmCC\"\nb15=\"6UwUbuAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAERSURBVHja7Jg/SgNBFIe/lSF9tlvIKbaNwVQmAT3AgluJKe0UGy9grpBUKXKAFNFuwW31BEmpWCWlYDM2b2SqxGadAd8PhhkYZvjmvfnzYxJrLTHqiEilYAqmYAr2SyUnp2ctYAJcAGkgjh0wB26Ar+ppiQEegOvAAWoLwydw51JZSmcPSAKVnjBcOVLjpa9+HL32gWLPytbDVT5pIGK11KkP5qsAxnsmeJH9+D9PZX9wHiXYOzCKESwDZrFesJk+SQrWsD5iBHsDLk2EYJ1oU+lsj6/FgTGbv4IzwFZe9ePhKq+AKkCQulJv/VM5l/YzYAMVZ3umfsRuxayV4iRDWuv7H8+vnyoKpmAKpmDN6HsAd69L0itm7lQAAAAASUVORK5CYII=\"\nb16=\"5NM/kXAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAESSURBVHja7Jg/SgNBFIe/DYNsm3QBT7GtWUylEcwBFkwVktJOSeMF3CskVQoPYKPdQrbVE2ipWG1KxWZs3soUK6TZzIDvB8MMzAx88978+TGRtZYQ1SFQKZiCKZiC7ajo+OT8AMiBC6DniWMLrIEr4Lt4vMcAt8Cl5wB1heETWNSpnEhnCkSeSioMs5rUOOkrH76eh0DWsKKXUZzkLUaslLrngrnKgHnDxCfZh//7VA5Px0GCvQNnIYL1gVWoF2xfnyQFa1kfIYK9AVMTINhhsKmsbY+ruz/Gvu4bzgCVvOqDUZwUQOEhSEdSV+6pXEt7A1hPpbY9Szdi12LWJuIkfVrrm1/Pr58qCqZgCqZg7ehnANNuSyMZA3LMAAAAAElFTkSuQmCC\"\nb17=\"7LLvSyAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAEQSURBVHja7Jg/TsMwFIe/oKjKSrZKnCJricgEQSoHiEQmRMduRV24ALkCTBk4AAvdItGVnqAdqZjCCOqSLi+VFTF0iezh/STLlu3h83v+85O9pmlwUSc4KgVTMAVTsCPlXVyOB0AB3AKhJY4foARmwK5avOEDT8DUcoBOheEXmLepzGUwBjxLJRaG+5bUN9K3fP9bJUDWWc06DaKi54gtpQ5NMFMZMOn0fcoe1FOZXN04CbYFrl0EGwIvrl6wQ32SFKxnfbsI9gXc+Q6CnTmbytb2mHr9Z97GBpwP1PKqn6dBVAGVBY6R1LV5KktpfwCNpdLanmczYg9i1nJxkjat9ePB8+unioIpmIIpWD/aDwDj5ksjFszMfQAAAABJRU5ErkJggg==\"\nb18=\"7V0/CfAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAEMSURBVHja7Jg9TsNAEEafkYXc4s4Sp3CbWHEFRkoOYIlUKJR0RDRcAF8BKhc5QBrSWcJtOEFSElElZRCNaWbRljRmt5hPGu2stnma2Z9PG3Rdh486wVMpmIIpmIL9UcHoYnwKVMA1EDviOAA1cA98N6slIfAE3Dku0JkwHIEH08qpLGZA4CgyYZgZ0tBqX/v69Z4Dpcw3RZRW/1SxVsbYBrNVAreSr2Xv6ak0yi8nXoLtgCsfwRLgxdcLNtEnScF61qePYB/ATegh2Lm3rTS2x9bCyrcu4UJgL6/6sIjSBmgccAxk3Nunspb8DegchbE9z3bF5mLWpuIkXVrrx1/Pr58qCqZgCqZg/ehnAATlSyPvzq96AAAAAElFTkSuQmCC\"\nb19=\"7ud01CAAAAIGNIUk0AAG11AABzoAAA/N0AAINkAABw6AAA7GgAADA+AAAQkOTsmeoAAAECSURBVHja7Ji/DgFBEIe/k4to6SSeQotQ+ZNQi4RKKHVE4wV4BSqFB9DQXULtCSiJipJoTjMnV5Bo2C3ml0xmk22+zOzs/rKO7/vYqAiWSsEUTMEU7Es5+WI1CkyAJpAwxHEF5kAfeHjrJS4wBnqGCxQXhhswDFrZks0c4BiKnDB0AlI31L7t6r4rAA1gX46lJ3+s2FZy4tPhbwBdoK5T+UaFUs1KsBNQsREsCcxsvWCT+iQp2I91thHsCLRdC8FS1rYysD1hLSQfTMO5wEVe9Ww5lvYAzwBHRvIlPJVzWW8A31AEtmcarthAzFpLnKRJaz16eX79VFEwBVMwBfuNngMAEO1KIKZ2wsoAAAAASUVORK5CYII=\"\n\n# This one is too different from the others so it stays in one piece\nbcharging=\"\"\n\n# Get the current charge interval\nif [ \"$power_source\" = \"'ACPower'\" ]; then lvl=\"charging\" img_base=\"\";\nelse\n\tif [ \"$battery_level\" -gt 95 ] \u0026\u0026 [ \"$battery_level\" -le 100 ]; then lvl=\"0\";\n\telif [ \"$battery_level\" -gt 90 ] \u0026\u0026 [ \"$battery_level\" -le 95 ]; then lvl=\"1\";\n\telif [ \"$battery_level\" -gt 85 ] \u0026\u0026 [ \"$battery_level\" -le 90 ]; then lvl=\"2\";\n\telif [ \"$battery_level\" -gt 80 ] \u0026\u0026 [ \"$battery_level\" -le 85 ]; then lvl=\"3\";\n\telif [ \"$battery_level\" -gt 75 ] \u0026\u0026 [ \"$battery_level\" -le 80 ]; then lvl=\"4\";\n\telif [ \"$battery_level\" -gt 70 ] \u0026\u0026 [ \"$battery_level\" -le 75 ]; then lvl=\"5\";\n\telif [ \"$battery_level\" -gt 65 ] \u0026\u0026 [ \"$battery_level\" -le 70 ]; then lvl=\"6\";\n\telif [ \"$battery_level\" -gt 60 ] \u0026\u0026 [ \"$battery_level\" -le 65 ]; then lvl=\"7\";\n\telif [ \"$battery_level\" -gt 55 ] \u0026\u0026 [ \"$battery_level\" -le 60 ]; then lvl=\"8\";\n\telif [ \"$battery_level\" -gt 50 ] \u0026\u0026 [ \"$battery_level\" -le 55 ]; then lvl=\"9\";\n\telif [ \"$battery_level\" -gt 45 ] \u0026\u0026 [ \"$battery_level\" -le 50 ]; then lvl=\"10\";\n\telif [ \"$battery_level\" -gt 40 ] \u0026\u0026 [ \"$battery_level\" -le 45 ]; then lvl=\"11\";\n\telif [ \"$battery_level\" -gt 35 ] \u0026\u0026 [ \"$battery_level\" -le 40 ]; then lvl=\"12\";\n\telif [ \"$battery_level\" -gt 30 ] \u0026\u0026 [ \"$battery_level\" -le 35 ]; then lvl=\"13\";\n\telif [ \"$battery_level\" -gt 25 ] \u0026\u0026 [ \"$battery_level\" -le 30 ]; then lvl=\"14\";\n\telif [ \"$battery_level\" -gt 20 ] \u0026\u0026 [ \"$battery_level\" -le 25 ]; then lvl=\"15\";\n\telif [ \"$battery_level\" -gt 15 ] \u0026\u0026 [ \"$battery_level\" -le 20 ]; then lvl=\"16\";\n\telif [ \"$battery_level\" -gt 10 ] \u0026\u0026 [ \"$battery_level\" -le 15 ]; then lvl=\"17\";\n\telif [ \"$battery_level\" -gt 5 ] \u0026\u0026 [ \"$battery_level\" -le 10 ]; then lvl=\"18\";\n\telif [ \"$battery_level\" -gt 0 ] \u0026\u0026 [ \"$battery_level\" -le 5 ]; then lvl=\"19\";\nfi\nfi\n\n# Reconstruct the icon\nsuffix=b$lvl\nreconstructed_img=$img_base${!suffix}\n\n# Set the display text\ndisplay_text=\"$battery_level%\"\n\n# Generate the final output\ndisplay_output=\"$display_text | image=$reconstructed_img size=12\"\n\n# Actually display stuff\necho \"$display_output | refresh=true\"\n\n# Dropdown info\necho \"---\"\n\necho \"Source: $source_label\";\necho \"Current charge: $battery_level%\";\necho \"Status: $battery_status\";\nif [ \"$remaining_time\" != \"0:00\" ] \u0026\u0026 [ \"$battery_status\" != \"Charged\" ]; then\n\techo \"$time_label $remaining_time\"\nfi\n\necho \"---\"\n\necho \"Cycles: $batt_cycles\"\necho \"Condition: $batt_condition\"\n\n#echo \"Icon type\"\n#echo \"--Colored | bash='$0' param1=colored terminal=false\"\n#echo \"--Black | bash='$0' param1=black terminal=false\"\n"
				}
			],
			"path": "System/ColorfulBatteryLevel.5s.sh",
			"filename": "ColorfulBatteryLevel.5s.sh",
			"dir": "System",
			"docsPlugin": "System/ColorfulBatteryLevel.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Colorful Battery Indicator",
			"version": "v1.0",
			"author": "huhu",
			"authors": [
				{
					"name": "huhu",
					"githubUsername": "Phlooo",
					"imageURL": "https://avatars.githubusercontent.com/u/57720000?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple and colorful battery indicator",
			"imageURL": "https://i.imgur.com/JaUKQWj.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/Phlooo/",
			"lastUpdated": "2021-03-08T15:22:02.16925Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/copy-ssh-keys.sh",
					"filename": "copy-ssh-keys.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eCopy SSH keys\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBastian Kersting\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003e1c3t3a\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eProvides a quick way to copy your public keys to the clipboard\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://imgur.com/GYOuLJ1\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\nif [[ $1 ]]; then\n    cd ~/.ssh \u0026\u0026 pbcopy \u003c \"$1\"\nfi\n\n\n# display icon\necho \"|image=iVBORw0KGgoAAAANSUhEUgAAAD4AAABCCAYAAAAPIWX+AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAuIwAALiMBeKU/dgAAActpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+d3d3Lmlua3NjYXBlLm9yZzwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGMtVWAAAEZxJREFUeAHNmwuwXVV5x79z9jnnPvKgASk0mmosCIWOdAjWtj64sQTkcauM3AtEDK0GM8ogLdIOg4651DJMwSk6AwwgIxoaIDdqOwXrFGyTilO0TWi1k3AFSiqQQISE+36cc/Y+/f2//bj73NybJk3uzV3JPmvttdfj+6//t7611rf3Ldg8CY2GlQoFq6fi7HvVzgxa7IPkvbdYtFPIPykI7K3EKreHvL2Fou2KGrad9L+Uy7aN/Ej11RZRyH1D9/MyIGRRl4QjLgD4stf32vf3/dJG6xNk1a0R1ayh9MiQNUa5IvIom13VqoW1mv1rGNo68hemQEkHaXpexVu2ODMu06uv2Mq9u+2p4TetURu1Rv8b1tj/S6u/+YbV+vdZbWC/1Qf7LRoesIgBqI+OWG1s1GrjY1avVycHAfA7AXxlCpS02D8gFA7ImaOMBqALK2PV3v0Luy0o2k2LF5sNDVsE/XV0QCpdRJ35MVPMfXxNyUPVIyu4ahfLlYTlyDbSxrXUGRB44mwaCeIxAZ4K8tprtqA+ao8sWWKdg0Ou6lUAlgFSyEAmoKcDrzKU9cHwuGgNAeQqBSUr0M9PSV/KtYt0mbiW8kq1uQ1SbwSo79lm7eOD9viSX7HO/fusjoqGCFdpwF2EiSJGf5OLNEasOS/3TOVUh0tgy1wN2qvSz1mYt3/i/h0CTZyp/ZwyTsdFBEBEs13P2nePP8EufbMfAcVyIWE5Vekp6kw9V/cm5lO2k2dpGcVogNivwnwL/f6MtFYIqX1AHM4l49kgv7DTvsh8vnQfTDMGpYzlPKuHwHKqFdIG15JcfbFPfgvMTwD03fRztwZcoAEvkzE3ARXXSEd9/2XnRKGtT+a0BNZyNqnWOeFTYDzXv4j7iLQEV6zlrEn9p4L3+pGVQ5Y/UH6c8qsTtKVM52cTPh3KWLlVLUS2/rjjrDQwZFXUsVKIAWC/Y9ZkpDxIVAJ1Q58cJQsq5VjdBZArgraQYoHb9KSewPquIIm5L1JCRq1MnS/R3t8jy3DajfqYtbB1a7zE7NhuH6LTS/oHvKsSQjRgXwYpYy5jTRyzrAE2WLTQArE2PmGvj4/b3nrNqgsXWrG1lWmSZ58abgTVXtKmT4PQStSJGNTTaP9q9T4nwDs6YoMG6Kvb25ytOoCLCKF5OKnmsOQCSwtglLIlgL42MGBfpu77Sg07u1C2s6n3uwP9dsPwsPUtXGBBAlLq7/Vzg+cDyhBqcEMBpl2pfJAZHGXORvBOMCg7/s1ObhRte0vFlrK9DFFTzflsYyIV1z1xg2eRWB4ZsScKrfbJZcts93Sy7dlj7S2BfXXBQrtmbMytuNooyHIlbXmse9oNmdgBg6Lp8T6yZjds3x5rVb1gv8PubOnEBKOOXJqLzlASpyxJMJgOhoZsy7JT7EKB3rGD9Z01uNFrQS+X0s8/by1Ll9roCSfZp0eG7X4GSkcSsSptaWaee9oNUPd6ianDoHxg1o0bAMBJqNvZLaj58IivoezNyEOgKYYoLFWsxLZ1CIY+i4DRrl3Wuny5jauJKaEu8KeeahPHN+yG/YP2wQUL7HSY951b2rYGwfuiPwTRndR9xawyDjOFlStja85cPtUZlkGbOrc1NJKKeb2g3dnatPw06xO7M4CW/CbQtFkunGwj1H9AmxtAaXnMljo3brStAVC/qtcI7Z2zCtxuiTvyziL7VTqm10mhfCDIS2LBDzQVOIb+s+p0den34IGp5IGj6VODg1bjzC7gmaHztgVcrYt79cfZfnaBr/fOrKcHhW5Ym4CHjLpGX4Lo3gUjhhmJVhwddfGmNWZxa82/K5Kp1AhsL+31J6w7w2nbCds+z5kK6nPp7AJPZFy/HjnEtIDmwObBC7ZrBHUoe+i2pyPuJKi50StKtR2w4rSvJC9tn+e1WQV+yy2xUBgpgebgmRMqJ6AEQuACa3vY1uoC/0Zc85B+fd5S/+0AOqFWjftQmz4AaUx/DG7Y0oLWhbZ7VoGLaTqPBYvsVQmSMjtVKAZGmxnE9DKdHms8kvrJ/XSRWtXsvXDxIgdVpy3f/zeB1+BG1mC1UHhtVoGL6XS7Smd9bDvFglvdaYTSoAQYKIVOtrcfVv3/2erHSh88f5L72cVSR5n6yy/bKdiOtbijBE7n+SY7woA6+1R17x4D89yhz6Vch4eTXLQoYTy0f2cNN1ldupcs7nBIGEBi/y8i6qhjCet+H+D/YPkKe0H9bdtm5dSQbafNF1+0aDnru7w41RF7kH6WyA9H62WpgDMa64LgCriW0SBkKhD/ZNqRVEdHK4hhWIl++o+2YCyw7W1tdtp4lU2G3MRI1+RYIDPZXtbb29mnT9jLxcA++5u/bY9PJ89LP7f3MF73LFps5wC6zhB7m/SXuaTSPhgJze+gXrehErvIWWdcoLUROesCG3n6B/Y4jJ+GqgmgDF5BnsUi9zFFxLADIyX26QK/rB7aYzufsScZoH/geqFYZkUM7dcLgZ1Xj+wPOaVVhvG60k/sSk7aog0H75qkPtAyDKe2wlsXn2h9sw5cTJ14Yqzu1dDuZg6vxfl/HHNSDn+dpd2tmoFPBJdGsKaHDFQAuFUwv0oWWy214zkn37QmA6TOIJZSzVF/GjyFDLymFg4J7RFqdXtQz3wqKDFbQVb59ddjUQrs15ncrSwnWmPjc3g8/3zSSxMo7+uvjAC1dJqKBG5owEJU39ihCWzEUbUOCFl9ua4OqK921IK3xzK5EIuP3dhy0lL7Wz2YVcbptLB5sxW7uy384WN2GQz3lgMr1BAEhpxtH3qxDJNNai8w0ILHpogBdIWQtyZhkdLIrnopdUn5VHPcs8Pg8i8Mylbm/C5HxBeoocEtpdV0f1RDHvSWv7PLIkDL1z2BYYOhIF1iMpYT5p0hQORjgU3utUz5cpXLi5/lNMU1INYoqXiDqSKV+9JJb7OnZW8gQMb16Ic86B8AGnY3y1+GMarRqRz7kw6CXNrzocLnq/LFeC7W0pe/V3rGPJwZPA/f8hYr7++3R5Ytjx2NyOarzFFX9TzoJ79t3Yz4JlRNc7MGkLJU2i/pWqqeGnvSrrZQkyZTI5VmiMlsaqg+IVH9XCXPqzN4xeOXWPmNN+yxF1+xNSqLbGLbXVBJdWUfeciDfmKzdaHOmzSZsMZ6iyEvZ2yEErUkLzNknmYvrf26AKbPkvys3LQqrna4GCC5nqtoVwlfXBG//YM/+Q+7VD6B5A2OgxZSjf9RCXSYGbLHN1oXy00vy5YBxHdTTSrKYOTVWeoqIySPKnZAS07NNZxdHvUKKsvz+H0aZdWW6nDRq9+HpCN8ahW9eBwYtCHK3HzKmXaXwAl06hDRvYKaPOKQB/29h6wbddzEW0udgly9Xe5E4Py8dfBxfl2uYpyQgwAYxe9+spY8DKG0XQquw4VeCcU7uyTmvsj6XtSJjh2hAKu/Tcjzl6efZT8XMNKZeueBHjHwPOjHvmWXA/pRvaZAJbM5nQPYZJwAI+arbe1WYY0dBEQnLtDnWfLWAUAntHfjRyuVZYkENgUes+0mQJsS2niuULLv0fffnHGWPSOADVi2jpm/ijgi4HnQ3/mGXY4X9dED1DsVNoldeNICjaBV2Kpg+IYAesm5F9sPJbSCDiX1QX/ntYJ2T4f5t+IMX0SdAvcjuKr3CjAD8sxQzf7z/e+Pz/uqO51qKz8f/t/A86A3329XMDcfETPsrWuAalqyBFZAU8aS2EGj3kOAuWhlp/3ovvus/K53WaOjw5ciqfghB+TRUAqPljGZuoMGKdFhhzzoTffalXT0sNRZS5ZAZ0uMWpb4iKQ8zW8OCwrV1rJVeEsyxO1Fqz5iP9oG6HPWTb647+mx4rnnWlHHWraoGozsYx71b+wIt7/TiskzgT2sgTpsxvOgH77briwF9rDmNIeOyc0JAMVqxjJpBx3nVzFEFQzXIKAv+XCXPTUVtA/NND8OmHy1Tfg/WfVSM/wcFuN50BvvsivA8bCEqNZgmh2ZKxqZeZYF3gNisq5X2ypWGYNpyl58YXes3nmmk9LTRvR1RGDzjR7y51B50Bu+ZqsFWkdDzWkEcq+HExGzEfeRpJ0hrHdri1vvIQ4QF114RQx6XU6984LNdjov5ox9OWhW5+7NFm74a1uN2m4U6HTJEjC/GA3Ndal1mufqjvVmnZb1HmTZubhz9YFzesbOZ+lBqogzNp8xDegH77DV3G/UaOHC8W2oby8xK+Rn28psy6k81BtrX+F7tCHqOWhZ70NV7xkFO8IHBwXuoMU05+n7b7OPM8MctLaUsH3wvbdsbAPHIXOazclwiPu3c02m3v51xBHKfkTVZzRuGWiYvvdWu4oRekg9+T56iiFjMxGH1PQAGidCxAGlNDpmL6H+l3/sU/bjZGORfWuW1DomUSpyU+cCDcs+p+/5i0nQMmQ803dkmWorrTXa8xQnaSx7JDtAft/HrrEfq4PntM+aJ+EAQbRx4EW8TlrhPT2ALtpDMlDgmVynqeVGizg1aoqzPMqT1qHCPZsTdft296fN330eynZyLsamifE86Lu+YJ+ALVdvZ5o5nTdkGctiP2E5y+OetFxExdFx3nm32mW991mvAKVn47kAd7A+MuCAdPbF9FdvtjWNgm1QRT6fqAHMDZmrcw5oCjjLn6r2tKky8pIuaLOu+QTeweaZvvPP7RPFkm1w9U6Olqk6N63RDJmrt9Q9SWfxFLWXytOePuiRsdvctY4zO2FLDw6CnviLCd3PZdALvIzp2/8M3xRMi8GmdTph2T2jiVqnbE+Xp/p5teden3YV+bZFb0e6eu/liEEQaHk95xJw2pe8E0UYj/7qT+1qzrvfEosIWWMApt2G6rmHKbHfTslTuVx5f4r/LeTE9VsfvcDOOPMc++6111okjeOtKsM1d8FB33q9XYWA3xRTvMqtwWI8p6ew60yKTa6U8TT2POXnn+XTcVv6YqHId6whnpXuM0626wT1XBaBuYMc91S89Vq+FgztGxwcMtAOJgE9RWUnAR8Iatpn+UGCU73SkdpHOCBEcYfE6Fgfu3xjkebmVwxc39ZiZY6W4wilJSt+35QDNh34jOGcVigvK5uvr3T8TAdL/6czPJsDdwjqNdPcwJ3sRR/BfoD31Rp+V28scyF9/+TFEFhBgGTp07O2Yn/X5Q/5yT2TxmRQknRan7iGz7vCh7w70LQ7VT02dZ6asx+9afw1LLhMO6/m6BdBfe+dCp/GPBFrBBYm//WyGfhkgNIB4WVfPFCqkZSnrypWvTIyan1kXbTmT2yvrLoOQSo2l0Eu+V14LSWb3kKkKjnVgOntpsoWET4uRwUvT5yfx2leU6xBAbQ8qiNj1scor1pzvb2k4+mxAK0Blu/vSXlHAaQdWgxGgnIlgGr41fS9+CB+NX1cr49o603AZgCfGxB3RPANzLNhw86/6nP2Sm+PVY6V98WBw+OdsLC3tWJtgJmQOgJaS1qV+yr5ZTwn+8hfieVfq0qEEs8PCby3gcsJ9X6WrcoFn/y8vexM99DPMQzB1m3W/6H32NOcs89vb7XjxagutCDAiRDgGHwB1fzoTV+zZ5542n523nvtVZ53yiagFDpbxzuv3ObFk/zw3z2qHFT6WiJb9cc32SsCfSyZTsc64EPZ4O4N9ovfX2GP8necQ7zD1juvAdR6J18uPIDwn7n5Lvvvni6rdHRb4+bbbNt5v+d/1CrwwUzgMRsOmoHbyYFn1dov2m52aJUbb5z0nadCHIsY2c16AS9HYipAzx9Za883J78RR+ASV51Ldt+Io6983tby9uTrumes9D46+9SKJbHKaawyNmE7+RLigs/1zB+mJa+CA1dC4HeeaQ2B0r2CgJ6BU6JpUHLg77jBruGL//tVlkpVB89f9PHNeQt7g52lyM7/zK22e76ot+RMQwY8ySgANssjndj3tHgca0CUIo7uuNE+xdvNBxgAvViwxXxvMjxqO/jb7/Ov67E98xG0ZM9A6uZwgsDrI10ON43bb7Au1PvLGL23wfr3+Wuh66+7ff6CFs7/BdJJhnhLPIgPAAAAAElFTkSuQmCC\";\necho \"---\"\n\n# navigate to key directory (provide the location if the plugin doesn't work)\ncd ~/.ssh || echo \"Please configure ssh key location\"\nfor filename in *.pub;do\n    echo \"${filename} | bash='$0' param1='${filename}' terminal=false\"\ndone\n"
				}
			],
			"path": "System/copy-ssh-keys.sh",
			"filename": "copy-ssh-keys.sh",
			"dir": "System",
			"docsPlugin": "System/copy-ssh-keys.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Copy SSH keys",
			"version": "v1.0",
			"author": "Bastian Kersting",
			"authors": [
				{
					"name": "Bastian Kersting",
					"githubUsername": "1c3t3a",
					"imageURL": "https://avatars.githubusercontent.com/u/45260993?v=4",
					"bio": "Computer Science Student",
					"primary": true
				}
			],
			"desc": "Provides a quick way to copy your public keys to the clipboard",
			"imageURL": "https://imgur.com/GYOuLJ1",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.879509Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/copy-to-clipboard.sh",
					"filename": "copy-to-clipboard.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eCopy to Clipboard\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eParvez\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eparvez\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin will copy text to clipboard\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/SiuAz3C.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\n# Hack for language not being set properly and unicode support\nexport LANG=\"${LANG:-en_US.UTF-8}\"\n\n# Write the list of Text you want enabled\nLIST=\"\nText 1\nSome Text 2\nSome moreText 3\n\"\n\necho \"📋\"\necho '---'\necho \"Clear Clipboard | bash='$0' param1=copy param2=' ' terminal=false\"\necho \"---\"\nwhile read -r line; do\n  if ! [ \"$line\" == \"\" ]; then\n    echo \"$line | bash='/bin/bash' param1='-c' param2='/bin/echo $line | pbcopy' terminal=false\"\n  fi\ndone \u003c\u003c\u003c \"$LIST\"\n"
				}
			],
			"path": "System/copy-to-clipboard.sh",
			"filename": "copy-to-clipboard.sh",
			"dir": "System",
			"docsPlugin": "System/copy-to-clipboard.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Copy to Clipboard",
			"version": "v0.1",
			"author": "Parvez",
			"authors": [
				{
					"name": "Parvez",
					"githubUsername": "parvez",
					"imageURL": "https://avatars.githubusercontent.com/u/126749?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin will copy text to clipboard",
			"imageURL": "http://i.imgur.com/SiuAz3C.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.863036Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/samplerate.sh",
					"filename": "samplerate.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eCoreAudio Samplerate Display\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAnthony Lauzon\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eanthonylauzon\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays current samplerate for an audio device.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\nIFS='\n'\n\ndevice_index=0\n\ndevices=($(/usr/sbin/system_profiler  \\\n  SPAudioDataType 2\u003e/dev/null | \\\n  sed '1,/Devices/d' | \\\n  grep \"^        \\w\" | \\\n  sed 's/;$//'))\n\nif (( $# != 0 )); then\n  device_index=$(($1-1))\n  echo $device_index \u003e ~/.bitbar_audio_device_index\nelif [[ -f ~/.bitbar_audio_device_index ]]; then\n  device_index=$(cat ~/.bitbar_audio_device_index)\nfi\n\ndefault_device=\"${devices[$device_index]}\"\nsamplerate=($(/usr/sbin/system_profiler  \\\n  SPAudioDataType 2\u003e/dev/null | \\\n  sed '1,/'\"${default_device}\"'/d' | \\\n  grep SampleRate | \\\n  head -n 1 | \\\n  sed 's/^          Current SampleRate: //'))\n\necho \\( \"${samplerate[0]}\" \\)\necho '---'\n\ni=0\nfor device in \"${devices[@]}\"; do\n  ((i += 1))\n  device=$(echo \"$device\" | tr -d ' ' | sed 's/:$//')\n  echo \"$i $device | bash='$0' param1=$i terminal=false refresh=true\"\ndone\n"
				}
			],
			"path": "System/samplerate.sh",
			"filename": "samplerate.sh",
			"dir": "System",
			"docsPlugin": "System/samplerate.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "CoreAudio Samplerate Display",
			"version": "v1.0",
			"author": "Anthony Lauzon",
			"authors": [
				{
					"name": "Anthony Lauzon",
					"githubUsername": "anthonylauzon",
					"imageURL": "https://avatars.githubusercontent.com/u/33203?v=4",
					"bio": "UToronto CS, Xoogler, Musician",
					"primary": true
				}
			],
			"desc": "Displays current samplerate for an audio device.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.461089Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/currentFiles.1h.rb",
					"filename": "currentFiles.1h.rb",
					"content": "#!/usr/bin/ruby\n# coding: utf-8\n#\n# \u003cbitbar.title\u003eCurrent Working Files\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRichard Guay\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eraguay\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eList of files that I'm currently working on. It allows me to select which editor to use and integrates with Alfred workflow for BitBar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://customct.com/images/CurrentFilesPlugin-01.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://customct.com/bitbar\u003c/bitbar.abouturl\u003e\n\n#\n# Global Variables:\n#\ncheckbeg = \"\"\ncheckin = \"\"\nvimProg = \"/usr/local/Cellar/macvim/7.4-107/MacVim.app/Contents/MacOS/MacVim\"\nsublimeProg = \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\"\nemacsProg = \"/usr/local/bin/emacsclient\"\n\n#\n# Check for needed files existing and create them\n# if they don't.\n#\nif ! File.exist?(Dir.home + \"/.myCurrentFiles\")\n  fh = File.new(Dir.home + \"/.myCurrentFiles\",\"w+\")\n  fh.write(\"~/.zshrc\\n~/.bashrc\\n~/.zshenv\\n~/.zlogin\\n~/.profile\\n~/.vimrc\\n\")\n  fh.close\n  fh = File.new(Dir.home + \"/.myeditors\",\"w+\")\n  fh.write(\"Emacs|emacs\\nMacVim|vim\\nSublime Text|sublime\\n\")\n  fh.close\n  fh = File.new(Dir.home + \"/.myeditorchoice\",\"w+\")\n  fh.write(\"sublime\")\n  fh.close\nend\n\n#\n# Check for version of BitBar and set the check\n# to be the normal check or an emoji check depending\n# upon the version.\n#\nif ENV[\"BitBarVersion\"] != nil\n  #\n  # The BitBar version is defined. It is at least version 2.0.0-beta10\n  #\n  checkbeg = \"\"\n  checkin = \"checked=true\"\nelse\n  #\n  # This one is less than version 2.0.0-beta10\n  #\n  checkbeg = \"✔️\"\n  checkin = \"\"\nend\n\nif ARGV.empty?\n  #\n  # Create the menu.\n  #\n  puts '🗃';\n  puts \"---\";\n  puts \"Files To Edit:\"\n  cfn = File.expand_path(__FILE__)\n  IO.readlines(Dir.home + \"/.myCurrentFiles\").each { |i|\n    fn = File.basename(i.chop!)\n    puts \"#{fn} | bash=\\\"#{cfn}\\\" param1=\\\"file\\\" param2=\\\"#{i}\\\" terminal=false\"\n  }\n  puts \"---\"\n  puts \"Editor to Use:\"\n  editor = IO.read(Dir.home + \"/.myeditorchoice\")\n  IO.readlines(Dir.home + \"/.myeditors\").each { |i|\n    if i.chop! == \"\"\n        continue\n    end\n    parts = i.split(\"|\")\n    parts[1]\n    if editor == parts[1]\n      puts \"#{checkbeg}#{parts[0]} | bash=\\\"#{cfn}\\\" param1=\\\"#{parts[1]}\\\" #{checkin} terminal=false refresh=true\\n\"\n    else\n      puts \"#{parts[0]} | bash=\\\"#{cfn}\\\" param1=\\\"#{parts[1]}\\\" terminal=false refresh=true\\n\"\n    end\n  }\nelse\n  #\n  # Process a command.\n  #\n  case ARGV[0]\n  when \"file\" then\n    #\n    # Open the file in the preferred editor.\n    #\n    fn = ARGV[1]\n    if fn[0] == '~'\n      fn = Dir.home + fn.slice(1,fn.length)\n    end\n    editor = IO.read(Dir.home + \"/.myeditorchoice\")\n    case editor\n    when \"emacs\" then\n      #\n      # Call the emacsclient program to open the file.\n      #\n      `#{emacsProg} -n \"#{fn}\"`\n    when \"vim\" then\n      #\n      # Call MacVim to open the file.\n      #\n      `'#{vimProg}' '#{fn}'`\n    when \"sublime\" then\n      #\n      # Call Sublime Text to open the file.\n      #\n      `'#{sublimeProg}' '#{fn}'`\n    else\n      #\n      # Else, let the system open the file with the\n      # desired program.\n      #\n      `/usr/bin/open -a '#{editor}' '#{fn}'`\n    end\n  else\n    #\n    # Set the editor Choice.\n    #\n    IO.write(Dir.home + \"/.myeditorchoice\",ARGV[0])\n  end\nend\n"
				}
			],
			"path": "System/currentFiles.1h.rb",
			"filename": "currentFiles.1h.rb",
			"dir": "System",
			"docsPlugin": "System/currentFiles.1h.rb.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Current Working Files",
			"version": "v0.1",
			"author": "Richard Guay",
			"authors": [
				{
					"name": "Richard Guay",
					"githubUsername": "raguay",
					"imageURL": "https://avatars.githubusercontent.com/u/2487495?v=4",
					"bio": "I'm an American missionary in Tak, Thailand doing freelance work to help pay medical and college needs for my family of eight kids.",
					"primary": true
				}
			],
			"desc": "List of files that I'm currently working on. It allows me to select which editor to use and integrates with Alfred workflow for BitBar.",
			"imageURL": "http://customct.com/images/CurrentFilesPlugin-01.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "http://customct.com/bitbar",
			"lastUpdated": "2021-03-08T15:22:03.129026Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/DarkModeToggle.sh",
					"filename": "DarkModeToggle.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eDark Mode Toggle\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ehuhu\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ePhlooo\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSimple toggle for macOS Dark Mode\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/khIIfMg.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/Phlooo/\u003c/bitbar.abouturl\u003e\n\nfunction get_darkmode_state {\nstate=$(osascript \u003c\u003cEOD\ntell application \"System Events\" to tell appearance preferences\n\tset currentValue to dark mode\n\t\treturn currentValue\nend tell\nEOD\n)\n}\n\nfunction toggle_darkmode {\nosascript \u003c\u003cEOD\ntell application \"System Events\" to tell appearance preferences\n\tset dark mode to not dark mode\nend tell\nEOD\n}\n\nif [[ \"$1\" = \"activate\" ]]; then\n  toggle_darkmode;\n\tosascript -e 'tell application \"Finder\" to display notification \"Enabled\" with title \"Dark Mode\"'\n\texit\nfi\n\nif [[ \"$1\" = \"desactivate\" ]]; then\n  toggle_darkmode;\n  \tosascript -e 'tell application \"Finder\" to display notification \"Disabled\" with title \"Dark Mode\"'\n\texit\nfi\n\necho \"| templateImage=\"\necho \"---\"\n\nget_darkmode_state;\nif \"$state\" is true; then\n\techo \"Deactivate Dark Mode| bash='$0' param1=desactivate terminal=false refresh=true\";\n\texit\nelse\n\techo \"Activate Dark Mode| bash='$0' param1=activate terminal=false refresh=true\";\n\texit\nfi\n\n# --- Icon credit ---\n# Icon made by Freepik (http://www.freepik.com), from http://www.flaticon.com, and licensed by Creative Commons BY 3.0 (http://creativecommons.org/licenses/by/3.0/)\n#\n"
				}
			],
			"path": "System/DarkModeToggle.sh",
			"filename": "DarkModeToggle.sh",
			"dir": "System",
			"docsPlugin": "System/DarkModeToggle.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Dark Mode Toggle",
			"version": "v1.0",
			"author": "huhu",
			"authors": [
				{
					"name": "huhu",
					"githubUsername": "Phlooo",
					"imageURL": "https://avatars.githubusercontent.com/u/57720000?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple toggle for macOS Dark Mode",
			"imageURL": "https://i.imgur.com/khIIfMg.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/Phlooo/",
			"lastUpdated": "2021-03-08T15:22:02.113777Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Day-Night Color Profile Selector.15s.sh",
					"filename": "Day-Night Color Profile Selector.15s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eDay/Night Color Profile Selector\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eNadav G\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003enadigo\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSimple menubar day/night icc selector\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash, customdisplayprofiles\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/nadigo/\u003c/bitbar.abouturl\u003e\n#-----------------------------------------------------------------\n#----- required: https://github.com/timsutton/customdisplayprofiles \n#----- move 'customdisplayprofiles' to /usr/local/bin\n#----- set your own profile paths for 'day_profile' and 'night_profile'\n#-----------------------------------------------------------------\nTOOL_PATH=\"/usr/local/bin/customdisplayprofiles\"\nvar=$($TOOL_PATH current-path)\n#--------- set your own profile paths for 'day_profile' and 'night_profile'\nday_profile=\"/Library/ColorSync/Profiles/Displays/Color LCD-12362588-7C1D-77EE-5963-4AEFA92D88E2.icc\"\nnight_profile=\"/System/Library/ColorSync/Profiles/AdobeRGB1998.icc\"\n#--------------------------------------------------------------------\nif [ \"$1\" == \"day\" ]\nthen\n\t$TOOL_PATH set \"$day_profile\"\n\texit\nelif [ \"$1\" == \"night\" ]\nthen\n\t$TOOL_PATH set \"$night_profile\"\n\texit\nfi \n#------- build manu --------------------------------\necho \"ICC\"\necho \"---\"\necho \"${var[*]##*/} | length=20\"\necho \"---\"\necho \"Day | bash='$0' param1=day color=white templateImage=\"iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHHSURBVEhL3dbPK2ZRHMfxp7ExfixmkCgMsvFrg4WykJpY+lOUmTE7LGTnV0q21iRJ2IlSShP+AEsL2VIyjXl/zu08HTPnuc7z3Oupx6dedc95uuebe+85X5lSSw1usWpGRUwPnnFiRkXMmxXuRlV06U1o4Q7otQSlC39wgVpNeFIN/T5tRv6M4xHHZhSQCmhR/UVxxeNii2qN75oIjYrZ4pua8OQzPkaXL9IIW3RGE/lGxXcwYUZRhrCNe2hhucY87JOpxD6+mVHClGEJtpjPHYaRapbhK/YvPYl+pBI9Xl+RXK7wAYmjd+orEGcMQfmEPof2qc0DfIvHWYBNK+y6vdD3ks0N3Bt/QamDOx9qC8oAdBi5v80imxWcO+yJpH3q3hRqA0o9DmHXPcUogqJ96ls8zk8kjg4H3+K5/EY7Esc2fV8RnzWklhGEfN16h2oyidMEnb2KtsMlfAWfsA7bNFrgayBBsa1t14yi6ETS4bAIdS19vVNw32kzdF9BLdXtp5OayCPlKKiftyGknw6iIbr8L24/39NESHTTGX6YkT9foBNJfTdXtM4B5swopby/f29fSydU+MiMihhtK314X82odJLJ/AWeXdquW1Zv2QAAAABJRU5ErkJggg==\" terminal=false\"\necho \"Night | bash='$0' param1=night color=gray image=\"iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAE0SURBVEhL7dY9S0JhGIfxI4VBg01RUxBNDVLUB/AL5Bq2VrS6NigivYD0AVyKxK9QS9gW2lBTey2t0hBkg0Vdt/HAQe7q2HluafCCH+hy/nA8Lwaj/mPLGP/6OJxWcIWL3rchlEABb/jAJsyT0RPIoDMP83YRHn2BefKbutPrPMK8JsKjog3TVtE/6kzArCNoo2IJZt1AGxVFmPUEbVTcQW4z741BGwzbgEmv0AadB0zBe/fQBsPOIWfHa2fQxvqdIglvbUMb0sgbaw5emoY8l7UhTQcVzCJ2+9BGfvKOFvawgzXkkEcNM/i1FKJcZFEdIHJpPEM70CAaGPgOyEDeStoBo7jEJP7UAq6hHfg7XRwi9h9DeT6v4xbakCNXeB2L8J7ct1so4xhVlJCFyaN0VMyC4BNzsdCubdoJYQAAAABJRU5ErkJggg==\"  terminal=false\"\n"
				}
			],
			"path": "System/Day-Night Color Profile Selector.15s.sh",
			"filename": "Day-Night Color Profile Selector.15s.sh",
			"dir": "System",
			"docsPlugin": "System/Day-Night Color Profile Selector.15s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Day/Night Color Profile Selector",
			"version": "v1.0",
			"author": "Nadav G",
			"authors": [
				{
					"name": "Nadav G",
					"githubUsername": "nadigo",
					"imageURL": "https://avatars.githubusercontent.com/u/6098053?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple menubar day/night icc selector",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash",
				"customdisplayprofiles"
			],
			"aboutURL": "https://github.com/nadigo/",
			"lastUpdated": "2021-03-08T15:22:02.15214Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/deleteVSCodeTemp.sh",
					"filename": "deleteVSCodeTemp.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eDelete VSCode Temp Files\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author.github\u003eAlexPoulsen\u003c/bitbar.author.github\u003e\n# \u003cbitbar.author\u003eAlexPoulsen\u003c/bitbar.author\u003e\n# \u003cbitbar.desc\u003eDeletes Visual Studio Code Temporary Files\u003c/bitbar.desc\u003e\n\nif [ \"$1\" = 'clean' ]; then\n  sudo find /Users/macbookpro/Documents/VSCode\\ Projects/ -name \"temp*\" -d -ok rm {} \\;\n  # shellcheck disable=SC2162\n  read -p \"Files are about to be deleted, continue? [Y/n] \" check\n  if [[ ( $check == \"Y\" ) || ( $check == \"y\" ) ]]; then\n    sudo find /Users/macbookpro/Documents/VSCode\\ Projects/ -name \"temp*\" -d -exec rm {} \\;\n    echo \"Deleted from default directory\"\n  else\n    echo \"Files not deleted\"\n  fi\nfi\n\necho \"🗑\"\necho '---'\necho \"Clean Temp Files | bash='$0' param1=clean terminal=true\""
				}
			],
			"path": "System/deleteVSCodeTemp.sh",
			"filename": "deleteVSCodeTemp.sh",
			"dir": "System",
			"docsPlugin": "System/deleteVSCodeTemp.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Delete VSCode Temp Files",
			"version": "v1.0",
			"author": "AlexPoulsen",
			"authors": [
				{
					"name": "Alix Poulsen",
					"githubUsername": "AlexPoulsen",
					"imageURL": "https://avatars.githubusercontent.com/u/9259671?v=4",
					"bio": "probably getting distracted ⚧",
					"primary": true
				}
			],
			"desc": "Deletes Visual Studio Code Temporary Files",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.121554Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/disk-read-write.1s.sh",
					"filename": "disk-read-write.1s.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eDisk Read Write\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ecghamburg\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecghamburg\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows Disk Read Write Speeds per second.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.dependencies\u003eiostat\u003c/bitbar.dependencies\u003e\n\n# BitBar Disk IO plugin\n\nSTAT=$(iostat -dc 2 disk0)\nRATE=$(echo \"$STAT\"| tail -n1 | rev | cut -d ' ' -f2 | rev)\nABSOLUTE_UNIT=$(echo \"$STAT\"| head -n2 | tail -n1 | rev | cut -d ' ' -f2 | rev)\necho \"🏃$RATE $ABSOLUTE_UNIT\";\necho \"---\";\necho \"$STAT\"\n"
				}
			],
			"path": "System/disk-read-write.1s.sh",
			"filename": "disk-read-write.1s.sh",
			"dir": "System",
			"docsPlugin": "System/disk-read-write.1s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Disk Read Write",
			"version": "v1.0",
			"author": "cghamburg",
			"authors": [
				{
					"name": "cghamburg",
					"githubUsername": "cghamburg",
					"imageURL": "https://avatars.githubusercontent.com/u/2742203?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows Disk Read Write Speeds per second.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"iostat"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.227399Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/mdf.1m.sh",
					"filename": "mdf.1m.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eDisk Usage\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eGanesh V\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eganeshv\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisk usage statistics\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.github.com/ganeshv/mtop/master/screenshots/mdf2.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.about\u003ehttps://github.com/ganeshv/mtop\u003c/bitbar.about\u003e\n\n# Bash builtins are used as much as possible to reduce performance impact.\n\n#!/usr/bin/env bash\n\n## bmplib.sh v1.0\n#\n# Make your own BMP from scratch, no external dependencies.\n# Useful in BitBar plugins.\n#\n# pixels=()             # set pixels to empty or with background of same size\n#                       # as will be declared in init_bmp\n# curcol=(bb 66 44 aa)  # set current color, BGRA, hex (%02x)\n# init_bmp 1 25 16      # initialize BMP, version 1 width 25 height 16\n#                       # if pixels not valid, initialize to $curcol\n# curcol=(00 00 00 ff)  # set current color to fully opaque black\n# point $x $y           # set ($x, $y) to $curcol. (0, 0) is bottom left\n# line $x1 $y1 $x2 $y2  # draw horizontal or vertical line\n# rect $x $y $w $h      # draw rectangle. ($x, $y) is bottom left\n# fill $x $y $w $h      # draw filled rectangle. ($x, $y) is bottom left\n# output_bmp            # output BMP to stdout\n\nbmp_ver=5               # set to 1 if you want most compatible BMP. no alpha.\nwidth=25                # width of image\nheight=16               # height of image\ncurcol=(00 00 00 00)    # current color\n\n# No user-servicable parts below\n# We avoid subshells for performance reasons\n\nbpp=4\nrowbytes=$((width * bpp))\npixbytes=$((width * height * bpp))\n\nOLDIFS=$IFS\nbmp_header=()\npixels=()\n\n# Takes number, prints hex bytes in little endian\n# e.g. hexle32 3142 will output 46 0c 00 00\nhexle32() {\n    local num\n    printf -v num \"%08x\" \"$1\"\n    retval=\"${num:6:2} ${num:4:2} ${num:2:2} ${num:0:2}\"\n}\n\nerrmsg() {\n    \u003e\u00262 echo \"$@\"\n}\n\n# make_bmp_header\n# version can be 1 or 5\n# v1 is the most compatible, but the graph will be opaque - no alpha support.\n# v5 supports alpha channel.\nmake_bmp_header() {\n    local headerbytes comp pixoffset filebytes _filebytes _pixoffset\n    local _headerbytes _width _height _pixbytes\n    bmp_header=()\n    headerbytes=40\n    comp=\"00\"\n    if [ \"$bmp_ver\" -eq 5 ]; then\n        headerbytes=124\n        comp=\"03\"\n    fi\n    pixoffset=$((headerbytes + 14))\n    filebytes=$((pixbytes + pixoffset))\n\n    hexle32 $filebytes\n    _filebytes=$retval\n    hexle32 $pixoffset\n    _pixoffset=$retval\n    hexle32 $headerbytes\n    _headerbytes=$retval\n    hexle32 $width\n    _width=$retval\n    hexle32 $height\n    _height=$retval\n    hexle32 $pixbytes\n    _pixbytes=$retval\n\n    # Common bits for version 1 and 5\n    bmp_header+=(\n        42 4d                   # \"BM\" magic\n        \"$_filebytes\"             # size of file\n        00 00                   # reserved\n        00 00                   # reserved\n        \"$_pixoffset\"             # offset of pixel data\n        \"$_headerbytes\"           # remaining bytes in header\n        \"$_width\"                 # width\n        \"$_height\"                # height\n        01 00                   # 1 color plane\n        20 00                   # 32 bits per pixel\n        \"$comp\" 00 00 00          # compression\n        \"$_pixbytes\"              # size of pixel data\n        13 0b 00 00             # ~72 dpi horizontal\n        13 0b 00 00             # ~72 dpi vertical\n        00 00 00 00             # colors in palette\n        00 00 00 00             # all colors are important\n    )\n    if [ \"$bmp_ver\" -eq 5 ]; then\n        bmp_header+=(\n            00 00 ff 00             # red channel mask (BGRA)\n            00 ff 00 00             # green channel mask\n            ff 00 00 00             # blue channel mask\n            00 00 00 ff             # alpha channel mask\n            42 47 52 73             # sRGB\n            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n            00 00 00 00             # red gamma\n            00 00 00 00             # green gamma\n            00 00 00 00             # blue gamma\n            00 00 00 00             # intent\n            00 00 00 00             # profile data\n            00 00 00 00             # profile size\n            00 00 00 00             # reserved\n        )\n    fi\n}\n\n# point x y\npoint() {\n    local off\n    off=$(($2 * rowbytes + $1 * bpp))\n    pixels[$off]=${curcol[0]}\n    pixels[$((off + 1))]=${curcol[1]}\n    pixels[$((off + 2))]=${curcol[2]}\n    pixels[$((off + 3))]=${curcol[3]}\n}\n\n# line x1 y1 x2 y2\nline() {\n    local x1 y1 x2 y2 x y\n    if [ \"$1\" -eq \"$3\" ]; then\n        if [ \"$2\" -gt \"$4\" ]; then y1=$4; y2=$2; else y1=$2; y2=$4; fi\n        for ((y = y1; y \u003c= y2; y++)); do\n            point \"$1\" $y\n        done\n    elif [ \"$2\" -eq \"$4\" ]; then\n        if [ \"$1\" -gt \"$3\" ]; then x1=$3; x2=$1; else x1=$1; x2=$3; fi\n        for ((x = x1; x \u003c= x2; x++)); do\n            point $x \"$2\"\n        done\n    else\n        errmsg \"Only vertical and horizontal lines supported\" \"$@\"\n    fi\n}\n\n# fill x y w h\nfunction fill() {\n    local x2 y2 y\n    x2=$(($1 + $3 - 1))\n    y2=$(($2 + $4 - 1))\n    for ((y = $2; y \u003c= y2; y++)); do\n        line \"$1\" $y $x2 $y\n    done\n}\n\n# rect x y w h\nfunction rect() {\n    local x2 y2\n    x2=$(($1 + $3 - 1))\n    y2=$(($2 + $4 - 1))\n    line \"$1\" \"$2\" $x2 \"$2\"\n    line \"$1\" $y2 $x2 $y2\n    line \"$1\" \"$2\" \"$1\" $y2\n    line $x2 \"$2\" $x2 $y2\n}\n\noutput_bmp() {\n    local _bmp=(\"${bmp_header[@]/#/'\\x'}\")\n    _bmp+=(\"${pixels[@]/#/'\\x'}\")\n\n    local IFS=''\n    #echo -ne \"${_bmp[*]}\" \u003e/tmp/mtop.bmp\n    echo -ne \"${_bmp[*]}\"\n    IFS=$OLDIFS\n}\n\n# init_bmp bmp_ver width height\ninit_bmp() {\n    local i\n    bmp_ver=${1:-$bmp_ver}\n    width=${2:-$width}\n    height=${3:-$height}\n\n    rowbytes=$((width * bpp))\n    pixbytes=$((width * height * bpp))\n\n    make_bmp_header\n    if [ ${#pixels[@]} -ne $pixbytes ]; then\n        pixels=()\n        for ((i = 0; i \u003c width * height; i++)); do\n            pixels+=(\"${curcol[@]}\");\n        done\n    fi\n}\n\n## End of bmplib.sh\n# Common functions and globals for m* plugins\n# Assumes bmplib.sh already loaded\n\nosver=$(sw_vers -productVersion)\n\n# Colors in BGRA format\nfgcol=(00 00 00 ff)\nfgcol_alert=(00 00 00 88)  # semi-transparent.\nbgcol=(00 00 00 00)\nbmp_ver=5\nicontype=templateImage\n\nif [[ $osver == 10.8.* ]]; then\n    bmp_ver=1\n    bgcol=(d0 d0 d0 7f)\n    icontype=image\nfi\n\n# return the alert colour if alert condition is met.\n# else return foreground colour.\n# alert condition: free capacity \u003c 2%. \ndetermine_col() {\n  if (( $1 \u003c 98 )); then\n  \tretval=(\"${fgcol[@]}\")\n  else\n  \tretval=(\"${fgcol_alert[@]}\")\n  fi\n}\n\n# Routines to draw simple progress-bar-like buckets for showing\n# capacity of disks, batteries etc.\n\ninit_bar() {\n    pixels=()\n    curcol=(\"${bgcol[@]}\")\n    init_bmp $bmp_ver \"$1\" \"$2\"\n    determine_col \"$root_capacity\"; col=(\"${retval[@]}\")\n    curcol=(\"${col[@]}\")\n    rect 0 0 \"$1\" \"$2\"\n}\n\n# Horizontal bar\n# hbar width height capacity\nhbar() {\n    local w=$((($1 - 4) * $3 / 100))\n    init_bar \"$1\" \"$2\"\n    fill 2 2 $w $(($2 - 4))\n}\n\n\n# Vertical bar\n# vbar width height capacity\nvbar() {\n    local h=$((($2 - 4) * $3 / 100))\n    init_bar \"$1\" \"$2\"\n    fill 2 2 $(($1 - 4)) $h\n}\n\nOLDIFS=$IFS\n\ndisk=()\nused=()\nfree=()\ncapacity=()\nroot_capacity=0\n\nget_disk_stats() {\n    local IFS=$'\\n'\n    local i dfdata dudata diskname\n\n    dfdata=(\"$(df -H)\")\n\n    IFS=$OLDIFS\n    for ((i = 0; i \u003c \"${#dfdata[@]}\"; i++)); do\n        line=(\"${dfdata[$i]}\")\n        if [ \"${line[8]}\" = \"/\" ]; then\n            root_capacity=\"${line[4]/\\%}\"            \n        fi\n        if [[ \"${line[0]}\" == /dev/* ]]; then\n            dudata=(\"$(diskutil info \"${line[0]}\" | grep \"Volume Name\")\")\n            diskname=\"${dudata[*]:2}\"\n            disk+=(\"${diskname:-Untitled}\")\n            used+=(\"${line[2]}\")\n            free+=(\"${line[3]}\")\n            capacity+=(\"${line[4]/\\%}\")\n        fi\n    done\n}\n\nif [ \"$1\" = 'disk_utility' ]; then\n    osascript \u003c\u003c END\n    tell application \"Disk Utility\"\n        reopen\n        activate\n    end tell\nEND\n    exit 0\nelif [ \"$1\" = 'perf' ]; then\n    PERF=1\nfi\n\n[ -z \"$PERF\" ] \u0026\u0026 get_disk_stats\n\nvbar 10 16 \"$root_capacity\"\n\necho -n \"| $icontype=\"\noutput_bmp | base64\necho \"---\"\nfor ((i = 0; i \u003c ${#capacity[@]}; i++)); do\n    echo \"Disk   ${disk[$i]} | size=12 refresh=true font=Menlo\"\n    echo \"Used   ${used[$i]}| size=12 refresh=true font=Menlo\"\n    echo \"Free   ${free[$i]}| size=12 refresh=true font=Menlo\"\n    hbar 128 10 \"${capacity[$i]}\"\n    echo -n \"| refresh=true $icontype=\"\n    output_bmp | base64\n    echo \"---\"\ndone\necho \"Open Disk Utility | bash='$0' param1=disk_utility terminal=false\"\n"
				}
			],
			"path": "System/mdf.1m.sh",
			"filename": "mdf.1m.sh",
			"dir": "System",
			"docsPlugin": "System/mdf.1m.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Disk Usage",
			"version": "v1.0",
			"author": "Ganesh V",
			"authors": [
				{
					"name": "Ganesh V",
					"githubUsername": "ganeshv",
					"imageURL": "https://avatars.githubusercontent.com/u/827790?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Disk usage statistics",
			"imageURL": "https://raw.github.com/ganeshv/mtop/master/screenshots/mdf2.jpg",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.966497Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/diskAvailable.sh",
					"filename": "diskAvailable.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eDiskAvailable\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKalak Lanar\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekalaklanar\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003edisplays free disk space of the root volume\u003c/bitbar.desc\u003e\n# \u003cbitbar.\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\n#diskutil will report the same as in the Finder (purgable space counted as free)\n#df will report what is actually on the disk\n\nDEVICE=$(/bin/df -h |/usr/bin/awk '$9 ~ /^\\/$/{print $1}')\n/usr/sbin/diskutil info \"$DEVICE\" |/usr/bin/awk '$0 ~ /Volume Free Space/ {print $4$5}'\n\n#/bin/df -h / | awk '{print $4}' |grep -v 'Avail'\n"
				}
			],
			"path": "System/diskAvailable.sh",
			"filename": "diskAvailable.sh",
			"dir": "System",
			"docsPlugin": "System/diskAvailable.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "DiskAvailable",
			"version": "v1.0",
			"author": "Kalak Lanar",
			"authors": [
				{
					"name": "Jackie Meese",
					"githubUsername": "kalaklanar",
					"imageURL": "https://avatars.githubusercontent.com/u/607221?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "displays free disk space of the root volume",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.288103Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/DoNotDisturb.1s.py",
					"filename": "DoNotDisturb.1s.py",
					"content": "#!/usr/bin/env LC_ALL=en_US.UTF-8 /usr/local/bin/python3\n# \u003cbitbar.title\u003eDo Not Disturb\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eWeibing Chen\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eweibingchen17\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttp://i67.tinypic.com/20ac9kl.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eTurn on \"Do Not Distrub\" for certain period. Only for Sierra and High Sierra.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython3\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \nimport os,sys\nimport datetime\n\ndef idle():\n    print(':bell:')\n    print(\"---\")\n    print(\"01 min | trim=false, color=blue bash=\" + fullPathFileName +  \" param1=1 terminal=false refresh=true\")\n    print(\"05 min | trim=false, color=blue bash=\" + fullPathFileName +  \" param1=5 terminal=false refresh=true\")\n    print(\"10 min | trim=false, color=blue bash=\" + fullPathFileName +  \" param1=10 terminal=false refresh=true\")\n    print(\"30 min | trim=false, color=blue bash=\" + fullPathFileName +  \" param1=30 terminal=false refresh=true\")\n    print(\"60 min | trim=false, color=blue bash=\" + fullPathFileName +  \" param1=60 terminal=false refresh=true\")\n    print(\"Custom | trim=false, color=blue bash=\" + fullPathFileName +  \" param1=set terminal=false refresh=true\")\n\ndef touch(a_file):\n    with open(a_file, 'a'):\n        os.utime(a_file, None)\n\ndef setATime(a_time):\n    touch(lockFile)\n    with open(setFile, 'w') as f:\n        f.write(a_time)\n    triggerDND()\n\ndef cancel():\n    triggerDND()\n    if os.path.isfile(setFile):\n        os.remove(setFile)\n    idle()\n\ndef alert():\n    cancel()\n    for _ in range(10):\n        os.system('afplay /System/Library/Sounds/Tink.aiff')\n\ndef triggerDND():\n    # Here is why only Sierra and High Sierra is supported: menu bar 1 is used\n    TriggerDND = '''osascript -e 'tell application \"System Events\"\n\ttell application process \"SystemUIServer\"\n\t\ttry\n\t\t\tif exists menu bar item \"Notification Center, Do Not Disturb enabled\" of menu bar 1 then\n\t\t\t\tkey down option\n\t\t\t\tclick menu bar item \"Notification Center, Do Not Disturb enabled\" of menu bar 1\n\t\t\t\tkey up option\n\t\t\telse\n\t\t\t\tkey down option\n\t\t\t\tclick menu bar item \"Notification Center\" of menu bar 1\n\t\t\t\tkey up option\n\t\t\tend if\n\t\ton error\n\t\t\tkey up option\n\t\tend try\n\tend tell\nend tell' 2\u003e/dev/null\n'''\n    os.popen(TriggerDND)\n\nlockFile = '/tmp/DoNotDisturb.lock'\nsetFile = '/tmp/DoNotDisturb.set'\nfullPathFileName = os.path.realpath(__file__)\n\nif len(sys.argv) == 1:\n    # No new \"Do Not Disturb\" is requested \n    if not os.path.isfile(setFile):\n        idle()\n    else:\n        with open(setFile, 'r') as f:\n            setTime = int(f.read())\n        timestamp = datetime.datetime.fromtimestamp(os.path.getmtime(lockFile))\n        td = setTime - (datetime.datetime.now() - timestamp).total_seconds()\n        if td \u003c= 0: \n            alert()\n        else:\n            print(':no_bell: Do Not Disturb')\n            print(\"---\")\n            minute, second = divmod(td, 60)\n            if minute \u003c 60:\n                print(str(int(minute)) + ':' + '{0:02d}'.format(int(second)))\n            else:\n                hour, minute = divmod(minute, 60)\n                print(str(int(hour)) + ':' + '{0:02d}'.format(int(minute)) + ':' + '{0:02d}'.format(int(second)))\n            print(\"Cancel | color=red bash=\" + os.path.realpath(__file__) +  \" param1=cancel terminal=false refresh=true\")\nelse:\n    # A new \"Do Not Disturb\" is requested\n    if sys.argv[1].isdigit():\n        # Use preset period\n        setATime(str(int(sys.argv[1]) * 60))\n    else:\n        # Use custom period\n        if sys.argv[1] == 'cancel':\n            cancel()\n        elif sys.argv[1] == 'set':\n            line = '''osascript -e 'Tell application \"System Events\" to display dialog \"How many minutes of freeing yourself from the world? or [hh:]mm:ss \" default answer \"\"' -e 'text returned of result' 2\u003e/dev/null '''\n            a_time = os.popen(line).read().strip()\n            if ':' not in a_time:\n                if a_time.isdigit() and int(a_time) \u003e 0:\n                    setATime(str(int(a_time) * 60))\n            else:\n                try: \n                    hms = [int(i) for i in a_time.split(':')]\n                    if len(hms) == 2 and 0 \u003c= hms[0] \u003c 60 and 0 \u003c= hms[1] \u003c 60:\n                        setATime(str(hms[0] * 60 + hms[1]))\n                    if len(hms) == 3 and 0 \u003c= hms[1] \u003c 60 and 0 \u003c= hms[2] \u003c 60:\n                        setATime(str(hms[0] * 60 * 60 + hms[1] * 60  + hms[2]))\n                except:\n                    line = '''osascript -e 'tell application \"System Events\" to display dialog \"Wrong input format\" ' 2\u003e/dev/null '''\n                    os.popen(line)\n"
				}
			],
			"path": "System/DoNotDisturb.1s.py",
			"filename": "DoNotDisturb.1s.py",
			"dir": "System",
			"docsPlugin": "System/DoNotDisturb.1s.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Do Not Disturb",
			"version": "v1.0",
			"author": "Weibing Chen",
			"authors": [
				{
					"name": "Weibing Chen",
					"githubUsername": "weibingchen17",
					"imageURL": "https://avatars.githubusercontent.com/u/25602873?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Turn on \"Do Not Distrub\" for certain period. Only for Sierra and High Sierra.",
			"imageURL": "http://i67.tinypic.com/20ac9kl.png",
			"dependencies": [
				"python3"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.204345Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/downloads.1h.sh",
					"filename": "downloads.1h.sh",
					"content": "#!/bin/bash\n\nDOWNLOADS_DIR=\"$HOME/Downloads\"\n\n# \u003cbitbar.title\u003eDownloads\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eiosdeveloper\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eiosdeveloper\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eQuick access to your recent downloads. Enter URL to download from. Specify downloads directory at the top of the file. Defaults to ~/Downloads. Contains example of how to refresh from the command line (see https://github.com/matryer/bitbar/blob/master/Docs/URLScheme.md#refreshplugin)\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/Cv4iS3d.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/System/downloads.1h.sh\u003c/bitbar.abouturl\u003e\n\nFILENAME=$(basename \"$0\")\nDOWNLOADS=$(ls -t \"$DOWNLOADS_DIR\")\n\necho \"Downloads\"\necho \"---\"\necho \"Download from URL… | bash='read -p Enter_URL: url \u0026\u0026 ( cd $DOWNLOADS_DIR \u0026\u0026 curl -L -# -O \\$url ); open' param1=bitbar://refreshPlugin?name=$FILENAME\"\necho \"---\"\necho \"$DOWNLOADS\" | awk -v DOWNLOADS_DIR=\"$DOWNLOADS_DIR\" '{print $0\" | bash=/usr/bin/open param1=\"DOWNLOADS_DIR\"/\"$0\" terminal=false\"}'\n"
				}
			],
			"path": "System/downloads.1h.sh",
			"filename": "downloads.1h.sh",
			"dir": "System",
			"docsPlugin": "System/downloads.1h.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Downloads",
			"version": "v1.0",
			"author": "iosdeveloper",
			"authors": [
				{
					"name": "iosdeveloper",
					"githubUsername": "iosdeveloper",
					"imageURL": "https://avatars.githubusercontent.com/u/655921?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Quick access to your recent downloads. Enter URL to download from. Specify downloads directory at the top of the file. Defaults to ~/Downloads. Contains example of how to refresh from the command line (see https://github.com/matryer/bitbar/blob/master/Docs/URLScheme.md#refreshplugin)",
			"imageURL": "http://i.imgur.com/Cv4iS3d.png",
			"dependencies": null,
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/System/downloads.1h.sh",
			"lastUpdated": "2021-03-08T15:22:03.284141Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/ejector.5s.sh",
					"filename": "ejector.5s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eEjector\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eCarlson Orozco \u0026\u0026 Brian Hartvigsen \u0026\u0026 Matt Sephton\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecarlsonorozco\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eEjector is a plugin for BitBar that enables you to eject all mounted disk / drive / installers / USB connected drives and volumes instantly.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/carlsonorozco/ejector/master/image.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/carlsonorozco/ejector\u003c/bitbar.abouturl\u003e\n\ndrives=( $(df -Hl | grep /Volumes/ | grep -v \"/System/Volumes/Data\" | grep -v \"/Volumes/Recovery\" | sed 's/.*\\/Volumes\\/*//') )\n\nIFS=$'**********'\nfor details in $( diskutil info -all ); do\n    drives+=( $(echo \"$details\" | grep -A1000 \"Device Node\" | grep -B1000 \"Mounted:[[:space:]]*No$\" | grep \"Volume Name\" | grep -v \"EFI\\|Preboot\\|Recovery\" | awk '{print $3}') )\ndone\n\nif [ \"$1\" = 'eject' ]; then\n    status=$(diskutil eject \"$2\" | sed -e 's/\\/Volumes\\///g')\n    if [ \"$status\" = \"\" ]; then\n        osascript -e \"display notification \\\"Disk $2 failed to eject\\\" with title \\\"Ejector\\\"\"\n    else\n        osascript -e \"display notification \\\"$status\\\" with title \\\"Ejector\\\"\"\n    fi\n\n    exit\nfi\n\nif [ \"$1\" = 'mount' ]; then\n    status=$(diskutil mount \"$2\")\n    if [ \"$status\" = \"\" ]; then\n        osascript -e \"display notification \\\"Disk $2 failed to mount\\\" with title \\\"Ejector\\\"\"\n    else\n        osascript -e \"display notification \\\"$status\\\" with title \\\"Ejector\\\"\"\n    fi\n\n    exit\nfi\n\nif [ \"$1\" = 'unmount' ]; then\n    status=$(diskutil unmount \"$2\")\n    if [ \"$status\" = \"\" ]; then\n        osascript -e \"display notification \\\"Disk $2 failed to unmount\\\" with title \\\"Ejector\\\"\"\n    else\n        osascript -e \"display notification \\\"$status\\\" with title \\\"Ejector\\\"\"\n    fi\n\n    exit\nfi\n\nif [ \"$1\" = 'ejectall' ]; then\n    if [ -z \"$2\" ]; then\n        osascript -e '\n        try\n            tell application \"Finder\"\n                eject the disks\n                display notification \"Successfully ejected disks.\" with title \"Ejector\"\n            end tell\n        on error\n            display notification \"Unable to eject all disks.\" with title \"Ejector\"\n        end try'\n\n        exit\n    fi\n\n    protocol_type=$2\n    protocol_type=\"${protocol_type/dmgs/Disk Image}\"\n    protocol_type=\"${protocol_type/usbs/USB}\"\n\n    IFS=$'**********'\n    for details in $( diskutil info -all ); do\n        name=$(echo \"$details\" | grep \"Volume Name:\" | sed 's/.*Volume Name:[[:space:]]*//')\n        ! [[ ${drives[*]} =~ $name ]] \u0026\u0026 continue\n        protocol=$(echo \"$details\" | grep \"Protocol:\" | sed 's/.*Protocol:[[:space:]]*//')\n        mount_point=$(echo \"$details\" | grep \"Mount Point:\" | sed 's/.*Mount Point:[[:space:]]*//')\n        [[ \"$protocol_type\" = \"$protocol\" ]] \u0026\u0026 ./\"$0\" eject \"$mount_point\"\n    done\n    exit\nfi\n\ntotal_dmg=0\ntotal_usb=0\n\nif [ ${#drives[@]} = 0 ]; then\n    echo \"⏏ | color=gray\"\n    exit\nfi\n\necho \"⏏\"\necho '---'\n\nIFS=$'**********'\nfor details in $( diskutil info -all ); do\n    name=$(echo \"$details\" | grep \"Volume Name:\" | sed 's/.*Volume Name:[[:space:]]*//')\n    ! [[ ${drives[*]} =~ $name ]] \u0026\u0026 continue\n\n    device_node=$(echo \"$details\" | grep \"Device Node:\" | sed 's/.*Device Node:[[:space:]]*//')\n    mount_point=$(echo \"$details\" | grep \"Mount Point:\" | sed 's/.*Mount Point:[[:space:]]*//')\n    free_space=$(echo \"$details\" | grep -E \"Volume (Available|Free) Space:\" | sed 's/.*Volume Free Space:[[:space:]]*//;s/.*Volume Available Space:[[:space:]]*//' | cut -d ' ' -f -2)\n    total_size=$(echo \"$details\" | grep -E \"(Disk|Total) Size:\" | sed 's/.*Total Size:[[:space:]]*//;s/.*Disk Size:[[:space:]]*//' | cut -d ' ' -f -2)\n    protocol=$(echo \"$details\" | grep \"Protocol:\" | sed 's/.*Protocol:[[:space:]]*//')\n\n    [[ $protocol = 'Disk Image' ]] \u0026\u0026 ((total_dmg++))\n    [[ $protocol = 'USB' ]] \u0026\u0026 ((total_usb++))\n\n    if [ \"$mount_point\" != '' ]; then\n        echo \"$name | bash='$0' param1=eject param2='$mount_point' terminal=false\"\n        echo \"$name [unmount] | alternate=true bash='$0' param1=unmount param2='$mount_point' terminal=false\"\n        echo \"├─ Available: $free_space\"\n        echo \"└─ Capacity: $total_size\"\n    else\n        echo \"$name | bash='$0' param1=mount param2=$device_node terminal=false\"\n        echo \"└─ Unmounted: $device_node\"\n    fi\ndone\n\nif [ ${#drives[@]} -ge 2 ]; then\n    echo '---'\n    [ $((total_dmg)) -ge 2 ] \u0026\u0026 echo \"Eject All Disk Images | color=red bash='$0' param1=ejectall param2=dmgs terminal=false\"\n    [ $((total_usb)) -ge 2 ] \u0026\u0026 echo \"Eject All Physical Volumes | color=red bash='$0' param1=ejectall param2=usbs terminal=false\"\n    echo \"Eject All | color=red bash='$0' param1=ejectall terminal=false\"\nfi\n"
				}
			],
			"path": "System/ejector.5s.sh",
			"filename": "ejector.5s.sh",
			"dir": "System",
			"docsPlugin": "System/ejector.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Ejector",
			"version": "v1.2",
			"author": "Carlson Orozco \u0026\u0026 Brian Hartvigsen \u0026\u0026 Matt Sephton",
			"authors": [
				{
					"name": "Carlson Orozco",
					"githubUsername": "carlsonorozco",
					"imageURL": "https://avatars.githubusercontent.com/u/2333279?v=4",
					"bio": "Christianprenuer • Running Makinilya.com • Dad",
					"primary": true
				}
			],
			"desc": "Ejector is a plugin for BitBar that enables you to eject all mounted disk / drive / installers / USB connected drives and volumes instantly.",
			"imageURL": "https://raw.githubusercontent.com/carlsonorozco/ejector/master/image.png",
			"dependencies": null,
			"aboutURL": "https://github.com/carlsonorozco/ejector",
			"lastUpdated": "2021-03-08T15:22:03.293061Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/emacs.24h.sh",
					"filename": "emacs.24h.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eEmacs Menu Controller\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKen Mankoff\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emankoff\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eEmacs controlled\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/ZTScWDa.png\u003c/bitbar.image\u003e\n\nPATH=/usr/local/bin:$PATH  # where is emacsclient?\n\ncase \"$1\" in\n    \"email\")\n\topen -a Emacs    # bring to front\n\temacsclient -e '(mu4e-compose-new)'\n\texit\n\t;;\n    \"buffer\")\n\topen -a Emacs\n\temacsclient -e '(progn (select-frame (make-frame))(switch-to-buffer (get-buffer-create \"*scratch*\")) (set-frame-size (selected-frame) 92 72)(set-frame-position (selected-frame) 840 0))'\n\texit\n\t;;\nesac\n\necho '🦄'\necho \"---\";\necho \"📬 Email | bash=\\\"$0\\\" param1=email terminal=false\"\necho \"📠 *scratch* Buffer | bash=\\\"$0\\\" param1=buffer terminal=false\"\n"
				}
			],
			"path": "System/emacs.24h.sh",
			"filename": "emacs.24h.sh",
			"dir": "System",
			"docsPlugin": "System/emacs.24h.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Emacs Menu Controller",
			"version": "v0.1",
			"author": "Ken Mankoff",
			"authors": [
				{
					"name": "Ken Mankoff",
					"githubUsername": "mankoff",
					"imageURL": "https://avatars.githubusercontent.com/u/145117?v=4",
					"bio": "Research scientist studying ice sheets and polar oceans as indicators of climate change. Advocate of open reproducible science.",
					"primary": true
				}
			],
			"desc": "Emacs controlled",
			"imageURL": "http://i.imgur.com/ZTScWDa.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.395155Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/fan-speed.5s.sh",
					"filename": "fan-speed.5s.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eFan Speed\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Ripa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeripa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays the current fan speed from SMC readings (requires external 'smc' binary)\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003esmc\u003c/bitbar.dependencies\u003e\n#\n# 'smc' can be downloaded from: http://www.eidac.de/smcfancontrol/smcfancontrol_2_4.zip\n# One-liner:\n# curl -LO http://www.eidac.de/smcfancontrol/smcfancontrol_2_4.zip \u0026\u0026 unzip -d temp_dir_smc smcfancontrol_2_4.zip \u0026\u0026 cp temp_dir_smc/smcFanControl.app/Contents/Resources/smc /usr/local/bin/smc ; rm -rf temp_dir_smc smcfancontrol_2_4.zip\n\ndeclare -i FANS # number of fans with smc -k FNum -r\ndeclare -a FAN_LABEL # list available fans with smc -f\nFANS=$(/usr/local/bin/smc -k FNum -r | awk '{ printf \"%d\\n\", $4}')\n# FAN_LABEL=(\"CPU\" \"ODD\" \"HDD\") # Uncomment to add label, must 1-to-1 map the above array\nFAN_SPEEDS=\"♨︎ \" # Set your own prefix\n\nfor ((i = 0; i \u003c FANS; i++)) ; do\n  FAN_SPEED=$(/usr/local/bin/smc -k F${i}Ac -r | awk '{ printf \"%s\\n\", $3}' | grep '^[0-9]*[.][0-9]*$' | awk '{ printf \"%d\\n\", $1}')\n  if [ \"$FAN_SPEED\" != \"\" ] ; then\n    if [ -n \"${FAN_LABEL+x}\" ]; then\n       # Add labels if FAN_LABEL is declared\n       FAN_SPEEDS=\"$FAN_SPEEDS${FAN_LABEL[$i]}: \"\n    fi\n    FAN_SPEEDS=\"$FAN_SPEEDS$FAN_SPEED rpm \"\n  fi\ndone\necho \"$FAN_SPEEDS| size=12\"\n"
				}
			],
			"path": "System/fan-speed.5s.sh",
			"filename": "fan-speed.5s.sh",
			"dir": "System",
			"docsPlugin": "System/fan-speed.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Fan Speed",
			"version": "v1.0",
			"author": "Eric Ripa",
			"authors": [
				{
					"name": "Eric Ripa",
					"githubUsername": "eripa",
					"imageURL": "https://avatars.githubusercontent.com/u/1429673?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin displays the current fan speed from SMC readings (requires external 'smc' binary)",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"smc"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.46394Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/firewall.10m.sh",
					"filename": "firewall.10m.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eFirewall\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEddie A Tejeda\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeddietejeda\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays the status of the firewall.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/MOBK8cK.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\nenabled=$(/usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate);\n\nif [[ $enabled == *\"enabled\"* ]]\nthen\n  echo '☵'  \nelse\n  echo '❌'\nfi\n\necho '---'\necho \"👁 $(/usr/libexec/ApplicationFirewall/socketfilterfw --getstealthmode)\"\n"
				}
			],
			"path": "System/firewall.10m.sh",
			"filename": "firewall.10m.sh",
			"dir": "System",
			"docsPlugin": "System/firewall.10m.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Firewall",
			"version": "v1.0",
			"author": "Eddie A Tejeda",
			"authors": [
				{
					"name": "Eddie A Tejeda",
					"githubUsername": "eddietejeda",
					"imageURL": "https://avatars.githubusercontent.com/u/669988?v=4",
					"bio": "Currently @navahq , formerly: @codeforamerica @18F @cloud-gov",
					"primary": true
				}
			],
			"desc": "This plugin displays the status of the firewall.",
			"imageURL": "http://i.imgur.com/MOBK8cK.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.505198Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/firewall_status_indicator.10s.sh",
					"filename": "firewall_status_indicator.10s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eFirewall Status Indicator\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMiles Wolbe\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etinyapps\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay status of the built-in Application Firewall\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://tinyapps.org/screenshots/bitbar_firewall_status_indicator.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://tinyapps.org/blog/mac/201709100715_mac_firewall_status.html/\u003c/bitbar.abouturl\u003e\n\nstate=$(defaults read \"/Library/Preferences/com.apple.alf\" globalstate)\n\nif [ \"$state\" -eq 2 ]; then\n  echo \"🔒\"\nelif [ \"$state\" -eq 1 ]; then\n  echo \"❗️\"\nelse\n  echo \"‼️\"\nfi\n\necho \"---\"\necho \"Open Firewall preference pane| href='x-apple.systempreferences:com.apple.preference.security?Firewall'\"\n"
				}
			],
			"path": "System/firewall_status_indicator.10s.sh",
			"filename": "firewall_status_indicator.10s.sh",
			"dir": "System",
			"docsPlugin": "System/firewall_status_indicator.10s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Firewall Status Indicator",
			"version": "v1.0",
			"author": "Miles Wolbe",
			"authors": [
				{
					"name": "Miles Wolbe",
					"githubUsername": "tinyapps",
					"imageURL": "https://avatars.githubusercontent.com/u/1616368?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display status of the built-in Application Firewall",
			"imageURL": "https://tinyapps.org/screenshots/bitbar_firewall_status_indicator.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://tinyapps.org/blog/mac/201709100715_mac_firewall_status.html/",
			"lastUpdated": "2021-03-08T15:22:03.498121Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/HandoffToggle.1d.sh",
					"filename": "HandoffToggle.1d.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eHandoff Toggle\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMartin Schilliger\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emartinschilliger\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSimple toggle for macOS Handoff. Great if there is someone using your second Mac or iPad and you don't wanna paste everything the other person copies.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/leZPz8Y.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/martinschilliger/\u003c/bitbar.abouturl\u003e\n\n#UUID=$(/usr/sbin/system_profiler SPHardwareDataType | grep \"Hardware UUID\" | cut -c22-57)\n#PREF_FILE=\"${HOME}/Library/Preferences/ByHost/com.apple.coreservices.useractivityd.${UUID}.plist\"\nPREF_FILE=\"${HOME}/Library/Preferences/ByHost/com.apple.coreservices.useractivityd.plist\"\n\nICON_ENABLED=\"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAB70lEQVR4AWJwL/ABtFsOMHfDURSft2iOjdnlvMUv1oJ5wWej/Z5ZjcEQc2YwxWOcOZoRzIid7Jzx2Uza5Jde9d7zbvuSf0NxBbgCXAEpjizLayRJega+i6L4pZqwJ3sLgrA6n4BD4BMeOAcuVJlz7M0ZOQVA4TEUnK/VutmbM/Jt4CgKLtVKAHtzRkUCcE1AnYSVbgbrCW1VVUXmai4Aw7agxgAnFEW5T2CfBAnmai6Ag0ZGRoKGYeyJRCKdhPbo6GgAAuL12ICpaZrtOE5XMrqum8hF67GBvV6vdx+uvmR8Pp/DXD02sJ+/FkM7ksFWDOT21UNAdGhoKGzb9q5k+F0gF6vHK/APDg6GLMvamczw8HCA4uqxgUBTCmCsLAGbNm2ahgcn/xFwBFws0MSXSwBykXzPsjdn0F68ePEUj8czlUEJ10GIuA4+wP6B+23c74I7hD64BZvx1z09PSY+vB3JMIaad6xhbRZu/un9AVyBncDs+X/XOhfORgR3wu7nh8ZV/yEIP0xQExUE4Ulvb28sXUBfX18UtTxL2MCBve8v8A32Ab1gG88duM8o60TE94y/nC9dAGPIWTU/kkF9f3t7+zFd14c1TRshtBnj9mouYNmyZbN4wlEU5TNW+xa8ps3YihUrZrqn4pYT4Ar4CW6NezCnH1ZyAAAAAElFTkSuQmCC\";\nICON_DISABLED=\"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAB9ElEQVR4Ae2Wg69cYRDFa4a1bQe1bdtuVDtYe/eytsK6caPun7b9nfLZ3z7dJCffeM7MZZeNV7e1KgICAYFKSkAgm82Oyufzl3K53B3k2y0J1VRt9aiVgGVZGwuFwq1MJrOfwAMtCdVUbfWolQABW23b3m9q3aqtHrUSIGALqzoo2QRUWz2aRaBUKnXlWk5krTNTqdQ0QbLjOBPkM06AZotY4yFwmaZ5gZwr2A/JZ54AjRKJxFhNS3xfQTK20el0+qBxAvgPc0dPqGrHNk53u3ECNDpWGwH5jBNgzce5Cecx7bK/NvQN3BPjOc0T0Jq1Ac4vuvOJV064bJeAJnv+EBgFvgnFYrFH2Qn8KfgdPSW57ASIOwMuoL8jby6P4fgmEYhEIj1Atz8BW7iZ6izCjbZbNyCxH6X7vj8Y/YfrulPx7a8rV7XVQ/L+/fu7f/jwobuajtBdzHmUQjfBXXCaKc/o/AtiTv2xP+GcXrW4bPhe/I2tCnzKV231OEK/1TxRA5WsLfSD3VgC52BciHP5X5C4gnOlQMwqkh8gT65hvZPxPbcsay111iGv/wvy1qhOMplcgD4bjGJzvZv0R6TrrFdxVbtsmsz4L9mf5345Uw5jouGCZE3I9rYYJ8A6+0Pghud5L2n8GDyULJt8wV9xQKDdEfgJKdr5nu4nT60AAAAASUVORK5CYII=\";\n\nfunction get_handoff_state {\n    state=$(defaults read \"${PREF_FILE}\" ActivityAdvertisingAllowed)\n}\n\nfunction toggle_handoff {\n    defaults write \"${PREF_FILE}\" ActivityAdvertisingAllowed \"$1\"\n    defaults write \"${PREF_FILE}\" ActivityReceivingAllowed \"$1\"\n}\n\nif [[ \"$1\" = \"enable\" ]]; then\n    toggle_handoff 1;\n    exit\nfi\n\nif [[ \"$1\" = \"disable\" ]]; then\n    toggle_handoff 0;\n    exit\nfi\n\nget_handoff_state;\nif [ \"$state\" = 1 ]; then\n    echo \"| templateImage=${ICON_ENABLED}\";\n    echo \"---\"\n    echo \"Deactivate Handoff| bash='$0' param1=disable terminal=false refresh=true emojize=false\"\n    exit\nelse\n    echo \"| templateImage=${ICON_DISABLED}\";\n    echo \"---\"\n    echo \"Activate Handoff| bash='$0' param1=enable terminal=false refresh=true emojize=false\"\n    exit\nfi\n\n"
				}
			],
			"path": "System/HandoffToggle.1d.sh",
			"filename": "HandoffToggle.1d.sh",
			"dir": "System",
			"docsPlugin": "System/HandoffToggle.1d.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Handoff Toggle",
			"version": "v1.1",
			"author": "Martin Schilliger",
			"authors": [
				{
					"name": "Martin Schilliger",
					"githubUsername": "martinschilliger",
					"imageURL": "https://avatars.githubusercontent.com/u/11884891?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple toggle for macOS Handoff. Great if there is someone using your second Mac or iPad and you don't wanna paste everything the other person copies.",
			"imageURL": "https://i.imgur.com/leZPz8Y.jpg",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/martinschilliger/",
			"lastUpdated": "2021-03-08T15:22:02.228845Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/host-switcher.1d.sh",
					"filename": "host-switcher.1d.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eHost file switcher\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author.github\u003ecanemacchina\u003c/bitbar.author.github\u003e\n# \u003cbitbar.author\u003eLorenzo Bugiani\u003c/bitbar.author\u003e\n# \u003cbitbar.desc\u003eSimple plugin to switch between multiple hosts files\u003c/bitbar.desc\u003e\n\nHOSTS_LOCATION=\"\"\n\nflushcache(){\n\tkillall -HUP mDNSResponder \u0026\u003e/dev/null\n\tsudo killall mDNSResponderHelper \u0026\u003e/dev/null\n\tsudo dscacheutil -flushcache \u0026\u003e/dev/null\n}\n\nif [ -z \"$HOSTS_LOCATION\" ]; then\n\tABSOLUTE_PATH=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" \u0026\u0026 pwd)/$(basename \"${BASH_SOURCE[0]}\")\"\n\techo \":warning: Click and readme! | color=red\"\n\techo \"---\"\n\techo \"You have to configure hostSwitcher. | color=red\"\n\techo \"Please open the script and fill correcty HOSTS_LOCATION variable. | color=red\"\n\techo \"Open ${BASH_SOURCE[0]}| color=blue terminal=false bash=/usr/bin/open param1=$ABSOLUTE_PATH\"\nelse\n\tCOMMAND=$1\n\tHOST_FILE=$2\n\tif [ ! -z \"$COMMAND\" ]; then\n\t\tcase $COMMAND in\n\t\t\t\"switch\")\n\t\t\t\tif [ ! -z \"$HOST_FILE\" ]; then\n\t\t\t\t\t/usr/bin/osascript -e \"do shell script \\\"ln -f ${HOST_FILE} /etc/hosts \u0026\u0026 flushcache\\\" with administrator privileges\"\n\t\t\t\tfi\n\t\t\t\t;;\n\t\t\t\"open\")\n\t\t\t\tif [ ! -z \"$HOST_FILE\" ]; then\n\t\t\t\t\topen \"$HOST_FILE\"\n\t\t\t\tfi\n\t\t\t\t;;\n\t\t\t\"flush\")\n\t\t\t\t/usr/bin/osascript -e \"do shell script \\\"flushcache\\\" with administrator privileges\"\n\t\t\t\t;;\n\t\tesac\n\tfi\n\n\tCURRENT_FILE=$(find \"$HOSTS_LOCATION\" -samefile '/etc/hosts' -exec basename {} +)\n\n\tif [ -z \"$CURRENT_FILE\" ]; then\n\t\techo \":warning: Click and Readme! | color=red\"\n\t\techo \"---\"\n\t\techo \"You have to run hostSwitcher one time. Please select one host file below | color=red\"\n\telse\n\t\techo \"$CURRENT_FILE\"\n\tfi\n\techo \"---\"\n\n\tcmd=\"\"\n\tfor file in \"$HOSTS_LOCATION\"/*\n\tdo\n\t\tif [ -z \"$CURRENT_FILE\" ] || [ \"$(basename \"$file\")\" != \"$CURRENT_FILE\" ]; then\n\t\t\tcmd=\"| terminal=false refresh=true bash=$0 param1=switch param2=$file\"\n\t\telse\n\t\t\tcmd=\"\"\n\t\tfi\n\t\techo \"$(basename \"$file\") $cmd\"\n\t\techo \"Open $(basename \"$file\") host file | terminal=false refresh=true alternate=true bash=$0 param1=open param2=$file\"\n\tdone\n\n\techo \"---\"\n\techo \"Open host files folder | terminal=false refresh=true bash=$0 param1=open param2=$HOSTS_LOCATION\"\n\techo \"Flush dns cache | terminal=false refresh=true bash=$0 param1=flush\"\n\nfi\n"
				}
			],
			"path": "System/host-switcher.1d.sh",
			"filename": "host-switcher.1d.sh",
			"dir": "System",
			"docsPlugin": "System/host-switcher.1d.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Host file switcher",
			"version": "v1.0",
			"author": "Lorenzo Bugiani",
			"authors": [
				{
					"name": "Lorenzo Bugiani",
					"githubUsername": "canemacchina",
					"imageURL": "https://avatars.githubusercontent.com/u/5285750?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple plugin to switch between multiple hosts files",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.523289Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/infinit-drive.10s.py",
					"filename": "infinit-drive.10s.py",
					"content": "#!/usr/bin/env python3\r\n\r\n# \u003cbitbar.title\u003eIfinit Drive Journal Stats\u003c/bitbar.title\u003e\r\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\r\n# \u003cbitbar.author\u003eDimitrie Hoekstra\u003c/bitbar.author\u003e\r\n# \u003cbitbar.author.github\u003estrages\u003c/bitbar.author.github\u003e\r\n# \u003cbitbar.desc\u003eShort description of what your plugin does.\u003c/bitbar.desc\u003e\r\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/strages/infinit-drive-journal-stats-bitbar-plugin/master/screenshot.png\u003c/bitbar.image\u003e\r\n# \u003cbitbar.dependencies\u003epython3\u003c/bitbar.dependencies\u003e\r\n# \u003cbitbar.abouturl\u003ehttps://github.com/strages/infinit-drive-journal-stats-bitbar-plugin\u003c/bitbar.abouturl\u003e\r\n\r\n\r\nimport json\r\nimport os\r\nimport subprocess\r\n\r\np = subprocess.Popen(\r\n  ['infinit-journal', '--stat', '--script'],\r\n  stdout = subprocess.PIPE,\r\n  env = {'PATH': '/usr/local/bin:%s' % os.environ['PATH']},\r\n)\r\nout, err = p.communicate()\r\nres = json.loads(out.decode('utf-8'))\r\n\r\ntotal_size = 0\r\nfor k, v in res.items():\r\n  total_size += v['size']\r\n\r\ndef GetHumanReadable(size,precision=0):\r\n    suffixes=[' B',' KB',' MB',' GB',' TB']\r\n    suffixIndex = 0\r\n    while size \u003e 1024 and suffixIndex \u003c 4:\r\n        suffixIndex += 1 #increment the index of the suffix\r\n        size = size/1024.0 #apply the division\r\n    return \"%.*f%s\"%(precision,size,suffixes[suffixIndex])\r\n\r\ntotal_size_readable = GetHumanReadable(total_size)\r\n\r\nprint(total_size_readable)\r\n"
				}
			],
			"path": "System/infinit-drive.10s.py",
			"filename": "infinit-drive.10s.py",
			"dir": "System",
			"docsPlugin": "System/infinit-drive.10s.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Ifinit Drive Journal Stats",
			"version": "v1.0",
			"author": "Dimitrie Hoekstra",
			"authors": [
				{
					"name": "old github handle",
					"githubUsername": "strages",
					"imageURL": "https://avatars.githubusercontent.com/u/19322781?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Short description of what your plugin does.",
			"imageURL": "https://raw.githubusercontent.com/strages/infinit-drive-journal-stats-bitbar-plugin/master/screenshot.png",
			"dependencies": [
				"python3"
			],
			"aboutURL": "https://github.com/strages/infinit-drive-journal-stats-bitbar-plugin",
			"lastUpdated": "2021-03-08T15:22:03.553093Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Battery/keyboard.1m.sh",
					"filename": "keyboard.1m.sh",
					"content": "#!/bin/sh\n\n# \u003cbitbar.title\u003eKeybard Battery\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eMat Ryer\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ematryer\u003c/bitbar.author.github\u003e\n\nPERCENTAGE=$(ioreg -c AppleBluetoothHIDKeyboard | grep BatteryPercent | fgrep -v \\{ | sed 's/[^[:digit:]]//g')\n\nif [ \"$PERCENTAGE\" ]; then\n        echo \"Keyboard: $PERCENTAGE%\"\n#else\n#        echo \"without bluetooth keyboard?\"\nfi\n\n"
				}
			],
			"path": "System/Battery/keyboard.1m.sh",
			"filename": "keyboard.1m.sh",
			"dir": "System/Battery",
			"docsPlugin": "System/Battery/keyboard.1m.sh.html",
			"docsCategory": "System/Battery.html",
			"pathSegments": [
				"System",
				"Battery"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": false
				},
				{
					"path": "System/Battery",
					"text": "Battery",
					"isLast": true
				}
			],
			"title": "Keybard Battery",
			"version": "",
			"author": "Mat Ryer",
			"authors": [
				{
					"name": "Mat Ryer",
					"githubUsername": "matryer",
					"imageURL": "https://avatars.githubusercontent.com/u/101659?v=4",
					"bio": "Building pace.dev and firesearch.dev - Gopher, developer, speaker, author (Go Programming Blueprints) - BitBar app getbitbar.com - Co-creator Gopherize.me",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.829481Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/keyboard-symbol.py",
					"filename": "keyboard-symbol.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eKeyboard symbol\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eĐinh Quang Hiếu\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edqhieu\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays a menu of keyboard symbol\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/dqhieu/keyboard-symbol/master/demo.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\nprint '⌨️'\nprint '---'\nprint '⌘ Command'\nprint '⇧ Shift'\nprint '⌫ Backspace/Delete'\nprint '⇥ Tab'\nprint '⇪ Caps lock'\nprint '⌥ Option/Alt'\nprint '⌃ Control'\nprint '⎋ Escape'\nprint '←↑→↓ Arrow keys'\nprint '↩ Return'\n"
				}
			],
			"path": "System/keyboard-symbol.py",
			"filename": "keyboard-symbol.py",
			"dir": "System",
			"docsPlugin": "System/keyboard-symbol.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Keyboard symbol",
			"version": "v1.0",
			"author": "Đinh Quang Hiếu",
			"authors": [
				{
					"name": "Đinh Quang Hiếu",
					"githubUsername": "dqhieu",
					"imageURL": "https://avatars.githubusercontent.com/u/8291457?v=4",
					"bio": "Eat, sleep, code, repeat 👍",
					"primary": true
				}
			],
			"desc": "This plugin displays a menu of keyboard symbol",
			"imageURL": "https://raw.githubusercontent.com/dqhieu/keyboard-symbol/master/demo.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.553066Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/killdock.1d.sh",
					"filename": "killdock.1d.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eKillDock\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author.github\u003eindapublic\u003c/bitbar.author.github\u003e\n# \u003cbitbar.author\u003eindapublic\u003c/bitbar.author\u003e\n# \u003cbitbar.desc\u003eKillall Dock\u003c/bitbar.desc\u003e\n\nif [ \"$1\" = 'kill' ]; then\n  killall Dock\n  exit\nfi\n\necho \"⏏\"\necho '---'\necho \"Kill Dock | bash='$0' param1=kill terminal=false\"\n"
				}
			],
			"path": "System/killdock.1d.sh",
			"filename": "killdock.1d.sh",
			"dir": "System",
			"docsPlugin": "System/killdock.1d.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "KillDock",
			"version": "v1.0",
			"author": "indapublic",
			"authors": [
				{
					"name": "Vasilii",
					"githubUsername": "indapublic",
					"imageURL": "https://avatars.githubusercontent.com/u/856260?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Killall Dock",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.680625Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/launch-agents.10s.sh",
					"filename": "launch-agents.10s.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eLaunch Agents\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.4\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ePaul W. Rankin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ernkn\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows and manages user Launch Agents.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/UsJRDoE.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n\n# BitBar Launch Agents plugin\n\n# User Settings ================================================================\n\n# use_emoji=true                              # uncomment this line to use an emoji\nhome_path=$HOME/Library/LaunchAgents/         # uncomment this line to list User LaunchAgents\nglob_agent_path=/Library/LaunchAgents/        # uncomment this line to list Global LaunchAgents\n# glob_daemon_path=/Library/LaunchDaemons/    # uncomment this line to list Global LaunchDaemons\n\n# ==============================================================================\n\nmain() {\n  print_header\n  open=$(command -v open)\n\n  if [[ -n \"${home_path:=}\" ]]; then\n    compgen -G \"$home_path\"*.plist \u0026\u003e /dev/null || return 0\n    echo \"LaunchAgents:\"\n    plist=(\"$home_path\"*.plist)\n    for service in \"${plist[@]}\"; do\n      listservice \"$service\"\n    done\n    echo \"---\"\n  fi\n\n  if [[ -n \"${glob_agent_path:=}\" ]]; then\n    compgen -G \"$glob_agent_path\"*.plist \u0026\u003e /dev/null || return 0\n    echo \"Global LaunchAgents:\"\n    plist=(\"$glob_agent_path\"*.plist)\n    for service in \"${plist[@]}\"; do\n      listservice \"$service\"\n    done\n    echo \"---\"\n  fi\n\n  if [[ -n \"${glob_daemon_path:=}\" ]]; then\n    compgen -G \"$glob_daemon_path\"*.plist \u0026\u003e /dev/null || return 0\n    echo \"Global LaunchDaemons:\"\n    plist=(\"$glob_daemon_path\"*.plist)\n    for service in \"${plist[@]}\"; do\n      echo \"$(service_property \"$service\" Label) | color=#fff\"\n    done\n    echo \"---\"\n  fi\n\n  if [[ $1 = start ]]\n  then launchctl start \"$2\"\n  fi\n\n  if [[ $1 = stop ]]\n  then launchctl stop \"$2\"\n  fi\n\n  if [[ $1 = load ]]\n  then launchctl load \"$2\"\n  fi\n\n  if [[ $1 = unload ]]\n  then launchctl unload \"$2\"\n  fi\n\n  if [[ $1 = reload ]]\n  then launchctl unload \"$2\"\n    launchctl load \"$2\"\n  fi\n\n}\n\nfunction service_pid {\n  launchctl list | grep \"$1\\$\" | sed -E 's/^([-0-9]+).*([0-9]+).*/\\1/'\n}\n\nfunction service_status {\n  launchctl list | grep \"$1\\$\" | sed -E 's/^([-0-9]+).*([0-9]+).*/\\2/'\n}\n\nfunction service_property {\n  defaults read \"$1\" \"$2\" 2\u003e /dev/null\n}\n\nlistservice() {\n  service=$1\n  label=$(service_property \"$service\" Label )\n  log=$(service_property \"$service\" StandardOutPath || true)\n  errorlog=$(service_property \"$service\" StandardErrorPath || true)\n  pid=$(service_pid \"$label\")\n  status=$(service_status \"$label\")\n  if [[ $pid = \"-\" ]]\n  then pid=-1\n  fi\n  if [[ $pid -eq -1 \u0026\u0026 $status -eq 0 ]]\n  then echo \"$label | color=#00a4db\"\n    echo \"--Unload | bash='$0' param1=unload param2=$service terminal=false refresh=true\"\n    echo \"--Reload | bash='$0' param1=reload param2=$service terminal=false refresh=true alternate=true\"\n    echo \"--Start | bash='$0' param1=start param2=$label terminal=false refresh=true\"\n    echo \"-----\"\n    if [[ -f $log ]]\n    then echo \"--View Log | bash=$open param1=-a param2=Console param3=$log terminal=false\"\n    else echo \"--View Log\"\n    fi\n    if [[ -f $errorlog ]]\n    then echo \"--View Error Log | bash=$open param1=-a param2=Console param3=$errorlog terminal=false\"\n    else echo \"--View Error Log\"\n    fi\n    echo \"-----\"\n    echo \"--Idle\"\n    echo \"--No Errors\"\n  elif [[ $pid -gt 0 \u0026\u0026 $status -eq 0 ]]\n  then echo \"$label | color=green\"\n    echo \"--Unload | bash='$0' param1=unload param2=$service terminal=false refresh=true\"\n    echo \"--Reload | bash='$0' param1=reload param2=$service terminal=false refresh=true alternate=true\"\n    echo \"--Stop | bash='$0' param1=stop param2=$label terminal=false refresh=true\"\n    echo \"-----\"\n    if [[ -f $log ]]\n    then echo \"--View Log | bash=$open param1=-a param2=Console param3=$log terminal=false\"\n    else echo \"--View Log\"\n    fi\n    if [[ -f $errorlog ]]\n    then echo \"--View Error Log | bash=$open param1=-a param2=Console param3=$errorlog terminal=false\"\n    else echo \"--View Error Log\"\n    fi\n    echo \"-----\"\n    echo \"--Running ($pid)\"\n    echo \"--No Errors\"\n  elif [[ $status -gt 0 ]]\n  then echo \"$label | color=red\"\n    echo \"--Unload | bash='$0' param1=unload param2=$service terminal=false refresh=true\"\n    echo \"--Reload | bash='$0' param1=reload param2=$service terminal=false refresh=true alternate=true\"\n    echo \"--Start | bash='$0' param1=start param2=$label terminal=false refresh=true\"\n    echo \"-----\"\n    if [[ -f $log ]]\n    then echo \"--View Log | bash=$open param1=-a param2=Console param3=$log terminal=false\"\n    else echo \"--View Log\"\n    fi\n    if [[ -f $errorlog ]]\n    then echo \"--View Error Log | bash=$open param1=-a param2=Console param3=$errorlog terminal=false\"\n    else echo \"--View Error Log\"\n    fi\n    echo \"-----\"\n    echo \"--Stopped\"\n    echo \"--Error ($status)\"\n  else echo \"$label\"\n    echo \"--Load | bash='$0' param1=load param2=$service terminal=false refresh=true\"\n    echo \"-----\"\n    if [[ -f $log ]]\n    then echo \"--View Log | bash=$open param1=-a param2=Console param3=$log terminal=false\"\n    else echo \"--View Log\"\n    fi\n    if [[ -f $errorlog ]]\n    then echo \"--View Error Log | bash=$open param1=-a param2=Console param3=$errorlog terminal=false\"\n    else echo \"--View Error Log\"\n    fi\n    echo \"-----\"\n    echo \"--Unloaded\"\n  fi\n}\n\nprint_header() {\n  if [[ -n \"${use_emoji:=}\" ]]\n  then echo \":rocket:\"\n  else echo \"| templateImage=iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAWJQAAFiUBSVIk8AAABCRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIgogICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyI+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHRpZmY6WVJlc29sdXRpb24+MTQ0PC90aWZmOllSZXNvbHV0aW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MzI8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpDb2xvclNwYWNlPjE8L2V4aWY6Q29sb3JTcGFjZT4KICAgICAgICAgPGV4aWY6UGl4ZWxZRGltZW5zaW9uPjMyPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgICAgPGRjOnN1YmplY3Q+CiAgICAgICAgICAgIDxyZGY6U2VxLz4KICAgICAgICAgPC9kYzpzdWJqZWN0PgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAxNzowMToyNiAwMDowMTo1MjwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+UGl4ZWxtYXRvciAzLjY8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CqqgHc8AAAOHSURBVFgJvZZLqM1RFMav6y15lDzKY2ByBxRl6BqYSKEUMwMpSjIwEHVTJjJhwICidGNoICkDRGJg4jFzu0VR8kgh8n79fvee79r33zmncw5Z9Z299tp7r2+tvdfe/9PV9e9lLC7Ff5cxMI4vWCegbwLnwCD4An5VQPffSDduyqw30r8KqoT2f4KvtTGav5dxhYul6OdBSSzZN/ADSG5r3zl/LSX5dry9BCF3yyVLP61BfK/ZaTqXkLv1x0AIJA5BbGVrAEJbx5Jim4mHCyAE9QotY2kT3HvWLe8kAqtbmQquAB2bUc41RI3aFOAt1kwELYtbncxddA5I4jknq0aksZfnv491DUUy4TkL9chslFR66TAkzdpkP4CP+XFYbUuy6thqDPeBJJLXq/JGAZRzt7FW6fb1KsVs3c4esAa8Ah+BWfeCzWAScI6Pj2hVzN76uQw2AAPKTUL9c74L0O+CZGKm0W11VLWV4/X03A4TWgaUsp5GIpnGwA2gk3LL7EvcarGVQeTctW0Fisc8svvlmfcz4ESvlGTC6Fu9YiVx/MR2GD+RUUeXSPYwmsnV7GNvZ+vLzE+GmbZMeMTsubwBEn0GZh4yHVmI6SeYRq3zSvIT9COjii5G24tAh9XMz2BbCY6DT6DenDIQyQ1em4n0gUhD8p3MKJ1Ev4fdRVvAC5A6aLYTIX/E/LUgUnfbHfT8/YwuBIPAiZOBxGdr/ce004G7Y/G4JkGWxSS5656BdeABCLFr25YVrLgBzNjsk3n1mAymtO2irxhMGeCQsdGPE/0yZcFB9BBKED1brM3PaYjz0DzGtggo+WoO95r8uqW5ik7zuZVAWEj1yI9i31ub47wU6HV0n2rFHWhZzHwuWAUeAp169RJImfkp7LPA6dq4AWYHDMAaUloOIIUyj0U6kLR65tnqI4z5x/N2bZ7kZbAD9A1OGfXWD5vq/yZSHb8GOsxDYubRr6ErB0B2xsCSvbb9IJJ6Sr9p6y70A51IGuJkeAfbYqD0AedJbo2ou2M7QKQtchdNAZLo7EOtVRfe5/kgshUlY7ZPwXoQaZvchWbnaxfHBnETHAKLgJI/kOXLeQl7z9Do8E3qiNz1/vt5Dp4A/7H0gjkgDj2i6Ab1FuwG2hXrKONDhlZ/cv8lmwHeAZ17torjklgTkSUo9q14xWq3BjqWBFE6MKNkV9rLueq5QeWctvTfZDO0T448SOoAAAAASUVORK5CYII=\"\n  fi\n  echo \"---\"\n}\n\nmain \"$@\"\n\necho \"---\"\necho \"Refresh | refresh=true\"\n"
				}
			],
			"path": "System/launch-agents.10s.sh",
			"filename": "launch-agents.10s.sh",
			"dir": "System",
			"docsPlugin": "System/launch-agents.10s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Launch Agents",
			"version": "v1.4",
			"author": "Paul W. Rankin",
			"authors": [
				{
					"name": "Paul W. Rankin",
					"githubUsername": "rnkn",
					"imageURL": "https://avatars.githubusercontent.com/u/1256849?v=4",
					"bio": "Filmmaker. Hobbyist programmer. Most repositories relate to screenwriting.",
					"primary": true
				}
			],
			"desc": "Shows and manages user Launch Agents.",
			"imageURL": "https://i.imgur.com/UsJRDoE.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.713829Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/mas.1d.sh",
					"filename": "mas.1d.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eMac App Store\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eiosdeveloper\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eiosdeveloper\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eLists available updates from the Mac App Store using mas-cli (https://github.com/argon/mas). Based on brew-updates.1h.sh\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/yPeXDAj.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003emas\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/System/mas.1d.sh\u003c/bitbar.abouturl\u003e\n\nif test \"$(which /usr/local/bin/mas)\" 2\u003e /dev/null; then\n  UPDATES=$(/usr/local/bin/mas outdated);\n  UPDATE_COUNT=$(echo \"$UPDATES\" | grep -c '[^[:space:]]');\n  if test \"$UPDATE_COUNT\" -gt 0; then\n    echo \"↓$UPDATE_COUNT | dropdown=false\"\n    echo \"---\";\n    if [ -n \"$UPDATES\" ]; then\n      echo \"Upgrade all | bash=/usr/local/bin/mas param1=upgrade terminal=false refresh=true\"\n      echo \"$UPDATES\" | awk '{itemIdentifier = $1; $1 = \"\"; print $0 \" | bash=/usr/local/bin/mas param1=install param2=\" itemIdentifier \" terminal=false refresh=true\"; }'\n    fi\n  fi\nelse\n  echo \"mas not installed\"\nfi\n"
				}
			],
			"path": "System/mas.1d.sh",
			"filename": "mas.1d.sh",
			"dir": "System",
			"docsPlugin": "System/mas.1d.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Mac App Store",
			"version": "v1.0",
			"author": "iosdeveloper",
			"authors": [
				{
					"name": "iosdeveloper",
					"githubUsername": "iosdeveloper",
					"imageURL": "https://avatars.githubusercontent.com/u/655921?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Lists available updates from the Mac App Store using mas-cli (https://github.com/argon/mas). Based on brew-updates.1h.sh",
			"imageURL": "http://i.imgur.com/yPeXDAj.png",
			"dependencies": [
				"mas"
			],
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/System/mas.1d.sh",
			"lastUpdated": "2021-03-08T15:22:03.96201Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/macos-proxy-switcher.1m.sh",
					"filename": "macos-proxy-switcher.1m.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eMacOS Proxy Switcher\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eglowinthedark\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eglowinthedark\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eSet http and socks5 proxy settings on MacOS.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/glowinthedark/bitbar-plugins/macos-proxy-switcher/images/mac-proxy-switcher.png.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/glowinthedark/bitbar-plugins/System/macos-proxy-switcher.1m.sh\u003c/bitbar.abouturl\u003e\n\n# CONFIGURATION\nINTERFACE=Wi-Fi\n\nSOCKS_PROXY_HOST=localhost\nSOCKS_PROXY_PORT=1080\n\nHTTP_PROXY_HOST=localhost\nHTTP_PROXY_PORT=8080\n\nPAC_PROXY=\"file://$HOME/pac_file_proxy.pac\"\n\n# END CONFIGURATION\n\nif [[ \"$1\" = \"enable_socks5_proxy\" ]]; then\n  networksetup -setsocksfirewallproxy $INTERFACE $SOCKS_PROXY_HOST $SOCKS_PROXY_PORT\n  networksetup -setsocksfirewallproxystate $INTERFACE on\n  exit\nfi\n\nif [[ \"$1\" = \"disable_socks5_proxy\" ]]; then\n  networksetup -setsocksfirewallproxystate $INTERFACE off\n  exit\nfi\n\nif [[ \"$1\" = \"enable_http_proxy\" ]]; then\n  networksetup -setwebproxy $INTERFACE $HTTP_PROXY_HOST $HTTP_PROXY_PORT\n  networksetup -setwebproxystate $INTERFACE on\n  exit\nfi\n\nif [[ \"$1\" = \"disable_http_proxy\" ]]; then\n  networksetup -setwebproxystate $INTERFACE off\n  exit\nfi\n\nif [[ \"$1\" = \"enable_pac_proxy\" ]]; then\n  networksetup -setautoproxyurl  $INTERFACE $PAC_PROXY\n  networksetup -setautoproxystate $INTERFACE on\n  exit\nfi\n\nif [[ \"$1\" = \"disable_pac_proxy\" ]]; then\n  # networksetup -setautoproxyurl $INTERFACE \"\"\n  networksetup -setautoproxystate $INTERFACE off\n  exit\nfi\n\n\nif [[ \"$1\" = \"edit_this_script\" ]]; then\n  # use default editor for .sh extension\n  # open \"$0\";\n  # explicitly use sublimetext3\n  open -b com.sublimetext.3 \"$0\";\n  exit\nfi\n\ncurrent_socks5_proxy_status=$(networksetup -getsocksfirewallproxy $INTERFACE | awk 'NR=1{print $2; exit}')\ncurrent_http_proxy_status=$(networksetup -getwebproxy $INTERFACE | awk 'NR=1{print $2; exit}')\ncurrent_pac_proxy_status=$(networksetup -getautoproxyurl $INTERFACE | grep Enabled | awk 'NR=1{print $2; exit}')\n\n# SOCK5 PROXY\nif [[ $current_socks5_proxy_status == \"Yes\" ]] || [[ $current_http_proxy_status == \"Yes\" ]] || [[ $current_pac_proxy_status == \"Yes\" ]] ; then\n\n  if [[ $current_socks5_proxy_status == \"Yes\" ]]; then\n    echo '🇬🇧'\n    # networksetup -getsocksfirewallproxy $INTERFACE\n  fi\n\n  if [[ $current_http_proxy_status == \"Yes\" ]]; then\n    echo '🌍'\n    # networksetup -getwebproxy $INTERFACE\n  fi\n\n  if [[ $current_pac_proxy_status == \"Yes\" ]]; then\n    echo '📡'\n    # networksetup -getautoproxyurl $INTERFACE\n  fi\n  echo '---'\n\nelse\n  echo \"🇪🇸\"\n  echo '---'\nfi\n\necho '---'\n\nif [[ $current_socks5_proxy_status == \"Yes\" ]]; then\n  echo \"✅ SOCKS PROXY is ON! Click to stop socks5://$SOCKS_PROXY_HOST:$SOCKS_PROXY_PORT | bash='$0' color=indianred param1=disable_socks5_proxy refresh=true terminal=false\"\nelse\n  echo \"❌ SOCKS PROXY is OFF! Click to start socks5://$SOCKS_PROXY_HOST:$SOCKS_PROXY_PORT | bash='$0' param1=enable_socks5_proxy refresh=true terminal=false\"\nfi\n\nif [[ $current_http_proxy_status == \"Yes\" ]]; then\n  echo \"✅ HTTP PROXY is ON! Click to stop http://$HTTP_PROXY_HOST:$HTTP_PROXY_PORT | bash='$0' color=indianred param1=disable_http_proxy refresh=true terminal=false\"\nelse\n  echo \"❌ HTTP PROXY is OFF! Click to start http://$HTTP_PROXY_HOST:$HTTP_PROXY_PORT | bash='$0' param1=enable_http_proxy refresh=true terminal=false\"\nfi\n\n\nif [[ $current_pac_proxy_status == \"Yes\" ]]; then\n  echo \"✅ PAC PROXY is ON! Click to stop $PAC_PROXY | bash='$0' color=indianred param1=disable_pac_proxy refresh=true terminal=false\"\nelse\n  echo \"❌ PAC PROXY is OFF! Click to start $PAC_PROXY | bash='$0' param1=enable_pac_proxy refresh=true terminal=false\"\nfi\n\necho '---'\necho \"✏️ Edit this file | bash='$0' param1=\"edit_this_script\" terminal=false\"\n\necho '---'\necho \"🔃 Refresh... | refresh=true\"\n"
				}
			],
			"path": "System/macos-proxy-switcher.1m.sh",
			"filename": "macos-proxy-switcher.1m.sh",
			"dir": "System",
			"docsPlugin": "System/macos-proxy-switcher.1m.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "MacOS Proxy Switcher",
			"version": "v0.1",
			"author": "glowinthedark",
			"authors": [
				{
					"name": "glowinthedark",
					"githubUsername": "glowinthedark",
					"imageURL": "https://avatars.githubusercontent.com/u/48893368?v=4",
					"bio": "SSLError: [SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:1056)",
					"primary": true
				}
			],
			"desc": "Set http and socks5 proxy settings on MacOS.",
			"imageURL": "https://raw.githubusercontent.com/glowinthedark/bitbar-plugins/macos-proxy-switcher/images/mac-proxy-switcher.png.png",
			"dependencies": [],
			"aboutURL": "https://github.com/glowinthedark/bitbar-plugins/System/macos-proxy-switcher.1m.sh",
			"lastUpdated": "2021-03-08T15:22:03.959894Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/memusage.5s.py",
					"filename": "memusage.5s.py",
					"content": "#!/usr/bin/env python\n# \u003cbitbar.title\u003eMemory usage\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eGautam krishna R\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003egautamkrishnar\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows the current system memmory usage.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/System/memusage.5s.py\u003c/bitbar.abouturl\u003e\nimport subprocess\nimport re\n\n# Get process info\nps = subprocess.Popen(['ps', '-caxm', '-orss,comm'], stdout=subprocess.PIPE).communicate()[0]\nvm = subprocess.Popen(['vm_stat'], stdout=subprocess.PIPE).communicate()[0]\n\n# Iterate processes\nprocessLines = ps.split('\\n')\nsep = re.compile('[\\s]+')\nrssTotal = 0 # kB\nfor row in range(1,len(processLines)):\n    rowText = processLines[row].strip()\n    rowElements = sep.split(rowText)\n    try:\n        rss = float(rowElements[0]) * 1024\n    except:\n        rss = 0 # ignore...\n    rssTotal += rss\n\n# Process vm_stat\nvmLines = vm.split('\\n')\nsep = re.compile(':[\\s]+')\nvmStats = {}\nfor row in range(1,len(vmLines)-2):\n    rowText = vmLines[row].strip()\n    rowElements = sep.split(rowText)\n    vmStats[(rowElements[0])] = int(rowElements[1].strip('\\.')) * 4096\n\nprint 'Wired Memory:\\t\\t%d MB' % ( vmStats[\"Pages wired down\"]/1024/1024 )\nprint 'Active Memory:\\t\\t%d MB' % ( vmStats[\"Pages active\"]/1024/1024 )\nprint 'Inactive Memory:\\t%d MB' % ( vmStats[\"Pages inactive\"]/1024/1024 )\nprint 'Free Memory:\\t\\t%d MB' % ( vmStats[\"Pages free\"]/1024/1024 )\nprint 'Real Mem Total (ps):\\t%.3f MB' % ( rssTotal/1024/1024 )\n"
				}
			],
			"path": "System/memusage.5s.py",
			"filename": "memusage.5s.py",
			"dir": "System",
			"docsPlugin": "System/memusage.5s.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Memory usage",
			"version": "v1.0",
			"author": "Gautam krishna R",
			"authors": [
				{
					"name": "Gautam krishna R",
					"githubUsername": "gautamkrishnar",
					"imageURL": "https://avatars.githubusercontent.com/u/8397274?v=4",
					"bio": "Full Stack Developer, Open-source Maintainer \u0026 Contributor | Software Engineer @RedHatOfficial | @duckduckgo community leader | Polyglot",
					"primary": true
				}
			],
			"desc": "Shows the current system memmory usage.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/System/memusage.5s.py",
			"lastUpdated": "2021-03-08T15:22:03.965577Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Battery/mouse.1m.sh",
					"filename": "mouse.1m.sh",
					"content": "#!/bin/sh\n# \u003cbitbar.title\u003eMouse battery\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAlexandre Espinosa Menor\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ealexandregz\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow battery percentage for Bluetooth Mouse\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/IqjZMJg.png\u003c/bitbar.image\u003e\n\n# works fine with Magic Mouse\n\nPERCENTAGE=$(ioreg -n BNBMouseDevice | fgrep BatteryPercent | fgrep -v \\{ | sed 's/[^[:digit:]]//g')\n\nif [ \"$PERCENTAGE\" ]; then\n        echo \"Mouse: $PERCENTAGE%\"\n#else\n#        echo \"without bluetooth mouse?\"\nfi\n\n"
				}
			],
			"path": "System/Battery/mouse.1m.sh",
			"filename": "mouse.1m.sh",
			"dir": "System/Battery",
			"docsPlugin": "System/Battery/mouse.1m.sh.html",
			"docsCategory": "System/Battery.html",
			"pathSegments": [
				"System",
				"Battery"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": false
				},
				{
					"path": "System/Battery",
					"text": "Battery",
					"isLast": true
				}
			],
			"title": "Mouse battery",
			"version": "1.0",
			"author": "Alexandre Espinosa Menor",
			"authors": [
				{
					"name": "Alexandre Espinosa Menor",
					"githubUsername": "alexandregz",
					"imageURL": "https://avatars.githubusercontent.com/u/1374718?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show battery percentage for Bluetooth Mouse",
			"imageURL": "http://i.imgur.com/IqjZMJg.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.948654Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/microphone.sh",
					"filename": "microphone.sh",
					"content": "#!/usr/local/bin/bash\n\n# \u003cbitbar.title\u003eMute Mic\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eVasily Pleshakov\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ewasapl\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eMutes or unmutes microphone.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/FI64Y5c.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eBASH\u003c/bitbar.dependencies\u003e\n\nSCRIPT_NAME=$(basename \"$0\")\nSCRIPT_DIR=$(dirname \"$0\")\nTEMP_FILE=\"$TMPDIR/${SCRIPT_NAME%%.*}.tmp\"\nMENU_LINE=\"| bash='${SCRIPT_DIR}/${SCRIPT_NAME}' param1=switch terminal=false refresh=true\"\n\n# icons Made by Dave Gandy\n# https://www.flaticon.com/authors/dave-gandy\nICON_MIC=\"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABWESUoAAAACXBIWXMAABYlAAAWJQFJUiTwAAAB2UlEQVQ4jY2Sv04UURTGf/fOTqZwC0BjNhSSlURMNiEhhlhQaMIDYGcCHbwAT0ChHW8guhotTKzstKazJDREN/ivUJYAWVeEzM7c+1nM7M66g9FTTeb8zjnf+e6BQViqG604bm1UsVwQlvqunOS0W7+IMIzvKXGSS7Q3jikBAZuKJUmKtUlQbhB9lMsAp/2o1MIy3ZPPAK/e9EBFoSYK+1WGMBqq/EcUQFn3/3WoABAYjSZMRa4AXLlTls5GGNafVEfqqTbXi61qHa0wq6GYZUWdGgYsGEJDxEhEmDAH/rbLUMp5KqSOfBXhEip4lwOi22WSb+2i+OA7k/zoogwwp5+Yp/OGNEunvO0wz+fTvjsVHurnDNcP1fOS76ld5+apHuQmgaVxrqewcCwveR0vwDOdNwrtAVvSGkw12963m1OwJj0auirDlZaSVSxjjcYYltVErcvD72uZO5Fe1DFgqD+XTubyATkVuLnXU/zafndA7fbdS3y5txO4P2wLmNiKs6P0ih9PDASYYoq/sXxn5iqH77dffrD4kvVhhGVRWsQShYPflcFXAoYzOMMQUwbM/WuJjWdg+Vbkw6+vRm4wYElpcS+plvoqczfF/pFJ0tSBS9PEHO333/43jAztfMWb5IQAAAAASUVORK5CYII=\"\nICON_MIC_SLASH=\"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAAAAABWESUoAAAACXBIWXMAABYlAAAWJQFJUiTwAAACJElEQVQ4jW2Sz0tUURTHv+e8OzOUYVmLpEUxGCU2EhFBIirhsoVSbspwUctauC6KaBn9AxESBREyLdq1FFxbWEQRQmWQJpKNOda8H/d+W7z3Zu5IZ3k/33vu/Z7zBZql2HNnKQw/3eqA4j+lKL+jJS0Xy6lC2rig6yNjS9qYHzohEJU2RYD7DEmSbPABApHiLr+HoPSZliTpLKdgRF6+2espFD0RXcYnYVSr5EJXS6HoI5u8KFplw/3tbfnJBSlXrbLBrSHPbyZo48MIsEOwg5uWRxOgj7Qer59DoX2OfXRJzkNuDXvvC6ZnOlGhbfH6YPBkOvco6K5xEv0u55HlRUyx1g0BFBAUBCWIXHlWTDA7ERcUSzCQQiYAoCB0KudIj1NkAMI6KN4vmoxTbAgDZ5HLNn/hKGBcfh8/VnEIm79BQAHq9lcsAE2e4FUNZ/ClLsyjcPNGur/Qki7iWhm9dd7zJmkkkIzT8ecg8Jh/TvijMqpVRtxYplubOQJcIx+2rSqdX22o2F/ZB8XVmEsH/DiJVhmGvI4AEJSfkhunsgcEgFJmJyKj2Ho9/x0Hz450YHl8MbDND4hW2eDqzHYWSoaP9nsfEKT5GEHP7bmVJFmZu3sM6u+68CLNz25RjJKjUJS8rChOMsryEWCAHPDtAcbp20vP6+fnixcOxxoeBy6fLrnCt1n6PcZHgDEmbFbCMb9PADGorNsojhMyiePIrlfyOf8DeVZaaM73AA8AAAAASUVORK5CYII=\"\n\nCUR_INPUT_VOLUME=$(osascript -e \"input volume of (get volume settings)\")\nif [ \"${CUR_INPUT_VOLUME}\" -eq 0 ]; then\n    CUR_ICON=${ICON_MIC_SLASH}\nelse\n    CUR_ICON=${ICON_MIC}\nfi\n\nfunction switch() {\n    if [ \"${CUR_INPUT_VOLUME}\" -eq 0 ]; then\n        if [ -s \"${TEMP_FILE}\" ]; then\n            SET_VOLUME=$(cat \"${TEMP_FILE}\")\n        else\n            SET_VOLUME=100\n        fi\n        CUR_ICON=${ICON_MIC}\n    else\n        SET_VOLUME=0\n        CUR_ICON=${ICON_MIC_SLASH}\n        echo \"${CUR_INPUT_VOLUME}\" \u003e \"${TEMP_FILE}\"\n    fi\n    osascript -e \"set volume input volume $SET_VOLUME\"\n}\n\nfunction menu() {\n    echo \"$MENU_LINE image=${CUR_ICON}\"\n}\n\nif [[ \"$#\" -ge 1 ]];then\n    if [[ \"$1\" == 'switch' ]] ; then\n        switch\n    fi\nfi\n\nmenu"
				}
			],
			"path": "System/microphone.sh",
			"filename": "microphone.sh",
			"dir": "System",
			"docsPlugin": "System/microphone.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Mute Mic",
			"version": "v1.0",
			"author": "Vasily Pleshakov",
			"authors": [
				{
					"name": "Vasily Pleshakov",
					"githubUsername": "wasapl",
					"imageURL": "https://avatars.githubusercontent.com/u/2486829?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Mutes or unmutes microphone.",
			"imageURL": "https://i.imgur.com/FI64Y5c.png",
			"dependencies": [
				"BASH"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.973851Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/mysql-status.1m.sh",
					"filename": "mysql-status.1m.sh",
					"content": "#!/usr/bin/env bash\n# \u003cbitbar.title\u003eMySQL server status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKenji Akiyama\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eartifactsauce\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow the status of MySQL server installed by Homebrew on localhost and manage server boot with shortcut menus\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/Y85ENFb.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash,mysql\u003c/bitbar.dependencies\u003e\n\nset -eu\n\n# Change here depending on your preference\nMENUBAR_ICON_ENABLED=\":dolphin:\"\nMENUBAR_ICON_DISABLED=\":sleepy:\"\nSTATUS_ITEM_COLOR=\"green\"\nDISABLED_ITEM_COLOR=\"#C0C0C0\"\n\n# Below is no need to change basically.\nSERVER_CMD=\"/usr/local/bin/mysql.server\"\n\nSUBCMD_START=\"start\"\nSUBCMD_STOP=\"stop\"\nSUBCMD_RESTART=\"restart\"\nSUBCMD_RELOAD=\"reload\"\nSUBCMD_F_RELOAD=\"force-reload\"\nSUBCMD_STATUS=\"status\"\n\nif $SERVER_CMD $SUBCMD_STATUS | grep -Fq 'SUCCESS'; then\n  IS_SERVER_RUNNING=true\n  echo \"$MENUBAR_ICON_ENABLED\"\nelse\n  IS_SERVER_RUNNING=false\n  echo \"$MENUBAR_ICON_DISABLED\"\nfi\n\necho \"---\"\necho \"MySQL Server\"\n\n# Server Status from `mysqladmin status`\nif $IS_SERVER_RUNNING; then\n  echo \"---\"\n  LF=$'\\\\\\x0A' # return code\n  /usr/local/bin/mysqladmin -u root status | sed -e \"s/$/  /\" | sed -e \"s/  / \\| color=$STATUS_ITEM_COLOR $LF/g\"\nfi\n\n# Server management shortcuts\necho \"---\"\nif $IS_SERVER_RUNNING; then\n  echo \"Start | color=$DISABLED_ITEM_COLOR\"\n  echo \"Stop | bash=$SERVER_CMD param1=$SUBCMD_STOP refresh=true terminal=false\"\n  echo \"Restart | bash=$SERVER_CMD param1=$SUBCMD_RESTART refresh=true terminal=false\"\n  echo \"Reload | bash=$SERVER_CMD param1=$SUBCMD_RELOAD refresh=true terminal=false\"\n  echo \"Force-reload | bash=$SERVER_CMD param1=$SUBCMD_F_RELOAD refresh=true terminal=false\"\nelse\n  echo \"Start | bash=$SERVER_CMD param1=$SUBCMD_START refresh=true terminal=false\"\n  echo \"Stop | color=$DISABLED_ITEM_COLOR\"\n  echo \"Restart | color=$DISABLED_ITEM_COLOR\"\n  echo \"Reload | color=$DISABLED_ITEM_COLOR\"\n  echo \"Force-reload | color=$DISABLED_ITEM_COLOR\"\nfi\n\necho \"---\"\necho \"Refresh | refresh=true color=$DISABLED_ITEM_COLOR\"\n"
				}
			],
			"path": "System/mysql-status.1m.sh",
			"filename": "mysql-status.1m.sh",
			"dir": "System",
			"docsPlugin": "System/mysql-status.1m.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "MySQL server status",
			"version": "v1.1",
			"author": "Kenji Akiyama",
			"authors": [
				{
					"name": "Kenji Akiyama",
					"githubUsername": "artifactsauce",
					"imageURL": "https://avatars.githubusercontent.com/u/125637?v=4",
					"bio": "\r\n    A raw guy programmer.\r\n",
					"primary": true
				}
			],
			"desc": "Show the status of MySQL server installed by Homebrew on localhost and manage server boot with shortcut menus",
			"imageURL": "http://i.imgur.com/Y85ENFb.png",
			"dependencies": [
				"bash",
				"mysql"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.157536Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/postgresql-status.1m.sh",
					"filename": "postgresql-status.1m.sh",
					"content": "#!/usr/bin/env bash\n# \u003cbitbar.title\u003ePostgreSQL server status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eKenji Akiyama\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eartifactsauce\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow the status of PostgreSQL server installed by Homebrew on localhost and manage server boot with shortcut menus\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/l5E4yg8.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash,perl,postgresql\u003c/bitbar.dependencies\u003e\n\n# TODO Selecting some menus will return warnings because the process has not been completed.\n\nset -eu\n\n# Change here depending on your preference\nMENUBAR_ICON_ENABLED=\":elephant:\"\nMENUBAR_ICON_DISABLED=\":sleepy:\"\nSTATUS_ITEM_COLOR=\"green\"\nDISABLED_ITEM_COLOR=\"#C0C0C0\"\n\n# Below is no need to change basically.\nSERVER_CMD=\"/usr/local/bin/pg_ctl\"\nPGDATA=\"/usr/local/var/postgres\"\n\nSUBCMD_START=\"start\"\nSUBCMD_STOP=\"stop\"\nSUBCMD_RESTART=\"restart\"\nSUBCMD_RELOAD=\"reload\"\nSUBCMD_STATUS=\"status\"\n\nif $SERVER_CMD -D $PGDATA $SUBCMD_STATUS | grep -Fq 'server is running'; then\n  IS_SERVER_RUNNING=true\n  echo \"$MENUBAR_ICON_ENABLED\"\nelse\n  IS_SERVER_RUNNING=false\n  echo \"$MENUBAR_ICON_DISABLED\"\nfi\n\necho \"---\"\necho \"PostgreSQL Server\"\n\n# Server Status from PostgreSQL's `pg_stat_database` table\nif $IS_SERVER_RUNNING; then\n  /usr/local/bin/psql -U postgres -w -q -A -F $'\\x09' -c \"select * from pg_stat_database;\" | perl -nle 'BEGIN { $_=\u003c\u003e; chomp; @headers = split \"\\t\"} last if eof(); @records{@headers} = split \"\\t\"; next if $records{datname} =~/^template/; print \"---\"; print\"$_: $records{$_} | color='$STATUS_ITEM_COLOR'\" for @headers'\nfi\n\n# Server management shortcuts\necho \"---\"\nif $IS_SERVER_RUNNING; then\n  echo \"Start | color=$DISABLED_ITEM_COLOR\"\n  echo \"Stop | bash=$SERVER_CMD param1=-D param2=$PGDATA param4=$SUBCMD_STOP refresh=true terminal=false\"\n  echo \"Restart | bash=$SERVER_CMD param1=-D param2=$PGDATA param4=$SUBCMD_RESTART refresh=true terminal=false\"\n  echo \"Reload | bash=$SERVER_CMD param1=-D param2=$PGDATA param4=$SUBCMD_RELOAD refresh=true terminal=false\"\nelse\n  echo \"Start | bash=$SERVER_CMD param1=-D param2=$PGDATA param4=$SUBCMD_START refresh=true terminal=false\"\n  echo \"Stop | color=$DISABLED_ITEM_COLOR\"\n  echo \"Restart | color=$DISABLED_ITEM_COLOR\"\n  echo \"Reload | color=$DISABLED_ITEM_COLOR\"\nfi\n\necho \"---\"\necho \"Refresh | refresh=true color=$DISABLED_ITEM_COLOR\"\n"
				}
			],
			"path": "System/postgresql-status.1m.sh",
			"filename": "postgresql-status.1m.sh",
			"dir": "System",
			"docsPlugin": "System/postgresql-status.1m.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "PostgreSQL server status",
			"version": "v1.0",
			"author": "Kenji Akiyama",
			"authors": [
				{
					"name": "Kenji Akiyama",
					"githubUsername": "artifactsauce",
					"imageURL": "https://avatars.githubusercontent.com/u/125637?v=4",
					"bio": "\r\n    A raw guy programmer.\r\n",
					"primary": true
				}
			],
			"desc": "Show the status of PostgreSQL server installed by Homebrew on localhost and manage server boot with shortcut menus",
			"imageURL": "http://i.imgur.com/l5E4yg8.png",
			"dependencies": [
				"bash",
				"perl",
				"postgresql"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.212811Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/power_status.15s.sh",
					"filename": "power_status.15s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003ePower Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJeff Beadles\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejeffbeadles\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows power source, current mode and settings\u003c/bitbar.desc\u003e\n#\nexport PATH=\"/bin:/usr/bin:$PATH\"\n\n# AC or Battery?\npmset -g cap | sed -ne 's/^Capabilities for \\(.*\\) Power:$/\\1/p'\necho \"---\"\n# Power setting details\npmset -g live | \\\n   sed -e '1,3d' \\\n       -e 's/Currently in use.*$/Current power settings/' \\\n       -e 's/$/ | font=Courier color=black size=12/'\n\nexit 0\n#eof\n"
				}
			],
			"path": "System/power_status.15s.sh",
			"filename": "power_status.15s.sh",
			"dir": "System",
			"docsPlugin": "System/power_status.15s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Power Status",
			"version": "v1.0",
			"author": "Jeff Beadles",
			"authors": [
				{
					"name": "Jeff Beadles",
					"githubUsername": "jeffbeadles",
					"imageURL": "https://avatars.githubusercontent.com/u/1981225?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows power source, current mode and settings",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.343456Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/power_wattage.30s.sh",
					"filename": "power_wattage.30s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003ePower Wattage\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003evxider\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003evxider\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThe AC power adapter wattage for macos\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/4N0xk1g.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\npower_wattage=\"$(/usr/sbin/system_profiler SPPowerDataType | grep \"Wattage (W)\" | awk \"{print \\$3\\\"W\\\"}\")\"\n\nif [ -z \"$power_wattage\" ]\nthen\n  echo \"🔋\"\u001b \nelse\n  echo \"🔌${power_wattage}\"\nfi\n\necho \"---\"\necho \"Refresh... | refresh=true\""
				}
			],
			"path": "System/power_wattage.30s.sh",
			"filename": "power_wattage.30s.sh",
			"dir": "System",
			"docsPlugin": "System/power_wattage.30s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Power Wattage",
			"version": "v1.0",
			"author": "vxider",
			"authors": [
				{
					"name": "vxider",
					"githubUsername": "vxider",
					"imageURL": "https://avatars.githubusercontent.com/u/6134315?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "The AC power adapter wattage for macos",
			"imageURL": "https://i.imgur.com/4N0xk1g.jpg",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.353927Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/real-cpu-usage.10s.sh",
					"filename": "real-cpu-usage.10s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eReal CPU Usage\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eMat Ryer and Tyler Bunnell\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ematryer\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eCalcualtes and displays real CPU usage stats.\u003c/bitbar.desc\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n\nif [ \"$1\" == \"activitymonitor\" ]; then\n\topen -a \"Activity Monitor\"\n\texit\nfi\n\nIDLE=$(top -F -R -l3 | grep \"CPU usage\" | tail -1 | egrep -o '[0-9]{0,3}\\.[0-9]{0,2}% idle' | sed 's/% idle//')\n\nUSED=$(echo 100 - \"$IDLE\" | bc)\n\necho \"CPU: $USED%\"\necho \"---\"\necho \"Open Activity Monitor| bash='$0' param1=activitymonitor terminal=false\"\n"
				}
			],
			"path": "System/real-cpu-usage.10s.sh",
			"filename": "real-cpu-usage.10s.sh",
			"dir": "System",
			"docsPlugin": "System/real-cpu-usage.10s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Real CPU Usage",
			"version": "1.0",
			"author": "Mat Ryer and Tyler Bunnell",
			"authors": [
				{
					"name": "Mat Ryer",
					"githubUsername": "matryer",
					"imageURL": "https://avatars.githubusercontent.com/u/101659?v=4",
					"bio": "Building pace.dev and firesearch.dev - Gopher, developer, speaker, author (Go Programming Blueprints) - BitBar app getbitbar.com - Co-creator Gopherize.me",
					"primary": true
				}
			],
			"desc": "Calcualtes and displays real CPU usage stats.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.402703Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/real-cpu-usage-chart.10s.sh",
					"filename": "real-cpu-usage-chart.10s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eReal CPU Usage Chart (▁▃▃█▇▃)\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMarian Schubert\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emaio\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eChart CPU usage over last minute.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/18138/12124861/27f42162-b3e8-11e5-845e-38bec5433d03.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003espark\u003c/bitbar.dependencies\u003e\n#\n# Based on work by Mat Ryer and Tyler Bunnell\n#\n# This script requires https://github.com/holman/spark\n\nSPARK=\"/usr/local/bin/spark\"\n\nif [ ! -f \"${SPARK}\" ]; then\n    echo \"Install spark utility please.\"\n    exit 1\nfi\n\nIDLE=$(top -F -R -l3 | grep \"CPU usage\" | tail -1 | \\\n      egrep -o '[0-9]{0,3}\\.[0-9]{0,2}% idle' | sed 's/% idle//')\n\nCURRENT=$(printf \"%.0f\" \"$(echo 100 - \"$IDLE\" | bc)\")\n\n# Let's put/keep last 6 values (= one minute) in HISTORY_FILE\nHISTORY_FILE=\"${HOME}/.cpu.history\"\ntouch \"${HISTORY_FILE}\"\nPREVIOUS=$(tail -5 \"${HISTORY_FILE}\")\necho \"$PREVIOUS\" \u003e \"${HISTORY_FILE}\"\necho \"$CURRENT\" \u003e\u003e \"${HISTORY_FILE}\"\n\n# Spark outputs unicode characters so let's make sure we can handle\n# them correctly.\nLC_ALL=en_US.UTF-8\n\n# Spark uses maximum input value to define scale so let's make sure\n# that input contains at least one 100(%). Strip it afterwards.\nCHART=$( ( echo 100 ; cat \"${HISTORY_FILE}\" ) | ${SPARK})\necho \"${CHART:1}\"\n"
				}
			],
			"path": "System/real-cpu-usage-chart.10s.sh",
			"filename": "real-cpu-usage-chart.10s.sh",
			"dir": "System",
			"docsPlugin": "System/real-cpu-usage-chart.10s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Real CPU Usage Chart (▁▃▃█▇▃)",
			"version": "v1.0",
			"author": "Marian Schubert",
			"authors": [
				{
					"name": "Marian Schubert",
					"githubUsername": "maio",
					"imageURL": "https://avatars.githubusercontent.com/u/18138?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Chart CPU usage over last minute.",
			"imageURL": "https://cloud.githubusercontent.com/assets/18138/12124861/27f42162-b3e8-11e5-845e-38bec5433d03.png",
			"dependencies": [
				"spark"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.386771Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/redis-memcached.10s.sh",
					"filename": "redis-memcached.10s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eRedis - Memcached\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eHugo Defrane\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ekoleror\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin will start and stop a memcached and redis server\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://oi67.tinypic.com/28u1y1g.jpg\u003c/birtbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\nREDIS_PID=$(/usr/bin/pgrep redis-server)\nMEMCACHED_PID=$(/usr/bin/pgrep memcached)\n\n# GENERAL COMMANDS\nif [ \"$1\" = 'start_all' ]; then\n  # start all\n   /usr/local/bin/redis-server \u0026\n   /usr/local/bin/memcached \u0026\nfi\n\nif [ \"$1\" = 'restart_all' ]; then\n  /usr/bin/killall memcached\n  /usr/local/bin/redis-cli shutdown NOSAVE\n   /usr/local/bin/redis-server \u0026\n   /usr/local/bin/memcached \u0026\nfi\nif [ \"$1\" = 'stop_all' ]; then\n  /usr/bin/killall memcached\n  /usr/local/bin/redis-cli shutdown NOSAVE\nfi\n\n\n# MEMCACHED\nif [ \"$1\" = 'start_memcached' ]; then\n  # stop all previous processes\n  /usr/local/bin/memcached \u0026\nfi\nif [ \"$1\" = 'stop_memcached' ]; then\n  # send terminate signal to all processes of program 'redis-server'\n  /usr/bin/killall memcached\nfi\n\n# REDIS\nif [ \"$1\" = 'start_redis' ]; then\n  # stop all previous processes\n  echo \"start\"\n  /usr/local/bin/redis-server \u0026\nfi\nif [ \"$1\" = 'stop_redis' ]; then\n  /usr/local/bin/redis-cli shutdown NOSAVE\nfi\nif [ \"$1\" = 'flush_redis' ]; then\n  /usr/local/bin/redis-cli FLUSHALL\nfi\n\n\n# MENU\necho \"⚙️\"\necho '---'\nif [ \"$MEMCACHED_PID\" = \"\" ] \u0026\u0026 [ \"$REDIS_PID\" = \"\" ]; then\n  echo \"Start all | bash='$0' param1=start_all terminal=false refresh=true\"\nelse\n  echo \"Restart all | bash='$0' param1=restart_all terminal=false refresh=true\"\nfi\nif [ \"$MEMCACHED_PID\" != \"\" ] || [ \"$REDIS_PID\" != \"\" ]; then\n  echo \"Stop all | bash='$0' param1=stop_all terminal=false refresh=true\"\nfi\n\necho '---'\nif [ \"$MEMCACHED_PID\" = \"\" ]; then\n    echo \"Start memcached | bash='$0' param1=start_memcached terminal=false refresh=true\"\nelse\n    echo \"Stop memcached | bash='$0' param1=stop_memcached terminal=false refresh=true\"\nfi\necho '---'\nif [ \"$REDIS_PID\" = \"\" ]; then\n    echo \"Start redis server | bash='$0' param1=start_redis terminal=false refresh=true\"\nelse\n    echo \"Flush Redis | bash='$0' param1=flush_redis terminal=false\"\n    echo \"Stop Redis | bash='$0' param1=stop_redis terminal=false refresh=true\"\nfi\n"
				}
			],
			"path": "System/redis-memcached.10s.sh",
			"filename": "redis-memcached.10s.sh",
			"dir": "System",
			"docsPlugin": "System/redis-memcached.10s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Redis - Memcached",
			"version": "v0.1",
			"author": "Hugo Defrane",
			"authors": [
				{
					"name": "Hugo Defrance",
					"githubUsername": "koleror",
					"imageURL": "https://avatars.githubusercontent.com/u/1033583?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin will start and stop a memcached and redis server",
			"imageURL": "http://oi67.tinypic.com/28u1y1g.jpg",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.506835Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/lock-screen.10h.sh",
					"filename": "lock-screen.10h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eScreen Lock\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eChris Tomkins-Tinch\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etomkinsc\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays a menu with an item to lock the screen with one click (lock or login screen).\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/53064/12120421/e515718c-b39e-11e5-830b-bebe1c6445fc.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\nif [ \"$1\" = 'lock' ]; then\n  # To perform a sleep action\n  # Requires \"password after sleep or screen saver begins\" to be set in Security preferences\n  #osascript -e 'tell application \"Finder\" to sleep'\n\n  # To perform a lock (login screen) action\n  # Requires \"Fast User Switching\" to be enabled in system Login preferences\n  /System/Library/CoreServices/Menu\\ Extras/User.menu/Contents/Resources/CGSession -suspend\n  exit\nfi\n\necho \"🔒\"\necho '---'\necho \"Lock Now | bash='$0' param1=lock terminal=false\"\n"
				}
			],
			"path": "System/lock-screen.10h.sh",
			"filename": "lock-screen.10h.sh",
			"dir": "System",
			"docsPlugin": "System/lock-screen.10h.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Screen Lock",
			"version": "v1.0",
			"author": "Chris Tomkins-Tinch",
			"authors": [
				{
					"name": "Chris Tomkins-Tinch",
					"githubUsername": "tomkinsc",
					"imageURL": "https://avatars.githubusercontent.com/u/53064?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin displays a menu with an item to lock the screen with one click (lock or login screen).",
			"imageURL": "https://cloud.githubusercontent.com/assets/53064/12120421/e515718c-b39e-11e5-830b-bebe1c6445fc.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:03.913395Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/screenshot.1d.py",
					"filename": "screenshot.1d.py",
					"content": "#!/usr/bin/env python\n# coding=utf-8\n# \u003cbitbar.title\u003eScreenshot\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBrandon Barker, Soumya Ranjan Mohanty\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eProjectBarks, geekysrm\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eAllows for screenshots to be uploaded, saved, and added to the clipboard\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/51rg3EJ.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/matryer/bitbar-plugins/blob/master/System/screenshot.1d.py\u003c/bitbar.abouturl\u003e\n\nimport os, subprocess, tempfile, hashlib, requests, sys, platform, time\nfrom distutils.version import StrictVersion\n\nSAVE_PATH = \"~/Pictures/\"\n\n\ndef screenshot(path, copy_to_clipboard=False, show_cursor=False, show_errors=False, interactive=False,\n               only_main_monitor=False, window_mode=False, open_in_preview=False, selection_mode=True,\n               sounds=True, delay=5):\n    params = \"\"\n    if copy_to_clipboard:\n        params += \"-c \"\n    if show_cursor:\n        params += \"-C \"\n    if show_errors:\n        params += \"-d \"\n    if interactive:\n        params += \"-i \"\n    if only_main_monitor:\n        params += \"-m \"\n    if window_mode:\n        params += \"-o \"\n    if open_in_preview:\n        params += \"-P \"\n    if selection_mode:\n        params += \"-s \"\n    if sounds:\n        params += \"-x \"\n    if delay != 5 and delay \u003e= 0:\n        params += \"-T {} \".format(delay)\n\n    os.system(\"screencapture {} {}\".format(params, path))\n    return os.path.isfile(path)\n\n\ndef text_to_clipboard(output):\n    process = subprocess.Popen('pbcopy', env={'LANG': 'en_US.UTF-8'}, stdin=subprocess.PIPE)\n    process.communicate(output.encode('utf-8'))\n\n\ndef notify(title, subtitle, message):\n    command = \"display notification \\\"{}\\\" with title \\\"{}\\\"\".format(message, title)\n    if len(subtitle) \u003e 0:\n        command += \" subtitle \\\"{}\\\"\".format(subtitle)\n    os.system(\"osascript -e '{}'\".format(command))\n\n\ndef upload_image(upload):\n    # upload is the path of the image\n    headers = {\n        'authorization': 'Client-ID 6fcd294cd0e8aa1',\n    }  \n    files = {\n        'image': (open(upload, 'rb')),\n    }\n    r = requests.post('https://api.imgur.com/3/upload', headers=headers, files=files)\n    import json\n    return json.loads(r.text)['data']['link']\n\nclass Command(object):\n    def __init__(self, title, name):\n        self.title = title\n        self.name = name\n\n    def get_name(self):\n        return self.name\n\n    def get_description(self):\n        return \"{0} |bash={2} param1={1} terminal=false\".format(self.title, self.name, os.path.realpath(__file__))\n\n    def execute(self):\n        raise Exception(\"Abstract Function\")\n\n\nclass Upload(Command):\n    def __init__(self):\n        super(Upload, self).__init__(\"Upload Online\", \"upload\")\n\n    def execute(self):\n        temp_path = tempfile.NamedTemporaryFile().name + \".png\"\n        if not screenshot(temp_path):\n            exit()\n        notify(\"Uploading Screenshot\", \"\", \"Your image is being uploaded online!\")\n        url = upload_image(temp_path)\n        os.remove(temp_path)\n        notify(\"Copied Screenshot\", \"\", \"Image URL copied to clipboard!\")\n        text_to_clipboard(url)\n\n\nclass Clipboard(Command):\n    def __init__(self):\n        super(Clipboard, self).__init__(\"Copy to Clipboard\", \"clipboard\")\n\n    def execute(self):\n        temp_path = tempfile.NamedTemporaryFile().name + \".png\"\n        if not screenshot(temp_path):\n            exit()\n        os.system(\"osascript -e 'set the clipboard to POSIX file \\\"{}\\\"'\".format(temp_path))\n        notify(\"Copied Screenshot\", \"\", \"Image copied to clipboard!\")\n\n\nclass SaveFile(Command):\n    def __init__(self):\n        super(SaveFile, self).__init__(\"Save to File\", \"save\")\n\n    def execute(self):\n        temp_path = os.path.join(os.path.expanduser(SAVE_PATH), time.strftime(\"screenshot-%Y%m%d-%H%M%S.png\"))\n        parent = os.path.dirname(temp_path)\n        if not os.path.isdir(parent):\n            os.mkdir(parent)\n        if not screenshot(temp_path):\n            exit()\n        os.system(\"open -R {0}\".format(temp_path))\n\n\nversion = platform.mac_ver()[0]\nif StrictVersion(version) \u003c StrictVersion(\"10.9\"):\n    raise Exception(\"Mac OSX is too old!\")\n\nsub_commands = [Upload(), Clipboard(), SaveFile()]\n\nif len(sys.argv) \u003c= 1:\n    print(\"📸\")\n    print(\"---\")\n    for sub_command in sub_commands:\n        print(sub_command.get_description())\nelse:\n    try:\n        for sub_command in sub_commands:\n            if sub_command.get_name() != sys.argv[1]:\n                continue\n            sub_command.execute()\n    except Exception, e:\n        notify(\"Error\", \"\", str(e))\n"
				}
			],
			"path": "System/screenshot.1d.py",
			"filename": "screenshot.1d.py",
			"dir": "System",
			"docsPlugin": "System/screenshot.1d.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Screenshot",
			"version": "v1.1",
			"author": "Brandon Barker,  Soumya Ranjan Mohanty",
			"authors": [
				{
					"name": "Brandon Barker",
					"githubUsername": "ProjectBarks",
					"imageURL": "https://avatars.githubusercontent.com/u/4194371?v=4",
					"bio": "I am a proud tinkerer, inventor, nerd, student, and full-time software developer.",
					"primary": true
				},
				{
					"name": "Soumya Ranjan Mohanty",
					"githubUsername": "geekysrm",
					"imageURL": "https://avatars.githubusercontent.com/u/10224804?v=4",
					"bio": "Software Engineer @JLL;\r\n@google Certified Mobile Web Specialist, Google India Scholar '18, Fullstack WebDev, ❤️ Music, Ex-Dell, Ex-Hasura\r\n\r\n",
					"primary": false
				}
			],
			"desc": "Allows for screenshots to be uploaded, saved, and added to the clipboard",
			"imageURL": "http://i.imgur.com/51rg3EJ.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/matryer/bitbar-plugins/blob/master/System/screenshot.1d.py",
			"lastUpdated": "2021-03-08T15:22:04.590766Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Screenshotter.1d.sh",
					"filename": "Screenshotter.1d.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eScreenshotter\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emoshed\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emoshed\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTakes Screenshots from menu bar with confugrable delay (by holding alt key when tapping an option), screenshot modes (fullscreen, window, crop or touchbar), alerts and direct imgur upload \u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/6wt8cbN.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ehttps://github.com/vjeantet/alerter/releases\u003c/bitbar.dependencies\u003e\n\nfunction encode_image {\n    icon=\"\"\n}\n\nfunction screenshot () {\n    screencapture \"$1\" \"$(cat \"${bitbar_directory}/setup/com.screenshotter.setup\")$(date +'%Y.%m.%d-%H.%M.%S').png\"\n}\n\nfunction post_screenshot {\n    screenshot_path=$(find \"$screenshot_folder\" -mindepth 1 | sort -r | grep -v .DS_Store | head -n 1)\n    osascript -e \"tell application \\\"Finder\\\" to set the clipboard to (POSIX file \\\"$screenshot_path\\\")\"\n    user_response_1=$(alerter -title \"Screenshotter\" -sender \"com.apple.automator.Screenshotter\" -message \"Screenshot Taken\" -actions \"Upload to Imgur,Open Location,Edit\" -dropdownLabel Actions -timeout 5 -contentImage \"$screenshot_path\")\n    if [ \"$user_response_1\" == \"Upload to Imgur\" ]\n    then\n        imgur_uploader \"$screenshot_path\"\n        user_response_2=$(alerter -title \"Screenshotter\" -subtitle \"Succesfully Uploaded\" -message \"Link copied to clipboard\" -actions \"Open Link\" -timeout 5 -sender \"com.apple.automator.imgur\" -contentImage \"$screenshot_path\")\n        if [ \"$user_response_2\" == \"Open Link\" ]\n        then\n            open \"$(pbpaste)\"\n        fi\n    elif [ \"$user_response_1\" == \"Open Location\" ]\n    then\n        open -R \"$screenshot_path\"\n    elif [ \"$user_response_1\" == \"Edit\" ]\n    then\n        open \"$screenshot_path\"\n        sleep .5\n        osascript \"${HOME}/Library/Mobile Documents/com~apple~ScriptEditor2/Documents/Markup Toolbar Show.scpt\"\n    fi\n}\n\nfunction delay {\n    delay_time=$(alerter -title \"Screenshotter\" -sender \"com.apple.automator.Screenshotter\" -message \"Set delay\" -actions 1s,2s,5s,10s,20s,30s,60s -dropdownLabel Set -timeout 10 | sed 's/[^0-9]//g')\n    alerter -title \"Screenshotter\" -sender \"com.apple.automator.Screenshotter\" -message \"Screenshotting in $delay_time seconds\" -timeout 1\n    for x in $(seq \"$delay_time\")\n    do\n        echo \"$x\" \u003e/dev/null\n        afplay /System/Library/Sounds/Morse.aiff\n        seleep 1\n    done\n}\n\nbitbar_directory=${0%/*}\nencode_image\n\nif [ ! -f \"${bitbar_directory}/setup/com.screenshotter.setup\" ]\nthen\n    mkdir \"${bitbar_directory}/setup\"\n    if [ \"$(alerter -title \"Screenshotter\" -sender \"com.apple.automator.Screenshotter\" -message \"Set Screenshot path\" -actions \"Set Path\" -timeout 7)\" == \"Set Path\" ]\n    then\n        screenshot_folder=$(osascript -e \"POSIX path of (choose folder)\")\n    else\n        exit\n    fi\n    echo \"$screenshot_folder\" \u003e\"${bitbar_directory}/setup/com.screenshotter.setup\"\n    chflags hidden \"${bitbar_directory}/setup\"\nelse\n    screenshot_folder=$(cat \"${bitbar_directory}/setup/com.screenshotter.setup\")\nfi\n\nif [ \"$1\" == \"fullscreen\" ]\nthen\n    if [ \"$2\" == \"delay\" ]\n    then\n        delay\n    fi\n    screenshot\n    post_screenshot\nelif [ \"$1\" == \"crop\" ]\nthen\n    if [ \"$2\" == \"delay\" ]\n    then\n        delay\n    fi\n    screenshot -s\n    post_screenshot\nelif [ \"$1\" == \"window\" ]\nthen\n    if [ \"$2\" == \"delay\" ]\n    then\n        delay\n    fi\n    screenshot -w\n    post_screenshot\nelif [ \"$1\" == \"touchbar\" ]\nthen\n    if [ \"$2\" == \"delay\" ]\n    then\n        delay\n    fi\n    screenshot -b\n    post_screenshot\nelif [ \"$1\" == \"keyboard\" ]\nthen\n    user_response_3=$(alerter -title \"Screenshotter\" -sender \"com.apple.automator.Screenshotter\" -message \"Choose Screenshot Mode\" -actions Fullscreen,Window,Crop,Touchbar -dropdownLabel \"Mode\" -timeout 5 | tr '[:upper:]' '[:lower:]' )\n    \"${HOME}/Resources/BitBar/Screenshotter.1d.sh\" \"$user_response_3\"\nfi\n\necho \" | templateImage=$icon\"\necho \"---\"\necho \"Fullscreen | bash='$0' param1=fullscreen terminal=false\"\necho \"Fullscreen Delay | bash='$0' param1=fullscreen param2=delay terminal=false alternate=true\"\necho \"Window | bash='$0' param1=window terminal=false\"\necho \"Window Delay| bash='$0' param1=window terminal=false param2=delay alternate=true\"\necho \"Crop | bash='$0' param1=crop terminal=false\"\necho \"Crop Delay| bash='$0' param1=crop terminal=false param2=delay alternate=true\"\necho \"Touchbar | bash='$0' param1=touchbar terminal=false\"\necho \"Touchbar Delay | bash='$0' param1=touchbar terminal=false param2=delay alternate=true\"\n"
				}
			],
			"path": "System/Screenshotter.1d.sh",
			"filename": "Screenshotter.1d.sh",
			"dir": "System",
			"docsPlugin": "System/Screenshotter.1d.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Screenshotter",
			"version": "v1.1",
			"author": "moshed",
			"authors": [
				{
					"name": "moshed",
					"githubUsername": "moshed",
					"imageURL": "https://avatars.githubusercontent.com/u/8683379?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Takes Screenshots from menu bar with confugrable delay (by holding alt key when tapping an option), screenshot modes (fullscreen, window, crop or touchbar), alerts and direct imgur upload ",
			"imageURL": "http://i.imgur.com/6wt8cbN.png",
			"dependencies": [
				"https://github.com/vjeantet/alerter/releases"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.244671Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/timemachine.2m.rb",
					"filename": "timemachine.2m.rb",
					"content": "#!/usr/bin/env ruby\n# encoding: utf-8\n\n# \u003cbitbar.title\u003eShow Time machine Progress\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSlamet Kristanto\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edrselump14\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow time machine backup progress\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003etime machine\u003c/bitbar.dependencies\u003e\n\nrequire 'date'\n\nstatus_lines = `tmutil status`\nstatus = {}\nstatus_lines.each_line do |line|\n  status[:percent] = (line.split(\"=\")[1][2..-4].strip.to_f * 100).round() if /^ *Percent =/ =~ line\n  status[:running] = (line.split(\"=\")[1][0..-2].strip).to_i if /^ *Running =/ =~ line\n  status[:stopping] = (line.split(\"=\")[1][0..-2].strip).to_i if /^ *Stopping =/ =~ line\n  status[:time_remaining] = (line.split(\"=\")[1][0..-2].strip).to_i if /^ *TimeRemaining =/ =~ line\n  status[:cur_bytes] = (line.split(\"=\")[1][0..-2].strip).to_i if /^ *bytes =/ =~ line\n  status[:total_bytes] = (line.split(\"=\")[1][0..-2].strip).to_i if /^ *totalBytes =/ =~ line\n  status[:backup_phase] = line.split(\"=\")[1][0..-2].strip if /^ *BackupPhase =/ =~ line\nend\n\nif status[:running] == 0\n  status_line = \"\"\nelsif status[:stopping] == 1\n  status_line = \"Stopping\"\nelse\n  if status[:percent] == -100\n    status_line = \"Preparing\"\n  else\n    if status[:backup_phase].start_with?(\"Copying\")\n      status_line = \"#{status[:percent]}%\"\n    else\n      status_line = \"Completing\"\n    end\n  end\nend\n\nif File.exist?('/private/var/db/.TimeMachine.Results')\n  last_backup = DateTime.strptime((`defaults read /private/var/db/.TimeMachine.Results BACKUP_COMPLETED_DATE`.strip), \"%Y-%m-%d %H:%M:%S %z\").new_offset(DateTime.now.offset).strftime(\"%A %B %d, %Y %l:%M %P\")\nelse\n  last_backup = `/usr/libexec/PlistBuddy -c \"Print Destinations:0:SnapshotDates\" /Library/Preferences/com.apple.TimeMachine.plist | tail -n 2 | head -n 1`.strip\nend\n\nlast_backup = \"last backup #{last_backup}\"\nunless status_line.empty?\n  puts  \"⏳#{status_line} \"\n  puts  \"---\"\n  puts  \"(#{status[:cur_bytes]/1000000000}/#{status[:total_bytes]/1000000000}GB) | size=11\" unless status[:percent] == -100\n  puts  \"#{last_backup}\"\nend\n"
				}
			],
			"path": "System/timemachine.2m.rb",
			"filename": "timemachine.2m.rb",
			"dir": "System",
			"docsPlugin": "System/timemachine.2m.rb.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Show Time machine Progress",
			"version": "v1.0",
			"author": "Slamet Kristanto",
			"authors": [
				{
					"name": "Kris",
					"githubUsername": "drselump14",
					"imageURL": "https://avatars.githubusercontent.com/u/1251454?v=4",
					"bio": "vim,tmux,alfred, ruby, rails, python, golang, typescript, swift, java, c, c++, elixir, terraform, terragrunt, serverless, AWS\r\n",
					"primary": true
				}
			],
			"desc": "Show time machine backup progress",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"time machine"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.776639Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/showhide-files.1d.py",
					"filename": "showhide-files.1d.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# \u003cbitbar.title\u003eShow hidden files in Finder\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eThomas Kurz\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003edashorty\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow hidden files in Finder\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://github.com/dashorty/bitbar-showhide-files/blob/master/screenshot.png?raw=true\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/dashorty/bitbar-showhide-files\u003c/bitbar.abouturl\u003e\n\nimport sys\nimport os\n\nif len(sys.argv) == 1:\n    print \"| templateImage=iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QAAKqNIzIAAAAJcEhZcwAADdcAAA3XAUIom3gAAAAHdElNRQfiAwIWGC2lnrmcAAAA8UlEQVQ4y92SMW7CUBBEX9JZQikxDVS0VKShceEbcBkkDhHREwquQIm4ABUHQOIAlKZCisJLE+z/bUeK6JLp/uxo/87uwL+FXbu/E45derBQtfDg0vHP4ql777hZYe+0Ke64LgUbcxNTM3clt7YTykcey9IsajQv+aOjOzn0XHUHsO+bKycAwS9nh4A9T8G8OTjwquqnEzALqid7uA2Imwm4KN8rMDXE9jny/sQLUNkrgAvG+4lHysBXP1S92gfz2kg107vv8727cADgpma6sdZ59P+sZa2Nw+3MTE3Mg+7x4VqiEYajLRoPhe+heP9JfAEpl32XjyFcEgAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOC0wMy0wMlQyMjoyNDo0NSswMTowMFm39GAAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTgtMDMtMDJUMjI6MjQ6NDUrMDE6MDAo6kzcAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAABJRU5ErkJggg==\"\n    print '---'\n    print 'show hidden files | terminal=false bash=%s param1=show' % sys.argv[0]\n    print 'hide hidden files | terminal=false bash=%s param1=hide' % sys.argv[0]\n    print '---'\n    print 'show desktop icons | terminal=false bash=%s param1=showicn' % sys.argv[0]\n    print 'hide desktop icons | terminal=false bash=%s param1=hideicn' % sys.argv[0]\nelif sys.argv[1] == 'show':\n    os.system('defaults write com.apple.finder AppleShowAllFiles YES \u0026\u0026 killall Finder')\nelif sys.argv[1] == 'hide':\n    os.system('defaults write com.apple.finder AppleShowAllFiles NO \u0026\u0026 killall Finder')\nelif sys.argv[1] == 'showicn':\n    os.system('defaults write com.apple.finder CreateDesktop YES \u0026\u0026 killall Finder')\nelif sys.argv[1] == 'hideicn':\n    os.system('defaults write com.apple.finder CreateDesktop NO \u0026\u0026 killall Finder')\n\n"
				}
			],
			"path": "System/showhide-files.1d.py",
			"filename": "showhide-files.1d.py",
			"dir": "System",
			"docsPlugin": "System/showhide-files.1d.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Show hidden files in Finder",
			"version": "v0.2",
			"author": "Thomas Kurz",
			"authors": [
				{
					"name": "Thomas",
					"githubUsername": "dashorty",
					"imageURL": "https://avatars.githubusercontent.com/u/2131900?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show hidden files in Finder",
			"imageURL": "https://github.com/dashorty/bitbar-showhide-files/blob/master/screenshot.png?raw=true",
			"dependencies": null,
			"aboutURL": "https://github.com/dashorty/bitbar-showhide-files",
			"lastUpdated": "2021-03-08T15:22:04.87766Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/show-hide-desktop-icons.1h.py",
					"filename": "show-hide-desktop-icons.1h.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eShow/Hide Desktop Icons\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJordi Petit\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejordi-petit\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin displays a menu with two items to show or hide the desktop icons with one click.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/c3KYTAc.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\nimport sys, os\n\nif len(sys.argv) == 1:\n#   print 'Ξ'\n    print '💻'\n    print '---'\n    print 'Hide desktop icons | terminal=false bash=%s param1=hide' % sys.argv[0]\n    print 'Show desktop icons | terminal=false bash=%s param1=show' % sys.argv[0]\nelif sys.argv[1] == 'hide':\n   os.system('defaults write com.apple.finder CreateDesktop false \u0026\u0026 killall Finder')  \nelif sys.argv[1] == 'show':\n   os.system('defaults write com.apple.finder CreateDesktop true  \u0026\u0026 killall Finder')     \n"
				}
			],
			"path": "System/show-hide-desktop-icons.1h.py",
			"filename": "show-hide-desktop-icons.1h.py",
			"dir": "System",
			"docsPlugin": "System/show-hide-desktop-icons.1h.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Show/Hide Desktop Icons",
			"version": "v1.0",
			"author": "Jordi Petit",
			"authors": [
				{
					"name": "Jordi Petit",
					"githubUsername": "jordi-petit",
					"imageURL": "https://avatars.githubusercontent.com/u/2351822?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin displays a menu with two items to show or hide the desktop icons with one click.",
			"imageURL": "http://i.imgur.com/c3KYTAc.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.659879Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/top5-memory-consuming-processes.sh",
					"filename": "top5-memory-consuming-processes.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eTop 5 Memory-Consuming Applications\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eQiansen Y\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ehypersport\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003etop 5 memory-consuming applications\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://23.105.211.229/images/top5-memory-consuming.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.about\u003etop 5 memory-consuming applications\u003c/bitbar.about\u003e\n\nps xmo rss=,pmem=,comm= | while read -r rss pmem comm; ((n++\u003c5)); do\nsize=\"$((rss/1024))\";\nshort=$((4-${#size}));\nsize=\"(${size}M)\";\ni=0;\nwhile ((i++ \u003c short)); do size=\" $size\"; done;\npmem=\"${pmem%%.*}\"\nif [ \"$pmem\" -ge 20 ]; then color=$'\\e[31m';\nelif [ \"$pmem\" -ge 10 ]; then color=$'\\e[33m';\nelse color=$'\\e[32m';\nfi\necho \"$color$pmem% $size $(basename \"$comm\")\"$'\\e[0m'\"\";\ndone\n"
				}
			],
			"path": "System/top5-memory-consuming-processes.sh",
			"filename": "top5-memory-consuming-processes.sh",
			"dir": "System",
			"docsPlugin": "System/top5-memory-consuming-processes.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Top 5 Memory-Consuming Applications",
			"version": "v1.0",
			"author": "Qiansen Y",
			"authors": [
				{
					"name": "Qiansen Y",
					"githubUsername": "hypersport",
					"imageURL": "https://avatars.githubusercontent.com/u/24826364?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "top 5 memory-consuming applications",
			"imageURL": "http://23.105.211.229/images/top5-memory-consuming.jpg",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.761724Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Battery/trackpad.1m.sh",
					"filename": "trackpad.1m.sh",
					"content": "#!/bin/sh\n\n# \u003cbitbar.title\u003eTrackpad Battery\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eMat Ryer\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ematryer\u003c/bitbar.author.github\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n\nPERCENTAGE=$(ioreg -n BNBTrackpadDevice | fgrep BatteryPercent | fgrep -v \\{ | sed 's/[^[:digit:]]//g')\n\nif [ \"$PERCENTAGE\" ]; then\n        echo \"Trackpad: $PERCENTAGE%\"\nfi\n"
				}
			],
			"path": "System/Battery/trackpad.1m.sh",
			"filename": "trackpad.1m.sh",
			"dir": "System/Battery",
			"docsPlugin": "System/Battery/trackpad.1m.sh.html",
			"docsCategory": "System/Battery.html",
			"pathSegments": [
				"System",
				"Battery"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": false
				},
				{
					"path": "System/Battery",
					"text": "Battery",
					"isLast": true
				}
			],
			"title": "Trackpad Battery",
			"version": "1.0",
			"author": "Mat Ryer",
			"authors": [
				{
					"name": "Mat Ryer",
					"githubUsername": "matryer",
					"imageURL": "https://avatars.githubusercontent.com/u/101659?v=4",
					"bio": "Building pace.dev and firesearch.dev - Gopher, developer, speaker, author (Go Programming Blueprints) - BitBar app getbitbar.com - Co-creator Gopherize.me",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:01.987377Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/trackpad-dot.1h.swift",
					"filename": "trackpad-dot.1h.swift",
					"content": "#!/usr/bin/env xcrun swift\n\n/*\n * \u003cbitbar.title\u003eTrackpad Dot\u003c/bitbar.title\u003e\n * \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n * \u003cbitbar.author\u003eManu Wallner\u003c/bitbar.author\u003e\n * \u003cbitbar.author.github\u003emilch\u003c/bitbar.author.github\u003e\n * \u003cbitbar.desc\u003eDisplays a coloured dot in the menu bar that gradually changes from green to yellow to red the lower your Magic Trackpad's battery\u003c/bitbar.desc\u003e\n * \u003cbitbar.image\u003ehttp://i.imgur.com/4G7B76u.png\u003c/bitbar.image\u003e\n * \u003cbitbar.dependencies\u003eXcode,swift\u003c/bitbar.dependencies\u003e\n */\n\nimport Foundation\n\ntypealias Color = (red : UInt, green : UInt, blue : UInt)\n\nfunc shell(_ args: String...) -\u003e String {\n    let task = Process()\n    task.launchPath = \"/bin/bash\"\n    task.arguments = [\"-c\"] + args\n    \n    let pipe = Pipe()\n    task.standardOutput = pipe\n    task.launch()\n    \n    let data = pipe.fileHandleForReading.readDataToEndOfFile()\n    let output: String = NSString(data: data, encoding: String.Encoding.utf8.rawValue) as! String\n    \n    return output.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n}\n\nfunc rgb(_ r : UInt, _ g : UInt , _ b : UInt) -\u003e Color {\n    return (red: r, green: g, blue: b)\n}\n\nfunc linear(_ initial: UInt, next: UInt, percent: Double) -\u003e Double {\n    return Double(initial) * (1.0 - percent) + Double(next) * (percent)\n}\n\nfunc interpolate(_ first : Color, second : Color, percent: Double) -\u003e Color {\n    let r = linear(first.red, next: second.red, percent: percent)\n    let g = linear(first.green, next: second.green, percent: percent)\n    let b = linear(first.blue, next: second.blue, percent: percent)\n    return rgb(UInt(r), UInt(g), UInt(b))\n}\n\nfunc componentToHex(_ component : UInt) -\u003e String {\n    return String(format:\"%02X\", component)\n}\n\nfunc colorToHex(_ color: Color) -\u003e String {\n    return [\n        \"#\",\n        componentToHex(color.red),\n        componentToHex(color.green),\n        componentToHex(color.blue)\n        ].joined(separator: \"\")\n}\n\nlet commandString = \"ioreg -c BNBTrackpadDevice | egrep -o 'BatteryPercent. = \\\\d{0,3}' | sed -E 's/[^0-9]+([0-9]{0,3})/\\\\1/g'\"\nlet trackpadPercentString = shell(commandString)\nvar trackpadDropdownString = \"\\(trackpadPercentString)%\"\nvar colorString = \"\"\n\nlet colors = [\n    rgb(231, 76, 60),\n    rgb(241, 196, 15),\n    rgb(0, 177, 106)\n]\n\nif let trackpadPercent = Int(trackpadPercentString) {\n    var interpolationColors : (first: Color, second: Color) = (first: rgb(0,0,0), second: rgb(0,0,0))\n    \n    switch(trackpadPercent) {\n    case 0...50: interpolationColors = (first: colors[0], second: colors[1])\n    case 50...100: interpolationColors = (first: colors[1], second: colors[2])\n    // Catch all to satisfy the compiler\n    default: break\n    }\n    let percent = trackpadPercent % 50 == 0 ? 1.0 : Double(trackpadPercent % 50) / 50.0\n    let color = interpolate(interpolationColors.first, second: interpolationColors.second, percent: percent)\n    colorString = colorToHex(color)\n} else {\n    colorString = \"#bdc3c7\"\n    trackpadDropdownString = \"Not connected\"\n}\n\nprint(\"● | color=\\(colorString)\")\nprint(\"---\")\nprint(\"Trackpad: \\(trackpadDropdownString)\")\n\n"
				}
			],
			"path": "System/trackpad-dot.1h.swift",
			"filename": "trackpad-dot.1h.swift",
			"dir": "System",
			"docsPlugin": "System/trackpad-dot.1h.swift.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Trackpad Dot",
			"version": "v1.0",
			"author": "Manu Wallner",
			"authors": [
				{
					"name": "Manu Wallner",
					"githubUsername": "milch",
					"imageURL": "https://avatars.githubusercontent.com/u/279407?v=4",
					"bio": "Jack of all trades, master of none. Co-founded @xforge-at. @fastlane core-team member. DevOps @ AWS.\r\n\r\nI'm @acrooow on Twitter. ",
					"primary": true
				}
			],
			"desc": "Displays a coloured dot in the menu bar that gradually changes from green to yellow to red the lower your Magic Trackpad's battery",
			"imageURL": "http://i.imgur.com/4G7B76u.png",
			"dependencies": [
				"Xcode",
				"swift"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:04.852379Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/trash-collector.5s.sh",
					"filename": "trash-collector.5s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eTrash Collector\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eCarlson Orozco\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecarlsonorozco\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTrash Collector is a plugin for BitBar that enables you to empty your trash.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/carlsonorozco/trash-collector/master/image.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/carlsonorozco/trash-collector\u003c/bitbar.abouturl\u003e\n\ntrash_count=$(find \"$HOME/.Trash/\" | wc -l)\ntrash_count=$((trash_count-1))\n\ntrash_size=$(du -sh \"$HOME/.Trash/\" | xargs | head -n1 | cut -d \" \" -f1)\n\nif [ \"$1\" = 'empty' ]; then\n    osascript -e '\n    tell application \"Finder\"\n        empty the trash\n    end tell'\n    exit\nfi\n\nif [ \"$1\" = 'open' ]; then\n    open \"$HOME/.Trash/\"\n    exit\nfi\n\nif [[ \"$trash_size\" == \"0B\" ]]; then\n    echo \"🗑 | bash='$0' param1=open terminal=false\"\nelse\n    echo \"$trash_size🗑\"\n    echo \"$trash_count items 🗑 | alternate=true\"\n    echo '---'\n    echo \"Open Trash | bash='$0' param1=open terminal=false\"\n    echo \"Empty Trash | bash='$0' param1=empty terminal=false\"\nfi\n"
				}
			],
			"path": "System/trash-collector.5s.sh",
			"filename": "trash-collector.5s.sh",
			"dir": "System",
			"docsPlugin": "System/trash-collector.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Trash Collector",
			"version": "v1.2",
			"author": "Carlson Orozco",
			"authors": [
				{
					"name": "Carlson Orozco",
					"githubUsername": "carlsonorozco",
					"imageURL": "https://avatars.githubusercontent.com/u/2333279?v=4",
					"bio": "Christianprenuer • Running Makinilya.com • Dad",
					"primary": true
				}
			],
			"desc": "Trash Collector is a plugin for BitBar that enables you to empty your trash.",
			"imageURL": "https://raw.githubusercontent.com/carlsonorozco/trash-collector/master/image.png",
			"dependencies": null,
			"aboutURL": "https://github.com/carlsonorozco/trash-collector",
			"lastUpdated": "2021-03-08T15:22:05.014642Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/usbInfo.10s.py",
					"filename": "usbInfo.10s.py",
					"content": "#!/usr/bin/env python\n\n# \u003cbitbar.title\u003eUSB Device Details\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eRaemond Bergstrom-Wood\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eRaemondBW\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays the device details user input usb devices\u003c/bitbar.desc\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n\nprint \"USB\"\nprint '---'\nimport plistlib\nimport subprocess\ndef findDevices(itemList):\n    for device in itemList:\n        if '_items' in device:\n            findDevices(device['_items'])\n        elif 'Built-in_Device' in device and device['Built-in_Device'] == 'Yes':\n            continue\n        else:\n            print \"Name:\\t\\t\\t\" + device['_name'] + '| bash=/usr/bin/open param1=\"/Applications/Utilities/System Information.app\" terminal=false'\n            if 'manufacturer' in device:\n                print \"Manufacturer:\\t\" + device['manufacturer'] + '| bash=/usr/bin/open param1=\"/Applications/Utilities/System Information.app\" terminal=false'\n            print '---'\n\nusbPlist = subprocess.check_output(['system_profiler', '-xml', 'SPUSBDataType'])\nusbInfo = plistlib.readPlistFromString(usbPlist)\nfindDevices(usbInfo)\n"
				}
			],
			"path": "System/usbInfo.10s.py",
			"filename": "usbInfo.10s.py",
			"dir": "System",
			"docsPlugin": "System/usbInfo.10s.py.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "USB Device Details",
			"version": "1.0",
			"author": "Raemond Bergstrom-Wood",
			"authors": [
				{
					"name": "Raemond",
					"githubUsername": "RaemondBW",
					"imageURL": "https://avatars.githubusercontent.com/u/1922488?v=4",
					"bio": "raemond.com",
					"primary": true
				}
			],
			"desc": "Displays the device details user input usb devices",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:05.251028Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/umbrella.5s.sh",
					"filename": "umbrella.5s.sh",
					"content": "#!/usr/bin/env bash\n#\n## \u003cbitbar.title\u003eUmbrellaBeGone\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# # \u003cbitbar.author\u003eJeff Levensailor\u003c/bitbar.author\u003e\n# # \u003cbitbar.author.github\u003elevensailor\u003c/bitbar.author.github\u003e\n# # \u003cbitbar.desc\u003eEnable/Disable Umbrella with Status on Menubar\u003c/bitbar.desc\u003e\n# # \u003cbitbar.dependancies\u003eumbrella.15s.sh\u003c/bitbar.dependancies\u003e\n\n# Dependancies:\n# If you want seamless integration, add NOPASSWD=ALL to admin account in /etc/sudoers file\n\nexport PATH=\"$PATH:/usr/local/bin\"\numbrella_status() {\n    status=$(sudo launchctl list | grep com.cisco.anyconnect.vpnagentd)\n    if [ \"$status\" != \"\" ]; then\n        echo \"👆\"\n    elif [ \"$status\" = \"\" ]; then\n        echo \"👇\"\n    else echo \"err\"\n    fi\n    #echo \"$status\"\n}\n\nenable_umbrella() {\n    sudo launchctl load /Library/LaunchDaemons/com.cisco.anyconnect.vpnagentd.plist \u0026\u0026 umbrella_status\n}\ndisable_umbrella() {\n    sudo launchctl unload /Library/LaunchDaemons/com.cisco.anyconnect.vpnagentd.plist \u0026\u0026 umbrella_status\n}\n\nif [ \"${1}\" == \"enable\" ]; then\n    enable_umbrella\n    \n\nelif [ \"${1}\" == \"disable\" ]; then\n    disable_umbrella\n\nelse\n    umbrella_status\n    echo \"---\"\n    echo \"---\"\n    echo \"Enable Umbrella | bash=$0 param1=enable terminal=false\"\n    echo \"---\"\n    echo \"Disable Umbrella | bash=$0 param1=disable terminal=false\"\nfi\n"
				}
			],
			"path": "System/umbrella.5s.sh",
			"filename": "umbrella.5s.sh",
			"dir": "System",
			"docsPlugin": "System/umbrella.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "UmbrellaBeGone",
			"version": "v1.0",
			"author": "Jeff Levensailor",
			"authors": [
				{
					"name": "Jeff Levensailor",
					"githubUsername": "levensailor",
					"imageURL": "https://avatars.githubusercontent.com/u/2538218?v=4",
					"bio": "Engineer trying to code stuff. Always learning. ",
					"primary": true
				}
			],
			"desc": "Enable/Disable Umbrella with Status on Menubar",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:05.053639Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/virtualbox-vms.5s.sh",
					"filename": "virtualbox-vms.5s.sh",
					"content": "#!/bin/sh\n#\n# \u003cbitbar.title\u003eVirtualbox VM status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJohan Bloemberg\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eaequitas\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow current number of running Virtualbox VM's. Allow to shut them all down.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://gist.githubusercontent.com/aequitas/7c57111556900aae6178/raw/76e4e457d700d31af6b2f32cbbb206ed1668b511/virtualbox.png\u003c/bitbar.image\u003e\n\nif test -x /usr/local/bin/VBoxManage;then\n    VBOX=/usr/local/bin/VBoxManage\nelif test -x /usr/bin/VBoxManage;then\n    VBOX=/usr/bin/VBoxManage\nelse\n    echo \"Failed to find VBoxManage command in default locations.\"\n    exit 1\nfi\n\nvms=\"$(${VBOX} list runningvms | cut -f2 -d\\\")\"\nvms_count=$(echo \"$vms\" | wc -l)\nvms_count=$((vms_count))\n\nif test ! -z \"$1\"; then\n    if test -z \"$2\"; then\n        echo \"$vms\" | xargs -I% ${VBOX} controlvm % \"$1\"\n    else\n        ${VBOX} controlvm \"$2\" \"$1\"\n    fi\n    exit\nfi\n\nif test -z \"$vms\"; then\n    echo \"V\"\nelse\n    echo \"V $vms_count\"\n    echo '---'\n    echo \"Poweroff all VM's | bash='$0' param1=poweroff terminal=false\"\n    echo \"ACPI Shutdown all VM's | bash='$0' param1=acpipowerbutton terminal=false\"\n    echo '---'\n    for vm in $vms;do\n        echo \"Poweroff $vm | bash='$0' param1=poweroff param2=$vm terminal=false\"\n        echo \"ACPI Shutdown $vm | bash='$0' param1=acpipowerbutton param2=$vm terminal=false\"\n    done\nfi\n"
				}
			],
			"path": "System/virtualbox-vms.5s.sh",
			"filename": "virtualbox-vms.5s.sh",
			"dir": "System",
			"docsPlugin": "System/virtualbox-vms.5s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Virtualbox VM status",
			"version": "v0.1",
			"author": "Johan Bloemberg",
			"authors": [
				{
					"name": "Johan Bloemberg",
					"githubUsername": "aequitas",
					"imageURL": "https://avatars.githubusercontent.com/u/365827?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show current number of running Virtualbox VM's. Allow to shut them all down.",
			"imageURL": "https://gist.githubusercontent.com/aequitas/7c57111556900aae6178/raw/76e4e457d700d31af6b2f32cbbb206ed1668b511/virtualbox.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:05.236172Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/Battery/watt-meter.20s.py",
					"filename": "watt-meter.20s.py",
					"content": "#!/usr/local/bin/python3\n\n# \u003cbitbar.title\u003eWatt Meter\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eEric Ripa\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eeripa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow current watt drain, tries to be smart and highlight high power usage\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/blj2KCP.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython3\u003c/bitbar.dependencies\u003e\n\nfrom plistlib import loads\nimport sys\nimport subprocess\n\n# Currently only rough guestimates. Only somewhat tested number on MacBook Air.abs\n# Feel free to update/tweak etc..\nIMPACT = {\n    2: {\n        \"MacBook Air\": {\n            \"high\": 20,\n            \"low\": 10\n        },\n        \"MacBook Pro\": {\n            \"high\": 50,\n            \"low\": 20\n        }\n    },\n    4: {\n        \"MacBook Pro\": {\n            \"high\": 70,\n            \"low\": 30\n        }\n    },\n    6: {\n        \"MacBook Pro\": {\n            \"high\": 80,\n            \"low\": 30\n        }\n    }\n}\n\ndef parse_system_profiler():\n    output = subprocess.check_output([\"/usr/sbin/system_profiler\", \\\n                                     \"-xml\", \"SPPowerDataType\", \"SPHardwareDataType\"])\n    plist = loads(output)\n    spbattery_info = plist[0]['_items'][0]\n\n    machine = {\n        \"current_amperage\": int(spbattery_info['sppower_current_amperage']),\n        \"current_voltage\": int(spbattery_info['sppower_current_voltage']),\n        \"current_watt\": abs(int(spbattery_info['sppower_current_voltage']) * \\\n            int(spbattery_info['sppower_current_amperage'])/1000/1000),\n        \"model\": plist[1]['_items'][0]['machine_name'],\n        \"cores\": plist[1]['_items'][0]['number_processors'],\n    }\n    return machine\n\ndef get_impact(machine):\n    model = machine['model']\n    cores = machine['cores']\n    watt = machine['current_watt']\n    low = IMPACT[cores][model]['low']\n    high = IMPACT[cores][model]['high']\n    if watt \u003c= low:\n        return \"low\"\n    if watt \u003e= high:\n        return \"high\"\n    return \"mid\"\n\ndef main():\n    machine = parse_system_profiler()\n    impact = get_impact(machine)\n    color = \"gray\"\n    if impact == \"low\":\n        color = \"green\"\n    if impact == \"high\":\n        color = \"red\"\n    refresh_interval = sys.argv[0].split('.')[2]\n    print(\"%.1fW | color=%s\" % (machine['current_watt'], color))\n    print(\"---\")\n    print(\"Refresh (current interval: %s) | refresh=true\" % refresh_interval)\n\nif __name__ == '__main__':\n    main()\n"
				}
			],
			"path": "System/Battery/watt-meter.20s.py",
			"filename": "watt-meter.20s.py",
			"dir": "System/Battery",
			"docsPlugin": "System/Battery/watt-meter.20s.py.html",
			"docsCategory": "System/Battery.html",
			"pathSegments": [
				"System",
				"Battery"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": false
				},
				{
					"path": "System/Battery",
					"text": "Battery",
					"isLast": true
				}
			],
			"title": "Watt Meter",
			"version": "v1.0.0",
			"author": "Eric Ripa",
			"authors": [
				{
					"name": "Eric Ripa",
					"githubUsername": "eripa",
					"imageURL": "https://avatars.githubusercontent.com/u/1429673?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show current watt drain, tries to be smart and highlight high power usage",
			"imageURL": "http://i.imgur.com/blj2KCP.png",
			"dependencies": [
				"python3"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.069559Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/webpack-status.1s.sh",
					"filename": "webpack-status.1s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eWebpack Status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eFrancesco Belladonna\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eFire-Dragon-DoL\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay the current status of webpack server compile: completed/ongoing/failed.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/Fire-Dragon-DoL/bitbar-webpack-status-plugin/master/bitbar-webpack-status-plugin.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003enode,webpack\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/Fire-Dragon-DoL/bitbar-webpack-status-plugin\u003c/bitbar.abouturl\u003e\n\ncolor_red=\"✘ | color=#ff0000 dropdown=false\"\ncolor_yellow=\"◉ | color=#ffa500 dropdown=false\"\ncolor_green=\"✔︎ | color=#008000 dropdown=false\"\n\nwebpack_status=\"/tmp/webpack-status\"\n\nsemaphore=0\n\nif [ -f $webpack_status ]; then\n  semaphore=$(cat $webpack_status)\nfi\n\nsemaphore_color=$color_yellow\n\n# -1 red, 0 yellow, 1 green\ncase $semaphore in\n-1)\n  # Red\n  semaphore_color=$color_red\n  ;;\n1)\n  # Green\n  semaphore_color=$color_green\n  ;;\n*)\n  # Orange\n  semaphore_color=$color_yellow\n  ;;\nesac\n\necho \"$semaphore_color\"\necho \"---\"\necho \"Clear Webpack Status | terminal=false bash=rm param1=-f param2='$webpack_status'\"\n"
				}
			],
			"path": "System/webpack-status.1s.sh",
			"filename": "webpack-status.1s.sh",
			"dir": "System",
			"docsPlugin": "System/webpack-status.1s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "Webpack Status",
			"version": "v1.1.2",
			"author": "Francesco Belladonna",
			"authors": [
				{
					"name": "Francesco Belladonna",
					"githubUsername": "Fire-Dragon-DoL",
					"imageURL": "https://avatars.githubusercontent.com/u/1329559?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display the current status of webpack server compile: completed/ongoing/failed.",
			"imageURL": "https://raw.githubusercontent.com/Fire-Dragon-DoL/bitbar-webpack-status-plugin/master/bitbar-webpack-status-plugin.jpg",
			"dependencies": [
				"node",
				"webpack"
			],
			"aboutURL": "https://github.com/Fire-Dragon-DoL/bitbar-webpack-status-plugin",
			"lastUpdated": "2021-03-08T15:22:05.253554Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/WhereAmI.48h.sh",
					"filename": "WhereAmI.48h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eWhereAmI\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003enoyannus\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003enoyannus\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays current system volume, system version, and user's home folder.\n# \u003cbitbar.desc\u003eUseful for staying oriented while booting into multiple test systems.\u003c/bitbar.desc\u003e\n# \u003cbitbar.desc\u003eReadme: https://github.com/noyannus/WhereAmI-Readme/blob/master/Readme.md\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/noyannus/WhereAmI-Readme/master/Minimalist.pngg\u003c/bitbar.image\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/noyannus/WhereAmI-Readme/master/KingSizeInfo.png\u003c/bitbar.image\u003e\n\n\n# Use the last `cut` to get only the relevant part of something like \"High Sierra beta with Spaghetticode Fork #123 Version 456alpha\"\nBOOTVOLUME=$(diskutil info \"$(df / | tail -1 | cut -d' ' -f 1)\" | grep 'Volume Name:' | cut -c  30-)\n\nSYSTEMVERSION=$(defaults read loginwindow SystemVersionStampAsString)\n\nUSERDIR=$HOME\n\n\n# Un/comment below to select appearance: either minimalist version, or king size info\n\n# # The minimalist version:\n# echo \"• $BOOTVOLUME\" @ \"$SYSTEMVERSION •\"\n\n# The king size info:\necho \"◥◤\"         # if you write a nice way to color this less brutally, send me a pull request.\necho \"---\"\necho \"Boot Volume:        $BOOTVOLUME | size=18\"    color=black\necho \"System Version:   $SYSTEMVERSION | size=18\" color=black\necho \"User Directory:     $USERDIR | size=18\"       color=black\n\n\n\n"
				}
			],
			"path": "System/WhereAmI.48h.sh",
			"filename": "WhereAmI.48h.sh",
			"dir": "System",
			"docsPlugin": "System/WhereAmI.48h.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "WhereAmI",
			"version": "v1.0.1",
			"author": "noyannus",
			"authors": [
				{
					"name": "noyannus",
					"githubUsername": "noyannus",
					"imageURL": "https://avatars.githubusercontent.com/u/6339921?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Readme: https://github.com/noyannus/WhereAmI-Readme/blob/master/Readme.md",
			"imageURL": "https://raw.githubusercontent.com/noyannus/WhereAmI-Readme/master/KingSizeInfo.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:02.31371Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/totp.30s.sh",
					"filename": "totp.30s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eYubiKey TOTP generator to clipboard plugin\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ereuel\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebrute-force\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003egenerates totp codes using yubikey\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/brute-force/\u003c/bitbar.abouturl\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n# clicking on an item will copy the code to the clipboard\n\nif [ $# -eq 3 ] \u0026\u0026 [ \"$1\" = \"copy\" ]; then\n  echo -n \"$3\" | pbcopy\n  osascript -e \"display notification \\\" $3 copied to clipboard\\\" with title \\\"$2\\\"\" \u0026\u003e /dev/null\n  exit\nelse\n  echo \"TOTP\"\n  echo \"---\"\n\n  /usr/local/bin/ykman oath code | while read -r line\n  do\n    account=${line/%:* *[0-9]/}\n    code=${line##* }\n\n    # trim account name to max characters\n    account_length_max=20\n    account=${account:0:account_length_max}\n\n    # pad code to for alignment\n    code_length_max=6\n    width=$((account_length_max - ${#account} + code_length_max))\n    item=$(printf \"%s %*s\" \"$account\" $width \"$code\")\n\n    echo \"$item | color=green font=Menlo size=13 bash='$0' param1=copy param2=\\\"$account\\\" param3=$code refresh=true terminal=false\"\n  done\n\n  exit\nfi\n"
				}
			],
			"path": "System/totp.30s.sh",
			"filename": "totp.30s.sh",
			"dir": "System",
			"docsPlugin": "System/totp.30s.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "YubiKey TOTP generator to clipboard plugin",
			"version": "1.0",
			"author": "reuel",
			"authors": [
				{
					"name": "Reuel",
					"githubUsername": "brute-force",
					"imageURL": "https://avatars.githubusercontent.com/u/5098101?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "generates totp codes using yubikey",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/brute-force/",
			"lastUpdated": "2021-03-08T15:22:04.793505Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/uptime.1m.sh",
					"filename": "uptime.1m.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003euptime\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMatteo Ferrando\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003echamini2\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow uptime command information.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/qaIxpJN.png\u003c/bitbar.image\u003e\n\n# the `sed` command removes the occasional leading whitespace\nINFO=$(uptime | sed 's/^ *//g')\necho \"$INFO\" | awk -F'[ ,:\\t\\n]+' '\n    {\n        PLURAL = 1\n        VERBOSE = 0\n\n        SEP = \", \"\n\n        DS = \" day\"\n        HS = \" hr\"\n        MS = \" min\"\n        SS = \" sec\"\n\n        ################################\n\n        D = H = M = S = 0\n        if (substr($5,0,1) == \"d\") {\n        # up for a day or more\n            D = $4\n\n            P = $6\n            Q = $7\n        } else {\n            P = $4\n            Q = $5\n        }\n\n        if (int(Q) == 0) {\n        # words evaluate to zero\n        # exact times format, like `P = 55`, `Q = secs`\n            Q = substr(Q,0,1)\n\n            if (Q == \"h\") { H = P }\n            else if (Q == \"m\") { M = P }\n            else if (Q == \"s\") { S = P }\n        } else {\n        # hh:mm format, like `P = 4`, `Q = 20`\n            H = P\n            M = Q\n        }\n\n        MSG = \"↑ \" include(D, DS, SEP, PLURAL)\n        MSG = MSG  include(H, HS, SEP, PLURAL, (D \u003e 0 \u0026\u0026 VERBOSE))\n        MSG = MSG  include(M, MS, SEP, PLURAL, (D \u003e 0 \u0026\u0026 VERBOSE))\n        MSG = MSG  include(S, SS, SEP, PLURAL)\n\n        # remove the remaining SEP\n        MSG = substr(MSG, 0, length(MSG) - length(SEP))\n\n        print \"[\", MSG, \"] | size=12\"\n    }\n\n    function include(VAL, UNIT, SUFFIX, PLURAL, VERBOSE) {\n        VAL = int(VAL)\n\n        if (PLURAL \u0026\u0026 VAL != 1) {\n            UNIT = UNIT\"s\"\n        }\n\n        if (VAL \u003e 0 || VERBOSE) {\n            return (VAL UNIT SUFFIX)\n        } else {\n            # return \"\"\n        }\n    }'\n\necho \"---\"\necho \"$INFO\" | tr \",\" \"\\n\" | tail -n 2\n"
				}
			],
			"path": "System/uptime.1m.sh",
			"filename": "uptime.1m.sh",
			"dir": "System",
			"docsPlugin": "System/uptime.1m.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "uptime",
			"version": "v1.2",
			"author": "Matteo Ferrando",
			"authors": [
				{
					"name": "Matteo Ferrando",
					"githubUsername": "chamini2",
					"imageURL": "https://avatars.githubusercontent.com/u/2745502?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show uptime command information.",
			"imageURL": "http://i.imgur.com/qaIxpJN.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:05.065759Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "System/uptime.5m.sh",
					"filename": "uptime.5m.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003euptime\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMatteo Ferrando\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003echamini2\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow uptime command information. Tweaked by Jonathan Clark to be more compact.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/qaIxpJN.png\u003c/bitbar.image\u003e\n\n# the `sed` command removes the occasional leading whitespace\nINFO=$(uptime | sed 's/^ *//g')\necho \"$INFO\" | awk -F'[ ,:\\t\\n]+' '\n    {\n        PLURAL = 1\n        VERBOSE = 0\n\n        SEP = \", \"\n\n        DS = \" day\"\n        HS = \" hr\"\n        MS = \" min\"\n        SS = \" sec\"\n\n        ################################\n\n        D = H = M = S = 0\n        if (substr($5,0,1) == \"d\") {\n        # up for a day or more\n            D = $4\n\n            P = $6\n            Q = $7\n        } else {\n            P = $4\n            Q = $5\n        }\n\n        if (int(Q) == 0) {\n        # words evaluate to zero\n        # exact times format, like `P = 55`, `Q = secs`\n            Q = substr(Q,0,1)\n\n            if (Q == \"h\") { H = P }\n            else if (Q == \"m\") { M = P }\n            else if (Q == \"s\") { S = P }\n        } else {\n        # hh:mm format, like `P = 4`, `Q = 20`\n            H = P\n            M = Q\n        }\n\n        MSG = \"↑ \" include(D, DS, SEP, PLURAL, (D \u003e 0))\n        MSG = MSG  include(H, HS, SEP, PLURAL, (D == 0 || VERBOSE))\n        MSG = MSG  include(M, MS, SEP, PLURAL, (D == 0 || VERBOSE))\n#        MSG = MSG  include(S, SS, SEP, PLURAL, (D == 0 || VERBOSE))\n\n        # remove the remaining SEP\n        MSG = substr(MSG, 0, length(MSG) - length(SEP))\n\n        # print \"[\", MSG, \"] | size=12\"\n        print MSG, \"| size=12\"\n    }\n\n    function include(VAL, UNIT, SUFFIX, PLURAL, VERBOSE) {\n        VAL = int(VAL)\n\n        if (PLURAL \u0026\u0026 VAL != 1) {\n            UNIT = UNIT\"s\"\n        }\n\n        if (VERBOSE) { # VAL \u003e 0 || VERBOSE) {\n            return (VAL UNIT SUFFIX)\n        } else {\n            # return \"\"\n        }\n    }'\n\necho \"---\"\necho \"$INFO\" | tr \",\" \"\\n\" | tail -n 2\necho \"---\"\necho \"Refresh now (normally every 5m) | refresh=\"\n"
				}
			],
			"path": "System/uptime.5m.sh",
			"filename": "uptime.5m.sh",
			"dir": "System",
			"docsPlugin": "System/uptime.5m.sh.html",
			"docsCategory": "System.html",
			"pathSegments": [
				"System"
			],
			"categoryPathSegments": [
				{
					"path": "System",
					"text": "System",
					"isLast": true
				}
			],
			"title": "uptime",
			"version": "v1.2",
			"author": "Matteo Ferrando",
			"authors": [
				{
					"name": "Matteo Ferrando",
					"githubUsername": "chamini2",
					"imageURL": "https://avatars.githubusercontent.com/u/2745502?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show uptime command information. Tweaked by Jonathan Clark to be more compact.",
			"imageURL": "http://i.imgur.com/qaIxpJN.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:05.151669Z",
			"vars": null
		}
	]
}