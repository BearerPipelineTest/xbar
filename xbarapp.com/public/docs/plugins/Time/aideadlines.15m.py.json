{
	"plugin": {
		"files": [
			{
				"path": "Time/aideadlines.15m.py",
				"filename": "aideadlines.15m.py",
				"content": "#!/usr/bin/env python3\n\n# \u003cbitbar.title\u003eAI deadlines counter\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJiseob Kim\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003enzer0\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eCount the days to the submission deadlines of AI conferences.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://github.com/nzer0/bitbar-aideadlines/blob/master/aid-screenshot.png?raw=true\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython3 (pyyaml, pytz, tzlocal, wget)\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/nzer0/bitbar-aideadlines\u003c/bitbar.abouturl\u003e\n\n\nimport os, re, sys\nimport datetime as dt\n\nME_PATH = os.path.realpath(__file__)\nROOT = os.path.dirname(ME_PATH)\nDL_FNAME = os.path.join(ROOT, '.aid.aideadlines.yaml')\nDLG_FNAME = os.path.join(ROOT, '.aid.processed.yaml')\nSEL_FNAME = os.path.join(ROOT, '.aid.seldl')\nSHB_FNAME = os.path.join(ROOT, '.aid.ammend_shebang')\nAID_URL = \"https://raw.githubusercontent.com/abhshkdz/ai-deadlines/gh-pages/_data/conferences.yml\"\n\n'''Write bash script to ammend the shebang'''\nif not os.path.exists(SHB_FNAME):\n\twith open(SHB_FNAME, \"w\") as sf:\n\t\tsf.write('#!/bin/bash\\n')\n\t\tsf.write('SB=`which python3`\\n')\n\t\tsf.write('sed -i \"\" -e \"1s:#!/usr/bin/env python3:#!/usr/bin/env $SB:\" \"$1\"\\n')\n\t\tsf.write('echo \"\u003e\u003e\u003e Now refresh the Bitbar \u003c\u003c\u003c\"')\n\tos.chmod(SHB_FNAME, 0o755)\n\n'''Display instructions if the dependencies are not installed'''\ntry:\n\timport yaml\n\tfrom pytz import timezone\n\tfrom tzlocal import get_localzone\n\timport wget\nexcept:\n\tprint(\"Install Dependencies\")\n\tprint(\"---\")\n\tprint(\"Please install the dependencies by clicking below | color=black\")\n\tprint(\"$ pip3 install pyyaml pytz tzlocal wget | color=green bash='pip3 install pyyaml pytz tzlocal wget' refresh=true\")\n\tprint(\"---\")\n\tprint(\"If it is still not working, click below | color=black\")\n\tprint(f\"Ammend shebang | color=green bash='{SHB_FNAME}' param1={ME_PATH}\")\n\tprint(\"then refresh the BitBar | color=black\")\n\tsys.exit(1)\n\n'''Replace UTC with Etc/GMT to be handled by pytz'''\ndef normalize_tz(tz):\n\tmo = re.search(r'UTC([+-]\\d+)', tz)\n\tif mo is None:\n\t\treturn tz\n\telse:\n\t\treturn f\"Etc/GMT{-int(mo.group(1)):+d}\"\n\n'''Parse the string to make a datetime obj with an appropriate local'''\ndef make_datetime(c, abs=False):\n\tdl_key = 'abstract_deadline' if abs else 'deadline'\n\treturn timezone(normalize_tz(c['timezone'])).localize(dt.datetime.strptime(c[dl_key], '%Y-%m-%d %H:%M:%S'))\n\n'''Compute the datetime diff with now'''\ndef get_diff(due):\n\treturn due - get_localzone().localize(dt.datetime.now())\n\n'''main Bitbar display'''\ndef main():\n\tif not os.path.exists(DL_FNAME):\n\t\tgetdl()\n\twith open(DLG_FNAME, 'r') as yf:\n\t\tdlg = yaml.safe_load(yf)\n\n\ttry:\n\t\t'''If there is a selected deadline'''\n\t\twith open(SEL_FNAME, 'r') as sf:\n\t\t\tsel = sf.readline().rstrip('\\n')\n\n\t\tconf = dlg['full'][sel]\n\t\tname = conf['title']\n\t\tdl = make_datetime(conf)\n\t\tdiff = get_diff(dl)\n\t\tdays = f\"+{-diff.days}\" if diff.days \u003c 0 else f\"-{diff.days}\"\n\t\thours = f\"{diff.seconds//3600}\"\n\t\tprint(f\"{name} D{days} {hours}h+\")\n\t\tprint(\"---\")\n\t\tprint(f\"About {name} {conf['year']}\")\n\t\tprint(f\"--:date: {conf['date']}\")\n\t\tprint(f\"--:round_pushpin: {conf['place']}\")\n\t\tprint(f\"--:house: Go to Website | href={conf['link']}\")\n\t\tprint(\"-----\")\n\t\tif 'abstract_deadline' in conf.keys():\n\t\t\tabs_dl = make_datetime(conf, abs=True)\n\t\t\tprint(f\"--Abs: {abs_dl.strftime('%Y-%m-%d %H:%M')} ({conf['timezone']})\")\t\n\t\tprint(f\"--Due: {dl.strftime('%Y-%m-%d %H:%M')} ({conf['timezone']})\")\n\texcept:\n\t\tname = \"N/A\"\n\t\tprint(\"Select the conference\")\n\n\n\tprint(\"---\")\n\tfor urg in dlg['urgent'][:10]:\n\t\tconf = dlg['full'][urg]\n\t\toutstr = f\"{conf['title']} | bash={ME_PATH} param1=seldl param2={conf['title']} terminal=false refresh=true\"\n\t\tif conf['title'] == name:\n\t\t\toutstr += \" checked=true\"\n\t\tprint(outstr)\n\tprint(\"More...\")\n\tfor sub_name, sub in dlg['subs'].items():\n\t\tprint(f\"--{sub_name}\")\n\t\tfor t in sub:\n\t\t\tconf = dlg['full'][t]\n\t\t\toutstr = f\"----{conf['title']} | bash={ME_PATH} param1=seldl param2={conf['title']} terminal=false refresh=true\"\n\t\t\tif get_diff(make_datetime(conf)).days \u003c 0:\n\t\t\t\toutstr += \" color=red\"\n\t\t\tprint(outstr)\n\tprint(\"---\")\n\tprint(f\"Update Conferences Info | bash={ME_PATH} param1=getdl terminal=false refresh=true\")\n\tprint(\"Go to aideadlin.es | href='https://aideadlin.es'\")\n\tprint(\"About this plugin | href='https://github.com/nzer0/bitbar-aideadlines\")\n\n\n'''Select a particular deadline'''\ndef seldl(conf_title):\n\twith open(SEL_FNAME, 'w') as sf:\n\t\tsf.write(conf_title)\n\n'''Get the deadlines list from aideadlin.es and process it'''\ndef getdl():\n\tif os.path.exists(DL_FNAME):\n\t\t\tos.remove(DL_FNAME)\n\twget.download(AID_URL, DL_FNAME, False)\n\n\twith open(DL_FNAME, 'r') as yf:\n\t\tdl = yaml.safe_load(yf)\n\tfull = {}\n\tsubs = {}\n\tfor conf in dl:\n\t\tfull[conf['title']] = conf\n\t\tsub = conf['sub']\n\t\tif sub in subs.keys():\n\t\t\tsubs[sub].append(conf['title'])\n\t\telse:\n\t\t\tsubs[sub] = [conf['title']]\n\n\turgent = sorted(list(full.keys()), key=lambda t: make_datetime(full[t]))\n\turgent = [t for t in urgent if get_diff(make_datetime(full[t])).days \u003e -7]\n\n\tfor sub in subs.values():\n\t \tsub.sort(key=lambda t: make_datetime(full[t]))\n\n\twith open(DLG_FNAME, 'w') as yf:\n\t\tyaml.safe_dump(dict(full=full, subs=subs, urgent=urgent), yf)\n\n\nif __name__ == \"__main__\":\n\tif len(sys.argv) == 1:\n\t\tmain()\n\n\telif sys.argv[1] == 'seldl':\n\t\tseldl(sys.argv[2])\n\n\telif sys.argv[1] == 'getdl':\n\t\tgetdl()\n\n"
			}
		],
		"path": "Time/aideadlines.15m.py",
		"filename": "aideadlines.15m.py",
		"dir": "Time",
		"docsPlugin": "Time/aideadlines.15m.py.html",
		"docsCategory": "Time.html",
		"pathSegments": [
			"Time"
		],
		"categoryPathSegments": [
			{
				"path": "Time",
				"text": "Time",
				"isLast": true
			}
		],
		"title": "AI deadlines counter",
		"version": "v0.1",
		"author": "Jiseob Kim",
		"authors": [
			{
				"name": "Jiseob Kim",
				"githubUsername": "nzer0",
				"imageURL": "https://avatars.githubusercontent.com/u/2021812?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Count the days to the submission deadlines of AI conferences.",
		"imageURL": "https://github.com/nzer0/bitbar-aideadlines/blob/master/aid-screenshot.png?raw=true",
		"dependencies": [
			"python3 (pyyaml",
			"pytz",
			"tzlocal",
			"wget)"
		],
		"aboutURL": "https://github.com/nzer0/bitbar-aideadlines",
		"lastUpdated": "2021-03-08T15:22:05.398541Z",
		"vars": null
	}
}