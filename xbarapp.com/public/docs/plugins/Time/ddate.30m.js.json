{
	"plugin": {
		"files": [
			{
				"path": "Time/ddate.30m.js",
				"filename": "ddate.30m.js",
				"content": "#! /usr/local/bin/node\n\n// \u003cbitbar.title\u003eDiscordian Date\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eVolker Wieban\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003ehpcodecraft\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eShows the current date of the Discordian calendar\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttps://user-images.githubusercontent.com/1476865/69000513-2dee4b00-08d1-11ea-9d23-c4c5aaa8d815.png\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003ebash,node\u003c/bitbar.dependencies\u003e\n\n// SETUP\n// You need to have node installed for this to work\n// On Mac OS with Homebrew, `brew install node` will set you up\n\n// JS port of ddate\n// Copypasta'ed from:\n// https://github.com/ishmayeck/node-ddate/blob/master/ddate.js\n\nconst days = [\n  { l: \"Sweetmorn\", s: \"SM\" },\n  { l: \"Boomtime\", s: \"BT\" },\n  { l: \"Pungenday\", s: \"PD\" },\n  { l: \"Prickle-Prickle\", s: \"PP\" },\n  { l: \"Setting Orange\", s: \"SO\" }\n];\n\nconst seasons = [\n  { l: \"Chaos\", s: \"Chs\" },\n  { l: \"Discord\", s: \"Dsc\" },\n  { l: \"Confusion\", s: \"Cfn\" },\n  { l: \"Bureaucracy\", s: \"Bcy\" },\n  { l: \"The Aftermath\", s: \"Afm\" }\n];\n\nconst holydays = {\n  Chaos: {\n    5: \"Mungday\",\n    50: \"Chaoflux\"\n  },\n  Discord: {\n    5: \"Mojoday\",\n    50: \"Discoflux\"\n  },\n  Confusion: {\n    5: \"Syaday\",\n    50: \"Confuflux\"\n  },\n  Bureaucracy: {\n    5: \"Zaraday\",\n    50: \"Bureflux\"\n  },\n  \"The Aftermath\": {\n    5: \"Maladay\",\n    50: \"Afflux\"\n  }\n};\n\nconst minute = 1000 * 60;\nconst day = minute * 60 * 24;\nconst year = day * 365;\n\nconst DDate = function(epooch) {\n  /* for reference, epoch is Sweetmorn, 1 Chaos 3136 */\n  this.date = {};\n\n  this.initificate = function(epooch) {\n    epooch -= new Date().getTimezoneOffset() * minute;\n    const leps = Math.floor(epooch / year / 4);\n    epooch -= leps * day;\n\n    let cur = Math.floor((epooch % year) / day);\n    const flarf = Math.floor(epooch / (day * 365)) + 3136;\n    const ist = (flarf - 3130) % 4 == 0;\n    this.tabby = ist \u0026\u0026 cur == 59;\n    if (ist \u0026\u0026 cur \u003e 59) cur -= 1;\n\n    const gwar = Math.floor(cur % 73) + 1;\n    const sn = Math.floor(cur / 73);\n    let woody = 0;\n    for (let i = 1; i \u003c= cur; i++) {\n      woody = woody == 4 ? 0 : woody + 1;\n    }\n    const hoyl = holydays[seasons[sn].l][gwar] || false;\n    this.numricks = [woody, sn, gwar, flarf, hoyl];\n    if (this.tabby) return { tibs: true, year: flarf };\n    return {\n      tibs: false,\n      day: days[woody],\n      season: seasons[sn],\n      date: gwar,\n      year: flarf,\n      holyday: hoyl\n    };\n  };\n\n  this.numberize = function(num) {\n    const thtaghn = num % 100 \u003e 9 \u0026\u0026 num % 100 \u003c 15;\n    switch (num % 10) {\n      case 1:\n        return num + (thtaghn ? \"th\" : \"st\");\n      case 2:\n        return num + (thtaghn ? \"th\" : \"nd\");\n      case 3:\n        return num + (thtaghn ? \"th\" : \"rd\");\n      case 4:\n      default:\n        return num + \"th\";\n    }\n  };\n\n  this.toOldImmediateDateFormat = function() {\n    return (\n      this.date.day.l +\n      \", the \" +\n      this.numberize(this.date.date) +\n      \" day of \" +\n      this.date.season.l +\n      \" in the YOLD \" +\n      this.date.year\n    );\n  };\n\n  this.toDateString = function() {\n    return this.format(\"%{%A, %B %e%}, %Y YOLD\");\n  };\n\n  this.getDate = function() {\n    return this.date;\n  };\n\n  this.format = function(str) {\n    if (!str) return;\n    let r = \"\";\n    let stopit = false;\n    let tibsing = false;\n    for (let i = 0; i \u003c str.length; i++) {\n      if (stopit) break;\n      if (str[i] == \"%\" \u0026\u0026 str[i + 1] == \"}\") tibsing = (i += 2) == Infinity;\n      if (tibsing) continue;\n      if (str[i] == \"%\") {\n        switch (str[i + 1]) {\n          case \"A\":\n            r += days[this.numricks[0]].l;\n            break;\n          case \"a\":\n            r += days[this.numricks[0]].s;\n            break;\n          case \"B\":\n            r += seasons[this.numricks[1]].l;\n            break;\n          case \"b\":\n            r += seasons[this.numricks[1]].s;\n            break;\n          case \"d\":\n            r += this.numricks[2];\n            break;\n          case \"e\":\n            r += this.numberize(this.numricks[2]);\n            break;\n          case \"H\":\n            r += this.numricks[4] || \"\";\n            break;\n          case \"N\":\n            stopit = !Boolean(this.numricks[4]);\n            break;\n          case \"n\":\n            r += \"\\n\";\n            break;\n          case \"t\":\n            r += \"\\t\";\n            break;\n          case \"{\":\n            // if(this.tabby) tibsing = ((r += \"St. Tib's Day\") != Infinity);\n            if (this.tabby) tibsing = (r += \"\") != Infinity;\n            break;\n          case \".\":\n            r += \"I've nothing to say to you. (yet)\";\n            break;\n          case \"Y\":\n            r += this.numricks[3];\n            break;\n          default:\n            r += str[i];\n            break;\n        }\n        i++;\n      } else {\n        r += str[i];\n      }\n    }\n    return r;\n  };\n\n  this.date = this.initificate(epooch || new Date().getTime());\n};\n\n// ----------------------------------------\n// Bitbar script\n// ----------------------------------------\n\nconst color = \"goldenrod\";\nconst specialDayColor = \"seagreen\";\n\n// Current date/time\nconst d = new Date();\n\n// DDate format\nconst shortDate = \"%a, %b %e\";\nconst longDate = `%A|color=${color}%nThe %e day of %B|color=${color}%nIn %Y Year of Our Lady of Discord|color=${color}%n`;\n\n// Display Special Day\nlet specialDay = false;\nconst dd = new DDate();\nconst ddProps = dd.getDate();\n\nif (ddProps.tibs) {\n  specialDay = \"St. Tib's Day\";\n} else if (ddProps.holyday) {\n  specialDay = ddProps.holyday;\n} else if (d.getDay() === 5) {\n  specialDay = \"Hot Dog Day\";\n}\n\nconst output =\n  dd.format(shortDate) +\n  `|dropdown=false color=${color}\\n` +\n  \"---\\n\" +\n  dd.format(longDate) +\n  (specialDay ? \"\\nIt's \" + specialDay + `!|color=${specialDayColor}` : \"\");\n\nconsole.log(output);\n"
			}
		],
		"path": "Time/ddate.30m.js",
		"filename": "ddate.30m.js",
		"dir": "Time",
		"docsPlugin": "Time/ddate.30m.js.html",
		"docsCategory": "Time.html",
		"pathSegments": [
			"Time"
		],
		"categoryPathSegments": [
			{
				"path": "Time",
				"text": "Time",
				"isLast": true
			}
		],
		"title": "Discordian Date",
		"version": "v1.0",
		"author": "Volker Wieban",
		"authors": [
			{
				"name": "hpcodecraft",
				"githubUsername": "hpcodecraft",
				"imageURL": "https://avatars.githubusercontent.com/u/1476865?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Shows the current date of the Discordian calendar",
		"imageURL": "https://user-images.githubusercontent.com/1476865/69000513-2dee4b00-08d1-11ea-9d23-c4c5aaa8d815.png",
		"dependencies": [
			"bash",
			"node"
		],
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:22:05.741891Z",
		"vars": null
	}
}