{
	"plugin": {
		"files": [
			{
				"path": "Time/pomodoro2.30s.sh",
				"filename": "pomodoro2.30s.sh",
				"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003ePomodoro Timer\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMartin Kourim\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emkoura\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eTimer that uses Pomodoro timeboxing\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/WswKpT4.png\u003c/bitbar.image\u003e\n\n# pomodoro duration\nreadonly POMODORO=1500 # 25 min\n# break duration\nreadonly BREAK=240 # 4 min\n# long break duration\nreadonly LONG_BREAK=1200 # 20 min\n# script to run (file path)\nSCRIPT=\"\"\n\n# SCRIPT file example\n##!/bin/bash\n## plays sound when activity is finished\n#case \"$1\" in\n#  \"finished\"|\"break_finished\"|\"long_break_finished\" )\n#    play some_sound_file\n#esac\n\n# icons\nreadonly TOMATO_ICON=\"üçÖ\"\nreadonly BREAK_ICON=\"‚òï\"\nreadonly LONG_BREAK_ICON=\"üéâ\"\nreadonly PAUSE_BIG_ICON=\"‚ñÆ‚ñÆ\"\nreadonly PAUSE_ICON=\"‚è∏\"\nreadonly STOP_ICON=\"‚èπ\"\nreadonly CHECKED_ICON=\"‚úì\"\nreadonly UNCHECKED_ICON=\"‚úó\"\n\n# ---\n\n# must be updated at least every $MAX_UPDATE_INTERVAL seconds\nreadonly MAX_UPDATE_INTERVAL=60\n\n# file for saving status\nreadonly STATUS_FILE=\"$HOME/.bitbar_pomodoro\"\n\n# running on Linux or Mac OS X?\n[ -e /proc/uptime ] \u0026\u0026 LINUX=\"true\" || LINUX=\"\"\nreadonly LINUX\n\n# checks if script is executable\n[ -x \"$SCRIPT\" ] || SCRIPT=\"\"\nreadonly SCRIPT\n\n# saves current timestamp to the \"now\" variable\nset_now() {\n  [ -n \"$now\" ] \u0026\u0026 return\n\n  # avoid spawning processes if possible\n  if [ -n \"$LINUX\" ]; then\n    now=\"$(read -r s _  \u003c /proc/uptime \u0026\u0026 echo \"${s%.*}\")\"\n  else\n    now=\"$(date +%s)\"\n  fi\n}\n\nrun_script() {\n  [ -n \"$SCRIPT\" ] \u0026\u0026 $SCRIPT \"$@\" \u0026\n}\n\n# displays desktop notification\nnotify_osd() {\n  if [ -n \"$LINUX\" ]; then\n    notify-send \"$@\" 2\u003e/dev/null\n  else\n    osascript -e \"display notification \\\"$*\\\" with title \\\"$TOMATO_ICON Pomodoro\\\"\" 2\u003e/dev/null\n  fi\n}\n\n# writes current status to status file\nstatus_write() {\n  echo \"$tstamp $togo $pomodoros $state $activity $loop\" \u003e \"$STATUS_FILE\"\n}\n\n# resets the status file\nstatus_reset() {\n  tstamp=0; togo=0; pomodoros=0; state=\"STOP\"; activity=\"pomodoro\"; loop=\"${loop:-on}\"\n  status_write\n}\n\n# toggles whether to loop pomodoros\nloop_toggle() {\n  [ \"$loop\" = \"on\" ] \u0026\u0026 loop=\"off\" || loop=\"on\"\n  status_write\n}\n\n# starts pomodoro\npomodoro_start() {\n  set_now\n  tstamp=\"$now\"; togo=\"$POMODORO\"; state=\"RUN\"; activity=\"pomodoro\"\n  status_write\n  run_script start\n}\n\n# starts break\npomodoro_break() {\n  set_now\n  tstamp=\"$now\"; togo=\"$BREAK\"; state=\"RUN\"; activity=\"break\"\n  status_write\n  run_script break\n}\n\n# starts long break\npomodoro_long_break() {\n  set_now\n  tstamp=\"$now\"; togo=\"$LONG_BREAK\"; pomodoros=0; state=\"RUN\"; activity=\"long_break\"\n  status_write\n  run_script long_break\n}\n\n# detects stale records, i.e. when computer\n# was turned off during pomodoro\nstale_record() {\n  case \"$activity\" in\n    \"pomodoro\")\n      local interval=\"$POMODORO\"\n      ;;\n    \"break\")\n      local interval=\"$BREAK\"\n      ;;\n    \"long_break\")\n      local interval=\"$LONG_BREAK\"\n      ;;\n  esac\n  if ((tdiff \u003c 0)) || ((tdiff \u003e (interval + MAX_UPDATE_INTERVAL + 1) )); then\n    status_reset\n    return 1\n  fi\n  return 0\n}\n\n# checks if activity is finished\n# notifies if so and starts a new activity\npomodoro_update() {\n  case \"$state\" in\n    \"STOP\"|\"PAUSE\")\n      return\n      ;;\n    \"RUN\")\n      ;;\n    *)\n      status_reset\n      return\n      ;;\n  esac\n\n  # RUN\n  set_now\n  tdiff=\"$((now - tstamp))\"\n  stale_record || return 1\n  case \"$activity\" in\n    \"pomodoro\")\n      togo=\"$((POMODORO - tdiff))\"\n      if [ \"$togo\" -le 0 ]; then\n        pomodoros=\"$((${pomodoros:-0} + 1))\"\n        run_script finished\n        if [ \"$pomodoros\" -lt 4 ]; then\n          notify_osd \"Pomodoro completed, take a break.\"\n          pomodoro_break\n        else\n          notify_osd \"Four pomodoros completed, take a long break.\"\n          pomodoro_long_break\n        fi\n      fi\n      ;;\n    \"break\")\n      togo=\"$((BREAK - tdiff))\"\n      if [ \"$togo\" -le 0 ]; then\n        run_script break_finished\n        if [ \"$loop\" = \"off\" ]; then\n          notify_osd \"Break is over.\"\n          status_reset\n        else\n          notify_osd \"Break is over, focus on new pomodoro.\"\n          pomodoro_start\n        fi\n      fi\n      ;;\n    \"long_break\")\n      togo=\"$((LONG_BREAK - tdiff))\"\n      if [ \"$togo\" -le 0 ]; then\n        run_script long_break_finished\n        if [ \"$loop\" = \"off\" ]; then\n          notify_osd \"Long break is over.\"\n          status_reset\n        else\n          notify_osd \"Long break is over, focus on new pomodoro.\"\n          pomodoro_start\n        fi\n      fi\n      ;;\n    *)\n      status_reset\n      ;;\n  esac\n}\n\n# pauses or resumes activity\npause_resume() {\n  pomodoro_update\n  case \"$state\" in\n    \"RUN\")\n      # pause\n      state=\"PAUSE\"\n      status_write # saves also up-to-date \"togo\"\n      run_script pause\n      ;;\n    \"PAUSE\")\n      # resume\n      set_now\n      # sets new timestamp according to the saved \"togo\"\n      case \"$activity\" in\n        \"pomodoro\")\n          tstamp=\"$((now - (POMODORO - togo) ))\"\n          ;;\n        \"break\")\n          tstamp=\"$((now - (BREAK - togo) ))\"\n          ;;\n        \"long_break\")\n          tstamp=\"$((now - (LONG_BREAK - togo) ))\"\n          ;;\n      esac\n      state=\"RUN\"\n      status_write\n      run_script resume\n      ;;\n    *)\n      status_reset\n      ;;\n  esac\n}\n\n# calculates remaining time\n# saves remaining minutes to \"rem\"\n# saves remaining seconds to \"res\"\ncalc_remaining_time() {\n  [ -n \"$rem\" ] \u0026\u0026 return\n  rem=\"$((togo / 60 % 60))\"\n  res=\"$((togo % 60))\"\n}\n\n# prints remaining time in MIN:SEC format\nprint_remaining_time() {\n  calc_remaining_time\n  printf \"%02d:%02d\" \"$rem\" \"$res\"\n}\n\n# prints remaining time in whole minutes\nprint_remaining_minutes() {\n  calc_remaining_time\n  if [ \"$rem\" -eq 0 ]; then\n    printf \"\u0026lt;1m\"\n  else\n    [ \"$res\" -ge 30 ] \u0026\u0026 remaining=\"$((rem + 1))\" || remaining=\"$rem\"\n    printf \"%02dm\" \"$remaining\"\n  fi\n}\n\n# prints menu for argos/bitbar\nprint_menu() {\n  case \"$state\" in\n    \"STOP\")\n      echo \"$TOMATO_ICON\"\n      echo \"---\"\n      echo \"Pomodoro | bash=\\\"$0\\\" param1=start terminal=false refresh=true\"\n      echo \"Break | bash=\\\"$0\\\" param1=break terminal=false refresh=true\"\n      echo \"Long break | bash=\\\"$0\\\" param1=long_break terminal=false refresh=true\"\n      ;;\n    \"RUN\")\n      case \"$activity\" in\n        \"pomodoro\")\n          echo \"$TOMATO_ICON $(print_remaining_minutes)\"\n          local caption=\"\"\n          ;;\n        \"break\")\n          echo \"$BREAK_ICON $(print_remaining_minutes)\"\n          local caption=\"Break: \"\n          ;;\n        \"long_break\")\n          echo \"$LONG_BREAK_ICON $(print_remaining_minutes)\"\n          local caption=\"Long break: \"\n          ;;\n      esac\n      echo \"---\"\n      echo \"${caption}$(print_remaining_time) | refresh=true\"\n      echo \"${PAUSE_ICON} pause | bash=\\\"$0\\\" param1=pause terminal=false refresh=true\"\n      echo \"${STOP_ICON} stop | bash=\\\"$0\\\" param1=stop terminal=false refresh=true\"\n      ;;\n    \"PAUSE\")\n      echo \"$PAUSE_BIG_ICON $(print_remaining_minutes)\"\n      echo \"---\"\n      case \"$activity\" in\n        \"pomodoro\")\n          local caption=\"Paused\"\n          ;;\n        \"break\")\n          local caption=\"Break\"\n          ;;\n        \"long_break\")\n          local caption=\"Long break\"\n          ;;\n      esac\n      echo \"${caption}: $(print_remaining_time) | refresh=true\"\n      echo \"${PAUSE_ICON} resume | bash=\\\"$0\\\" param1=pause terminal=false refresh=true\"\n      echo \"${STOP_ICON} stop | bash=\\\"$0\\\" param1=stop terminal=false refresh=true\"\n      ;;\n  esac\n\n  echo \"---\"\n  if [ \"$loop\" = \"off\" ]; then local acheck=\"$UNCHECKED_ICON\"; else local acheck=\"$CHECKED_ICON\"; fi\n  echo \"Loop pomodoros: ${acheck} | bash=\\\"$0\\\" param1=loop_toggle terminal=false refresh=true\"\n}\n\nmain() {\n  [ ! -e \"$STATUS_FILE\" ] \u0026\u0026 : \u003e \"$STATUS_FILE\"\n\n  # reads current status from status file\n  read -r tstamp togo pomodoros state activity loop _ \\\n    \u003c \u003c({ read -r line; echo \"$line\"; } \u003c \"$STATUS_FILE\")\n\n  case \"$1\" in\n    \"start\")\n      pomodoro_start\n      ;;\n    \"stop\")\n      status_reset\n      run_script stop\n      ;;\n    \"pause\")\n      pause_resume\n      ;;\n    \"break\")\n      pomodoro_break\n      ;;\n    \"long_break\")\n      pomodoro_long_break\n      ;;\n    \"loop_toggle\")\n      loop_toggle\n      ;;\n    *)\n      pomodoro_update\n      ;;\n  esac\n\n  print_menu\n}\n\nmain \"$@\"\n"
			}
		],
		"path": "Time/pomodoro2.30s.sh",
		"filename": "pomodoro2.30s.sh",
		"dir": "Time",
		"docsPlugin": "Time/pomodoro2.30s.sh.html",
		"docsCategory": "Time.html",
		"pathSegments": [
			"Time"
		],
		"categoryPathSegments": [
			{
				"path": "Time",
				"text": "Time",
				"isLast": true
			}
		],
		"title": "Pomodoro Timer",
		"version": "v1.1",
		"author": "Martin Kourim",
		"authors": [
			{
				"name": "Martin Kourim",
				"githubUsername": "mkoura",
				"imageURL": "https://avatars.githubusercontent.com/u/2352619?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Timer that uses Pomodoro timeboxing",
		"imageURL": "https://i.imgur.com/WswKpT4.png",
		"dependencies": null,
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:22:06.076192Z",
		"vars": null
	}
}