{
	"plugin": {
		"files": [
			{
				"path": "Tools/PagerDuty/pagerDutyIncidents.30s.js",
				"filename": "pagerDutyIncidents.30s.js",
				"content": "#!/usr/bin/env /usr/local/bin/node\n/*\n\u003cbitbar.title\u003ePagerDuty Incidents\u003c/bitbar.title\u003e\n\u003cbitbar.version\u003ev0.2.0\u003c/bitbar.version\u003e\n\u003cbitbar.author\u003ePedro Pablo Fuentes Schuster\u003c/bitbar.author\u003e\n\u003cbitbar.author.github\u003epedrofuentes\u003c/bitbar.author.github\u003e\n\u003cbitbar.desc\u003eShows all the active incidents grouped by Service. For installation instructions check https://github.com/PedroFuentes/bitbar-plugins/blob/master/pagerDutyIncidents/README.md\u003c/bitbar.desc\u003e\n\u003cbitbar.image\u003ehttp://cdn.pedrofuent.es/images/github/PagerDutyIncidents_Screenshot.png\u003c/bitbar.image\u003e\n\u003cbitbar.dependencies\u003enode, npm/node-fetch, npm/time-ago, npm/bitbar, npm/home-config\u003c/bitbar.dependencies\u003e\n\u003cbitbar.abouturl\u003ehttps://github.com/PedroFuentes/bitbar-plugins/tree/master/pagerDutyIncidents\u003c/bitbar.abouturl\u003e\n*/\n/* MIT Licensed https://opensource.org/licenses/MIT */\n/* jshint esversion: 6 */\n\n'use strict';\n\nconst fetch = require('node-fetch');\nconst ta = require('time-ago')();\nconst bitbar = require('bitbar');\n\nconst cfg = require('home-config').load('.bitbarrc');\n\nif (!cfg.pagerdutyincidents || !cfg.pagerdutyincidents['api.endpoint'] || !cfg.pagerdutyincidents['api.token']) {\n  const json = [];\n\n  json.push({\n    text: 'Config Needed',\n    dropdown: false,\n  },\n  bitbar.sep, {\n    text: 'Add to your .bitbarrc config file on your',\n  }, {\n    text: 'home directory the following information:',\n  },\n  bitbar.sep, {\n    text: '[pagerdutyincidents]',\n  }, {\n    text: 'api.endpoint=https://',\n  }, {\n    text: 'api.token={your-token}',\n  });\n\n  bitbar(json);\n  process.exit();\n}\n\nconst config = {\n  api: {\n    endpoint: cfg.pagerdutyincidents['api.endpoint'],\n    token: cfg.pagerdutyincidents['api.token'],\n    query: cfg.pagerdutyincidents['api.query'] ? cfg.pagerdutyincidents['api.query'] : 'limit=100\u0026statuses[]=triggered\u0026statuses[]=acknowledged',\n  },\n  icon: {\n    active: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6REEwQjNEREYxNjBCMTFFNjgyODVBMzc1NTdCRDNBRUYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6REEwQjNERTAxNjBCMTFFNjgyODVBMzc1NTdCRDNBRUYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpEQTBCM0RERDE2MEIxMUU2ODI4NUEzNzU1N0JEM0FFRiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpEQTBCM0RERTE2MEIxMUU2ODI4NUEzNzU1N0JEM0FFRiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv4ywmgAAADTSURBVHja1NOtCgJBFIbhGX8QNYkGg6jFm7CZNXodglGL1RsQMQsmjUaTyWYzWAzGFfxji+L6LpyFYZmybBAHnrDLme8MZ3a1UspTMVZCxVw/Cdjgar7wIqpiFzynQulbrPBBGT1kMMUJfv0FyWCDGXBDF02UMIOLGkbo4I0XtC3Akc4LZDHGHg+0MZe6ugRZh5gw042lQzNTthP4m+/oI4+1dK5giSGeMoOCLUBLuiNFLQyQwxkHqZugYbvGowzPjXKt5gyK0jEd5avS//8zfQUYAGZtQSNj7zxTAAAAAElFTkSuQmCC',\n    inactive: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzI0MzNGNUIxNjBFMTFFNkEwRTE5QTI1QkJBMzA0MjYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MzI0MzNGNUMxNjBFMTFFNkEwRTE5QTI1QkJBMzA0MjYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDozMjQzM0Y1OTE2MEUxMUU2QTBFMTlBMjVCQkEzMDQyNiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDozMjQzM0Y1QTE2MEUxMUU2QTBFMTlBMjVCQkEzMDQyNiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Poh/go0AAADaSURBVHja1NM9CsIwFMDxRjuIqJuj4AX0DJ5BRPAKdRAn3Z0Fxc0TiKK7Lp7F0cmKg9/Gf+BVAlahFAQDP5K+ti8vaaq01k6clnBitt8nUEqN4L0CZg+ioO2xCK5dK7MZV1CVyjYY4IYWCjLO4hS851rVddDDHAe0TYE4oouVPK/wCEtQwhl1StNU1GdclARTQp5U6tOlwzbx24H4eM+uwMyewpBZLvQ1jHFFk9iOPoMctmEJglnySGJmkuEusbKsvYHl22ekTWS9KspntStYw498sP7/Z3oKMAD3DYQymUW7vgAAAABJRU5ErkJggg==',\n  },\n  colors: {\n    critical: '#FF0000',\n    warning: '#999900',\n    regularText: '#808080',\n  },\n};\n\n// TODO: load all available pages\nfetch(`${config.api.endpoint}/incidents?${config.api.query}`, {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Token token=${config.api.token}`,\n  },\n})\n  .then((res) =\u003e res.json())\n  .then((json) =\u003e {\n  // Group incidents by Service\n    const serviceIncidents = [];\n\n    json.incidents.forEach((incident) =\u003e {\n      if (!serviceIncidents[incident.service.id]) {\n        serviceIncidents[incident.service.id] = {\n          name: incident.service.summary,\n          html_url: incident.service.html_url,\n          incidents: [],\n        };\n      }\n\n      serviceIncidents[incident.service.id].incidents.push(incident);\n    });\n\n    return {\n      serviceIncidents,\n      total: json.incidents.length,\n    };\n  })\n  .then((obj) =\u003e {\n    const json = [];\n    const { serviceIncidents } = obj;\n\n    json.push({\n      text: `[${obj.total}]`,\n      dropdown: false,\n      templateImage: config.icon.inactive,\n      size: 8,\n    },\n    bitbar.sep);\n\n    if (Object.keys(serviceIncidents).length) {\n      Object.keys(serviceIncidents).forEach((prop) =\u003e {\n        const incidents = [];\n\n        serviceIncidents[prop].incidents.forEach((incident) =\u003e {\n          const assignedTo = [];\n\n          incident.assignments.forEach((user) =\u003e {\n            assignedTo.push({\n              text: `${user.assignee.summary}, ${ta.ago(new Date(Date.parse(user.at)))}`,\n              href: user.assignee.html_url,\n              color: config.colors.regularText,\n            }, {\n              text: user.assignee.html_url,\n              alternate: true,\n            });\n          });\n\n          incidents.push({\n            text: incident.title,\n            length: 50,\n            href: incident.html_url,\n            color: incident.status === 'triggered' ? config.colors.critical : config.colors.warning,\n          }, {\n            text: incident.title,\n            alternate: true,\n          }, {\n            text: 'Assigned To',\n            submenu: assignedTo,\n          }, {\n            text: `Created\\t\\t: ${ta.ago(new Date(Date.parse(incident.created_at)))}`,\n            color: config.colors.regularText,\n          }, {\n            text: `Created at\\t: ${incident.created_at}`,\n            alternate: true,\n            color: config.colors.regularText,\n          }, {\n            text: `Status\\t\\t: ${incident.status}`,\n            color: config.colors.regularText,\n          }, {\n            text: `Urgency\\t\\t: ${incident.urgency}`,\n            color: config.colors.regularText,\n          }, {\n            text: `Escalations\\t: ${incident.alert_counts.all}`,\n            color: config.colors.regularText,\n          });\n        });\n\n        json.push({\n          text: `${serviceIncidents[prop].name} (${serviceIncidents[prop].incidents.length})`,\n          href: serviceIncidents[prop].html_url,\n          submenu: incidents,\n        },\n        bitbar.sep);\n      });\n    } else {\n      json.push({\n        text: 'No Open Incidents',\n      });\n    }\n\n    bitbar(json);\n  });\n"
			}
		],
		"path": "Tools/PagerDuty/pagerDutyIncidents.30s.js",
		"filename": "pagerDutyIncidents.30s.js",
		"dir": "Tools/PagerDuty",
		"docsPlugin": "Tools/PagerDuty/pagerDutyIncidents.30s.js.html",
		"docsCategory": "Tools/PagerDuty.html",
		"pathSegments": [
			"Tools",
			"PagerDuty"
		],
		"categoryPathSegments": [
			{
				"path": "Tools",
				"text": "Tools",
				"isLast": false
			},
			{
				"path": "Tools/PagerDuty",
				"text": "PagerDuty",
				"isLast": true
			}
		],
		"title": "PagerDuty Incidents",
		"version": "v0.2.0",
		"author": "Pedro Pablo Fuentes Schuster",
		"authors": [
			{
				"name": "Pedro Fuentes",
				"githubUsername": "pedrofuentes",
				"imageURL": "https://avatars.githubusercontent.com/u/21779?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Shows all the active incidents grouped by Service. For installation instructions check https://github.com/PedroFuentes/bitbar-plugins/blob/master/pagerDutyIncidents/README.md",
		"imageURL": "http://cdn.pedrofuent.es/images/github/PagerDutyIncidents_Screenshot.png",
		"dependencies": [
			"node",
			"npm/node-fetch",
			"npm/time-ago",
			"npm/bitbar",
			"npm/home-config"
		],
		"aboutURL": "https://github.com/PedroFuentes/bitbar-plugins/tree/master/pagerDutyIncidents",
		"lastUpdated": "2021-03-08T15:22:07.086756Z",
		"vars": null
	}
}