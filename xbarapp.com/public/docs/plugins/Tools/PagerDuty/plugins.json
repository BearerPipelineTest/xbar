{
	"plugins": [
		{
			"files": [
				{
					"path": "Tools/PagerDuty/pagerduty.30s.rb",
					"filename": "pagerduty.30s.rb",
					"content": "#!/usr/bin/ruby\n# \u003cbitbar.title\u003ePagerDuty\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAllan Frese\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003efrese\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows current pagerduty alert status.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby (httparty gem)\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/5onainp.png\u003c/bitbar.image\u003e\n\nrequire \"json\"\nrequire \"pp\"\nrequire \"optparse\"\nrequire \"httparty\"\nrequire \"date\"\n\n#--------------------------------------------------------------------\n# Set some configuration for PagerDuty\n$token    = \"\"\n$mail     = \"\"\n$team_ids = \"\"\n#--------------------------------------------------------------------\n\nclass PagerDuty\n\n    def main\n        begin\n            # Init some defaults\n            $verbose = false\n            $id      = nil\n            $command = \"GET\"\n            $color   = Hash.new\n\n\t\t\tif ENV['BitBarDarkMode'].nil?\n\t\t\t\t$color['normal']       = 'black'\n\t\t\t\t$color['triggered']    = 'red'\n\t\t\t\t$color['acknowledged'] = 'orange'\n\t\t\t\t$color['resolved']     = 'green'\n\t\t\telse\n\t\t\t\t$color['normal']       = 'white'\n\t\t\t\t$color['triggered']    = 'red'\n\t\t\t\t$color['acknowledged'] = 'yellow'\n\t\t\t\t$color['resolved']     = 'green'\n\t\t\tend\n\n            OptionParser.new do |opt|\n                opt.banner = \"Usage: #{$0} [options]\"\n                opt.on(\"-a\", \"--ackowledge ID\", \"Acknowledge an incident\") { |id| $command = \"ACKOWLEDGE\"; $id = id }\n                opt.on(\"-r\", \"--resolve ID\", \"Resolve an incident\")        { |id| $command = \"RESOLVE\";    $id = id }\n                opt.on(\"-v\", \"--verbose\" )                                 { $verbose = true }\n            end.parse!\n\n            case $command\n            when \"GET\"\n                list_incidents\n            when \"ACKOWLEDGE\"\n                update_incident($id, \"acknowledged\")\n            when \"RESOLVE\"\n                update_incident($id, \"resolved\")\n            end\n\n        rescue StandardError =\u003e ex\n            puts \"ERR|color=purple\"\n            puts \"---\"\n            puts ex.class\n            puts ex.message\n        end\n\n    end\n\n    def list_incidents\n        out = HTTParty.get(\"https://api.pagerduty.com/incidents\",\n                           timeout: 25,\n                           query:   { \"since\" =\u003e (Time.now-24*60*60).strftime(\"%Y-%m-%dT%H:%M:%S\"),\n                                      \"sort_by\" =\u003e \"created_at:desc\",\n\t\t\t\t\t\t\t\t\t  \"team_ids\" =\u003e $team_ids.split(\",\") },\n                           headers: { \"Content-type\"  =\u003e \"application/json\",\n                                      \"Authorization\" =\u003e \"Token token=#{$token}\",\n                                      \"Accept\"        =\u003e \"application/vnd.pagerduty+json;version=2\" })\n\n        pd = JSON.parse(out.body)\n        incidents = Array.new\n        @count = 0\n        @color = \"yellow\"\n        pd['incidents'].each { |i|\n            log(\"Incident: #{i}\")\n            if i['status'].eql?(\"resolved\")\n                @inc = nil\n                incidents.each { |i2| @inc = i2 if i2['incident_key'].eql?(i['incident_key']) and i2['status'].eql?(\"resolved\") }\n                if @inc.nil?\n                    i['count'] = 1\n                    incidents.push(i)\n                else\n                    @inc['count'] += 1\n                end\n            else\n                @count += 1\n                @color = \"red\" if i['status'].eql?(\"triggered\")\n                i['count'] = 1\n                incidents.push(i)\n            end\n        }\n\n        if incidents.empty?\n            puts \"OK|color=green\"\n        else\n            puts @count\u003e0 ? \"#{@count} Alert#{@count==1 ? \"\" : \"s\"}|color=#{@color} dropdown=false\" : \"OK|color=green dropdown=false\"\n            puts \"---\"\n            incidents.each { |incident|\n                log(incident.inspect)\n                urgency = incident['urgency'].eql?(\"high\") ? \"âš¡\" : \"\"\n                status  = incident['status']\n                color   = $color[status]\n                option  = incident['status'].eql?(\"triggered\") ? \"-a\" : \"-r\"\n                count   = incident['count'] \u003e 1 ? \"(#{incident['count']})\" : \"\"\n\n                desc = incident['summary']\n\t\t\t\tdesc.gsub!(/\\n/,\"\")\n\n                bash = \"bash=#{File.expand_path(__FILE__)} param1=#{option} param2=#{incident['id']}\" unless incident['status'].eql?(\"resolved\")\n                time = Time.parse(incident['created_at']).localtime.strftime(\"%H:%M:%S\")\n                puts \"#{count}#{urgency} [#{time}] #{incident['incident_key']}#{urgency}|color=#{color} #{bash} refresh=true terminal=false length=100\"\n\n                begin\n    \t\t\t\tresp = JSON.parse(fetch(incident['first_trigger_log_entry']['self']))\n                    client_url = resp['log_entry']['channel']['client_url']\n\t\t\t\t    client_url.gsub!(\" \",\"%20\")\n                rescue\n\t\t\t\t    client_url = incident['service']['html_url']\n\t\t\t\t    client_url.gsub!(\" \",\"%20\")\n                end\n\n\t\t\t\tif desc.length \u003e= 100\n                    puts \"#{desc[0..99]}...|color=#{$color['normal']} size=11 href=#{client_url}\"\n\t\t\t\t    puts \"...#{desc[100..200]}|alternate=true color=#{$color['normal']} size=11\"\n\t\t\t\telse\n                    puts \"#{desc}...|color=#{$color['normal']} size=11 href=#{client_url}\"\n\t\t\t\tend\n                puts \"---\"\n            }\n        end\n    end\n\n    def fetch(url)\n\t\tlog(\"--------------------------------------\")\n\t\tlog(\"fetch: #{url}\")\n        out = HTTParty.get(url, headers: { \"Content-type\"  =\u003e \"application/json\",\n                                           \"Authorization\" =\u003e \"Token token=#{$token}\",\n                                           \"Accept\"        =\u003e \"application/vnd.pagerduty+json;version=2\" })\n\n        log(\"output: #{out.body}\")\n        return out.body\n    end\n\n    def update_incident(id, cmd)\n        body = { incident: { type: \"incident_reference\", status: cmd } }\n        out = HTTParty.put(\"https://api.pagerduty.com/incidents/#{id}\",\n                           body:  body.to_json,\n                           headers: { \"Content-type\"  =\u003e \"application/json\",\n                                      \"Authorization\" =\u003e \"Token token=#{$token}\",\n                                      \"Accept\"        =\u003e \"application/vnd.pagerduty+json;version=2\",\n                                      \"From\"          =\u003e $mail.to_str })\n\n        log(\"output: #{out}\")\n        return out\n    end\n\n    def log(line)\n        return unless $verbose\n        puts line\n    end\n\n    self\n\nend.new.main\n"
				}
			],
			"path": "Tools/PagerDuty/pagerduty.30s.rb",
			"filename": "pagerduty.30s.rb",
			"dir": "Tools/PagerDuty",
			"docsPlugin": "Tools/PagerDuty/pagerduty.30s.rb.html",
			"docsCategory": "Tools/PagerDuty.html",
			"pathSegments": [
				"Tools",
				"PagerDuty"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/PagerDuty",
					"text": "PagerDuty",
					"isLast": true
				}
			],
			"title": "PagerDuty",
			"version": "v2.0",
			"author": "Allan Frese",
			"authors": [
				{
					"name": "Allan Frese",
					"githubUsername": "frese",
					"imageURL": "https://avatars.githubusercontent.com/u/40183?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows current pagerduty alert status.",
			"imageURL": "http://i.imgur.com/5onainp.png",
			"dependencies": [
				"ruby (httparty gem)"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.204584Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/PagerDuty/pagerDutyIncidents.30s.js",
					"filename": "pagerDutyIncidents.30s.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n/*\n\u003cbitbar.title\u003ePagerDuty Incidents\u003c/bitbar.title\u003e\n\u003cbitbar.version\u003ev0.2.0\u003c/bitbar.version\u003e\n\u003cbitbar.author\u003ePedro Pablo Fuentes Schuster\u003c/bitbar.author\u003e\n\u003cbitbar.author.github\u003epedrofuentes\u003c/bitbar.author.github\u003e\n\u003cbitbar.desc\u003eShows all the active incidents grouped by Service. For installation instructions check https://github.com/PedroFuentes/bitbar-plugins/blob/master/pagerDutyIncidents/README.md\u003c/bitbar.desc\u003e\n\u003cbitbar.image\u003ehttp://cdn.pedrofuent.es/images/github/PagerDutyIncidents_Screenshot.png\u003c/bitbar.image\u003e\n\u003cbitbar.dependencies\u003enode, npm/node-fetch, npm/time-ago, npm/bitbar, npm/home-config\u003c/bitbar.dependencies\u003e\n\u003cbitbar.abouturl\u003ehttps://github.com/PedroFuentes/bitbar-plugins/tree/master/pagerDutyIncidents\u003c/bitbar.abouturl\u003e\n*/\n/* MIT Licensed https://opensource.org/licenses/MIT */\n/* jshint esversion: 6 */\n\n'use strict';\n\nconst fetch = require('node-fetch');\nconst ta = require('time-ago')();\nconst bitbar = require('bitbar');\n\nconst cfg = require('home-config').load('.bitbarrc');\n\nif (!cfg.pagerdutyincidents || !cfg.pagerdutyincidents['api.endpoint'] || !cfg.pagerdutyincidents['api.token']) {\n  const json = [];\n\n  json.push({\n    text: 'Config Needed',\n    dropdown: false,\n  },\n  bitbar.sep, {\n    text: 'Add to your .bitbarrc config file on your',\n  }, {\n    text: 'home directory the following information:',\n  },\n  bitbar.sep, {\n    text: '[pagerdutyincidents]',\n  }, {\n    text: 'api.endpoint=https://',\n  }, {\n    text: 'api.token={your-token}',\n  });\n\n  bitbar(json);\n  process.exit();\n}\n\nconst config = {\n  api: {\n    endpoint: cfg.pagerdutyincidents['api.endpoint'],\n    token: cfg.pagerdutyincidents['api.token'],\n    query: cfg.pagerdutyincidents['api.query'] ? cfg.pagerdutyincidents['api.query'] : 'limit=100\u0026statuses[]=triggered\u0026statuses[]=acknowledged',\n  },\n  icon: {\n    active: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6REEwQjNEREYxNjBCMTFFNjgyODVBMzc1NTdCRDNBRUYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6REEwQjNERTAxNjBCMTFFNjgyODVBMzc1NTdCRDNBRUYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpEQTBCM0RERDE2MEIxMUU2ODI4NUEzNzU1N0JEM0FFRiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpEQTBCM0RERTE2MEIxMUU2ODI4NUEzNzU1N0JEM0FFRiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv4ywmgAAADTSURBVHja1NOtCgJBFIbhGX8QNYkGg6jFm7CZNXodglGL1RsQMQsmjUaTyWYzWAzGFfxji+L6LpyFYZmybBAHnrDLme8MZ3a1UspTMVZCxVw/Cdjgar7wIqpiFzynQulbrPBBGT1kMMUJfv0FyWCDGXBDF02UMIOLGkbo4I0XtC3Akc4LZDHGHg+0MZe6ugRZh5gw042lQzNTthP4m+/oI4+1dK5giSGeMoOCLUBLuiNFLQyQwxkHqZugYbvGowzPjXKt5gyK0jEd5avS//8zfQUYAGZtQSNj7zxTAAAAAElFTkSuQmCC',\n    inactive: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzI0MzNGNUIxNjBFMTFFNkEwRTE5QTI1QkJBMzA0MjYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MzI0MzNGNUMxNjBFMTFFNkEwRTE5QTI1QkJBMzA0MjYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDozMjQzM0Y1OTE2MEUxMUU2QTBFMTlBMjVCQkEzMDQyNiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDozMjQzM0Y1QTE2MEUxMUU2QTBFMTlBMjVCQkEzMDQyNiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Poh/go0AAADaSURBVHja1NM9CsIwFMDxRjuIqJuj4AX0DJ5BRPAKdRAn3Z0Fxc0TiKK7Lp7F0cmKg9/Gf+BVAlahFAQDP5K+ti8vaaq01k6clnBitt8nUEqN4L0CZg+ioO2xCK5dK7MZV1CVyjYY4IYWCjLO4hS851rVddDDHAe0TYE4oouVPK/wCEtQwhl1StNU1GdclARTQp5U6tOlwzbx24H4eM+uwMyewpBZLvQ1jHFFk9iOPoMctmEJglnySGJmkuEusbKsvYHl22ekTWS9KspntStYw498sP7/Z3oKMAD3DYQymUW7vgAAAABJRU5ErkJggg==',\n  },\n  colors: {\n    critical: '#FF0000',\n    warning: '#999900',\n    regularText: '#808080',\n  },\n};\n\n// TODO: load all available pages\nfetch(`${config.api.endpoint}/incidents?${config.api.query}`, {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Token token=${config.api.token}`,\n  },\n})\n  .then((res) =\u003e res.json())\n  .then((json) =\u003e {\n  // Group incidents by Service\n    const serviceIncidents = [];\n\n    json.incidents.forEach((incident) =\u003e {\n      if (!serviceIncidents[incident.service.id]) {\n        serviceIncidents[incident.service.id] = {\n          name: incident.service.summary,\n          html_url: incident.service.html_url,\n          incidents: [],\n        };\n      }\n\n      serviceIncidents[incident.service.id].incidents.push(incident);\n    });\n\n    return {\n      serviceIncidents,\n      total: json.incidents.length,\n    };\n  })\n  .then((obj) =\u003e {\n    const json = [];\n    const { serviceIncidents } = obj;\n\n    json.push({\n      text: `[${obj.total}]`,\n      dropdown: false,\n      templateImage: config.icon.inactive,\n      size: 8,\n    },\n    bitbar.sep);\n\n    if (Object.keys(serviceIncidents).length) {\n      Object.keys(serviceIncidents).forEach((prop) =\u003e {\n        const incidents = [];\n\n        serviceIncidents[prop].incidents.forEach((incident) =\u003e {\n          const assignedTo = [];\n\n          incident.assignments.forEach((user) =\u003e {\n            assignedTo.push({\n              text: `${user.assignee.summary}, ${ta.ago(new Date(Date.parse(user.at)))}`,\n              href: user.assignee.html_url,\n              color: config.colors.regularText,\n            }, {\n              text: user.assignee.html_url,\n              alternate: true,\n            });\n          });\n\n          incidents.push({\n            text: incident.title,\n            length: 50,\n            href: incident.html_url,\n            color: incident.status === 'triggered' ? config.colors.critical : config.colors.warning,\n          }, {\n            text: incident.title,\n            alternate: true,\n          }, {\n            text: 'Assigned To',\n            submenu: assignedTo,\n          }, {\n            text: `Created\\t\\t: ${ta.ago(new Date(Date.parse(incident.created_at)))}`,\n            color: config.colors.regularText,\n          }, {\n            text: `Created at\\t: ${incident.created_at}`,\n            alternate: true,\n            color: config.colors.regularText,\n          }, {\n            text: `Status\\t\\t: ${incident.status}`,\n            color: config.colors.regularText,\n          }, {\n            text: `Urgency\\t\\t: ${incident.urgency}`,\n            color: config.colors.regularText,\n          }, {\n            text: `Escalations\\t: ${incident.alert_counts.all}`,\n            color: config.colors.regularText,\n          });\n        });\n\n        json.push({\n          text: `${serviceIncidents[prop].name} (${serviceIncidents[prop].incidents.length})`,\n          href: serviceIncidents[prop].html_url,\n          submenu: incidents,\n        },\n        bitbar.sep);\n      });\n    } else {\n      json.push({\n        text: 'No Open Incidents',\n      });\n    }\n\n    bitbar(json);\n  });\n"
				}
			],
			"path": "Tools/PagerDuty/pagerDutyIncidents.30s.js",
			"filename": "pagerDutyIncidents.30s.js",
			"dir": "Tools/PagerDuty",
			"docsPlugin": "Tools/PagerDuty/pagerDutyIncidents.30s.js.html",
			"docsCategory": "Tools/PagerDuty.html",
			"pathSegments": [
				"Tools",
				"PagerDuty"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/PagerDuty",
					"text": "PagerDuty",
					"isLast": true
				}
			],
			"title": "PagerDuty Incidents",
			"version": "v0.2.0",
			"author": "Pedro Pablo Fuentes Schuster",
			"authors": [
				{
					"name": "Pedro Fuentes",
					"githubUsername": "pedrofuentes",
					"imageURL": "https://avatars.githubusercontent.com/u/21779?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows all the active incidents grouped by Service. For installation instructions check https://github.com/PedroFuentes/bitbar-plugins/blob/master/pagerDutyIncidents/README.md",
			"imageURL": "http://cdn.pedrofuent.es/images/github/PagerDutyIncidents_Screenshot.png",
			"dependencies": [
				"node",
				"npm/node-fetch",
				"npm/time-ago",
				"npm/bitbar",
				"npm/home-config"
			],
			"aboutURL": "https://github.com/PedroFuentes/bitbar-plugins/tree/master/pagerDutyIncidents",
			"lastUpdated": "2021-03-08T15:22:07.086756Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/PagerDuty/pagerDutyOnCall.30s.js",
					"filename": "pagerDutyOnCall.30s.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n/*\n\u003cbitbar.title\u003ePagerDuty On-Call\u003c/bitbar.title\u003e\n\u003cbitbar.version\u003ev0.2.0\u003c/bitbar.version\u003e\n\u003cbitbar.author\u003ePedro Pablo Fuentes Schuster\u003c/bitbar.author\u003e\n\u003cbitbar.author.github\u003epedrofuentes\u003c/bitbar.author.github\u003e\n\u003cbitbar.desc\u003eShows who is on call for all the active Escalation Policies and what services have active incidents. For installation instructions check https://github.com/PedroFuentes/bitbar-plugins/blob/master/pagerDutyOnCall/README.md\u003c/bitbar.desc\u003e\n\u003cbitbar.image\u003ehttp://cdn.pedrofuent.es/images/github/PagerDutyOnCall_Screenshot.png\u003c/bitbar.image\u003e\n\u003cbitbar.dependencies\u003enode, npm/node-fetch, npm/time-ago, npm/bitbar, npm/home-config\u003c/bitbar.dependencies\u003e\n\u003cbitbar.abouturl\u003ehttps://github.com/PedroFuentes/bitbar-plugins/tree/master/pagerDutyOnCall\u003c/bitbar.abouturl\u003e\n*/\n/* MIT Licensed https://opensource.org/licenses/MIT */\n/* jshint esversion: 6 */\n\n'use strict';\n\nconst fetch = require('node-fetch');\nconst ta = require('time-ago')();\nconst bitbar = require('bitbar');\n\nconst cfg = require('home-config').load('.bitbarrc');\n\nif (!cfg.pagerdutyoncall || !cfg.pagerdutyoncall['api.endpoint'] || !cfg.pagerdutyoncall['api.token']) {\n  const json = [];\n\n  json.push({\n    text: 'Config Needed',\n    dropdown: false,\n  },\n  bitbar.sep, {\n    text: 'Add to your .bitbarrc config file on your',\n  }, {\n    text: 'home directory the following information:',\n  },\n  bitbar.sep, {\n    text: '[pagerdutyoncall]',\n  }, {\n    text: 'api.endpoint=https://',\n  }, {\n    text: 'api.token={your-token}',\n  }, {\n    text: 'api.query={your-filter-query} *optional',\n  }, {\n    text: 'style.prefix={service-name-prefix} *optional',\n  });\n\n  bitbar(json);\n  process.exit();\n}\n\nconst config = {\n  api: {\n    endpoint: cfg.pagerdutyoncall['api.endpoint'],\n    token: cfg.pagerdutyoncall['api.token'],\n    query: cfg.pagerdutyoncall['api.query'] ? cfg.pagerdutyoncall['api.query'] : '',\n  },\n  icon: {\n    active: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6REEwQjNEREYxNjBCMTFFNjgyODVBMzc1NTdCRDNBRUYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6REEwQjNERTAxNjBCMTFFNjgyODVBMzc1NTdCRDNBRUYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpEQTBCM0RERDE2MEIxMUU2ODI4NUEzNzU1N0JEM0FFRiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpEQTBCM0RERTE2MEIxMUU2ODI4NUEzNzU1N0JEM0FFRiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv4ywmgAAADTSURBVHja1NOtCgJBFIbhGX8QNYkGg6jFm7CZNXodglGL1RsQMQsmjUaTyWYzWAzGFfxji+L6LpyFYZmybBAHnrDLme8MZ3a1UspTMVZCxVw/Cdjgar7wIqpiFzynQulbrPBBGT1kMMUJfv0FyWCDGXBDF02UMIOLGkbo4I0XtC3Akc4LZDHGHg+0MZe6ugRZh5gw042lQzNTthP4m+/oI4+1dK5giSGeMoOCLUBLuiNFLQyQwxkHqZugYbvGowzPjXKt5gyK0jEd5avS//8zfQUYAGZtQSNj7zxTAAAAAElFTkSuQmCC',\n    inactive: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzI0MzNGNUIxNjBFMTFFNkEwRTE5QTI1QkJBMzA0MjYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MzI0MzNGNUMxNjBFMTFFNkEwRTE5QTI1QkJBMzA0MjYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDozMjQzM0Y1OTE2MEUxMUU2QTBFMTlBMjVCQkEzMDQyNiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDozMjQzM0Y1QTE2MEUxMUU2QTBFMTlBMjVCQkEzMDQyNiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Poh/go0AAADaSURBVHja1NM9CsIwFMDxRjuIqJuj4AX0DJ5BRPAKdRAn3Z0Fxc0TiKK7Lp7F0cmKg9/Gf+BVAlahFAQDP5K+ti8vaaq01k6clnBitt8nUEqN4L0CZg+ioO2xCK5dK7MZV1CVyjYY4IYWCjLO4hS851rVddDDHAe0TYE4oouVPK/wCEtQwhl1StNU1GdclARTQp5U6tOlwzbx24H4eM+uwMyewpBZLvQ1jHFFk9iOPoMctmEJglnySGJmkuEusbKsvYHl22ekTWS9KspntStYw498sP7/Z3oKMAD3DYQymUW7vgAAAABJRU5ErkJggg==',\n  },\n  colors: {\n    critical: '#FF0000',\n    warning: '#999900',\n    regularText: '#808080',\n    onCallText: !process.env.BitBarDarkMode || process.env.BitBarDarkMode === 0 ? '#000000' : '#FFFFFF',\n  },\n  style: {\n    indentation: '      ',\n    prefix: cfg.pagerdutyoncall['style.prefix'] ? cfg.pagerdutyoncall['style.prefix'] : '',\n  },\n};\n\n// TODO: Add support more than 100 escalations\nfetch(`${config.api.endpoint}/escalation_policies?limit=100\u0026include[]=services\u0026include[]=teams\u0026include[]=oncall\u0026query=${config.api.query}`, {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Token token=${config.api.token}`,\n  },\n})\n  .then((res) =\u003e res.json())\n  .then((json) =\u003e {\n    const escalations = [];\n    let activeIncident = false;\n\n    json.escalation_policies.forEach((escalation) =\u003e {\n      let activeServiceIncident = false;\n      const services = [];\n      let activeServices = 0;\n      const htmlDomain = getHostName(escalation.html_url);\n\n      escalation.services.forEach((service) =\u003e {\n        if (service.status !== 'disabled') {\n          activeServices += 1;\n\n          if (service.status !== 'active') {\n            activeIncident = true;\n            activeServiceIncident = true;\n\n            services.push({\n              text: `${config.style.indentation}${service.status === 'maintenance' ? ':construction:' : ':bangbang:'} ${cleanName(service.name)}, ${ta.ago(new Date(Date.parse(service.last_incident_timestamp)))}`,\n              trim: false,\n              color: service.status === 'critical' ? config.colors.critical : config.colors.warning,\n              href: `${service.html_url}`,\n            });\n          }\n        }\n      });\n\n      if (activeServices) {\n        const onCallList = [];\n\n        escalation.on_call.forEach((onCall) =\u003e {\n          onCallList.push({\n            text: `${onCall.level}. ${onCall.user.name}`,\n            color: config.colors.onCallText,\n            href: `https://${htmlDomain}/users/${onCall.user.id}`,\n          }, {\n            text: `${onCall.level}. ${onCall.user.email}`,\n            alternate: true,\n          });\n        });\n\n        escalations.push({\n          text: `${activeServiceIncident ? ':sos:' : ':cool:'} ${cleanName(escalation.name)}`,\n          href: `${escalation.html_url}`,\n          submenu: onCallList,\n        });\n\n        if (services.length) escalations.push(services[0]);\n\n        escalations.push(bitbar.sep);\n      }\n    });\n\n    escalations.unshift({\n      text: 'â˜Ž',\n      dropdown: false,\n      templateImage: activeIncident ? config.icon.active : config.icon.inactive,\n      size: 8,\n    },\n    bitbar.sep);\n\n    bitbar(escalations);\n  });\n\nfunction cleanName(name) {\n  return name.replace(`${config.style.prefix} - `, '').replace(config.style.prefix, '').trim();\n}\n\nfunction getHostName(url) {\n  const match = url.match(/:\\/\\/(www[0-9]?\\.)?(.[^/:]+)/i);\n  if (match != null \u0026\u0026 match.length \u003e 2 \u0026\u0026 typeof match[2] === 'string' \u0026\u0026 match[2].length \u003e 0) {\n    return match[2];\n  }\n  return null;\n}\n"
				}
			],
			"path": "Tools/PagerDuty/pagerDutyOnCall.30s.js",
			"filename": "pagerDutyOnCall.30s.js",
			"dir": "Tools/PagerDuty",
			"docsPlugin": "Tools/PagerDuty/pagerDutyOnCall.30s.js.html",
			"docsCategory": "Tools/PagerDuty.html",
			"pathSegments": [
				"Tools",
				"PagerDuty"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/PagerDuty",
					"text": "PagerDuty",
					"isLast": true
				}
			],
			"title": "PagerDuty On-Call",
			"version": "v0.2.0",
			"author": "Pedro Pablo Fuentes Schuster",
			"authors": [
				{
					"name": "Pedro Fuentes",
					"githubUsername": "pedrofuentes",
					"imageURL": "https://avatars.githubusercontent.com/u/21779?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows who is on call for all the active Escalation Policies and what services have active incidents. For installation instructions check https://github.com/PedroFuentes/bitbar-plugins/blob/master/pagerDutyOnCall/README.md",
			"imageURL": "http://cdn.pedrofuent.es/images/github/PagerDutyOnCall_Screenshot.png",
			"dependencies": [
				"node",
				"npm/node-fetch",
				"npm/time-ago",
				"npm/bitbar",
				"npm/home-config"
			],
			"aboutURL": "https://github.com/PedroFuentes/bitbar-plugins/tree/master/pagerDutyOnCall",
			"lastUpdated": "2021-03-08T15:22:07.129275Z",
			"vars": null
		}
	]
}