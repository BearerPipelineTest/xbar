{
	"plugins": [
		{
			"files": [
				{
					"path": "Tools/Slack/slack-multi-teams.1m.rb",
					"filename": "slack-multi-teams.1m.rb",
					"content": "#!/usr/bin/env ruby\n#\n# Slack Mutli-Teams Overview.\n#\n# by Harry Löwen\n#\n# Provides an overview of unread channels, unread messages and channel histories.\n# Features: multiple teams (workspaces) handling,\n# 'mark as read' and 'open in slack' buttons,\n# display all channels or only unread ones.\n#\n# Uses Slack Legacy Token (from now)\n# https://api.slack.com/custom-integrations/legacy-tokens\n#\n# Refresh rate is set to every minute.\n# Because: 180+ lines of code and 4+ requests running per team (one channel, one user)\n# For a simple unread indicator check out: https://github.com/matryer/bitbar-plugins/blob/master/Messenger/slack-unread.1s.py\n#\n# Feel free to customize settings, colors, all-done-messages, etc.\n#\n# metadata\n# \u003cbitbar.title\u003eSlack Multi-Teams Overview\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eHarry Löwen\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eharryloewen\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eProvides an overview of unread channels, unread messages and channel histories.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://drive.google.com/uc?export=preview\u0026id=1vxQ5qr8opWaHhiqFlJZmi0oCOG3ik0uJ\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003cbitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/harryloewen/bitbar-slack-multi-teams/\u003c/bitbar.abouturl\u003e\n\nrequire 'net/http'\nrequire 'open-uri'\nrequire 'json'\n\n# your token(s) please\nTOKENS = [\n  'xoxp-your-slack-token',\n  'xoxp-another-slack-token',\n].freeze\n\n# display all channels or only those with unread messages\nALL_CHANNELS = false\n\n# your default color\nCOLOR = '#696969'.freeze # '#696969' works in darkmode as well\n\n# your random messages if there're no unreads (and if ALL_CHANNELS is set to false)\nALL_DONE_MESSAGES = [\n  \":v: All caught up. | color=#{COLOR}\n    What’s next? | color=#{COLOR}\",\n  \":octopus: All done. | color=#{COLOR}\n    The world is your oyster. | color=#{COLOR}\",\n  \":clap: Everything unread is now read. | color=#{COLOR}\n    You’ve done it. | color=#{COLOR}\",\n  \":boom: Boom. | color=#{COLOR}\n    You’re up to date. | color=#{COLOR}\",\n  \":seedling: Everything’s sorted! | color=#{COLOR}\n    Let’s start something new. | color=#{COLOR}\",\n  \":car: There. | color=#{COLOR}\n    All caught up. | color=#{COLOR}\",\n  \":balloon: There! Caught up. | color=#{COLOR}\n    Set your mind to something new. | color=#{COLOR}\",\n  \":rocket: All done. | color=#{COLOR}\n    The future is yours. | color=#{COLOR}\",\n  \":raised_hands: That’s everything! | color=#{COLOR}\",\n  \":tractor: You’re all read. | color=#{COLOR}\n    Here’s a tractor. | color=#{COLOR}\"\n].freeze\n\n# some helpful methods\ndef load_content(api_method, options = nil)\n  url = \"https://slack.com/api/#{api_method}?token=#{@team[:token]}#{options}\"\n  @content = JSON.parse(open(url).read)\n  return if @content['ok']\n  @output += \"🚫\\n\"\n  @output += \"#{api_method}: #{@content['error']} | color=red\"\nend\n\ndef load_team\n  load_content('team.info')\n  return unless @content['ok']\n  @team[:id] = @content['team']['id']\n  @team[:name] = @content['team']['name']\n  @team.merge!(unreads: 0, users: [], channels: [])\n  @teams \u003c\u003c @team\nend\n\ndef load_channels\n  load_content('users.conversations', '\u0026types=public_channel%2Cprivate_channel%2Cmpim%2Cim')\n  @content['channels'].each do |channel|\n    @team[:channels] \u003c\u003c\n      { id: channel['id'], name: channel['name'], user: channel['user'],\n        is_channel: channel['is_channel'], is_im: channel['is_im'] }\n  end\nend\n\ndef load_users\n  load_content('users.list')\n  @content['members'].each do |user|\n    @team[:users] \u003c\u003c { id: user['id'], name: user['name'] }\n  end\nend\n\ndef find_user(message)\n  return '...' unless message['type'] == 'message'\n  if message['user']\n    '@' + message['user']\n  elsif message['bot_id']\n    if message['attachments']\n      message['attachments'][0]['service_name']\n    else\n      'Bot'\n    end\n  end\nend\n\ndef find_text(message)\n  return '...' unless message['type'] == 'message'\n  if !message['text'].nil? \u0026\u0026 !message['text'].empty?\n    message['text'].tr(\"\\n\", ' ').tr(\"\\r\", ' ')\n  elsif message['attachments']\n    message['attachments'].first['text'].tr(\"\\n\", ' ').tr(\"\\r\", ' ')\n  end\nend\n\ndef handle_messages(channel, red_messages)\n  history = []\n  @content['messages'].each do |message|\n    color = red_messages \u003e 0 ? 'red' : COLOR\n    history \u003c\u003c \"--#{find_user(message)}: #{find_text(message)}|length=90 color=#{color}\\n\"\n    red_messages -= 1\n  end\n  history \u003c\u003c \"\\n-----\\n\"\n  history \u003c\u003c \"--🔗 open in Slack | href=slack://channel?id=#{channel}\u0026team=#{@team[:id]}\\n\"\nend\n\ndef marking_url(channel)\n  timestamp = @content['messages'].first['ts']\n  \"https://slack.com/api/channels.mark?token=#{@team[:token]}\u0026channel=#{channel[:id]}\u0026ts=#{timestamp}\"\nend\n\ndef load_history\n  @team[:channels].each do |channel|\n    method = channel[:is_im] ? 'im.history' : 'channels.history'\n    load_content(method, \"\u0026channel=#{channel[:id]}\u0026count=6\u0026unreads=true\")\n    channel[:unread] = @content['unread_count_display'].to_i\n\n    if channel[:unread] \u003e 0\n      @team[:unreads] += 1\n      channel[:history] = handle_messages(channel[:id], channel[:unread])\n      channel[:history] \u003c\u003c \"--✅ mark as read | bash='/usr/bin/curl' param1='#{marking_url(channel)}' refresh=true terminal=false\\n\"\n    elsif ALL_CHANNELS\n      channel[:history] = handle_messages(channel[:id], channel[:unread])\n    end\n  end\nend\n\n# everything starts here\n@teams = []\n@output = ''\n\nTOKENS.each do |token|\n  @team = { token: token }\n  load_team\nend\n\n@teams.each do |team|\n  @team = team\n  load_channels\n  load_history\n\n  @output += \"\\n---\\n#{@team[:name]}\\n\"\n\n  if @team[:unreads] \u003e 0 || ALL_CHANNELS\n    @team[:channels].each do |channel|\n      next unless channel[:unread] \u003e 0 || ALL_CHANNELS\n      @output += channel[:is_im] ? \"\u003c@#{channel[:user]}\u003e\" : \"##{channel[:name]}\"\n      @output += channel[:unread] \u003e 0 ? \" (#{channel[:unread]})|color=red\\n\" : \"\\n\"\n      channel[:history].each { |message| @output += message.to_s }\n    end\n\n    load_users\n    @team[:users].each do |user|\n      @output = @output.gsub(user[:id], user[:name]).gsub(\"\u003c@#{user[:name]}\u003e\", \"@#{user[:name]}\")\n      @output = @output.gsub('\u003c!channel\u003e', '@channel').gsub('\u003c!here\u003e','@here')\n    end\n  else\n    @output += ALL_DONE_MESSAGES.sample\n  end\nend\n\n@unread_channels = @teams.map { |t| t[:unreads] }.inject(0, :+)\n@unread_channels = '' if @unread_channels.zero?\n\nICON='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'.freeze\n\n# and finally print it!\nputs \"\n#{@unread_channels} | image=#{ICON}\n---\n#{@output}\n---\nSettings\n--Tokens: #{TOKENS.count}\n----Total: #{TOKENS.count}\n----Valid: #{@teams.count} | color=#{@teams.count \u003c TOKENS.count ? 'red' : 'green'}\n----Generate tokens | href=https://api.slack.com/custom-integrations/legacy-tokens\n--Show all channels: #{ALL_CHANNELS} | color=#{ALL_CHANNELS ? 'green' : 'red'}\n---\nRefresh ⟳| refresh=true\n\"\n"
				}
			],
			"path": "Tools/Slack/slack-multi-teams.1m.rb",
			"filename": "slack-multi-teams.1m.rb",
			"dir": "Tools/Slack",
			"docsPlugin": "Tools/Slack/slack-multi-teams.1m.rb.html",
			"docsCategory": "Tools/Slack.html",
			"pathSegments": [
				"Tools",
				"Slack"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/Slack",
					"text": "Slack",
					"isLast": true
				}
			],
			"title": "Slack Multi-Teams Overview",
			"version": "v1.0",
			"author": "Harry Löwen",
			"authors": [
				{
					"name": "Harry Löwen",
					"githubUsername": "harryloewen",
					"imageURL": "https://avatars.githubusercontent.com/u/33319470?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Provides an overview of unread channels, unread messages and channel histories.",
			"imageURL": "https://drive.google.com/uc?export=preview\u0026id=1vxQ5qr8opWaHhiqFlJZmi0oCOG3ik0uJ",
			"dependencies": null,
			"aboutURL": "https://github.com/harryloewen/bitbar-slack-multi-teams/",
			"lastUpdated": "2021-03-08T15:22:07.205451Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/Slack/slack-unread.1s.py",
					"filename": "slack-unread.1s.py",
					"content": "#!/usr/bin/env python\n# coding=utf-8\n#\n# \u003cbitbar.title\u003eSlack Notification\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emgjo5899\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emgjo5899\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays number of unread Slack messages\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/I3MdNmU.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n# by mgjo5899\n\ntry:\n\timport requests\nexcept ImportError:\n\tprint('You need to `pip install requests`')\n\nimport json\nfrom time import sleep\nfrom threading import Thread\n\n#\n# USER TOKEN\n# You need to modify this part by generating your own tokens\n# https://api.slack.com/custom-integrations/legacy-tokens#legacy_token_generator\n#\ntokens = [\n\t# Replace this line\n\t'xoxp-slack-token-place-holder',\n]\n\nif tokens == ['xoxp-slack-token-place-holder']:\n\timport sys\n\n\tsys.exit('You need to generate a Slack user token and specify it in the \"slack-unread.1s.py\" script. \\nVisit api.slack.com | color=#09f href=https://api.slack.com/custom-integrations/legacy-tokens#legacy_token_generator')\n\ndark_mode = False\n# Build script in terminal\ndebug_mode = False\n\nblank_icon = ' image=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'\ncolor_icon = ' image=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'\nslack_call_command = ' href=slack:'\n\nchannels_list_url = 'https://slack.com/api/channels.list'\nchannels_info_url = 'https://slack.com/api/channels.info'\n\ngroups_list_url = 'https://slack.com/api/groups.list'\ngroups_info_url = 'https://slack.com/api/groups.info'\n\nconversations_list_url = 'https://slack.com/api/conversations.list'\nconversations_info_url = 'https://slack.com/api/im.history'\n\nunread_count = 0\n\n\n# When there are many channels under one Slack group, due to request rate limit per group,\n# some come out with \"ratelimit exceeded error\" returned.\n# So I had to run channel info request as fast as possible for each group\n# ONE TOKEN REPRESENT ONE SLACK GROUP\ndef get_unread_count(url, token, channel_id):\n\tr = requests.get(url + '?token=' + token + '\u0026channel=' + channel_id + '\u0026unreads=true')\n\treturn r\n\ndef get_list(url, scope, scope_type = None):\n\tif debug_mode:\n\t\tprint('get_list: ' + url)\n\n\ttry:\n\t\tr = requests.get(url)\n\n\texcept Exception as e:\n\t\tif debug_mode:\n\t\t\tprint('get_list error')\n\t\t\tprint(e)\n\n\t\treturn\n\n\tresult = json.loads(r.text)[scope]\n\tids = []\n\n\tfor channel in result:\n\t\t# Filter\n\t\tif (\n\t\t\t# Ignore slack user\n\t\t\t'user' in channel and channel['user'] == 'USLACKBOT' or\n\t\t\t# Ignore deleted users\n\t\t\t'is_user_deleted' in channel and channel['is_user_deleted'] == True or\n\t\t\t# Ignore channels that don't have me\n\t\t\t'is_member' in channel and channel['is_member'] != True\n\t\t):\n\t\t\tcontinue\n\n\t\t# Ignore channels for private messages\n\t\tif scope_type == 'user' and not 'user' in channel:\n\t\t\tcontinue\n\n\t\tids.append(channel['id'])\n\n\treturn ids\n\ndef get_channel_unreads(url, token, id, scope = None):\n\tglobal unread_count\n\n\tr = get_unread_count(url, token, id)\n\n\ttry:\n\t\tif scope != None:\n\t\t\tchannel = json.loads(r.text)[scope]\n\t\telse:\n\t\t\tchannel = json.loads(r.text)\n\n\t\t# Only for channels\n\t\tif 'is_member' in channel and channel['is_member'] == False:\n\t\t\treturn\n\n\t\tif 'unread_count_display' in channel.keys():\n\t\t\tunread_count += channel['unread_count_display']\n\n\t\telif 'unread_count' in channel.keys():\n\t\t\tunread_count += channel['unread_count']\n\n\texcept Exception as e:\n\t\tif debug_mode:\n\t\t\tprint('Error: ')\n\t\t\tprint(e)\n\n\t\tsleep(2)\n\t\t\n\t\t\ndef groups(token):\n\tall_threads = []\n\tfor id in get_list(groups_list_url + '?token=' + token + '\u0026exclude_archived=true', 'groups'):\n\t\tif debug_mode:\n\t\t\tprint('Loading groups unreads: %s, id: %s' % (token, id))\n\n\t\tt = Thread(target=get_channel_unreads, args=(groups_info_url, token, id, 'group'))\n\t\tt.start()\n\t\tall_threads.append(t)\n\n\tfor t in all_threads:\n\t\tt.join()\n\n\ndef channels(token):\n\tall_threads = []\n\tfor id in get_list(channels_list_url + '?token=' + token + '\u0026exclude_archived=true', 'channels'):\n\t\tif debug_mode:\n\t\t\tprint('Loading channel unreads: %s, id: %s' % (token, id))\n\n\t\tt = Thread(target=get_channel_unreads, args=(channels_info_url, token, id, 'channel'))\n\t\tt.start()\n\t\tall_threads.append(t)\n\n\tfor t in all_threads:\n\t\tt.join()\n\n\ndef privates(token):\n\tall_threads = []\n\tfor id in get_list(conversations_list_url + '?token=' + token + '\u0026types=public_channel,private_channel,mpim,im', 'channels', 'user'):\n\t\tif debug_mode:\n\t\t\tprint('Loading private channel unreads: %s, id: %s' % (token, id))\n\n\t\tt = Thread(target=get_channel_unreads, args=(conversations_info_url, token, id))\n\t\tt.start()\n\t\tall_threads.append(t)\n\n\tfor t in all_threads:\n\t\tt.join()\n\t\t\n\t\t\nfor token in tokens:\n\tif debug_mode:\n\t\tprint('Processing token: %s' % (token))\n\tg = Thread(target=groups, args=(token,))\n\tc = Thread(target=channels, args=(token,))\n\tp = Thread(target=privates, args=(token,))\n\tg.start()\n\tc.start()\n\tp.start()\n\n\tg.join()\n\tc.join()\n\tp.join()\n\n# THIS IS A SPECIAL FEATURE FOR USERS WITH DARK MENU BAR ENABLED\n# REMOVE COMMENTING OUT TO USE\nif unread_count == 0:\n\tif dark_mode:\n\n\t\tif debug_mode:\n\t\t\tprint('0 - blank_icon')\n\t\telse:\n\t\t\t# Empty white icon\n\t\t\tprint(\" | \" + blank_icon + slack_call_command)\n\n\telse:\n\t\tif debug_mode:\n\t\t\tprint('0 - color_icon')\n\t\telse:\n\t\t\tprint(\" | \" + color_icon + slack_call_command)\n\nelse:\n\tif debug_mode:\n\t\tprint(str(unread_count) + ' - color icon')\n\telse:\n\t\tprint(str(unread_count) + \" | \" + color_icon + slack_call_command)\n"
				}
			],
			"path": "Tools/Slack/slack-unread.1s.py",
			"filename": "slack-unread.1s.py",
			"dir": "Tools/Slack",
			"docsPlugin": "Tools/Slack/slack-unread.1s.py.html",
			"docsCategory": "Tools/Slack.html",
			"pathSegments": [
				"Tools",
				"Slack"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/Slack",
					"text": "Slack",
					"isLast": true
				}
			],
			"title": "Slack Notification",
			"version": "v1.2",
			"author": "mgjo5899",
			"authors": [
				{
					"name": "Joseph",
					"githubUsername": "mgjo5899",
					"imageURL": "https://avatars.githubusercontent.com/u/17048946?v=4",
					"bio": "Listening to Yiruma songs helps me to focus when coding :)",
					"primary": true
				}
			],
			"desc": "Displays number of unread Slack messages",
			"imageURL": "https://i.imgur.com/I3MdNmU.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.318547Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/Slack/slack-status.sh",
					"filename": "slack-status.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eSlack Stuatus\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBen Sehl\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebenjaminsehl\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eChange your status on Slack from the menubar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eAutocode, Slack\u003c/bitbar.dependencies\u003e\n\n# Sign up for an account at Autocode\n\nif [ -z ${1+x} ]\n  then\n    echo \"| image=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\";\n  else \n    curl -s --request POST \\\n        --url \"https://YOURUSERNAME.api.stdlib.com/slack-status@dev/\" \\\n        --header 'content-type: application/json' \\\n        --data '{\n          \"email\": \"'\"$1\"'\",\n          \"emoji\": \"'\"$2\"'\",\n          \"text\": \"'\"$3\"'\",\n          \"expiration\": \"'\"$4\"'\"\n        }';\nfi\n\n# Configure whatever statuses you want, with your email on slack, the emoji shortcode, the text, and how long you want it to last for\n\necho \"---\"\necho \":hear_no_evil: Focus | bash='$0' param1=you@email.com param2=hear_no_evil param3='Focus mode' param4='in four hours' terminal=false refresh=true\"\necho \":calendar: In a meeting | bash='$0' param1=you@email.com param2=calendar param3='In a meeting' param4='in one hour' terminal=false refresh=true\"\necho \":walking: Taking a break | bash='$0' param1=you@email.com param2=walking param3='Taking a break' param4='in half an hour' terminal=false refresh=true\"\necho \":hamburger: Eating lunch | bash='$0' param1=you@email.com param2=hamburger param3='Eating lunch' param4='in one hour' terminal=false refresh=true\"\necho \":sunglasses: Done for the day | bash='$0' param1=you@email.com param2=sunglasses param3='Done for the day' param4='tomorrow at 8am' terminal=false refresh=true\"\necho \":palm_tree: On vacation  | bash='$0' param1=you@email.com param2=palm_tree param3='On vacation' param4='in one week' terminal=false refresh=true\"\n"
				}
			],
			"path": "Tools/Slack/slack-status.sh",
			"filename": "slack-status.sh",
			"dir": "Tools/Slack",
			"docsPlugin": "Tools/Slack/slack-status.sh.html",
			"docsCategory": "Tools/Slack.html",
			"pathSegments": [
				"Tools",
				"Slack"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/Slack",
					"text": "Slack",
					"isLast": true
				}
			],
			"title": "Slack Stuatus",
			"version": "v1.0",
			"author": "Ben Sehl",
			"authors": [
				{
					"name": "Benjamin Sehl",
					"githubUsername": "benjaminsehl",
					"imageURL": "https://avatars.githubusercontent.com/u/1060770?v=4",
					"bio": "I’m Benjamin Sehl (pronounced /sāl/, like sale or sail) a design strategist and entrepreneur from Toronto, Canada. Find me everywhere @benjaminsehl.",
					"primary": true
				}
			],
			"desc": "Change your status on Slack from the menubar.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"Autocode",
				"Slack"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.223771Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/Slack/slack-team-notifications.1m.js",
					"filename": "slack-team-notifications.1m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n/* jshint esversion: 8 */\n/* jshint asi: true */\n\n// \u003cbitbar.title\u003eSlack Team Notifications\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eBenji Encalada Mora\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003ebenjifs\u003c/bitbar.author.github\u003e\n// \u003cbitbar.image\u003ehttps://i.imgur.com/ORbsRBx.jpg\u003c/bitbar.image\u003e\n// \u003cbitbar.desc\u003eShow notifications for Slack teams and channels with option to mark as read. See https://github.com/benjifs/bitbar-slack-team-notifications for configuration instructions.\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js superagent\u003c/bitbar.dependencies\u003e\n\nconst request = require('superagent');\nconst tokens = require('./.tokens.js');\n\n// CONFIG\n// BITBAR_SLACK_ICON defines which Slack Icon is shown\n// 0 -\u003e Original Slack Icon\n// 1 -\u003e White Slack Icon\n// 2 -\u003e Black Slack Icon\nconst BITBAR_SLACK_ICON = process.env.BitBarDarkMode ? 1 : 2;\n// If MENTIONS_ONLY is true, the count only includes mentions and DMs.\n// If MENTIONS_ONLY is false, the count includes all unread messages.\nconst MENTIONS_ONLY = false;\n// MAX_LENGTH of channel name or user name\nconst MAX_LENGTH = 18;\n// Show `No new notifications` message\nconst SHOW_ZERO_NOTIFICATIONS = true;\n\n// Is Slack.app installed?\nlet SLACK_INSTALLED = true;\nconst { exec } = require('child_process');\nexec('ls /Applications | grep Slack | wc -l', (err, stdout, stderr) =\u003e {\n\tif (!err \u0026\u0026 stdout == 0) {\n\t\tSLACK_INSTALLED = false;\n\t}\n});\n\nconst DEBUG = process.argv.indexOf('--debug') \u003e 0;\nconst SCRIPT = process.argv[1];\n\n// Slack App Credentials\nconst SLACK_OAUTH_AUTHORIZE = 'https://slack.com/oauth/authorize?scope=client\u0026client_id=';\nconst SLACK_CLIENT_ID = '11708641376.684689498789';\n\n// Slack API\nconst SLACK_API = 'https://slack.com/api/';\nconst SLACK_CONVERSATIONS = 'conversations';\nconst SLACK_CHANNELS = 'channels';\nconst SLACK_GROUPS = 'groups';\nconst SLACK_IM = 'im';\nconst SLACK_TEAM = 'team';\nconst SLACK_USERS = 'users';\nconst SLACK_INFO = '.info';\nconst SLACK_LIST = '.list';\nconst SLACK_MARK = '.mark';\nconst SLACK_HISTORY = '.history';\nconst SLACK_AUTH_TEST = 'auth.test';\n\n// ICONS {\n// Original Slack icon (unused)\nconst SLACK_ICON = 'image=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';\n\n// Dark Slack Icon\nconst SLACK_ICON_B = 'image=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';\n\n// White Slack Icon\nconst SLACK_ICON_W = 'image=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'\n// }\n\nlet unread_count = 0;\nconst slack_output = {};\nconst errors = [];\nlet call_log = {};\n\ndebug('Debugging');\n\nif (process.argv.indexOf('--mark') \u003e 0) {\n\tconsole.log('Mark as read');\n\n\tlet token;\n\tfor (let i = 3; i \u003c process.argv.length; i++) {\n\t\tif (process.argv[i].indexOf('--token=') === 0) {\n\t\t\ttoken = process.argv[i].split('=')[1];\n\t\t}\n\t}\n\tif (!token) {\n\t\tconsole.log('Error: Missing token');\n\t\treturn;\n\t}\n\n\tfor (let i = 3; i \u003c process.argv.length; i++) {\n\t\tlet args = process.argv[i].split('=');\n\t\tif (args.length != 2) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ([SLACK_CHANNELS, SLACK_GROUPS, SLACK_IM].indexOf(args[0]) \u003c 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet channels = args[1].split(',');\n\t\tfor (let j in channels) {\n\t\t\tconsole.log('/' + args[0] + SLACK_MARK + ' (' + channels[j] + ')');\n\t\t\tslack_request(SLACK_CONVERSATIONS + SLACK_MARK, {\n\t\t\t\t'token': token,\n\t\t\t\t'channel': channels[j],\n\t\t\t\t'ts': Math.floor(Date.now() / 1000) + '.000000'\n\t\t\t})\n\t\t\t\t.then((body) =\u003e {\n\t\t\t\t\t// console.log('  Success: ' + args[0] + ':' + channels[j]);\n\t\t\t\t});\n\t\t}\n\t}\n\treturn;\n}\n\nfunction debug(message) {\n\treturn DEBUG \u0026\u0026 console.log(message);\n}\n\nfunction slack_request(URL, query) {\n\tdebug('  /' + URL + (query.channel ? ' (' + query.channel + ')' : ''));\n\t// The following is to keep track of how many calls are being made\n\t// for each token to each method. Should help debug the rate limits\n\tif (!call_log[query.token]) {\n\t\tcall_log[query.token] = {};\n\t}\n\tif (!call_log[query.token][URL]) {\n\t\tcall_log[query.token][URL] = 0;\n\t}\n\tcall_log[query.token][URL]++;\n\treturn request\n\t\t.get(SLACK_API + URL)\n\t\t.query(query)\n\t\t.then((res) =\u003e {\n\t\t\tdebug(res.body);\n\t\t\tif (res \u0026\u0026 res.body \u0026\u0026 res.body.ok === true) {\n\t\t\t\treturn Promise.resolve(res.body);\n\t\t\t}\n\t\t\treturn Promise.reject(res.body.error);\n\t\t})\n\t\t.catch((err) =\u003e {\n\t\t\tdebug('ERROR: ' + err);\n\t\t\tdebug('  ' + URL);\n\t\t\tdebug('  ' + JSON.stringify(query));\n\t\t\terrors.push(URL + ': ' + err + ' | color=red');\n\t\t});\n}\n\nfunction output() {\n\tunread_count = unread_count \u003e 10 ? '10+' : unread_count \u003e 0 ? unread_count : '';\n\tconst slack_icon = BITBAR_SLACK_ICON == 2 ? SLACK_ICON_B : BITBAR_SLACK_ICON == 1 ? SLACK_ICON_W : SLACK_ICON;\n\tif (errors.length \u003e 0) {\n\t\tconsole.log('! |color=red ' + slack_icon);\n\t} else {\n\t\tconsole.log(unread_count + ' | ' + slack_icon);\n\t}\n\n\tif (Object.keys(slack_output).length) {\n\t\tfor (let i in slack_output) {\n\t\t\tlet team = slack_output[i];\n\n\t\t\tif (SHOW_ZERO_NOTIFICATIONS || team.notifications.length \u003e 0) {\n\t\t\t\tconsole.log('---');\n\t\t\t\tconsole.log(team.name + ' | size=12');\n\t\t\t}\n\t\t\tif (team.notifications.length \u003e 0) {\n\t\t\t\tfor (let j in team.notifications) {\n\t\t\t\t\tconsole.log(team.notifications[j]);\n\t\t\t\t}\n\t\t\t\tconsole.log('Mark all as read ' +\n\t\t\t\t\t'|bash=' + SCRIPT +\n\t\t\t\t\t' param1=--mark' +\n\t\t\t\t\t' param2=--token=' + team.token +\n\t\t\t\t\t(team.params[SLACK_IM] ? ' param3=' + SLACK_IM + '=' + team.params[SLACK_IM].join() : '') +\n\t\t\t\t\t(team.params[SLACK_GROUPS] ? ' param4=' + SLACK_GROUPS + '=' + team.params[SLACK_GROUPS].join() : '') +\n\t\t\t\t\t(team.params[SLACK_CHANNELS] ? ' param5=' + SLACK_CHANNELS + '=' + team.params[SLACK_CHANNELS].join() : '') +\n\t\t\t\t\t' refresh=true' +\n\t\t\t\t\t' terminal=false');\n\t\t\t} else if (SHOW_ZERO_NOTIFICATIONS) {\n\t\t\t\tconsole.log('No new notifications');\n\t\t\t}\n\t\t}\n\t}\n\tif (errors.length \u003e 0) {\n\t\tconsole.log('---');\n\t\tconsole.log('Errors');\n\t\tfor (let i in errors) {\n\t\t\tconsole.log('--' + errors[i]);\n\t\t}\n\t}\n\tconsole.log('---');\n\tconsole.log('Add New Workspace');\n\tconsole.log('--Generate OAuth Token | href=' + SLACK_OAUTH_AUTHORIZE + SLACK_CLIENT_ID);\n\tdebug(call_log);\n}\n\nfunction channel_output(channel) {\n\tunread_count += channel.count;\n\n\tlet output_str = (channel.is_im ? '@' : '#') + channel.name;\n\tif (output_str.length \u003e MAX_LENGTH) {\n\t\toutput_str = output_str.substring(0, MAX_LENGTH - 1) + '…';\n\t}\n\toutput_str += ' '.repeat(MAX_LENGTH + 2 - output_str.length);\n\toutput_str += (channel.count \u003e 10 ? '10+' : channel.count);\n\n\tlet key = channel.is_im ? SLACK_IM : channel.is_channel ? SLACK_CHANNELS : SLACK_GROUPS;\n\tlet href;\n\tif (SLACK_INSTALLED) {\n\t\thref = 'slack://channel?team=' + channel.team + '\u0026id=' + channel.id;\n\t} else {\n\t\thref = 'https://app.slack.com/client/' + channel.team + '/' + channel.id;\n\t}\n\n\tslack_output[channel.token].notifications.push(output_str + '|font=Menlo size=13 href=' + href);\n\n\tslack_output[channel.token].notifications.push('Mark as read ' +\n\t\t'|alternate=true' +\n\t\t' font=Menlo size=13' +\n\t\t' bash=' + SCRIPT +\n\t\t' param1=--mark' +\n\t\t' param2=--token=' + channel.token +\n\t\t' param3=' + key + '=' + channel.id +\n\t\t' refresh=true' +\n\t\t' terminal=false');\n\n\tif (!slack_output[channel.token].params[key]) {\n\t\tslack_output[channel.token].params[key] = [];\n\t}\n\tslack_output[channel.token].params[key].push(channel.id);\n}\n\nasync function run() {\n\tif (typeof tokens === 'undefined' || !tokens || !tokens.length) {\n\t\terrors.push('Missing Slack Legacy Token | color=red href=https://api.slack.com/custom-integrations/legacy-tokens');\n\t\terrors.push('Generate OAuth Token | color=red href=' + SLACK_OAUTH_AUTHORIZE + SLACK_CLIENT_ID);\n\t\treturn output();\n\t}\n\n\tfor (let i in tokens) {\n\t\tawait get_team_notifications(tokens[i]);\n\t}\n\toutput();\n}\n\nfunction get_team_notifications(token) {\n\treturn get_team_info(token)\n\t\t.then((team) =\u003e {\n\t\t\tif (team) {\n\t\t\t\tslack_output[token] = {\n\t\t\t\t\t'id': team.id,\n\t\t\t\t\t'name': team.name,\n\t\t\t\t\t'token': token,\n\t\t\t\t\t'notifications': [],\n\t\t\t\t\t'params': {},\n\t\t\t\t\t'errors': []\n\t\t\t\t};\n\t\t\t\treturn get_auth_info(token);\n\t\t\t} else {\n\t\t\t\tthrow 'Invalid token';\n\t\t\t}\n\t\t})\n\t\t.then((user_id) =\u003e {\n\t\t\tslack_output[token]['user_id'] = user_id;\n\t\t\treturn get_team_conversations(token);\n\t\t})\n\t\t.then((channels) =\u003e {\n\t\t\treturn check_channels_unread(channels, token);\n\t\t})\n\t\t.then((channels) =\u003e {\n\t\t\tfor (let i in channels) {\n\t\t\t\tif (channels[i]) {\n\t\t\t\t\tchannel_output(channels[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch((errors) =\u003e {\n\t\t\tdebug(errors);\n\t\t})\n}\n\nfunction get_team_info(token) {\n\tdebug('Fetching team info for ' + token);\n\treturn slack_request(SLACK_TEAM + SLACK_INFO, {\n\t\t'token': token\n\t})\n\t\t.then((body) =\u003e {\n\t\t\tif (body \u0026\u0026 body.team) {\n\t\t\t\treturn Promise.resolve(body.team);\n\t\t\t}\n\t\t});\n}\n\nfunction get_auth_info(token) {\n\tdebug('Fetch auth info for ' + token);\n\treturn slack_request(SLACK_AUTH_TEST, {\n\t\t'token': token\n\t}).\n\t\tthen((body) =\u003e {\n\t\t\tif (body \u0026\u0026 body.user_id) {\n\t\t\t\treturn Promise.resolve(body.user_id);\n\t\t\t}\n\t\t});\n}\n\nfunction get_team_conversations(token) {\n\tdebug('Fetching conversations for ' + token);\n\treturn slack_request(SLACK_CONVERSATIONS + SLACK_LIST, {\n\t\t'token': token,\n\t\t'exclude_archived': true,\n\t\t'limit': 200,\n\t\t'types': 'public_channel,private_channel,mpim,im'\n\t})\n\t\t.then((body) =\u003e {\n\t\t\tif (body \u0026\u0026 body.channels) {\n\t\t\t\treturn Promise.resolve(body.channels);\n\t\t\t}\n\t\t});\n}\n\nasync function check_channels_unread(channels, token) {\n\tlet req = [];\n\tfor (let i in channels) {\n\t\tif (channels[i]) {\n\t\t\treq.push(is_channel_unread(channels[i], token));\n\t\t}\n\t}\n\treturn await Promise.all(req);\n}\n\nfunction is_channel_unread(channel, token) {\n\treturn get_unread_count(channel, token)\n\t\t.then((unread_count) =\u003e {\n\t\t\tif (channel \u0026\u0026 unread_count \u003e 0) {\n\t\t\t\tif (channel.is_im) {\n\t\t\t\t\treturn get_user(channel.user, token)\n\t\t\t\t\t\t.then((user) =\u003e {\n\t\t\t\t\t\t\tif (user) {\n\t\t\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\t\t\t'id': channel.id,\n\t\t\t\t\t\t\t\t\t'name': user.name,\n\t\t\t\t\t\t\t\t\t'count': unread_count,\n\t\t\t\t\t\t\t\t\t'team': user.team_id,\n\t\t\t\t\t\t\t\t\t'is_im': true,\n\t\t\t\t\t\t\t\t\t'token': token\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t} else if (channel.is_member || channel.is_group) {\n\t\t\t\t\tlet team = channel.shared_team_ids \u0026\u0026 channel.shared_team_ids.length \u003e 0 ? channel.shared_team_ids[0] : '';\n\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t'id': channel.id,\n\t\t\t\t\t\t'name': channel.name,\n\t\t\t\t\t\t'count': unread_count,\n\t\t\t\t\t\t'team': team,\n\t\t\t\t\t\t'is_channel': channel.is_member \u0026\u0026 channel.is_channel,\n\t\t\t\t\t\t'is_group': channel.is_group || (channel.is_channel \u0026\u0026 channel.is_private),\n\t\t\t\t\t\t'token': token\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n}\n\nfunction get_unread_count(channel, token) {\n\t// unread_count_display is a count of messages that the calling user has\n\t// yet to read that matter to them (this means it excludes things like\n\t// join/leave messages)\n\t// unread_count_display does not show up consistently.\n\t// In the case unread_count_display is not present, check conversations.history\n\tif (channel \u0026\u0026 !('unread_count_display' in channel)) {\n\t\treturn check_conversation_history(channel, token)\n\t\t\t.then((unread_count) =\u003e {\n\t\t\t\treturn Promise.resolve(unread_count);\n\t\t\t})\n\t} else {\n\t\treturn Promise.resolve(channel.unread_count_display);\n\t}\n}\n\nfunction check_conversation_history(channel, token) {\n\tdebug('Fetch history for ' + channel.id);\n\treturn slack_request(SLACK_CONVERSATIONS + SLACK_HISTORY, {\n\t\t'token': token,\n\t\t'channel': channel.id,\n\t\t'oldest': channel.last_read != '0000000000.000000' ? channel.last_read : 0,\n\t\t'unreads': true\n\t})\n\t\t.then((body) =\u003e {\n\t\t\tif (body \u0026\u0026 body.unread_count_display \u003e 0) {\n\t\t\t\tconst user_id = slack_output[token]['user_id'];\n\t\t\t\tif (channel.is_im || channel.is_mpim) {\n\t\t\t\t\treturn Promise.resolve(body.unread_count_display);\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve(count_mentions(body, user_id));\n\t\t\t}\n\t\t\treturn Promise.resolve(0);\n\t\t});\n}\n\nfunction count_mentions(body, user_id) {\n\tif (MENTIONS_ONLY \u0026\u0026 body.messages \u0026\u0026 body.messages.length \u003e 0) {\n\t\tlet count = 0;\n\t\tfor (let i in body.messages) {\n\t\t\tif (i \u003e= body.unread_count_display) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (body.messages[i].text.indexOf(user_id) \u003e= 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\treturn body.unread_count_display;\n}\n\nfunction get_user(user, token) {\n\tdebug('Fetch user info for ' + user);\n\treturn slack_request(SLACK_USERS + SLACK_INFO, {\n\t\t'token': token,\n\t\t'user': user\n\t})\n\t\t.then((body) =\u003e {\n\t\t\tif (body \u0026\u0026 body.user) {\n\t\t\t\treturn Promise.resolve(body.user);\n\t\t\t}\n\t\t});\n}\n\nrun();\n\n"
				}
			],
			"path": "Tools/Slack/slack-team-notifications.1m.js",
			"filename": "slack-team-notifications.1m.js",
			"dir": "Tools/Slack",
			"docsPlugin": "Tools/Slack/slack-team-notifications.1m.js.html",
			"docsCategory": "Tools/Slack.html",
			"pathSegments": [
				"Tools",
				"Slack"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/Slack",
					"text": "Slack",
					"isLast": true
				}
			],
			"title": "Slack Team Notifications",
			"version": "v1.1.0",
			"author": "Benji Encalada Mora",
			"authors": [
				{
					"name": "Benji Encalada Mora",
					"githubUsername": "benjifs",
					"imageURL": "https://avatars.githubusercontent.com/u/4167938?v=4",
					"bio": "🇪🇨",
					"primary": true
				}
			],
			"desc": "Show notifications for Slack teams and channels with option to mark as read. See https://github.com/benjifs/bitbar-slack-team-notifications for configuration instructions.",
			"imageURL": "https://i.imgur.com/ORbsRBx.jpg",
			"dependencies": [
				"node.js superagent"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.303048Z",
			"vars": null
		}
	]
}