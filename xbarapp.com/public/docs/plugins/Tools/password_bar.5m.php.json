{
	"plugin": {
		"files": [
			{
				"path": "Tools/password_bar.5m.php",
				"filename": "password_bar.5m.php",
				"content": "#!/usr/bin/env php\n\u003c?php\n\n# \u003cbitbar.title\u003ePassword Generator\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAdi\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003egomedia-adi\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGenerates human-friendly strong passwords.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://www.greatoceanmedia.com.au/images/63.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ephp\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://www.greatoceanmedia.com.au/bitbar/password-bar\u003c/bitbar.abouturl\u003e\n\n/*\n\tBitBar plugin help: https:github.com/matryer/bitbar\n\n\tPlugin updated 22/6/20\n\n\tVersion history\n\t\t1.0\t- also now generates a single obscure password (i.e. one that doesn't contain words)\n\t\t\t- length of obscure password user definable\n\t\t\t- changed format element \"p\" to \"s\" (coz they're symbols more than punctuation)\n\t\t\t- option to select subset of symbols\n\t\t\t- Dark Mode compatible menubar icon\n\t\t0.1\t- initial release\n\n\tCredits\n\t\t- plugin inspired by a Mac app called Arcana by Tekuris\n\t\t- thanks to Christian S for v1.0 improvement suggestions\n*/\n\n/* TODO\n\t- format massaging/validation?\n*/\n\ndefine('CONFIG_FILE', \"/var/tmp/bitbar.password_bar.config.php\");\ndefine('DEFAULT_FORMAT', \"3,n,5,s,4\");\ndefine('FULL_SYM', \"!\\\"#$%\u0026'()*+,-./:;\u003c=\u003e?@[\\]^_`{|}~\");\ndefine('PARTIAL_SYM', \"!#$%\u0026*+,-.:;=?@^_|~\"); // without the quotes, brackets, slashes\ndefine('LIMITED_SYM', \"!#$%*+-=@^_\"); // the supposed eBay subset\ndefine('ALPHA_NUM', \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\ndefine('DEFAULT_LENGTH', 14);\n\nfunction update_config($format, $symbols, $length) {\n// rewrite config file with given values\n\n\tfile_put_contents(CONFIG_FILE, \"\u003c?php\\n\");\n\tfile_put_contents(CONFIG_FILE, \"// PASSWORD_BAR CONFIGURATION\\n\", FILE_APPEND);\n\tfile_put_contents(CONFIG_FILE, \"\\$format = '$format';\\n\", FILE_APPEND);\n\tfile_put_contents(CONFIG_FILE, \"\\$symbols = '$symbols';\\n\", FILE_APPEND);\n\tfile_put_contents(CONFIG_FILE, \"\\$length = '$length';\\n\", FILE_APPEND);\n\tfile_put_contents(CONFIG_FILE, \"?\u003e\\n\", FILE_APPEND);\n}\n\nfunction generate_pwd($format, $symbols) {\n// generate password using format\n\tglobal $words1, $words2, $words3, $words4, $words5, $words6, $words7, $words8, $words9; // make word lists available between function calls\n\n\t$password = '';\n\n\t$symbol = FULL_SYM;\n\tif ($symbols == 'partial') $symbol = PARTIAL_SYM;\n\tif ($symbols == 'limited') $symbol = LIMITED_SYM;\n\n\t$parts = explode(',', $format);\n\tforeach ($parts as $part) {\n\t\t// random single digit\n\t\tif ($part == 'n')\n\t\t\t$password .= rand(1,9);\n\t\t// random symbol character (from predefined list)\n\t\tif (($part == 'p') || ($part == 's')) {\n\t\t\t$random_symbol = $symbol[rand(0, strlen($symbol)-1)];\n\t\t\t$password .= $random_symbol;\n\t\t}\n\t\t// random word of n letters\n\t\tif (strpos('123456789', $part) !== FALSE) {\n\t\t\t$words_var = 'words'.$part;\n\t\t\tif (!isset($$words_var)) { // create n-letter word array for first time\n\t\t\t\t$num_char = (int)$part;\n\t\t\t\t$cmd = \"grep -x '.\\{\".$num_char.\"\\}' /usr/share/dict/words | grep -v '[[:upper:]]'\";\n\t\t\t\t$$words_var = array();\n\t\t\t\texec($cmd, $$words_var, $err);\n\t\t\t}\n\t\t\t$words = $$words_var;\n\t\t\t$rand_key = array_rand($words); // get random key\n\t\t\t$password .= ucfirst($words[$rand_key]); // get random Word\n\t\t}\n\t}\n\n\treturn $password;\n}\n\nfunction generate_obscure_pwd($length, $symbols) {\n// generate an obscure password\n\n\t$password = array();\n\n\t$string = ALPHA_NUM.FULL_SYM;\n\tif ($symbols == 'partial') $string = ALPHA_NUM.PARTIAL_SYM;\n\tif ($symbols == 'limited') $string = ALPHA_NUM.LIMITED_SYM;\n\n\t$chars = str_split($string); // convert string to array\n\tshuffle($chars); // randomise chars\n\t$rand_keys = array_rand($chars, $length); // randomly pick array keys\n\tforeach ($rand_keys as $key) // create password from alpha/num/symbols array using random keys\n\t\t$password[] = $chars[$key];\n\t// rotate password chars until begins with alpha\n\twhile (!ctype_alpha($password[0]))\n\t\tarray_push($password, array_shift($password));\n\n\treturn implode('', $password); // return string\n}\n\n//-------------------------------------------------------------------------------------------------\n\n//??? CONFIG FILE\n\n// initialise config file\nif (!file_exists(CONFIG_FILE))\n\ttouch(CONFIG_FILE);\n\n// read config file\ninclude(CONFIG_FILE);\n\n// provide defaults\nif (!isset($format) || $format == '') $format = DEFAULT_FORMAT;\nif (!isset($symbols) || $symbols == '' || !in_array($symbols, array('full', 'partial', 'limited'))) $symbols = 'partial';\nif (!isset($length) || !$length) $length = '14';\n\n//??? MENU ACTIONS\n\n// menu option selected\nif (isset($argv[1])) {\n\t// prompt for readable password format \u0026 save\n\tif ($argv[1] == \"set_format\") {\n\t\t$cmd = \"osascript -e 'set theString to text returned of (display dialog \\\"Readable Password Format \\\" default answer \\\"\".$format.\"\\\" buttons {\\\"Cancel\\\", \\\"Save\\\"} default button 2)'\";\n\t\texec($cmd, $out, $err);\n\t\tif (!$err) { // something entered\n\t\t\t$str = implode('', $out); // text entered by user\n\t\t\t$format = ($str ? $str : DEFAULT_FORMAT); // reset to default if blank or zero\n\t\t\tupdate_config($format, $symbols, $length);\n\t\t}\n\t}\n\t// prompt for obscure password length \u0026 save\n\tif ($argv[1] == \"set_length\") {\n\t\t$cmd = \"osascript -e 'set theString to text returned of (display dialog \\\"Obscure Password Length \\\" default answer \\\"\".$length.\"\\\" buttons {\\\"Cancel\\\", \\\"Save\\\"} default button 2)'\";\n\t\texec($cmd, $out, $err);\n\t\tif (!$err) { // something entered\n\t\t\t$str = implode('', $out); // text entered by user\n\t\t\t$length = (int)$str; // convert str to int (will become zero if not int)\n\t\t\t$length = ($length ? $length : DEFAULT_LENGTH); // reset to default if blank or zero\n\t\t\tupdate_config($format, $symbols, $length);\n\t\t}\n\t}\n\t// save symbol subset\n\tif ($argv[1] == \"set_symbols\")\n\t\tupdate_config($format, $argv[2], $length);\n\t// copy password to clipboard\n\tif ($argv[1] == \"copy_pwd\") {\n\t\t$cmd = \"echo '\".$argv[2].\"' | base64 --decode | pbcopy\"; // decode \u0026 copy to clipboard\n\t\texec($cmd, $out, $err);\n\t}\n\t// help dialog - some special chars used below to avoid CLI interpretation: backslash=⧵ (U+29F5); apostrophe=＇(U+FF07), double quote=″ (U+2033)\n\tif ($argv[1] == \"help\") {\n\t\t$cmd = \"osascript -e 'display dialog \\\"Readable Passwords Format\n\t1-9\t- random word with the specified number of letters\n\t\t  (e.g. 3 becomes a three letter Capitalised word)\n\tn\t- random single digit number\n\ts\t- random symbol character (see below)\n\n\tDefault format:  3,n,5,s,4\n\t- generates a password containing a 3 letter word,\n\ta digit, a 5 letter word, a symbol character,\n\tand finally a 4 letter word (e.g. Tig5Pesky?Muff)\n\nObscure Password\n\tThis is a completely randomised string of letters,\n\tdigits and symbols. Set the length from the menu\n\t(default = 14).\n\nSymbol Sets\n\tFull:\t\t!″#$%\u0026＇()*+,-./:;\u003c=\u003e?@[⧵]^_`{|}~\n\tPartial:\t!#$%\u0026*+,-.:;=?@^_|~\n\tLimited:\t!#$%*+-=@^_\n\\\" buttons {\\\"OK\\\"} default button 1'\";\n\t\texec($cmd, $out, $err);\n\t\texit;\n\t}\n}\n\n//??? MENUBAR\n\n// display icon: 36x36 png (32x32max image + 2px transparent border), 144 dpi, colour mode grey, encoded using \"base64 icon.png\" ... prepend \"|templateImage=\" \u0026 append \"\\n\"\necho \"|templateImage=iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAQAAABLCVATAAAAAmJLR0QA/4ePzL8AAAAJcEhZcwAAFiUAABYlAUlSJPAAAAAHdElNRQfkBhUWCih+dz6LAAABaUlEQVRIx9XWv0oDQRAG8PnSRBBbLRXFUoiI4EX8TyQG7CzsLBT1CXwBjdaCIGJhZx0QuV7zAoJCihQWVgFRiEW4eFmL6GWyenuzi01um+Tj9pfN7jB3RD17YQj78PGCN1RwhYIrsweljRDj9oz/i2mPLTvmOoZRUJiXMyMGRqEmh57YtA8UsYlbfLJsVcYMsinPUTrB0qoMmoomtDDK8pMO1U5SCVJ/9CmkV5aX9BuToGZnEZRm+bBtBY2x3ThkeT1KAynFD/scA0TI4IFlx1KoaKyjgCBzpo2MwoWMWUlgfBmTQ2hkzpCSMF7XpCaOUGHf7rAkW82M9uuL31s/iWVY1FBOY7Ju7TCv7Y3nxsxqDXXhPxglZ7oPcA1l/excVlNA649qObBl5mILb9uG8Yw1nBXvES6NdwXyBtYwrGfD5SHYwI3G7Ni11DQeUcc7MkS4Z8yuy4tC309bQMnhT8Wgp6hhnXr6+gJZx0AEmEK/dgAAAABJRU5ErkJggg==\\n\";\n\n//??? TOP-LEVEL MENU\n\n// display readable human-friendly passwords\necho \"---\\n\";\necho \"Click to Copy:\\n\";\nforeach (range(1, 10) as $i) {\n\t$pwd = generate_pwd($format, $symbols);\t\t// generate password\n \t$pwd_nobar = str_replace('|', '｜', $pwd);\t// \"|\" interpreted by bitbar, so substitute with a vertical line (U+FF5C)\n\t$pwd_enc = base64_encode($pwd);\t\t\t\t// encode password to hide unix special characters from CLI\n\techo $pwd_nobar.\" | terminal=false bash=\\\"\".$argv[0].\"\\\" param1=copy_pwd param2=\".$pwd_enc.\" refresh=false terminal=false\".\"\\n\";\n}\n\n// display an obscure password\necho \"…\\n\";\n$pwd = generate_obscure_pwd($length, $symbols);\n$pwd_nobar = str_replace('|', '｜', $pwd);\t// \"|\" interpreted by bitbar, so substitute with a vertical line (U+FF5C)\n$pwd_enc = base64_encode($pwd);\t\t\t\t// encode password to hide unix special characters from CLI\necho $pwd_nobar.\" | terminal=false bash=\\\"\".$argv[0].\"\\\" param1=copy_pwd param2=\".$pwd_enc.\" refresh=false terminal=false\".\"\\n\";\n\n// regenerate passwords (i.e. refresh)\necho \"---\\n\";\necho\n\t'Regenerate'\n\t.\" | terminal=false bash=\\\"\".$argv[0].\"\\\" refresh=true terminal=false\"\n\t.\"\\n\"\n;\n\n// display current settings\necho \"---\\n\";\necho \"Readable Format: $format\\n\";\necho \"Obscure Length: $length\\n\";\necho \"---\\n\";\n\n// set readable password format\necho\n\t'Set Readable Format…'\n\t.\" |  bash=\\\"\".$argv[0].\"\\\" param1=set_format refresh=true terminal=false\"\n\t.\"\\n\"\n;\n\n// set obscure password length\necho\n\t'Set Obscure Length…'\n\t.\" |  bash=\\\"\".$argv[0].\"\\\" param1=set_length refresh=true terminal=false\"\n\t.\"\\n\"\n;\n\n// symbols subset options\necho \"Symbol Sets\\n\";\nforeach (array('full', 'partial', 'limited') as $this_symbol_set)\n\techo\n\t\t'--'\n\t\t.ucfirst($this_symbol_set)\n\t\t.($this_symbol_set == $symbols ? ' ✓' : '')\n\t\t.\" | terminal=false bash=\\\"\".$argv[0].\"\\\" param1=set_symbols param2=\\\"$this_symbol_set\\\" refresh=true\"\n\t\t.\"\\n\"\n\t;\n\n// display help dialog\necho\n\t'Help'\n\t.\" |  bash=\\\"\".$argv[0].\"\\\" param1=help terminal=false\"\n\t.\"\\n\"\n;\n\n?\u003e\n"
			}
		],
		"path": "Tools/password_bar.5m.php",
		"filename": "password_bar.5m.php",
		"dir": "Tools",
		"docsPlugin": "Tools/password_bar.5m.php.html",
		"docsCategory": "Tools.html",
		"pathSegments": [
			"Tools"
		],
		"categoryPathSegments": [
			{
				"path": "Tools",
				"text": "Tools",
				"isLast": true
			}
		],
		"title": "Password Generator",
		"version": "v1.0",
		"author": "Adi",
		"authors": [
			{
				"name": "gomedia-adi",
				"githubUsername": "gomedia-adi",
				"imageURL": "https://avatars.githubusercontent.com/u/13227940?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Generates human-friendly strong passwords.",
		"imageURL": "http://www.greatoceanmedia.com.au/images/63.png",
		"dependencies": [
			"php"
		],
		"aboutURL": "http://www.greatoceanmedia.com.au/bitbar/password-bar",
		"lastUpdated": "2021-03-08T15:22:07.696164Z",
		"vars": null
	}
}