{
	"plugins": [
		{
			"files": [
				{
					"path": "Tools/addnote.5s.py",
					"filename": "addnote.5s.py",
					"content": "#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n\n# \u003cbitbar.title\u003eAdd Note\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eFrak Nuaimy\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003efrakman1\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/608LQ25.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eAdd a note to Apple Notes app.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n\n\nimport os, sys\nimport argparse\nimport subprocess\n\n\ndef run_script(script):\n    return (subprocess.Popen([script], stdout=subprocess.PIPE, shell=True).communicate()[0].strip()).replace(\"'\", \"’\")\n\ndef run_script2(script):\n    return (subprocess.Popen([script], stdout=subprocess.PIPE, shell=True).communicate()[0])\n\nfullPathFileName = os.path.realpath(__file__)\n\n\nparser = argparse.ArgumentParser()\nparser.add_argument('-n', action='store', dest='localnote',help='Create Note Flag')\nresults = parser.parse_args()\n\n\nif(len(sys.argv) \u003e= 2):\n    if (sys.argv[1] == \"-n\"): \n        cmd = \"osascript -e \\'set theString to text returned of (display dialog \\\"Please Enter The Note To Add \\\" with icon note default answer \\\"\\n\\n\\n\\\" buttons {\\\"OK\\\",\\\"Cancel\\\"} default button 1) \\'\" \n        note = run_script(cmd)\n        if len(note) == 0:\n             sys.exit(1)\n        if \"\\n\" in note:\n            i = note.index('\\n')\n            header = note.splitlines(True)[0]\n            body = note[i+1:]\n        else:\n            header = note\n            body = \"\"\n        cmd2 = \"osascript -e 'tell application \\\"Notes\\\" \\n tell account \\\"iCloud\\\" \\n make new note at folder \\\"Notes\\\" with properties {name:\\\"%s\\\", body:\\\"%s\\\"} \\n end tell \\n end tell'\" % (header, body)\n        run_script2(cmd2)\n        sys.exit(1)\nnote_icon = \"iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAf9JREFUOI21lE1rE1EYhc97c9PG2C+VIp0mLpqg0I0EV67FneBvqEL/hQGrC8GNiiJFXGRR/4Eg1PqBbqxiFwVta03BTKdJtHWSaeajM3NfFyUlhgqJmR54V+fycO/hvJcA4NHtqTRArypGbcKy9gQzoxsNDPTx6NhwdaVYuv648PI5ANDsnekzv8rW+rfVYlwp1RWwVUSE9ERabdXMa0/nFgrCte35tZXeoADAzCgVS+KcNvoAwMnY+UzqvlVvUE/UFjlO0N+XFG+F+dsRUUH3wS4ms2MX5JWrZxH4XmRgohg+fSmTvHQ5C7AfGRggbGxtxwTQXbU6kVJKRJrvgYSAdG0f4DBCKkGFCjJxTAKIrG37YJA4gowZIYd8JBlzGJJ0bB8U4a2ZAQ4pJhNJGTk4CAKI8s+gRvFTaB+j3OiBrkhkcjc0w6jU2z3TtPFDN/+Lq5iFBGBncvnU96UZXdNODzVNP1AwjDo8J0B6fKRjqO8rLH7W9WYrrEwun9o0KlbzQFwK9Cdi2HU8VHd2kUjKjsYJAu/F69WPrXWzsrm81gpvanun0VEsZs3F3XsLcwC+HrZyQ+tLM7qhVwdd7+/v9MTIcaTHhw95fgiz7u49fPLu2Wzhwy0AxX/t8uD01MWb7HO83YhLEQKAIFIAQES8vLZpvHm/sQhgGYAJAH8As2PnfRzL6c4AAAAASUVORK5CYII=\"\nprint \" | image={}\".format(note_icon) + \" trim=false, color=yellow bash=\" + fullPathFileName +  \" param1=-n param2=null terminal=false refresh=true\"\n\n"
				}
			],
			"path": "Tools/addnote.5s.py",
			"filename": "addnote.5s.py",
			"dir": "Tools",
			"docsPlugin": "Tools/addnote.5s.py.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Add Note",
			"version": "v1.0",
			"author": "Frak Nuaimy",
			"authors": [
				{
					"name": "Frak",
					"githubUsername": "frakman1",
					"imageURL": "https://avatars.githubusercontent.com/u/5826484?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Add a note to Apple Notes app.",
			"imageURL": "http://i.imgur.com/608LQ25.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.297094Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/BitBar/bitbar-plugin-installer.1d.php",
					"filename": "bitbar-plugin-installer.1d.php",
					"content": "#!/usr/bin/env php\n\u003c?php\n// \u003cbitbar.title\u003eBitBar Plugins Installer\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eAleš Farčnik\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003ealesf\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eQuickly install bitbar plugins.\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttp://i.imgur.com/Qn8TJ60.png\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003ephp \u003e= 5\u003c/bitbar.dependencies\u003e\n\ndefine('CAT_URL', 'https://api.github.com/repos/matryer/bitbar-plugins/git/trees/master?recursive=1');\ndefine('UA', 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; '.\n    '.NET CLR 1.0.3705; .NET CLR 1.1.4322; Media Center PC 4.0)');\n\nfunction curl($url)\n{\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_USERAGENT, UA);\n    $output = curl_exec($ch);\n    curl_close($ch);\n    return json_decode($output);\n}\n\nfunction bitbar_link($name, $path)\n{\n    return \"bitbar://openPlugin?title={$name}\u0026\".\n        \"src=https://github.com/matryer/bitbar-plugins/raw/master/{$path}\";\n}\n\necho \"BitBar Plugins\\n\";\necho \"---\\n\";\n\n$cats = curl(CAT_URL);\n$cats = isset($cats-\u003etree) \u0026\u0026 is_array($cats-\u003etree) ? $cats-\u003etree : array();\n\narray_map(function ($item) {\n\n    $level = substr_count($item-\u003epath, '/');\n    $level_dash = str_repeat('--', $level);\n    $sub_start = strrpos($item-\u003epath, '/') ? strrpos($item-\u003epath, '/')+1 : 0;\n    $name = substr($item-\u003epath, $sub_start);\n\n    if ($item-\u003etype == 'tree') {\n        if ($name != 'Enabled') {\n            echo \"{$level_dash}{$name}\\n\";\n        }\n    } elseif ($item-\u003etype == 'blob' \u0026\u0026 $level \u003e 0 \u0026\u0026 $name[0] != '.') {\n        $link = bitbar_link($name, $item-\u003epath);\n        echo \"{$level_dash}{$name} | href={$link}\\n\";\n    }\n}, $cats);\n"
				}
			],
			"path": "Tools/BitBar/bitbar-plugin-installer.1d.php",
			"filename": "bitbar-plugin-installer.1d.php",
			"dir": "Tools/BitBar",
			"docsPlugin": "Tools/BitBar/bitbar-plugin-installer.1d.php.html",
			"docsCategory": "Tools/BitBar.html",
			"pathSegments": [
				"Tools",
				"BitBar"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/BitBar",
					"text": "BitBar",
					"isLast": true
				}
			],
			"title": "BitBar Plugins Installer",
			"version": "v1.0",
			"author": "Aleš Farčnik",
			"authors": [
				{
					"name": "alesf",
					"githubUsername": "alesf",
					"imageURL": "https://avatars.githubusercontent.com/u/1148574?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Quickly install bitbar plugins.",
			"imageURL": "http://i.imgur.com/Qn8TJ60.png",
			"dependencies": [
				"php \u003e= 5"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:06.895882Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/BitBar/version.12h.rb",
					"filename": "version.12h.rb",
					"content": "#!/usr/bin/env ruby\n#\n# \u003cbitbar.title\u003eBitBar Version\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eOlivier Tille\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eoliviernt\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/9BrFhSJ.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eChecks the current BitBar version against the latest from GitHub\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eRuby\u003c/bitbar.dependencies\u003e\n#\n# BitBar version plugin\n# by Olivier Tille (@oliviernt)\n#\n# Checks the current BitBar version against the latest from GitHub\n\nrequire 'net/http'\nrequire 'json'\nrequire 'nokogiri'\n\n# if you're seeing errors saying you've reached the API request limit you will need to\n# create a new application at https://github.com/settings/developers and add client_id and client_secret here:\n# GITHUB_CLIENT_ID=\"\"\n# GITHUB_CLIENT_SECRET=\"\"\n#\n# then add the following query params to the github URL\n# ?client_id=#{GITHUB_CLIENT_ID}\u0026client_secret=#{GITHUB_CLIENT_SECRET}\n\ndef get_json\n  url = URI(\"https://api.github.com/repos/matryer/bitbar/releases/latest\")\n  json_result = nil\n  sleep_time = 0.5\n  sleep_until = 16 # sleep 5x (0,5 * 2 ^ 5 == 16)\n  while json_result.nil?\n    begin\n      json_result = JSON.parse(Net::HTTP.get(url))\n    rescue =\u003e e\n      sleep_time *= 2\n      if sleep_time \u003c sleep_until\n        sleep sleep_time\n      else\n        throw e\n      end\n    end\n  end\n  json_result\nend\n\ndef get_xml\n  bitbar_path = `osascript -e 'tell application \"System Events\" to POSIX path of (file of process \"BitBar\" as alias)'`.chomp\n  bitbar_path += \"/Contents/Info.plist\"\n  File.open(bitbar_path) { |f| Nokogiri::XML(f) }\nend\n\ndef get_current_version(xml)\n  current_version = \"0.0.0\"\n  xml.search(\"//key\").each do |node|\n    if (node.content.eql?\"CFBundleVersion\")\n      current_version = node.next_element.content\n    end\n  end\n  current_version\nend\n\nbegin\n  json_val = get_json\n  current_version = get_current_version(get_xml)\n  latest_version = json_val[\"tag_name\"]\n  outdated = Gem::Version.new(current_version) \u003c Gem::Version.new(latest_version.sub!(\"v\", \"\"))\n  color = outdated ? \"red\" : \"green\"\n\n  puts current_version + \" | color=\" + color\n\n  if outdated\n    puts \"---\"\n    puts \"Download latest (#{latest_version}) | href=\" + json_val[\"assets\"][0][\"browser_download_url\"]\n  end\nrescue =\u003e _\n  puts \"BitBar Version Error | color=red\"\n  puts \"---\"\n  puts \"Content is currently unavailable. Please try resetting or check your internet connection. | color=red\"\nend\n"
				}
			],
			"path": "Tools/BitBar/version.12h.rb",
			"filename": "version.12h.rb",
			"dir": "Tools/BitBar",
			"docsPlugin": "Tools/BitBar/version.12h.rb.html",
			"docsCategory": "Tools/BitBar.html",
			"pathSegments": [
				"Tools",
				"BitBar"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/BitBar",
					"text": "BitBar",
					"isLast": true
				}
			],
			"title": "BitBar Version",
			"version": "v0.2.0",
			"author": "Olivier Tille",
			"authors": [
				{
					"name": "Olivier Tille",
					"githubUsername": "oliviernt",
					"imageURL": "https://avatars.githubusercontent.com/u/162120?v=4",
					"bio": "Software Developer at @lexoffice, Loving the WWW. \r\nPGP: https://keybase.io/oliviernt ",
					"primary": true
				}
			],
			"desc": "Checks the current BitBar version against the latest from GitHub",
			"imageURL": "http://i.imgur.com/9BrFhSJ.png",
			"dependencies": [
				"Ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:06.960528Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/catchpoint.m5.php",
					"filename": "catchpoint.m5.php",
					"content": "#!/usr/bin/php\n\u003c?php\n// \u003cbitbar.title\u003eCatchpoint Alerts\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eRobert Castley\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003ercastley\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eDisplay Catchpoint Alerts via the Pull API.\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttp://i.imgur.com/xgkKWjy.png\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003ephp, cURL\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.abouturl\u003ehttp://www.catchpoint.com/\u003c/bitbar.abouturl\u003e\necho \"| templateImage=iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAABrklEQVQ4jYXTy2oUURAG4G96ro7xmhARERHcZm3AhUJAxIW4Fl/B13Onj6EoatCgIJF4jZO59IyL+TvTMyFY0Jw6df3rr9OcLjdzPsDOiu2ENFfuLWxigkc4hz/oYR3beIMNDDA7rVAfj7GGV/EfYIQj/EijO3gb+4lCO7iI90F0kHNUO38l9jBot/ABipWxGkn6irMYx1fG18IQe9G7dURd3E/wx5zddC0xTfEynBS1SUpcx35RC94PR238TdIs3Ayjlxmxgd/mhN9A0cLlBA/yVd1m+F4jtBMOqwadNNjFrMCTFDhT46hCcryV6MPEjHPvZdRnjQTdDfttiw0N8NOyXEjDdpBPcQsvm7idgNJ8vRVvzRScpkjbfOWNjCWj9tFvBm5hvs5RrVAj0KvNnrd4AlXeeu5fCnyLYy3GifkbKpLYzyf+VvQr4XIPn6sH2Qy5G7hkvv5+DVEz3BQW76gTRJvSsZI+HuJ1RqvezjQoxhlxgmtB/SKxS/9aK2SOgqqRcY9ih6uxj2LbTaOlQpPMe4h7+JTEdgr34tvGc7yz2Oh/5Wk42Iq+Ssex/AOGoHohWJhtKAAAAABJRU5ErkJggg==\\n\";\necho \"---\\n\";\n\n$key    = 'Catchpoint_Key';\n$secret = 'Catchpoint_Secret';\n\n$data = array('grant_type' =\u003e 'client_credentials', 'client_id' =\u003e $key, 'client_secret' =\u003e $secret);\n\n$ch = curl_init();\n\ncurl_setopt($ch, CURLOPT_URL, 'https://io.catchpoint.com/ui/api/token');\ncurl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));    \ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n$result = curl_exec($ch);\n\ncurl_close($ch);\n\n$result = json_decode($result);\n\n$_SESSION['token'] = base64_encode($result-\u003eaccess_token);\n\n$ch = curl_init();\n\ncurl_setopt($ch, CURLOPT_URL, 'https://io.catchpoint.com/ui/api/v1/alerts?pageSize=5');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, \n    array('Authorization: Bearer ' . $_SESSION['token']));\n\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n$data = curl_exec($ch);\n\ncurl_close($ch);\n\n$alerts = json_decode($data);\n\nif ($alerts != null) {\n\tforeach ($alerts-\u003ealerts as $a) {\n\t\tswitch ($a-\u003elevel-\u003eid) {\n\t\t\tcase 0:\n\t\t\t\t$color = '#ff8000';\n\t\t\t\t$state = 'Warning';\n\t\t\t\t$emoji = ':neutral_face:';\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t$color = '#ff0000';\n\t\t\t\t$state = 'Critical';\n\t\t\t\t$emoji = ':worried:';\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$color = '#80ff00';\n\t\t\t\t$state = 'OK';\n\t\t\t\t$emoji = ':smile:';\n\t\t\t\tbreak;\n\t\t}\n\t\techo \":clock1030: \" . $a-\u003ereport_time . \" | size=10 color=\" . $color. \"\\n\";\n\t\techo $emoji . \" Test: \" . $a-\u003etest-\u003ename . \" - \" . $state . \"| size= 10 color=\" . $color . \" href=http://portal.catchpoint.com/ui/Content/Charts/Performance.aspx?tList=\" . $a-\u003etest-\u003eid . \"\u0026z=\u0026chartView=1\\n\";\n\t\techo \"Reason: \" . $a-\u003ealert_type-\u003ename . \" | size=10 color=#000000\\n\";\n\t\techo \"---\\n\";\n\t}\n} else {\n\techo \":smile: No recent alerts | size=14 color=\\\"#80ff00\\\"\";\n}\n//echo exec(\"osascript -e 'display notification \\\"\" . $a-\u003ereport_time . \" - \" . $a-\u003ealert_type-\u003ename . \"\\\" with title \\\"\" . $a-\u003etest-\u003ename . \" - \" . $state . \"\\\"'\");\n"
				}
			],
			"path": "Tools/catchpoint.m5.php",
			"filename": "catchpoint.m5.php",
			"dir": "Tools",
			"docsPlugin": "Tools/catchpoint.m5.php.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Catchpoint Alerts",
			"version": "v1.1",
			"author": "Robert Castley",
			"authors": [
				{
					"name": "Robert Castley",
					"githubUsername": "rcastley",
					"imageURL": "https://avatars.githubusercontent.com/u/2493008?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display Catchpoint Alerts via the Pull API.",
			"imageURL": "http://i.imgur.com/xgkKWjy.png",
			"dependencies": [
				"php",
				"cURL"
			],
			"aboutURL": "http://www.catchpoint.com/",
			"lastUpdated": "2021-03-08T15:22:07.45426Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/cryptbar.5m.sh",
					"filename": "cryptbar.5m.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eCryptBar\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSimon Egerland\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ewarmup72\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eAutomounter for GoCryptFS\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://warmup.mypump.de/cryptbar10.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eShell-Script for GoCryptFS\u003c/bitbar.dependencies\u003e\n\n# letzten BAckslash im Pfad wenn vorhanden entfernen\n# Mount - Fehler anzeigen, wenn Busy\n\ngocryptfspath=\"/usr/local/bin/\"\nhomepath=$(defaults read com.matryer.Bitbar | grep \"pluginsDirectory\" | cut -d\"\\\"\" -f 2)\n\n# --- Functions ---\nfunction checkmount {\n\tcolor[$i]=\"red\"\n\tstatus[$i]=\"not mounted | color=HotPink \"\n\tif [ ! -d \"${crypt[$i]}\" ]; then pathcheck[$i]=\"Crypt-Path not found\\n\"; fi\n\tif [ ! -d \"${mountpoint[$i]}\" ]; then pathcheck[$i]=\"${pathcheck[$i]}Mount-Path not found\\n\"; fi\n\tif [ ! -e \"${password[$i]}\" ]; then pathcheck[$i]=\"${pathcheck[$i]}Password-File not found\"; fi\n\tif [ \"${pathcheck[$i]}\" == \"\" ]; then\n    \tcheck=$(df -h | grep -i -c -a \"${mountpoint[$i]}\")\n    \tif [ \"$check\" != \"1\" ]; then\n\t\t\tcolor[$i]=\"gainsboro\"\n    \telse\n\t\t\tcolor[$i]=\"black\"\n\t\t\tstatus[$i]=\"mounted | color=DarkGreen \"\n    \tfi\n\tfi\n}\n\nfunction read_para {\n\tif [ ! -e \"${homepath}/.cryptbar_para\" ]; then\n\t\techo \"#Path to Crypt-Folder;Mounting Point;Password-File;Auto Mount [on|off];Parameters for gocryptfs (optional);\" \u003e \"$homepath/.cryptbar_para\"\n\t\techo \"CryptPath;Mountpoint;Password-File;AutoMount;Params;\" \u003e\u003e \"$homepath/.cryptbar_para\"\n\tfi\n\ti=0\n\twhile read -r line; do\n\t\tif [ \"${line:0:1}\" == \"#\" ]; then continue; fi\n\t\tcrypt[$i]=$(cut -d';' -f 1 \u003c\u003c\u003c \"${line}\"); crypt[$i]=${crypt[$i]%/}\n\t\t#if [ \"${crypt[$i]:(-1)}\" == \"/\" ]; then crypt[$i]=$(echo \"${crypt[$i]%%?}\"); fi\n    \tmountpoint[$i]=$(cut -d';' -f 2 \u003c\u003c\u003c \"${line}\"); mountpoint[$i]=${mountpoint[$i]%/}\n\t\t#if [ \"${mountpoint[$i]:(-1)}\" == \"/\" ]; then mountpoint[$i]=$(echo \"${mountpoint[$i]%%?}\"); fi\n    \tpassword[$i]=$(cut -d';' -f 3 \u003c\u003c\u003c \"${line}\"); password[$i]=${password[$i]%/}\n\t\tauto[$i]=$(cut -d';' -f 4 \u003c\u003c\u003c \"${line}\")\n    \tparams[$i]=$(cut -d';' -f 5 \u003c\u003c\u003c \"${line}\")\n    \tif [ \"${params[$i]}\" == \"\" ]; then params[$i]=\"-q\"; fi\n\t\tcheckmount\n\t\ti=$((i + 1))\n\tdone \u003c \"$homepath/.cryptbar_para\"\n\tlast=$((i - 1))\n}\n\nfunction write_para {\n\techo \"#Path to Crypt-Folder;Mounting Point;Password-File;Auto Mount [on|off];Parameters for gocryptfs (optional);\" \u003e \"$homepath/.cryptbar_para\"\n\t#for((i=0; i\u003c${#crypt[*]}; i++))\n\tfor((i=0; i\u003c=last; i++))\n\tdo\n\t\techo \"${crypt[$i]};${mountpoint[$i]};${password[$i]};${auto[$i]};${params[$i]};\" \u003e\u003e \"$homepath/.cryptbar_para\"\n\tdone\n}\n\nfunction mount {\n\tif [ \"${status[$i]:0:7}\" != \"mounted\" ]; then\n\t\tline=\"-passfile=${password[$i]} ${params[$i]} ${crypt[$i]} ${mountpoint[$i]}\"\n\t\t$gocryptfspath/gocryptfs -passfile=\"${password[$i]}\" \"${params[$i]}\" \"${crypt[$i]}\" \"${mountpoint[$i]}\" \u0026\u003e/dev/null\n\t\tcode=\"$?\"\n\t\tcheckmount\n\t\tif\t[ $code -ne 0 ]; then\n\t\t\tprefix=\"⚠️\"\n\t\t\terror[$i]=\"⚠️\"\n\t\t\tosascript -e 'display notification \"'\"Error $code mounting ${mountpoint[$i]} \"'\" with title \"'\"GoCryptFS-Mounter\"'\" sound name \"glass\"'\n\t\t\tcolor[$i]=\"red\"\n\t\telse\n\t\t\tprefix=\"\"\n\t\t\terror[$i]=\"\"\n\t\tfi\n\tfi\n}\n\nfunction menu {\n\techo \"${prefix}🔐\"\n\techo \"---\"\n\techo \"Mount Point Path | color=black\"\n\tfor((i=0; i\u003c${#menu[*]}; i++))\n\tdo\n\t\techo \"${menu[$i]}\"\n\t\techo \"${button[$i]}\"\n\t\tif [ \"${button2[$i]}\" != \"\" ]; then echo \"${button2[$i]}\"; fi\n\t\techo \"--Info | color=black\"\n\t\techo \"----Crypt Path: ${crypt[$i]} | color=RoyalBlue\"\n\t\techo \"----Mounted on: ${mountpoint[$i]} | color=RoyalBlue\"\n\t\techo \"----Auto Mount: ${auto[$i]} | color=black bash='$0' param1=autoswitch param2='$i' terminal=false refresh=true\u003e\"\n\t\techo \"----Status: ${status[$i]}\"\n\tdone\n\techo \"---\"\n\techo \"Edit Table | color=black bash='$0' param1=edit terminal=false refresh=true\u003e\"\n}\n\n# --- Buttons ---\nif [ \"$1\" = 'mount' ]; then\n    read_para\n\ti=$2\n\tauto[$i]=\"on\"\n\tmount\n    exit\nfi\n\nif [ \"$1\" = 'umount' ]; then\n    read_para\n\ti=$2\n\tumount \"${crypt[$i]}\" \u0026\u003e/dev/null\n\tcode=\"$?\"\n\tif\t[ $code -ne 0 ]; then\n\t\tosascript -e 'display notification \"'\"Error $code - Drive is busy!\"'\" with title \"'\"GoCryptFS-Mounter\"'\" sound name \"glass\"'\n    fi\n\texit\nfi\n\nif [ \"$1\" = 'open' ]; then\n    read_para\n\ti=$2\n\topen \"${mountpoint[$i]}\"\n    exit\nfi\n\nif [ \"$1\" = 'edit' ]; then\n    open \"${homepath}/.cryptbar_para\"\n    exit\nfi\n\nif [ \"$1\" = 'autoswitch' ]; then\n    read_para\n\ti=$2\n\tif [ \"${auto[$i]}\" = \"on\" ]; then auto[$i]=\"off\"; else auto[$i]=\"on\"; fi\n\twrite_para\n    exit\nfi\n\n# --- MAIN ---\nread_para\nfor((i=0; i\u003c=last; i++))\ndo\n\tif [ \"${auto[$i]}\" == \"on\" ] \u0026\u0026 [ \"${color[$i]}\" != \"red\" ]; then\n    \tmount\n\tfi\n\tif\t[ \"${pathcheck[$i]}\" != \"\" ]; then\n\t\tbutton[$i]=\"\"\n\t\tbutton2[$i]=\"--${pathcheck[$i]}\"\n\telse\n\t\tif\t[ \"${status[$i]:0:7}\" != \"mounted\" ]; then\n\t\t\tbutton[$i]=\"\"\n\t\t\tbutton2[$i]=\"--Mount | color=black bash='$0' param1=mount param2='$i' terminal=false refresh=true\u003e\"\n\t\telse\n\t\t\tbutton[$i]=\"--Open | color=black bash='$0' param1=open param2='$i' terminal=false refresh=true\u003e\"\n\t\t\tif [ \"${auto[$i]}\" != \"on\" ]; then\n\t\t\t\tbutton2[$i]=\"--Umount | color=black bash='$0' param1=umount param2='$i' terminal=false refresh=true\u003e\"\n\t\t\telse\n\t\t\t\tbutton2[$i]=\"\"\n\t\t\tfi\n\t\tfi\n\tfi\n\tmenu[$i]=\"   ▶︎ ${error[$i]}${mountpoint[$i]} | color=${color[$i]} trim=false\"\ndone\n\nmenu\n\nexit\n#----------------------------------------------\n"
				}
			],
			"path": "Tools/cryptbar.5m.sh",
			"filename": "cryptbar.5m.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/cryptbar.5m.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "CryptBar",
			"version": "v1.0",
			"author": "Simon Egerland",
			"authors": [
				{
					"name": "Simon",
					"githubUsername": "warmup72",
					"imageURL": "https://avatars.githubusercontent.com/u/30272587?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Automounter for GoCryptFS",
			"imageURL": "http://warmup.mypump.de/cryptbar10.jpg",
			"dependencies": [
				"Shell-Script for GoCryptFS"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.542858Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/desktop_cleaner.rb",
					"filename": "desktop_cleaner.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eDesktop cleaner\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTomoki Yamashita\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etomorrowkey\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eMove desktop files to backup dir\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/tomorrowkey/desktop_cleaner\u003c/bitbar.abouturl\u003e\n\nrequire 'date'\nrequire 'yaml'\nrequire 'pathname'\nrequire 'FileUtils'\n\nPathname.class_eval do\n  def is_older_than(time)\n    if directory?\n      children.all? { |path| path.is_older_than(time) }\n    elsif file?\n      mtime \u003c time\n    else\n      raise \"unknown file type\"\n    end\n  end\n\n  def dot_file?\n    basename.to_s.start_with?('.')\n  end\n\n  def move_to!(dir)\n    FileUtils.mkdir_p(dir)\n    FileUtils.mv(expand_path, dir)\n  end\n\n  def archive_to!(dir)\n    FileUtils.mkdir_p(dir)\n    `zip -rq '#{dir}#{basename}.zip' '#{expand_path}'`\n  end\n\n  def delete_dir\n    FileUtils.remove_dir(expand_path)\n  end\n\n  def encode\n    to_s.gsub(' ', '%20')\n  end\nend\n\nclass DesktopCleaner\n  ONE_DAY_IN_SECONDS = 24 * 60 * 60\n\n  def run\n    unless backup_dir_accesible?\n      STDERR.puts \"#{backup_dir} is not accesible\"\n      exit 1\n    end\n\n    desktop_path.children.each do |path|\n      next if path.dot_file?\n      next if path.symlink?\n\n      if path.is_older_than(threshold_time)\n        if archive_extnames.include?(path.extname)\n          path.archive_to!(destination_dir)\n          path.delete_dir\n        else\n          path.move_to!(destination_dir)\n        end\n      end\n    end\n  end\n\n  def desktop_path\n    Pathname.new(\"#{ENV['HOME']}/Desktop\")\n  end\n\n  def backup_dir\n    @backup_dir ||= begin\n      backup_dir = config['backup_dir']\n      raise 'backup_dir is not configured' unless backup_dir\n      Pathname.new(backup_dir)\n    end\n  end\n\n  private\n\n  def timestamp\n    Date.today.strftime('%Y-%m-%d')\n  end\n\n  def destination_dir\n    \"#{backup_dir}/#{timestamp}/\"\n  end\n\n  def config\n    @config ||= begin\n      path = \"#{ENV['HOME']}/.desktop_cleaner.yml\"\n      raise \"Missing config file at #{path}\" unless File.exist? path\n\n      YAML.load(File.read(path)) || {}\n    end\n  end\n\n  def backup_dir_accesible?\n    File.exist?(backup_dir)\n  end\n\n  def threshold_time\n    @threshold_time ||= begin\n      threshold_days = config['threshold_days'].to_i.tap do |it|\n        raise 'threshold_days must be positive' if it \u003c= 0\n      end\n\n      Time.now - (threshold_days * ONE_DAY_IN_SECONDS)\n    end\n  end\n\n  def archive_extnames\n    config['archive_extnames'] || []\n  end\nend\n\nbegin\n  cleaner = DesktopCleaner.new\n  cleaner.run\n\n  puts 'Desktop'\n  puts '---'\n  puts \"Open | href='file://#{cleaner.desktop_path.encode}'\"\n  puts \"Open Backups | href='file://#{cleaner.backup_dir.encode}'\"\nrescue StandardError =\u003e e\n  puts '⚠ Desktop | color=yellow'\n  puts \"---\"\n  puts e.message\n  puts \"Open usage | href='https://github.com/tomorrowkey/desktop_cleaner'\"\nend\n"
				}
			],
			"path": "Tools/desktop_cleaner.rb",
			"filename": "desktop_cleaner.rb",
			"dir": "Tools",
			"docsPlugin": "Tools/desktop_cleaner.rb.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Desktop cleaner",
			"version": "v1.0.0",
			"author": "Tomoki Yamashita",
			"authors": [
				{
					"name": "Tomoki Yamashita",
					"githubUsername": "tomorrowkey",
					"imageURL": "https://avatars.githubusercontent.com/u/126019?v=4",
					"bio": "Engineer",
					"primary": true
				}
			],
			"desc": "Move desktop files to backup dir",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/tomorrowkey/desktop_cleaner",
			"lastUpdated": "2021-03-08T15:22:07.571068Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/JsonUtils.1d.sh",
					"filename": "JsonUtils.1d.sh",
					"content": "#!/usr/bin/env bash\n\n# JSON Utils: Validate, format and compact JSON entity from clipboard and then write to clipboard\n#\n# by Cnfn (http://github.com/cnfn)\n#\n# \u003cbitbar.title\u003eJSON Utils\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.4\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eCnfn\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecnfn\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eValidate, format and compact JSON entity from clipboard and then write to clipboard. More info: https://github.com/cnfn/BitBarPlugins/tree/master/JsonUtils\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/cnfn/grocery/master/images/blog/bitbar_plugin_json_utils_main.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash,jq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/cnfn/BitBarPlugins/tree/master/JsonUtils\u003c/bitbar.abouturl\u003e\n#\n# Dependencies:\n#   jq (https://stedolan.github.io/jq/)\n\nexport PATH=$PATH:/usr/local/bin\n\n# Hack for language not being set properly and unicode support\nexport LANG=\"${LANG:-en_US.UTF-8}\"\n\nnotifyTitle=\"JsonUtils\"\nnotifyValidJson=\"Valid JSON, type:\"\nnotifyInvalidJson=\"Invalid JSON !!!!!!!!!!\"\n\ndisplayNotification() {\n\ttitle=$1\n\tcontent=$2\n\tosascript -e \"display notification \\\"$content\\\" with title \\\"$title\\\"\"\n}\n\ndoValidate() {\n\ttypeName=$(pbpaste | jq type 2\u003e /dev/null | xargs echo -n 2\u003e /dev/null)\n\tif [[ \"object\" == \"$typeName\" || \"array\" == \"$typeName\" ]]\n\tthen\n\t \techo \"$typeName\"\n\telse\n\t\techo \"\"\n\tfi\n}\n\nnotifyAndExitWhenInvalidJson() {\n\ttypeName=$(doValidate)\n\t[ -n \"$typeName\" ] || { osascript -e \"beep\"; \\\n\t\tdisplayNotification $notifyTitle \"$notifyInvalidJson\"; exit 1; }\n}\n\nvalidate() {\n\ttypeName=$(doValidate)\n\tif [[ -n \"$typeName\" ]]\n\tthen\n\t\tdisplayNotification $notifyTitle \"$notifyValidJson $typeName\"\n\telse\n\t\tosascript -e \"beep\"\n\t\tdisplayNotification $notifyTitle \"$notifyInvalidJson\"\n\tfi\n}\n\nformat() {\n\tnotifyAndExitWhenInvalidJson\n\n\tpbpaste | jq . --indent 4 | pbcopy\n\tdisplayNotification $notifyTitle \"Formatted\"\n}\n\ncompact() {\n\tnotifyAndExitWhenInvalidJson\n\n\tpbpaste | jq . --compact-output | pbcopy\n\tdisplayNotification $notifyTitle \"Compacted\"\n}\n\n# call function: validate, format, compact\n[ $# == 1 ] \u0026\u0026 { $1; exit 0; }\n\necho \"JSON\"\necho \"---\"\necho \"Validate | bash='$0' param1=validate terminal=false\"\necho \"---\"\necho \"Format | bash='$0' param1=format terminal=false\"\necho \"Compact | bash='$0' param1=compact terminal=false\"\n"
				}
			],
			"path": "Tools/JsonUtils.1d.sh",
			"filename": "JsonUtils.1d.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/JsonUtils.1d.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "JSON Utils",
			"version": "v1.4",
			"author": "Cnfn",
			"authors": [
				{
					"name": "Cnfn",
					"githubUsername": "cnfn",
					"imageURL": "https://avatars.githubusercontent.com/u/1445517?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Validate, format and compact JSON entity from clipboard and then write to clipboard. More info: https://github.com/cnfn/BitBarPlugins/tree/master/JsonUtils",
			"imageURL": "https://raw.githubusercontent.com/cnfn/grocery/master/images/blog/bitbar_plugin_json_utils_main.png",
			"dependencies": [
				"bash",
				"jq"
			],
			"aboutURL": "https://github.com/cnfn/BitBarPlugins/tree/master/JsonUtils",
			"lastUpdated": "2021-03-08T15:22:07.05308Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/keybase-encrypt.10m.rb",
					"filename": "keybase-encrypt.10m.rb",
					"content": "#!/usr/bin/env LC_ALL=en_US.UTF-8 ruby\n\n# \u003cbitbar.title\u003eKeybase Encrypt/Decrypt\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAsh Wu(hSATAC), Aaron Huang(aar0ntw)\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003epan-cat\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eA helper for keybase encryption and decryption. Simply copy content you want to decrypt/encrypt and click action, the result will be copied into your clipboard.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby,keybase\u003c/bitbar.dependencies\u003e\n\n#--- User parameters ----------------------------------------------------------\nKEYBASE = \"/usr/local/bin/keybase\"\n\n#--- Script internals ---------------------------------------------------------\n# TODO: Handle keybase cli error with color or icon?\n\nREFRESH = \"---\\nRefresh | refresh=true\"\n\n# decrypt\nif ARGV[0] == \"decrypt\"\n  `/usr/bin/pbpaste | #{KEYBASE} decrypt | /usr/bin/pbcopy`\n  exit\nend\n\n# ecrypt\nif ARGV[0] == \"encrypt\"\n  target = ARGV[1]\n  `/usr/bin/pbpaste | #{KEYBASE} encrypt #{target} | /usr/bin/pbcopy`\n  exit\nend\n\n\nicon = \"🔑\"\n\n\nfollowing = `#{KEYBASE} list-following`.split(\"\\n\").map{|f|\n  \"--#{f} | bash=#{__FILE__} param1=encrypt param2=#{f} terminal=false\"\n}.join(\"\\n\")\n\n\nputs \"\"\"\n#{icon}\n---\nEncrypt\n#{following}\n---\nDecrypt | bash='#{__FILE__}' param1=decrypt terminal=false\n---\n#{REFRESH}\n\"\"\"\n"
				}
			],
			"path": "Tools/keybase-encrypt.10m.rb",
			"filename": "keybase-encrypt.10m.rb",
			"dir": "Tools",
			"docsPlugin": "Tools/keybase-encrypt.10m.rb.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Keybase Encrypt/Decrypt",
			"version": "v0.1",
			"author": "Ash Wu(hSATAC),  Aaron Huang(aar0ntw)",
			"authors": [
				{
					"name": "Pan Cat Technologies",
					"githubUsername": "pan-cat",
					"imageURL": "https://avatars.githubusercontent.com/u/13352124?v=4",
					"bio": "Build software better, together, with cats.",
					"primary": true
				},
				{
					"name": "Aaron Huang(aar0ntw)",
					"githubUsername": "",
					"imageURL": "",
					"bio": "",
					"primary": false
				}
			],
			"desc": "A helper for keybase encryption and decryption. Simply copy content you want to decrypt/encrypt and click action, the result will be copied into your clipboard.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"ruby",
				"keybase"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.597521Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/octoprint.1m.sh",
					"filename": "octoprint.1m.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eOctoprint\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003em0a\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003em0a\u003c/bitbar.author.github\u003e\n# \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.desc\u003e3dprinter control with octoprint api\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/biN2ISe.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\n# please setup \nAPIKEY=\"222626A0B0794703A203D5E976BE0AEC\"\nENDPOINT=\"http://192.168.11.111:5000\"\nSNAPSHOTURL=\"http://192.168.11.111:8080/?action=snapshot\"\nIMAGEWIDTH=300x\n\nJQ=/usr/local/bin/jq\nCONVERT=/usr/local/bin/convert\n\n\nif [ ! -e $JQ ]; then \n\t\techo \"expect 'brew install jq'\" \n\t\texit 1\nfi\nif [ ! -e $CONVERT ]; then \n\t\techo \"expect 'brew install imagemagick'\" \n\t\texit 1\nfi\n\n\nDEBUG=false\nHEADER=\"x-api-key:$APIKEY\"\n\n\nfunction runapi {\n\tcurl -s -gH \"$HEADER\" \"$ENDPOINT/api/$1\"\n\treturn 0\n}\n\nfunction displaybytes {\n    local bytes=$1;\n    if [[ $bytes -lt 1048576 ]]; then\n        echo \"$(( (bytes + 1023)/1024 ))KiB\"\n    else\n        echo \"$(( (bytes + 1048575)/1048576 ))MiB\"\n    fi\n}\n\n\nfunction displaytime {\n\tlocal T=$1\n\tlocal D=$((T/60/60/24))\n\tlocal H=$((T/60/60%24))\n\tlocal M=$((T/60%60))\n\tlocal S=$((T%60))\n\t\n\t(( D \u003e 0 )) \u0026\u0026 printf '%dd' $D\n\t(( H \u003e 0 )) \u0026\u0026 printf '%dh' $H\n\t(( M \u003e 0 )) \u0026\u0026 printf '%dm' $M\n\t(( D \u003e 0 || H \u003e 0 || M \u003e 0 )) \u0026\u0026 printf '%ds | color=black\\n' $S\n\treturn 0\n}\n\nfunction displaysnapshot {\n\t\tlocal snapshot\n\t\tif ! curl -s \"$SNAPSHOTURL\" \u003e /dev/null\n\t\tthen\n\t\t\techo \"webcam don't enable\"\n\t\t\treturn 1\n\t\tfi\n\t\tsnapshot=$(curl -s \"$SNAPSHOTURL\" | $CONVERT - -quiet -resize $IMAGEWIDTH - |base64)\n\t\techo \"| image=$snapshot refresh=true\"\n\t\treturn 0\n}\n\n\n# menu functions\nfunction printcmd {\n\t\tcurl -s -H $HEADER -H Accept:application/json -H Content-type:application/json -X POST -d '{\"command\":\"select\",\"print\":true}' \"$ENDPOINT/api/files/local/$1\"\n}\nfunction printstopcmd {\n\t\tcurl -s -H $HEADER -H Accept:application/json -H Content-type:application/json -X POST -d '{\"command\":\"cancel\"}' $ENDPOINT/api/job\n}\nfunction deletecmd {\n\t\tcurl -s -H $HEADER  -X DELETE  \"$ENDPOINT/api/files/local/$1\"\n}\n\n# task switch if parameter count = 0 then print menu\nif [ $# -ne 0 ]; then\n\t\tcmd=$1\n\t\techo \"run $cmd $2\"\n\t\tstatus=$($cmd \"$2\")\n\t\techo \"$status\"\n\t\texit 0\nfi\n\n\n# env check\njob=$(runapi job)\nif [ \"$job\" = '' ]; then\n\t\techo \"err | color=red\"\n\t\techo \"---\"\n\t\techo \"please edit this file and change ENDPOINT.\"\n\t\texit 1;\nfi\n\nif [ \"$job\" = 'Invalid API key' ]; then\n\t\techo \"err | color=red\"\n\t\techo \"---\"\n\t\techo \"please edit this file and change APIKEY.\"\n\t\texit 1;\nfi\n\nseconds=$(echo \"$job\" | $JQ .progress.printTimeLeft)\nfilename=$(echo \"$job\" |$JQ .job.file.name -r)\nstate=$(echo \"$job\" |$JQ .state -r)\n\nif [ \"$state\" = Printing ]; then\nprintf 'ETE ' \u0026\u0026 displaytime \"$seconds\" \n\necho \"$filename | color=black\"\nelse \necho \"$state | color=black\"\nfi\n\n\necho \"---\"\nprinter=$(runapi printer)\ntemp0=$(echo \"$printer\" |$JQ .temperature.tool0.actual -r)\nbed=$(echo \"$printer\" |$JQ .temperature.bed.actual -r)\necho \"hotend:$temp0°C  bed:$bed°C | color=black\"\n\nif [ \"$DEBUG\" = true ]; then echo \"Refresh | refresh=true\" ; fi\n\nversion=$(runapi version)\nocto_ver=$(echo \"$version\" |$JQ -r .server)\napi_ver=$(echo \"$version\" |$JQ -r .api)\necho \"octoprint:$octo_ver api:$api_ver | color=green href=$ENDPOINT\"\n\ndisplaysnapshot\n\n# control job\nif [ \"$state\" = Printing ]; then\necho \"---\"\necho \"print cancel  | color=red bash=$0 param1=printstopcmd  terminal=$DEBUG\"\nfi\n\necho \"---\"\nfiles=$(runapi files)\nfilenames=$(echo \"$files\" |$JQ -r '.files | sort_by(.date)| reverse | .[].name')\n\n# echo \"$files\" | pbcopy\n\n\nfunction filesubmenu {\n\t\tlocal filename=$1\n\t\tlocal onefile\n\t\tlocal filesize\n\t\tlocal filedate\n\t\t\n\t\t# shellcheck disable=SC2016\n\t\tonefile=$(echo \"$files\" |$JQ  --arg filename \"$filename\" '.files | map(select(.name == $filename ))' )\n\t\t\n\t\tfilesize=$(echo \"$onefile\" |$JQ .[0].size)\n\t\tfilesize=$(displaybytes \"$filesize\")\n\t\t\n\t\tfiledate=$(echo \"$onefile\" |$JQ .[0].date)\n\t\tfiledate=$(date -r \"$filedate\" +\"%Y-%m-%d %H:%M:%S\" )\n\n\t\t# print submenu\n\t\techo \"$filename\"\n\t\t\n\t\tif [ \"$state\" != \"Printing\" ]; then\n\t\t\t\techo \"--start print | color=green bash=$0 param1=printcmd param2=$filename refresh=true terminal=$DEBUG\"\n\t\tfi\n\t\techo \"--uploaded: $filedate\"\n\t\techo \"--size: $filesize\"\n\t\techo \"--delete | color=green bash=$0 param1=deletecmd param2=$filename refresh=true terminal=$DEBUG \"\n\t\treturn 0\n}\n\n# show file submenu\nfor f in $filenames;do\n\t\tfilesubmenu \"$f\"\ndone\n"
				}
			],
			"path": "Tools/octoprint.1m.sh",
			"filename": "octoprint.1m.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/octoprint.1m.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Octoprint",
			"version": "v1.1",
			"author": "m0a",
			"authors": [
				{
					"name": "makoto abe",
					"githubUsername": "m0a",
					"imageURL": "https://avatars.githubusercontent.com/u/1158410?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "3dprinter control with octoprint api",
			"imageURL": "http://i.imgur.com/biN2ISe.png",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.613472Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/PagerDuty/pagerduty.30s.rb",
					"filename": "pagerduty.30s.rb",
					"content": "#!/usr/bin/ruby\n# \u003cbitbar.title\u003ePagerDuty\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAllan Frese\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003efrese\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows current pagerduty alert status.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby (httparty gem)\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/5onainp.png\u003c/bitbar.image\u003e\n\nrequire \"json\"\nrequire \"pp\"\nrequire \"optparse\"\nrequire \"httparty\"\nrequire \"date\"\n\n#--------------------------------------------------------------------\n# Set some configuration for PagerDuty\n$token    = \"\"\n$mail     = \"\"\n$team_ids = \"\"\n#--------------------------------------------------------------------\n\nclass PagerDuty\n\n    def main\n        begin\n            # Init some defaults\n            $verbose = false\n            $id      = nil\n            $command = \"GET\"\n            $color   = Hash.new\n\n\t\t\tif ENV['BitBarDarkMode'].nil?\n\t\t\t\t$color['normal']       = 'black'\n\t\t\t\t$color['triggered']    = 'red'\n\t\t\t\t$color['acknowledged'] = 'orange'\n\t\t\t\t$color['resolved']     = 'green'\n\t\t\telse\n\t\t\t\t$color['normal']       = 'white'\n\t\t\t\t$color['triggered']    = 'red'\n\t\t\t\t$color['acknowledged'] = 'yellow'\n\t\t\t\t$color['resolved']     = 'green'\n\t\t\tend\n\n            OptionParser.new do |opt|\n                opt.banner = \"Usage: #{$0} [options]\"\n                opt.on(\"-a\", \"--ackowledge ID\", \"Acknowledge an incident\") { |id| $command = \"ACKOWLEDGE\"; $id = id }\n                opt.on(\"-r\", \"--resolve ID\", \"Resolve an incident\")        { |id| $command = \"RESOLVE\";    $id = id }\n                opt.on(\"-v\", \"--verbose\" )                                 { $verbose = true }\n            end.parse!\n\n            case $command\n            when \"GET\"\n                list_incidents\n            when \"ACKOWLEDGE\"\n                update_incident($id, \"acknowledged\")\n            when \"RESOLVE\"\n                update_incident($id, \"resolved\")\n            end\n\n        rescue StandardError =\u003e ex\n            puts \"ERR|color=purple\"\n            puts \"---\"\n            puts ex.class\n            puts ex.message\n        end\n\n    end\n\n    def list_incidents\n        out = HTTParty.get(\"https://api.pagerduty.com/incidents\",\n                           timeout: 25,\n                           query:   { \"since\" =\u003e (Time.now-24*60*60).strftime(\"%Y-%m-%dT%H:%M:%S\"),\n                                      \"sort_by\" =\u003e \"created_at:desc\",\n\t\t\t\t\t\t\t\t\t  \"team_ids\" =\u003e $team_ids.split(\",\") },\n                           headers: { \"Content-type\"  =\u003e \"application/json\",\n                                      \"Authorization\" =\u003e \"Token token=#{$token}\",\n                                      \"Accept\"        =\u003e \"application/vnd.pagerduty+json;version=2\" })\n\n        pd = JSON.parse(out.body)\n        incidents = Array.new\n        @count = 0\n        @color = \"yellow\"\n        pd['incidents'].each { |i|\n            log(\"Incident: #{i}\")\n            if i['status'].eql?(\"resolved\")\n                @inc = nil\n                incidents.each { |i2| @inc = i2 if i2['incident_key'].eql?(i['incident_key']) and i2['status'].eql?(\"resolved\") }\n                if @inc.nil?\n                    i['count'] = 1\n                    incidents.push(i)\n                else\n                    @inc['count'] += 1\n                end\n            else\n                @count += 1\n                @color = \"red\" if i['status'].eql?(\"triggered\")\n                i['count'] = 1\n                incidents.push(i)\n            end\n        }\n\n        if incidents.empty?\n            puts \"OK|color=green\"\n        else\n            puts @count\u003e0 ? \"#{@count} Alert#{@count==1 ? \"\" : \"s\"}|color=#{@color} dropdown=false\" : \"OK|color=green dropdown=false\"\n            puts \"---\"\n            incidents.each { |incident|\n                log(incident.inspect)\n                urgency = incident['urgency'].eql?(\"high\") ? \"⚡\" : \"\"\n                status  = incident['status']\n                color   = $color[status]\n                option  = incident['status'].eql?(\"triggered\") ? \"-a\" : \"-r\"\n                count   = incident['count'] \u003e 1 ? \"(#{incident['count']})\" : \"\"\n\n                desc = incident['summary']\n\t\t\t\tdesc.gsub!(/\\n/,\"\")\n\n                bash = \"bash=#{File.expand_path(__FILE__)} param1=#{option} param2=#{incident['id']}\" unless incident['status'].eql?(\"resolved\")\n                time = Time.parse(incident['created_at']).localtime.strftime(\"%H:%M:%S\")\n                puts \"#{count}#{urgency} [#{time}] #{incident['incident_key']}#{urgency}|color=#{color} #{bash} refresh=true terminal=false length=100\"\n\n                begin\n    \t\t\t\tresp = JSON.parse(fetch(incident['first_trigger_log_entry']['self']))\n                    client_url = resp['log_entry']['channel']['client_url']\n\t\t\t\t    client_url.gsub!(\" \",\"%20\")\n                rescue\n\t\t\t\t    client_url = incident['service']['html_url']\n\t\t\t\t    client_url.gsub!(\" \",\"%20\")\n                end\n\n\t\t\t\tif desc.length \u003e= 100\n                    puts \"#{desc[0..99]}...|color=#{$color['normal']} size=11 href=#{client_url}\"\n\t\t\t\t    puts \"...#{desc[100..200]}|alternate=true color=#{$color['normal']} size=11\"\n\t\t\t\telse\n                    puts \"#{desc}...|color=#{$color['normal']} size=11 href=#{client_url}\"\n\t\t\t\tend\n                puts \"---\"\n            }\n        end\n    end\n\n    def fetch(url)\n\t\tlog(\"--------------------------------------\")\n\t\tlog(\"fetch: #{url}\")\n        out = HTTParty.get(url, headers: { \"Content-type\"  =\u003e \"application/json\",\n                                           \"Authorization\" =\u003e \"Token token=#{$token}\",\n                                           \"Accept\"        =\u003e \"application/vnd.pagerduty+json;version=2\" })\n\n        log(\"output: #{out.body}\")\n        return out.body\n    end\n\n    def update_incident(id, cmd)\n        body = { incident: { type: \"incident_reference\", status: cmd } }\n        out = HTTParty.put(\"https://api.pagerduty.com/incidents/#{id}\",\n                           body:  body.to_json,\n                           headers: { \"Content-type\"  =\u003e \"application/json\",\n                                      \"Authorization\" =\u003e \"Token token=#{$token}\",\n                                      \"Accept\"        =\u003e \"application/vnd.pagerduty+json;version=2\",\n                                      \"From\"          =\u003e $mail.to_str })\n\n        log(\"output: #{out}\")\n        return out\n    end\n\n    def log(line)\n        return unless $verbose\n        puts line\n    end\n\n    self\n\nend.new.main\n"
				}
			],
			"path": "Tools/PagerDuty/pagerduty.30s.rb",
			"filename": "pagerduty.30s.rb",
			"dir": "Tools/PagerDuty",
			"docsPlugin": "Tools/PagerDuty/pagerduty.30s.rb.html",
			"docsCategory": "Tools/PagerDuty.html",
			"pathSegments": [
				"Tools",
				"PagerDuty"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/PagerDuty",
					"text": "PagerDuty",
					"isLast": true
				}
			],
			"title": "PagerDuty",
			"version": "v2.0",
			"author": "Allan Frese",
			"authors": [
				{
					"name": "Allan Frese",
					"githubUsername": "frese",
					"imageURL": "https://avatars.githubusercontent.com/u/40183?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows current pagerduty alert status.",
			"imageURL": "http://i.imgur.com/5onainp.png",
			"dependencies": [
				"ruby (httparty gem)"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.204584Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/PagerDuty/pagerDutyIncidents.30s.js",
					"filename": "pagerDutyIncidents.30s.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n/*\n\u003cbitbar.title\u003ePagerDuty Incidents\u003c/bitbar.title\u003e\n\u003cbitbar.version\u003ev0.2.0\u003c/bitbar.version\u003e\n\u003cbitbar.author\u003ePedro Pablo Fuentes Schuster\u003c/bitbar.author\u003e\n\u003cbitbar.author.github\u003epedrofuentes\u003c/bitbar.author.github\u003e\n\u003cbitbar.desc\u003eShows all the active incidents grouped by Service. For installation instructions check https://github.com/PedroFuentes/bitbar-plugins/blob/master/pagerDutyIncidents/README.md\u003c/bitbar.desc\u003e\n\u003cbitbar.image\u003ehttp://cdn.pedrofuent.es/images/github/PagerDutyIncidents_Screenshot.png\u003c/bitbar.image\u003e\n\u003cbitbar.dependencies\u003enode, npm/node-fetch, npm/time-ago, npm/bitbar, npm/home-config\u003c/bitbar.dependencies\u003e\n\u003cbitbar.abouturl\u003ehttps://github.com/PedroFuentes/bitbar-plugins/tree/master/pagerDutyIncidents\u003c/bitbar.abouturl\u003e\n*/\n/* MIT Licensed https://opensource.org/licenses/MIT */\n/* jshint esversion: 6 */\n\n'use strict';\n\nconst fetch = require('node-fetch');\nconst ta = require('time-ago')();\nconst bitbar = require('bitbar');\n\nconst cfg = require('home-config').load('.bitbarrc');\n\nif (!cfg.pagerdutyincidents || !cfg.pagerdutyincidents['api.endpoint'] || !cfg.pagerdutyincidents['api.token']) {\n  const json = [];\n\n  json.push({\n    text: 'Config Needed',\n    dropdown: false,\n  },\n  bitbar.sep, {\n    text: 'Add to your .bitbarrc config file on your',\n  }, {\n    text: 'home directory the following information:',\n  },\n  bitbar.sep, {\n    text: '[pagerdutyincidents]',\n  }, {\n    text: 'api.endpoint=https://',\n  }, {\n    text: 'api.token={your-token}',\n  });\n\n  bitbar(json);\n  process.exit();\n}\n\nconst config = {\n  api: {\n    endpoint: cfg.pagerdutyincidents['api.endpoint'],\n    token: cfg.pagerdutyincidents['api.token'],\n    query: cfg.pagerdutyincidents['api.query'] ? cfg.pagerdutyincidents['api.query'] : 'limit=100\u0026statuses[]=triggered\u0026statuses[]=acknowledged',\n  },\n  icon: {\n    active: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6REEwQjNEREYxNjBCMTFFNjgyODVBMzc1NTdCRDNBRUYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6REEwQjNERTAxNjBCMTFFNjgyODVBMzc1NTdCRDNBRUYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpEQTBCM0RERDE2MEIxMUU2ODI4NUEzNzU1N0JEM0FFRiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpEQTBCM0RERTE2MEIxMUU2ODI4NUEzNzU1N0JEM0FFRiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv4ywmgAAADTSURBVHja1NOtCgJBFIbhGX8QNYkGg6jFm7CZNXodglGL1RsQMQsmjUaTyWYzWAzGFfxji+L6LpyFYZmybBAHnrDLme8MZ3a1UspTMVZCxVw/Cdjgar7wIqpiFzynQulbrPBBGT1kMMUJfv0FyWCDGXBDF02UMIOLGkbo4I0XtC3Akc4LZDHGHg+0MZe6ugRZh5gw042lQzNTthP4m+/oI4+1dK5giSGeMoOCLUBLuiNFLQyQwxkHqZugYbvGowzPjXKt5gyK0jEd5avS//8zfQUYAGZtQSNj7zxTAAAAAElFTkSuQmCC',\n    inactive: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzI0MzNGNUIxNjBFMTFFNkEwRTE5QTI1QkJBMzA0MjYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MzI0MzNGNUMxNjBFMTFFNkEwRTE5QTI1QkJBMzA0MjYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDozMjQzM0Y1OTE2MEUxMUU2QTBFMTlBMjVCQkEzMDQyNiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDozMjQzM0Y1QTE2MEUxMUU2QTBFMTlBMjVCQkEzMDQyNiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Poh/go0AAADaSURBVHja1NM9CsIwFMDxRjuIqJuj4AX0DJ5BRPAKdRAn3Z0Fxc0TiKK7Lp7F0cmKg9/Gf+BVAlahFAQDP5K+ti8vaaq01k6clnBitt8nUEqN4L0CZg+ioO2xCK5dK7MZV1CVyjYY4IYWCjLO4hS851rVddDDHAe0TYE4oouVPK/wCEtQwhl1StNU1GdclARTQp5U6tOlwzbx24H4eM+uwMyewpBZLvQ1jHFFk9iOPoMctmEJglnySGJmkuEusbKsvYHl22ekTWS9KspntStYw498sP7/Z3oKMAD3DYQymUW7vgAAAABJRU5ErkJggg==',\n  },\n  colors: {\n    critical: '#FF0000',\n    warning: '#999900',\n    regularText: '#808080',\n  },\n};\n\n// TODO: load all available pages\nfetch(`${config.api.endpoint}/incidents?${config.api.query}`, {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Token token=${config.api.token}`,\n  },\n})\n  .then((res) =\u003e res.json())\n  .then((json) =\u003e {\n  // Group incidents by Service\n    const serviceIncidents = [];\n\n    json.incidents.forEach((incident) =\u003e {\n      if (!serviceIncidents[incident.service.id]) {\n        serviceIncidents[incident.service.id] = {\n          name: incident.service.summary,\n          html_url: incident.service.html_url,\n          incidents: [],\n        };\n      }\n\n      serviceIncidents[incident.service.id].incidents.push(incident);\n    });\n\n    return {\n      serviceIncidents,\n      total: json.incidents.length,\n    };\n  })\n  .then((obj) =\u003e {\n    const json = [];\n    const { serviceIncidents } = obj;\n\n    json.push({\n      text: `[${obj.total}]`,\n      dropdown: false,\n      templateImage: config.icon.inactive,\n      size: 8,\n    },\n    bitbar.sep);\n\n    if (Object.keys(serviceIncidents).length) {\n      Object.keys(serviceIncidents).forEach((prop) =\u003e {\n        const incidents = [];\n\n        serviceIncidents[prop].incidents.forEach((incident) =\u003e {\n          const assignedTo = [];\n\n          incident.assignments.forEach((user) =\u003e {\n            assignedTo.push({\n              text: `${user.assignee.summary}, ${ta.ago(new Date(Date.parse(user.at)))}`,\n              href: user.assignee.html_url,\n              color: config.colors.regularText,\n            }, {\n              text: user.assignee.html_url,\n              alternate: true,\n            });\n          });\n\n          incidents.push({\n            text: incident.title,\n            length: 50,\n            href: incident.html_url,\n            color: incident.status === 'triggered' ? config.colors.critical : config.colors.warning,\n          }, {\n            text: incident.title,\n            alternate: true,\n          }, {\n            text: 'Assigned To',\n            submenu: assignedTo,\n          }, {\n            text: `Created\\t\\t: ${ta.ago(new Date(Date.parse(incident.created_at)))}`,\n            color: config.colors.regularText,\n          }, {\n            text: `Created at\\t: ${incident.created_at}`,\n            alternate: true,\n            color: config.colors.regularText,\n          }, {\n            text: `Status\\t\\t: ${incident.status}`,\n            color: config.colors.regularText,\n          }, {\n            text: `Urgency\\t\\t: ${incident.urgency}`,\n            color: config.colors.regularText,\n          }, {\n            text: `Escalations\\t: ${incident.alert_counts.all}`,\n            color: config.colors.regularText,\n          });\n        });\n\n        json.push({\n          text: `${serviceIncidents[prop].name} (${serviceIncidents[prop].incidents.length})`,\n          href: serviceIncidents[prop].html_url,\n          submenu: incidents,\n        },\n        bitbar.sep);\n      });\n    } else {\n      json.push({\n        text: 'No Open Incidents',\n      });\n    }\n\n    bitbar(json);\n  });\n"
				}
			],
			"path": "Tools/PagerDuty/pagerDutyIncidents.30s.js",
			"filename": "pagerDutyIncidents.30s.js",
			"dir": "Tools/PagerDuty",
			"docsPlugin": "Tools/PagerDuty/pagerDutyIncidents.30s.js.html",
			"docsCategory": "Tools/PagerDuty.html",
			"pathSegments": [
				"Tools",
				"PagerDuty"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/PagerDuty",
					"text": "PagerDuty",
					"isLast": true
				}
			],
			"title": "PagerDuty Incidents",
			"version": "v0.2.0",
			"author": "Pedro Pablo Fuentes Schuster",
			"authors": [
				{
					"name": "Pedro Fuentes",
					"githubUsername": "pedrofuentes",
					"imageURL": "https://avatars.githubusercontent.com/u/21779?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows all the active incidents grouped by Service. For installation instructions check https://github.com/PedroFuentes/bitbar-plugins/blob/master/pagerDutyIncidents/README.md",
			"imageURL": "http://cdn.pedrofuent.es/images/github/PagerDutyIncidents_Screenshot.png",
			"dependencies": [
				"node",
				"npm/node-fetch",
				"npm/time-ago",
				"npm/bitbar",
				"npm/home-config"
			],
			"aboutURL": "https://github.com/PedroFuentes/bitbar-plugins/tree/master/pagerDutyIncidents",
			"lastUpdated": "2021-03-08T15:22:07.086756Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/PagerDuty/pagerDutyOnCall.30s.js",
					"filename": "pagerDutyOnCall.30s.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n/*\n\u003cbitbar.title\u003ePagerDuty On-Call\u003c/bitbar.title\u003e\n\u003cbitbar.version\u003ev0.2.0\u003c/bitbar.version\u003e\n\u003cbitbar.author\u003ePedro Pablo Fuentes Schuster\u003c/bitbar.author\u003e\n\u003cbitbar.author.github\u003epedrofuentes\u003c/bitbar.author.github\u003e\n\u003cbitbar.desc\u003eShows who is on call for all the active Escalation Policies and what services have active incidents. For installation instructions check https://github.com/PedroFuentes/bitbar-plugins/blob/master/pagerDutyOnCall/README.md\u003c/bitbar.desc\u003e\n\u003cbitbar.image\u003ehttp://cdn.pedrofuent.es/images/github/PagerDutyOnCall_Screenshot.png\u003c/bitbar.image\u003e\n\u003cbitbar.dependencies\u003enode, npm/node-fetch, npm/time-ago, npm/bitbar, npm/home-config\u003c/bitbar.dependencies\u003e\n\u003cbitbar.abouturl\u003ehttps://github.com/PedroFuentes/bitbar-plugins/tree/master/pagerDutyOnCall\u003c/bitbar.abouturl\u003e\n*/\n/* MIT Licensed https://opensource.org/licenses/MIT */\n/* jshint esversion: 6 */\n\n'use strict';\n\nconst fetch = require('node-fetch');\nconst ta = require('time-ago')();\nconst bitbar = require('bitbar');\n\nconst cfg = require('home-config').load('.bitbarrc');\n\nif (!cfg.pagerdutyoncall || !cfg.pagerdutyoncall['api.endpoint'] || !cfg.pagerdutyoncall['api.token']) {\n  const json = [];\n\n  json.push({\n    text: 'Config Needed',\n    dropdown: false,\n  },\n  bitbar.sep, {\n    text: 'Add to your .bitbarrc config file on your',\n  }, {\n    text: 'home directory the following information:',\n  },\n  bitbar.sep, {\n    text: '[pagerdutyoncall]',\n  }, {\n    text: 'api.endpoint=https://',\n  }, {\n    text: 'api.token={your-token}',\n  }, {\n    text: 'api.query={your-filter-query} *optional',\n  }, {\n    text: 'style.prefix={service-name-prefix} *optional',\n  });\n\n  bitbar(json);\n  process.exit();\n}\n\nconst config = {\n  api: {\n    endpoint: cfg.pagerdutyoncall['api.endpoint'],\n    token: cfg.pagerdutyoncall['api.token'],\n    query: cfg.pagerdutyoncall['api.query'] ? cfg.pagerdutyoncall['api.query'] : '',\n  },\n  icon: {\n    active: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6REEwQjNEREYxNjBCMTFFNjgyODVBMzc1NTdCRDNBRUYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6REEwQjNERTAxNjBCMTFFNjgyODVBMzc1NTdCRDNBRUYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpEQTBCM0RERDE2MEIxMUU2ODI4NUEzNzU1N0JEM0FFRiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpEQTBCM0RERTE2MEIxMUU2ODI4NUEzNzU1N0JEM0FFRiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv4ywmgAAADTSURBVHja1NOtCgJBFIbhGX8QNYkGg6jFm7CZNXodglGL1RsQMQsmjUaTyWYzWAzGFfxji+L6LpyFYZmybBAHnrDLme8MZ3a1UspTMVZCxVw/Cdjgar7wIqpiFzynQulbrPBBGT1kMMUJfv0FyWCDGXBDF02UMIOLGkbo4I0XtC3Akc4LZDHGHg+0MZe6ugRZh5gw042lQzNTthP4m+/oI4+1dK5giSGeMoOCLUBLuiNFLQyQwxkHqZugYbvGowzPjXKt5gyK0jEd5avS//8zfQUYAGZtQSNj7zxTAAAAAElFTkSuQmCC',\n    inactive: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzI0MzNGNUIxNjBFMTFFNkEwRTE5QTI1QkJBMzA0MjYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MzI0MzNGNUMxNjBFMTFFNkEwRTE5QTI1QkJBMzA0MjYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDozMjQzM0Y1OTE2MEUxMUU2QTBFMTlBMjVCQkEzMDQyNiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDozMjQzM0Y1QTE2MEUxMUU2QTBFMTlBMjVCQkEzMDQyNiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Poh/go0AAADaSURBVHja1NM9CsIwFMDxRjuIqJuj4AX0DJ5BRPAKdRAn3Z0Fxc0TiKK7Lp7F0cmKg9/Gf+BVAlahFAQDP5K+ti8vaaq01k6clnBitt8nUEqN4L0CZg+ioO2xCK5dK7MZV1CVyjYY4IYWCjLO4hS851rVddDDHAe0TYE4oouVPK/wCEtQwhl1StNU1GdclARTQp5U6tOlwzbx24H4eM+uwMyewpBZLvQ1jHFFk9iOPoMctmEJglnySGJmkuEusbKsvYHl22ekTWS9KspntStYw498sP7/Z3oKMAD3DYQymUW7vgAAAABJRU5ErkJggg==',\n  },\n  colors: {\n    critical: '#FF0000',\n    warning: '#999900',\n    regularText: '#808080',\n    onCallText: !process.env.BitBarDarkMode || process.env.BitBarDarkMode === 0 ? '#000000' : '#FFFFFF',\n  },\n  style: {\n    indentation: '      ',\n    prefix: cfg.pagerdutyoncall['style.prefix'] ? cfg.pagerdutyoncall['style.prefix'] : '',\n  },\n};\n\n// TODO: Add support more than 100 escalations\nfetch(`${config.api.endpoint}/escalation_policies?limit=100\u0026include[]=services\u0026include[]=teams\u0026include[]=oncall\u0026query=${config.api.query}`, {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Token token=${config.api.token}`,\n  },\n})\n  .then((res) =\u003e res.json())\n  .then((json) =\u003e {\n    const escalations = [];\n    let activeIncident = false;\n\n    json.escalation_policies.forEach((escalation) =\u003e {\n      let activeServiceIncident = false;\n      const services = [];\n      let activeServices = 0;\n      const htmlDomain = getHostName(escalation.html_url);\n\n      escalation.services.forEach((service) =\u003e {\n        if (service.status !== 'disabled') {\n          activeServices += 1;\n\n          if (service.status !== 'active') {\n            activeIncident = true;\n            activeServiceIncident = true;\n\n            services.push({\n              text: `${config.style.indentation}${service.status === 'maintenance' ? ':construction:' : ':bangbang:'} ${cleanName(service.name)}, ${ta.ago(new Date(Date.parse(service.last_incident_timestamp)))}`,\n              trim: false,\n              color: service.status === 'critical' ? config.colors.critical : config.colors.warning,\n              href: `${service.html_url}`,\n            });\n          }\n        }\n      });\n\n      if (activeServices) {\n        const onCallList = [];\n\n        escalation.on_call.forEach((onCall) =\u003e {\n          onCallList.push({\n            text: `${onCall.level}. ${onCall.user.name}`,\n            color: config.colors.onCallText,\n            href: `https://${htmlDomain}/users/${onCall.user.id}`,\n          }, {\n            text: `${onCall.level}. ${onCall.user.email}`,\n            alternate: true,\n          });\n        });\n\n        escalations.push({\n          text: `${activeServiceIncident ? ':sos:' : ':cool:'} ${cleanName(escalation.name)}`,\n          href: `${escalation.html_url}`,\n          submenu: onCallList,\n        });\n\n        if (services.length) escalations.push(services[0]);\n\n        escalations.push(bitbar.sep);\n      }\n    });\n\n    escalations.unshift({\n      text: '☎',\n      dropdown: false,\n      templateImage: activeIncident ? config.icon.active : config.icon.inactive,\n      size: 8,\n    },\n    bitbar.sep);\n\n    bitbar(escalations);\n  });\n\nfunction cleanName(name) {\n  return name.replace(`${config.style.prefix} - `, '').replace(config.style.prefix, '').trim();\n}\n\nfunction getHostName(url) {\n  const match = url.match(/:\\/\\/(www[0-9]?\\.)?(.[^/:]+)/i);\n  if (match != null \u0026\u0026 match.length \u003e 2 \u0026\u0026 typeof match[2] === 'string' \u0026\u0026 match[2].length \u003e 0) {\n    return match[2];\n  }\n  return null;\n}\n"
				}
			],
			"path": "Tools/PagerDuty/pagerDutyOnCall.30s.js",
			"filename": "pagerDutyOnCall.30s.js",
			"dir": "Tools/PagerDuty",
			"docsPlugin": "Tools/PagerDuty/pagerDutyOnCall.30s.js.html",
			"docsCategory": "Tools/PagerDuty.html",
			"pathSegments": [
				"Tools",
				"PagerDuty"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/PagerDuty",
					"text": "PagerDuty",
					"isLast": true
				}
			],
			"title": "PagerDuty On-Call",
			"version": "v0.2.0",
			"author": "Pedro Pablo Fuentes Schuster",
			"authors": [
				{
					"name": "Pedro Fuentes",
					"githubUsername": "pedrofuentes",
					"imageURL": "https://avatars.githubusercontent.com/u/21779?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows who is on call for all the active Escalation Policies and what services have active incidents. For installation instructions check https://github.com/PedroFuentes/bitbar-plugins/blob/master/pagerDutyOnCall/README.md",
			"imageURL": "http://cdn.pedrofuent.es/images/github/PagerDutyOnCall_Screenshot.png",
			"dependencies": [
				"node",
				"npm/node-fetch",
				"npm/time-ago",
				"npm/bitbar",
				"npm/home-config"
			],
			"aboutURL": "https://github.com/PedroFuentes/bitbar-plugins/tree/master/pagerDutyOnCall",
			"lastUpdated": "2021-03-08T15:22:07.129275Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/password_bar.5m.php",
					"filename": "password_bar.5m.php",
					"content": "#!/usr/bin/env php\n\u003c?php\n\n# \u003cbitbar.title\u003ePassword Generator\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAdi\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003egomedia-adi\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGenerates human-friendly strong passwords.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://www.greatoceanmedia.com.au/images/63.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ephp\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://www.greatoceanmedia.com.au/bitbar/password-bar\u003c/bitbar.abouturl\u003e\n\n/*\n\tBitBar plugin help: https:github.com/matryer/bitbar\n\n\tPlugin updated 22/6/20\n\n\tVersion history\n\t\t1.0\t- also now generates a single obscure password (i.e. one that doesn't contain words)\n\t\t\t- length of obscure password user definable\n\t\t\t- changed format element \"p\" to \"s\" (coz they're symbols more than punctuation)\n\t\t\t- option to select subset of symbols\n\t\t\t- Dark Mode compatible menubar icon\n\t\t0.1\t- initial release\n\n\tCredits\n\t\t- plugin inspired by a Mac app called Arcana by Tekuris\n\t\t- thanks to Christian S for v1.0 improvement suggestions\n*/\n\n/* TODO\n\t- format massaging/validation?\n*/\n\ndefine('CONFIG_FILE', \"/var/tmp/bitbar.password_bar.config.php\");\ndefine('DEFAULT_FORMAT', \"3,n,5,s,4\");\ndefine('FULL_SYM', \"!\\\"#$%\u0026'()*+,-./:;\u003c=\u003e?@[\\]^_`{|}~\");\ndefine('PARTIAL_SYM', \"!#$%\u0026*+,-.:;=?@^_|~\"); // without the quotes, brackets, slashes\ndefine('LIMITED_SYM', \"!#$%*+-=@^_\"); // the supposed eBay subset\ndefine('ALPHA_NUM', \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\ndefine('DEFAULT_LENGTH', 14);\n\nfunction update_config($format, $symbols, $length) {\n// rewrite config file with given values\n\n\tfile_put_contents(CONFIG_FILE, \"\u003c?php\\n\");\n\tfile_put_contents(CONFIG_FILE, \"// PASSWORD_BAR CONFIGURATION\\n\", FILE_APPEND);\n\tfile_put_contents(CONFIG_FILE, \"\\$format = '$format';\\n\", FILE_APPEND);\n\tfile_put_contents(CONFIG_FILE, \"\\$symbols = '$symbols';\\n\", FILE_APPEND);\n\tfile_put_contents(CONFIG_FILE, \"\\$length = '$length';\\n\", FILE_APPEND);\n\tfile_put_contents(CONFIG_FILE, \"?\u003e\\n\", FILE_APPEND);\n}\n\nfunction generate_pwd($format, $symbols) {\n// generate password using format\n\tglobal $words1, $words2, $words3, $words4, $words5, $words6, $words7, $words8, $words9; // make word lists available between function calls\n\n\t$password = '';\n\n\t$symbol = FULL_SYM;\n\tif ($symbols == 'partial') $symbol = PARTIAL_SYM;\n\tif ($symbols == 'limited') $symbol = LIMITED_SYM;\n\n\t$parts = explode(',', $format);\n\tforeach ($parts as $part) {\n\t\t// random single digit\n\t\tif ($part == 'n')\n\t\t\t$password .= rand(1,9);\n\t\t// random symbol character (from predefined list)\n\t\tif (($part == 'p') || ($part == 's')) {\n\t\t\t$random_symbol = $symbol[rand(0, strlen($symbol)-1)];\n\t\t\t$password .= $random_symbol;\n\t\t}\n\t\t// random word of n letters\n\t\tif (strpos('123456789', $part) !== FALSE) {\n\t\t\t$words_var = 'words'.$part;\n\t\t\tif (!isset($$words_var)) { // create n-letter word array for first time\n\t\t\t\t$num_char = (int)$part;\n\t\t\t\t$cmd = \"grep -x '.\\{\".$num_char.\"\\}' /usr/share/dict/words | grep -v '[[:upper:]]'\";\n\t\t\t\t$$words_var = array();\n\t\t\t\texec($cmd, $$words_var, $err);\n\t\t\t}\n\t\t\t$words = $$words_var;\n\t\t\t$rand_key = array_rand($words); // get random key\n\t\t\t$password .= ucfirst($words[$rand_key]); // get random Word\n\t\t}\n\t}\n\n\treturn $password;\n}\n\nfunction generate_obscure_pwd($length, $symbols) {\n// generate an obscure password\n\n\t$password = array();\n\n\t$string = ALPHA_NUM.FULL_SYM;\n\tif ($symbols == 'partial') $string = ALPHA_NUM.PARTIAL_SYM;\n\tif ($symbols == 'limited') $string = ALPHA_NUM.LIMITED_SYM;\n\n\t$chars = str_split($string); // convert string to array\n\tshuffle($chars); // randomise chars\n\t$rand_keys = array_rand($chars, $length); // randomly pick array keys\n\tforeach ($rand_keys as $key) // create password from alpha/num/symbols array using random keys\n\t\t$password[] = $chars[$key];\n\t// rotate password chars until begins with alpha\n\twhile (!ctype_alpha($password[0]))\n\t\tarray_push($password, array_shift($password));\n\n\treturn implode('', $password); // return string\n}\n\n//-------------------------------------------------------------------------------------------------\n\n//??? CONFIG FILE\n\n// initialise config file\nif (!file_exists(CONFIG_FILE))\n\ttouch(CONFIG_FILE);\n\n// read config file\ninclude(CONFIG_FILE);\n\n// provide defaults\nif (!isset($format) || $format == '') $format = DEFAULT_FORMAT;\nif (!isset($symbols) || $symbols == '' || !in_array($symbols, array('full', 'partial', 'limited'))) $symbols = 'partial';\nif (!isset($length) || !$length) $length = '14';\n\n//??? MENU ACTIONS\n\n// menu option selected\nif (isset($argv[1])) {\n\t// prompt for readable password format \u0026 save\n\tif ($argv[1] == \"set_format\") {\n\t\t$cmd = \"osascript -e 'set theString to text returned of (display dialog \\\"Readable Password Format \\\" default answer \\\"\".$format.\"\\\" buttons {\\\"Cancel\\\", \\\"Save\\\"} default button 2)'\";\n\t\texec($cmd, $out, $err);\n\t\tif (!$err) { // something entered\n\t\t\t$str = implode('', $out); // text entered by user\n\t\t\t$format = ($str ? $str : DEFAULT_FORMAT); // reset to default if blank or zero\n\t\t\tupdate_config($format, $symbols, $length);\n\t\t}\n\t}\n\t// prompt for obscure password length \u0026 save\n\tif ($argv[1] == \"set_length\") {\n\t\t$cmd = \"osascript -e 'set theString to text returned of (display dialog \\\"Obscure Password Length \\\" default answer \\\"\".$length.\"\\\" buttons {\\\"Cancel\\\", \\\"Save\\\"} default button 2)'\";\n\t\texec($cmd, $out, $err);\n\t\tif (!$err) { // something entered\n\t\t\t$str = implode('', $out); // text entered by user\n\t\t\t$length = (int)$str; // convert str to int (will become zero if not int)\n\t\t\t$length = ($length ? $length : DEFAULT_LENGTH); // reset to default if blank or zero\n\t\t\tupdate_config($format, $symbols, $length);\n\t\t}\n\t}\n\t// save symbol subset\n\tif ($argv[1] == \"set_symbols\")\n\t\tupdate_config($format, $argv[2], $length);\n\t// copy password to clipboard\n\tif ($argv[1] == \"copy_pwd\") {\n\t\t$cmd = \"echo '\".$argv[2].\"' | base64 --decode | pbcopy\"; // decode \u0026 copy to clipboard\n\t\texec($cmd, $out, $err);\n\t}\n\t// help dialog - some special chars used below to avoid CLI interpretation: backslash=⧵ (U+29F5); apostrophe=＇(U+FF07), double quote=″ (U+2033)\n\tif ($argv[1] == \"help\") {\n\t\t$cmd = \"osascript -e 'display dialog \\\"Readable Passwords Format\n\t1-9\t- random word with the specified number of letters\n\t\t  (e.g. 3 becomes a three letter Capitalised word)\n\tn\t- random single digit number\n\ts\t- random symbol character (see below)\n\n\tDefault format:  3,n,5,s,4\n\t- generates a password containing a 3 letter word,\n\ta digit, a 5 letter word, a symbol character,\n\tand finally a 4 letter word (e.g. Tig5Pesky?Muff)\n\nObscure Password\n\tThis is a completely randomised string of letters,\n\tdigits and symbols. Set the length from the menu\n\t(default = 14).\n\nSymbol Sets\n\tFull:\t\t!″#$%\u0026＇()*+,-./:;\u003c=\u003e?@[⧵]^_`{|}~\n\tPartial:\t!#$%\u0026*+,-.:;=?@^_|~\n\tLimited:\t!#$%*+-=@^_\n\\\" buttons {\\\"OK\\\"} default button 1'\";\n\t\texec($cmd, $out, $err);\n\t\texit;\n\t}\n}\n\n//??? MENUBAR\n\n// display icon: 36x36 png (32x32max image + 2px transparent border), 144 dpi, colour mode grey, encoded using \"base64 icon.png\" ... prepend \"|templateImage=\" \u0026 append \"\\n\"\necho \"|templateImage=iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAQAAABLCVATAAAAAmJLR0QA/4ePzL8AAAAJcEhZcwAAFiUAABYlAUlSJPAAAAAHdElNRQfkBhUWCih+dz6LAAABaUlEQVRIx9XWv0oDQRAG8PnSRBBbLRXFUoiI4EX8TyQG7CzsLBT1CXwBjdaCIGJhZx0QuV7zAoJCihQWVgFRiEW4eFmL6GWyenuzi01um+Tj9pfN7jB3RD17YQj78PGCN1RwhYIrsweljRDj9oz/i2mPLTvmOoZRUJiXMyMGRqEmh57YtA8UsYlbfLJsVcYMsinPUTrB0qoMmoomtDDK8pMO1U5SCVJ/9CmkV5aX9BuToGZnEZRm+bBtBY2x3ThkeT1KAynFD/scA0TI4IFlx1KoaKyjgCBzpo2MwoWMWUlgfBmTQ2hkzpCSMF7XpCaOUGHf7rAkW82M9uuL31s/iWVY1FBOY7Ju7TCv7Y3nxsxqDXXhPxglZ7oPcA1l/excVlNA649qObBl5mILb9uG8Yw1nBXvES6NdwXyBtYwrGfD5SHYwI3G7Ni11DQeUcc7MkS4Z8yuy4tC309bQMnhT8Wgp6hhnXr6+gJZx0AEmEK/dgAAAABJRU5ErkJggg==\\n\";\n\n//??? TOP-LEVEL MENU\n\n// display readable human-friendly passwords\necho \"---\\n\";\necho \"Click to Copy:\\n\";\nforeach (range(1, 10) as $i) {\n\t$pwd = generate_pwd($format, $symbols);\t\t// generate password\n \t$pwd_nobar = str_replace('|', '｜', $pwd);\t// \"|\" interpreted by bitbar, so substitute with a vertical line (U+FF5C)\n\t$pwd_enc = base64_encode($pwd);\t\t\t\t// encode password to hide unix special characters from CLI\n\techo $pwd_nobar.\" | terminal=false bash=\\\"\".$argv[0].\"\\\" param1=copy_pwd param2=\".$pwd_enc.\" refresh=false terminal=false\".\"\\n\";\n}\n\n// display an obscure password\necho \"…\\n\";\n$pwd = generate_obscure_pwd($length, $symbols);\n$pwd_nobar = str_replace('|', '｜', $pwd);\t// \"|\" interpreted by bitbar, so substitute with a vertical line (U+FF5C)\n$pwd_enc = base64_encode($pwd);\t\t\t\t// encode password to hide unix special characters from CLI\necho $pwd_nobar.\" | terminal=false bash=\\\"\".$argv[0].\"\\\" param1=copy_pwd param2=\".$pwd_enc.\" refresh=false terminal=false\".\"\\n\";\n\n// regenerate passwords (i.e. refresh)\necho \"---\\n\";\necho\n\t'Regenerate'\n\t.\" | terminal=false bash=\\\"\".$argv[0].\"\\\" refresh=true terminal=false\"\n\t.\"\\n\"\n;\n\n// display current settings\necho \"---\\n\";\necho \"Readable Format: $format\\n\";\necho \"Obscure Length: $length\\n\";\necho \"---\\n\";\n\n// set readable password format\necho\n\t'Set Readable Format…'\n\t.\" |  bash=\\\"\".$argv[0].\"\\\" param1=set_format refresh=true terminal=false\"\n\t.\"\\n\"\n;\n\n// set obscure password length\necho\n\t'Set Obscure Length…'\n\t.\" |  bash=\\\"\".$argv[0].\"\\\" param1=set_length refresh=true terminal=false\"\n\t.\"\\n\"\n;\n\n// symbols subset options\necho \"Symbol Sets\\n\";\nforeach (array('full', 'partial', 'limited') as $this_symbol_set)\n\techo\n\t\t'--'\n\t\t.ucfirst($this_symbol_set)\n\t\t.($this_symbol_set == $symbols ? ' ✓' : '')\n\t\t.\" | terminal=false bash=\\\"\".$argv[0].\"\\\" param1=set_symbols param2=\\\"$this_symbol_set\\\" refresh=true\"\n\t\t.\"\\n\"\n\t;\n\n// display help dialog\necho\n\t'Help'\n\t.\" |  bash=\\\"\".$argv[0].\"\\\" param1=help terminal=false\"\n\t.\"\\n\"\n;\n\n?\u003e\n"
				}
			],
			"path": "Tools/password_bar.5m.php",
			"filename": "password_bar.5m.php",
			"dir": "Tools",
			"docsPlugin": "Tools/password_bar.5m.php.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Password Generator",
			"version": "v1.0",
			"author": "Adi",
			"authors": [
				{
					"name": "gomedia-adi",
					"githubUsername": "gomedia-adi",
					"imageURL": "https://avatars.githubusercontent.com/u/13227940?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Generates human-friendly strong passwords.",
			"imageURL": "http://www.greatoceanmedia.com.au/images/63.png",
			"dependencies": [
				"php"
			],
			"aboutURL": "http://www.greatoceanmedia.com.au/bitbar/password-bar",
			"lastUpdated": "2021-03-08T15:22:07.696164Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/rsyncbackup.js",
					"filename": "rsyncbackup.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n// jshint esversion: 8\n// \u003cbitbar.title\u003eRSync Backup Bitbar Plugin\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eGregory S. Read\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003ereadgs\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eSchedule and monitor rsync backups via BitBar\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode npm/path npm/untildify npm/yargs npm/bitbar npm/mkdirp npm/jsonc npm/lockfile npm/execa npm/moment\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.abouturl\u003e\u003c/bitbar.abouturl\u003e\n\n/**\n * Quick Install\n * -Make sure Node is installed (this also installs npm)\n * -Copy script to your bitbar plugins folder.\n *      NOTE: Be sure to name it something like rsyncbackup.5s.js so that it will refresh\n *      backup status (and trigger backups) often enough to be useful.\n * -Open up a terminal and navigate to plugin folder\n * -Install required npm packages...\n *      NOTE: This will only install the required dependencies into the plugins folder.\n *      Specifically, into a subfolder called node_modules.\n * \n *      From Terminal: npm install --no-package-lock path untildify yargs bitbar mkdirp jsonc lockfile execa moment\n * -Refresh your plugins\n * -Select \"Configure\" option to open config file up in your default editor\n * -Make whatever changes necessary for your backup needs.\n *      NOTE: It is recommended that you don't set a schedule for your backup until\n *      you execute a \"dry run\" to make sure you like what it's backing up.\n * -Select \"Dry Run\"\n * -If you like the results, select Back Up Now\n * -If you still like the results, update the schedule in the configuration.\n * -Enjoy.\n */\n\n\nconst path = require('path');\nconst untildify = require('untildify');\nconst yargs = require('yargs');\nconst bitbar = require('bitbar');\nconst fs = require('fs');\nconst mkdirp = require('mkdirp');\nconst jsonc = require('jsonc');\nconst lockFile = require('lockfile');\nconst execa = require('execa');\nconst moment = require('moment');\n\n/**\n * Enumeration of valid backup statuses\n */\nconst BackupStatus = {\n    /**\n     * No status available on backup (i.e. it hasn't run ever)\n     */\n    None: 'None',\n    /**\n     * Last backup was successful\n     */\n    Succeeded: 'Succeeded',\n    /**\n     * Last backup failed\n     */\n    Failed: 'Failed',\n    /**\n     * Backup currently in progress\n     */\n    Running: 'Running'\n}\n\n/**\n * Values that don't change :)\n */\nconst constants = {\n    /**\n     * Main folder where we store backup related stuff (like lock files, logs, etc)\n     */\n    WORKINGFOLDER: '~/.backup',\n    /**\n     * Name of lockfile we'll be using\n     */\n    LOCKFILE: 'backup.lock',\n    /**\n     * Name of file that will indicate the start of a backup\n     */\n    STARTFILE: 'start.flag',\n    /**\n     * Name of file that will indicate an error status\n     */\n    ERRORFILE: 'error.flag',\n    /**\n     * Name of file that will indicate a success status\n     */\n    SUCCESSFILE: 'success.flag',\n    /**\n     * Config file for user-configurable settings (source, destination, etc.)\n     */\n    CONFIGFILE: 'config.jsonc',\n    /**\n     * Name of excludes file for rsync\n     */\n    EXCLUDESFILE: 'excludes.txt',\n    /**\n     * Name of file where errors are logged\n     */\n    ERRORLOGFILE: 'errorlog.txt',\n    /**\n     * Name of file where rsync output is logged\n     */\n    LOGFILE: 'log.txt',\n    /**\n     * Default content for the rsync excludes file\n     */\n    DEFAULTEXCLUDES: \n`.backup/\n.Trash/\n.DS_Store`,\n    /**\n     * Default configuration content to use if no config file exists.\n     */\n    DEFAULTCONFIG:\n`/**\n* Configuration settings for backup\n*/\n{\n    /**\n     * Path to the rsync program.  The version included with macOS is ancient, so you\n     * may want to install a newer version via homebrew.  In this case, you would want\n     * to likely change this path to /usr/local/bin/rsync\n     */\n    \"rsyncPath\": \"/usr/bin/rsync\",\n    /**\n     * How often a backup should be executed.  Can expressed as a number, followed\n     * by the time unit (seconds, hours or days).  For example...\n     *      10s     Every 10 seconds\n     *       5m     Every 5 minutes\n     *       1h     Every 1 hour\n     *       2d     Every 2 days\n     *   manual     Backup is only done on-demand\n     */\n    \"frequency\": \"1h\",\n    /**\n     * Source to pass along to rsync for syncing data from\n     */\n    // ***UNCOMMENT LINE BELOW TO SPECIFY A SOURCE*** \n    //\"source\": \"~\",\n    /**\n     * Destination to pass along to rsync for syncing data to\n     */\n    // ***UNCOMMENT LINE BELOW TO SPECIFY A DESTINATION***\n    //\"destination\": \"/tmp/rsyncbackup/\",\n    /**\n     * Additional arguments to pass to rsync.  Default arguments are reasonable\n     * for a standard archival copy of the source to the destination (excluding\n     * permissions, ACLs, etc.).  See documentation for 'rsync' for more info\n     * on arguments.\n     * \n     * NOTE: The rsyncbackup.js script already passed along the --exclude-from\n     * argument if the 'excludes' configuration is specified above.\n     */ \n    \"rsyncAdditionalArguments\": [\n        \"--archive\",\n        \"--no-perms\",\n        \"--no-acls\",\n        \"--stats\",\n        \"--delete\",\n        \"--delete-excluded\"\n    ]\n}`\n}\n\n/**\n * Variables that we just want accessible from anywhere\n */\nconst globals = {\n    /**\n     * Path of main working folder for rsyncbackup script\n     */\n    workingFolder: untildify(constants.WORKINGFOLDER),\n    /**\n     * Configuration settings for our script go here.\n     */\n    configFile: getBackupPath(constants.CONFIGFILE),\n    /**\n     * Excluded files and folders for rsync will be in this file.\n     */\n    excludesFile: getBackupPath(constants.EXCLUDESFILE),\n    /**\n     * Used for ensuring only one instance of the backup is running.\n     */\n    lockFile: getBackupPath(constants.LOCKFILE),\n    /**\n     * Created when a backup starts (mostly to figure out when our backup started)\n     */\n    startFile: getBackupPath(constants.STARTFILE),\n    /**\n     * If an error occured, this file will exist\n     */\n    errorFile: getBackupPath(constants.ERRORFILE),\n    /**\n     * If backup succeeded, this file will exist\n     */\n    successFile: getBackupPath(constants.SUCCESSFILE),\n    /**\n     * Logs from rsync go here\n     */\n    logFile: getBackupPath(constants.LOGFILE),\n    /**\n     * Any errors that rsync output go here\n     */\n    errorLogFile: getBackupPath(constants.ERRORLOGFILE),\n    /**\n     * Arguments retrieved from commandline\n     */\n    args: {},\n    /**\n     * Configuration loaded from config.jsonc.  If not loaded or validation error\n     * with configuration, then this value will be null.\n     */\n    configuration: null,\n    /**\n     * If configuration is null, this value is set to a message indicating why\n     * the configuration was not loaded.\n     */\n    configurationError: '',\n    /**\n     * Status of the last completed backup.\n     */\n    backupStatus: BackupStatus.None,\n    /**\n     * Last date/time (formatted) of the last backup (regardless of outcome).\n     * If null, that means we never started a backup before.\n     */\n    backupDate: null,\n    /**\n     * Number of milliseconds the backup has been running, or ran (depending on status)\n     */\n    backupDuration: 0,\n    /**\n     * Date and time of the next scheduled backup\n     */\n    nextScheduledBackup: null,\n    /**\n     * Arguments to pass to the rsync command\n     */\n    rsyncArgs: []\n}\n\n/**\n * Bitbar items that we show as the main item (shows on menubar) for a given bitBar view\n */\nconst bitbarHeaders = {\n    /**\n     * Show when backup is running\n     */\n    backupRunning: {\n        text: ':running:'\n    },\n    /**\n     * Show when last backup ended in error\n     */\n    backupError: {\n        text: ':rage:'\n    },\n    /**\n     * Show if last backup ended in success\n     */\n    backupSuccess: {\n        text: ':smile:'\n    },\n    /**\n     * Show if there is no status for the backup (i.e. it hasn't run yet) */    \n    backupNoStatus: {\n        text: ':expressionless:'\n    }\n}\n\nconst bitbarItems = {\n    configurationError: {\n        text: 'Error in config file: '\n    }\n}\n\nconst bitbarActions = {\n    /**\n     * Shows a \"Configure...\" option and brings up the config file in a text editor when selected.\n     */\n    configure: {\n        text: 'Configure...',\n        bash: '/usr/bin/open',\n        param1: '-t',\n        param2: globals.configFile,\n        terminal: false\n    },\n    /**\n     * Shows a \"View Logs...\" option and brings up the last log in a text when selected.\n     */\n    viewLog: {\n        text: 'View Log...',\n        bash: '/usr/bin/open',\n        param1: '-t',\n        param2: globals.logFile,\n        terminal: false\n    },\n    /**\n     * Shows a \"View Logs...\" option and brings up the last log in a text when selected.\n     */\n    viewErrorLog: {\n        text: 'View Error Log...',\n        bash: '/usr/bin/open',\n        param1: '-t',\n        param2: globals.errorLogFile,\n        terminal: false\n    },\n    /**\n     * Shows a \"Start backup\" option and manually starts backup process when selected.\n     */\n    startBackup: {\n        text: 'Back Up Now',\n        //bash: See init()\n        param1: '--start',\n        terminal: false\n    },\n    /**\n     * Shows a \"Stop backup\" option and manually stops backup process if running, when selected.\n     */\n    stopBackup: {\n        text: 'Stop Backup',\n        //bash: See init(),\n        param1: '--stop',\n        terminal: false\n    },\n    /**\n     * Starts a backup, but not actually doing the copy.  Will run in a terminal as well\n     * so user can observe what will be copied, etc.\n     */\n    dryRun: {\n        text: 'Dry Run...',\n        //bash: See init()\n        param1: '--start',\n        param2: '--dry-run',\n        terminal: true\n    }\n}\n\n/**\n * Do any initalization required for the script at startup\n */\nasync function init() {\n    // Pull in commandline arguments\n    globals.args = yargs\n        .boolean(['start', 'stop'])\n        .default('start', false)\n        .default('stop', false)\n        .describe('start', 'Starts the backup')\n        .describe('stop', 'Stops the backup')\n        .describe('dry-run', 'If starting backup, runs it in --dry-run rsync mode with a terminal')\n        .argv;\n\n    // Create missing items as needed\n    await createFolderIfNeeded(globals.workingFolder);\n    createFileIfNeeded(globals.configFile, constants.DEFAULTCONFIG);\n    createFileIfNeeded(globals.excludesFile, constants.DEFAULTEXCLUDES);\n\n    // Load in configuration\n    loadConfiguration();\n\n    // Initilize the rsync arguments based on configuration\n    if(globals.configuration) {\n        // Use the source, Luke...\n        let source = untildify(globals.configuration.source);\n        // If destination includes a colon, we'll treat it as a ssh server path.\n        // Otherwise, make sure the tilde gets translated.\n        let destination = globals.configuration.destination.includes(':') ?\n            globals.configuration.destination\n            : untildify(globals.configuration.destination);\n        // Merge additional arguments with our default arguments\n        globals.rsyncArgs = [\n            ...globals.configuration.rsyncAdditionalArguments,\n            `--exclude-from=${globals.excludesFile}`,\n            source,\n            destination\n        ];\n        // Enable dry-run mode if requested\n        if(globals.args.dryRun) {\n            globals.rsyncArgs.push('--dry-run');\n        }\n    }\n\n    // Setup any bitbar items with additional info after init\n    bitbarActions.startBackup.bash = __filename;\n    bitbarActions.stopBackup.bash = __filename;\n    bitbarActions.dryRun.bash = __filename;\n    bitbarItems.configurationError.text += globals.configurationError;\n\n    // Get and store our lastest backup status\n    getBackupStatus();\n\n    // Figure out when our next backup should occur, if applicable\n    getNextScheduledBackup();\n}\n\n/**\n * Starts the backup process\n */\nasync function startBackup() {\n    // Ensure we can get a lock on the lockfile before we proceed\n    lockFile.lockSync(globals.lockFile, {});\n    // Indicate that we've started a backup\n    touch(globals.startFile);\n    // Remove the error and success flags since we are just starting\n    untouch(globals.errorFile);\n    untouch(globals.successFile);\n    // Run rsync\n    let exitCode = await executeRsync();\n    if(exitCode != 0) {\n        // Failed!\n        touch(globals.errorFile);\n    }\n    else {\n        // We succeeded!!\n        touch(globals.successFile);\n    }\n    // We're all done, unlock the lock file\n    lockFile.unlockSync(globals.lockFile);\n}\n\n/**\n * Stops the backup process, if it's running\n */\nfunction stopBackup() {\n    console.log('STOP BACKUP!');\n}\n\n/**\n * Returns BitBar-friendly status of the backup.  This is the default when no\n * arguments are passed to the script.\n */\nfunction defaultOutput() {\n    const formattedFileDate = !globals.backupDate ? 'never' : formatDate(globals.backupDate);\n    const formattedNextBackupDate = !globals.nextScheduledBackup ? 'never' : formatDate(globals.nextScheduledBackup);\n    const backupDurationInMinutes = (globals.backupDuration / 60000).toFixed(2);\n\n    // If lockfile exists, we're running\n    if(globals.backupStatus == BackupStatus.Running) {\n        bitbar([\n            bitbarHeaders.backupRunning,\n            bitbar.separator,\n            { text: `Backup running...` },\n            { text: `Started at ${formattedFileDate}` },\n            { text: `Running for ${backupDurationInMinutes}` },\n            bitbar.separator,\n            bitbarActions.stopBackup\n        ]);\n    }\n    // If error file exists, something is wrong\n    else if(globals.backupStatus == BackupStatus.Failed) {\n        bitbar([\n            bitbarHeaders.backupError,\n            bitbar.separator,\n            { text: `Backup failed!` },\n            { text: `Started at ${formattedFileDate}` },\n            { text: `Ran for ${backupDurationInMinutes} minutes` },\n            { text: `Next backup at ${formattedNextBackupDate}` },\n            bitbar.separator,\n            bitbarActions.configure,\n            bitbarActions.viewLog,\n            bitbarActions.viewErrorLog,\n        ]);\n    }\n    // If success file exists, the last backup succeeded\n    else if (globals.backupStatus == BackupStatus.Succeeded) {\n        bitbar([\n            bitbarHeaders.backupSuccess,\n            bitbar.separator,\n            { text: `Backup succeeded!` },\n            { text: `Started at ${formattedFileDate}` },\n            { text: `Ran for ${backupDurationInMinutes} minutes` },\n            { text: `Next backup at ${formattedNextBackupDate}` },\n            bitbar.separator,\n            bitbarActions.configure,\n            bitbarActions.viewLog\n        ]);\n    }\n    // Otherwise, we don't have any status (i.e. backup has never been run)\n    else {\n        bitbar([\n            bitbarHeaders.backupNoStatus,\n            bitbar.separator,\n            { text: `Next backup at ${formattedNextBackupDate} minutes` },\n            bitbar.separator,\n            bitbarActions.configure\n        ]);        \n    }\n\n    // Always show run/configuration error if we're in any status other that running\n    if (globals.backupStatus != BackupStatus.Running) {\n        if(!globals.configuration) {\n            bitbar([bitbarItems.configurationError]);\n        }\n        else {\n            bitbar([bitbarActions.dryRun]);\n            bitbar([bitbarActions.startBackup]);\n        }\n    }\n}\n\n/**\n * Run the actual rsync program with the configured arguments\n */\nasync function executeRsync() {\n    const subProcess = execa(globals.configuration.rsyncPath, globals.rsyncArgs, {});\n\n    // If not dry run, send output to log files.  Otherwise output will just\n    // go to terminal.\n    if(!globals.args.dryRun) {\n        // Create our error and output logs\n        const errStream = fs.createWriteStream(globals.errorLogFile);\n        const outStream = fs.createWriteStream(globals.logFile);\n        // We don't want any output from rsync (spit out to our respective files)\n        subProcess.stderr.pipe(errStream);\n        subProcess.stdout.pipe(outStream);\n    } else {\n        // We're interactive dry run, send output to parent process\n        subProcess.stderr.pipe(process.stderr);\n        subProcess.stdout.pipe(process.stdout);\n    }\n\n    return (await subProcess).exitCode;\n}\n\n/**\n * Create the folder if it doesn't exist\n * @param {*} folderPath \n */\nasync function createFolderIfNeeded(folderPath) {\n    if(!fs.existsSync(folderPath)) {\n        await mkdirp(folderPath);\n    }\n}\n\n/**\n * Creates the specified file with default content, if it doesn't exist.\n * @param {string} filePath \n * @param {string} defaultContent \n */\nfunction createFileIfNeeded(filePath, defaultContent) {\n    if(!fs.existsSync(filePath)) {\n        fs.writeFileSync(filePath, defaultContent);\n    }\n}\n\n/**\n * Sets the date/time of when the next backup should take place\n * based on the configuration and status.\n */\nfunction getNextScheduledBackup() {\n    let now = new Date();\n    let frequencyInMinutes = getFrequencyInMinutes(globals.configuration.frequency);\n\n    // If we haven't done a backup before, schedule it for now!\n    if(!globals.backupDate) {\n        globals.nextScheduledBackup = now;\n    }\n    // If there's no frequency, assume it's manual\n    else if(!frequencyInMinutes) {\n        globals.nextScheduledBackup = null;\n    }\n    else {\n        // Get the date/time for the next scheduled backup\n        globals.nextScheduledBackup = moment(globals.backupDate).add(frequencyInMinutes, 'minutes').toDate();\n        // If next scheduled backup is in the past, set it to happen now\n        if(globals.nextScheduledBackup.getTime() \u003c now.getTime()) {\n            globals.nextScheduledBackup = now;\n        }\n    }\n}\n\n\n\n/**\n * Starts an instance of the backup if we are scheduled to do so\n * @returns {boolean} True if backup started, otherwise false.\n */\nfunction startBackupIfScheduled() {\n    let now = new Date();\n    // If the time has come!\n    if(globals.nextScheduledBackup \u0026\u0026 globals.nextScheduledBackup.getTime() \u003c= now) {\n        // Execute ourselves with the \"--start\" parameter so we start the backup\n        // but don't wait for the process to finish.\n        const subProcess = execa(__filename, ['--start'], {\n            detached: true,\n            cleanup: false\n        });\n\n        subProcess.unref();\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Retrieve and store information related to the last successful, failed or in-progress backup\n */\nfunction getBackupStatus() {\n    let now = new Date();\n    // Only get modify date for startFile if the file exists\n    if(fs.existsSync(globals.startFile)) {\n        globals.backupDate = getFileDate(globals.startFile);\n    }\n    // If no start file exists, then should assume we never did a backup\n    else {\n        return;\n    }\n\n    // If a lockfile exists, then our backup is currently running\n    if(fs.existsSync(globals.lockFile)) { \n        // Duration is start of backup to now\n        globals.backupStatus = BackupStatus.Running;\n        globals.backupDuration = moment(now).diff(globals.backupDate);\n    }\n    // Else if error file exists, our last backup failed\n    else if(fs.existsSync(globals.errorFile)) {\n        // Duration is start of backup to date/time of error file\n        let errorFileDate = getFileDate(globals.errorFile);\n        globals.backupStatus = BackupStatus.Failed;\n        globals.backupDuration = moment(errorFileDate).diff(globals.backupDate);\n    }\n    // Else if success file exists, our last backup succeeded\n    else if(fs.existsSync(globals.successFile)) {\n        // Duration is start of backup to date/time of error file\n        let successFileDate = getFileDate(globals.successFile);\n        globals.backupStatus = BackupStatus.Succeeded;\n        globals.backupDuration = moment(successFileDate).diff(globals.backupDate);\n    }\n\n    // Else, we're in an unknown state (don't set any status)\n}\n\n/**\n * Loads and verifies \n */\nfunction loadConfiguration() {\n    let content = fs.readFileSync(globals.configFile).toString();\n    let configuration = {};\n    try {\n        configuration = jsonc.parse(content);\n    } catch(e) {\n        globals.configurationError = 'Error parsing configuration file';\n        return;\n    }\n\n    // By default, no error\n    let error = null;\n    \n    // If rsync path is bad\n    if(!configuration.rsyncPath || !fs.existsSync(configuration.rsyncPath)) {\n        error = 'rsyncPath is invalid or file does not exist';\n    }\n    // If frequency isn't specified, or it's not a valid frequency\n    else if(!configuration.frequency || !(configuration.frequency === 'manual' || getFrequencyInMinutes(configuration.frequency))) {\n        error = 'frequency is invalid';\n    }\n    // Must have a valid source \n    else if(!configuration.source) {\n        error = 'source must be set';\n    }\n    // Must have a valid destination\n    else if(!configuration.destination) {\n        error = 'destination must be set';\n    }\n    // Check whether our rsync arguments is a legit string array\n    else if(!configuration.rsyncAdditionalArguments ||\n        !Array.isArray(configuration.rsyncAdditionalArguments) ||\n        !configuration.rsyncAdditionalArguments.reduce((prev, curr) =\u003e typeof prev === 'string' || typeof curr === 'string')) {\n        error = 'rsyncAdditionalArguments is invalid'\n    }\n\n    if(error) {\n        // Just save the error that we got\n        globals.configurationError = error;\n    }\n    else {\n        // Config is good, let's save it as our actual config\n        globals.configuration = configuration;\n    }\n}\n\n/**\n * Parses a frequency string into number of minutes\n * @param {string} frequency \n */\nfunction getFrequencyInMinutes(frequency) {\n    let values = frequency.match(/^\\s*(\\d*)\\s*([sSmMhHdD])\\s*$/);\n    // If frequency was in a valid format\n    if(values) {\n        let unit = values[2].toLowerCase();\n        let value = values[1];\n        switch(unit) {\n            case 's':\n                return value / 60;\n            case 'm':\n                return value;\n            case 'h':\n                return value * 60;\n            case 'd':\n                return value * 1440;\n        }\n    }\n\n    return null;\n}\n\n/**\n * Gets the last time the specified file was modified.\n * @param {string} filePath \n */\nfunction getFileDate(filePath) {\n    const { mtime } = fs.statSync(filePath);\n    return mtime;\n}\n\n/**\n * Formats specified to display as \"M/D/YY h:mm AM/PM\"\n * @param {Date} fileDate \n */\nfunction formatDate(fileDate) {\n    return moment(fileDate).format('M/D/YY h:mm A');\n}\n\n/**\n * Returns a full path and file using the configured backup path ()\n * @param {string} fileName \n */\nfunction getBackupPath(fileName) {\n    return untildify(path.join(constants.WORKINGFOLDER, fileName));\n}\n\n/**\n * Creates an empty file and/or updates the modified date.\n * @param {string} filePath \n */\nfunction touch(filePath) {\n    fs.closeSync(fs.openSync(filePath, 'w'));\n}\n\n/**\n * Removes the file if it exists.\n * @param {string} filePath \n */\nfunction untouch(filePath) {\n    if(fs.existsSync(filePath)) {\n        fs.unlinkSync(filePath);\n    }\n}\n\n// START HERE\n(async () =\u003e {\n    await init();\n\n    if(globals.args.start) {\n        await startBackup();\n    }\n    else if(globals.args.stop) {\n        stopBackup();\n    }\n    else {\n        let isBackupStarted = startBackupIfScheduled();\n        defaultOutput();\n        if(isBackupStarted) {\n            // If we started a backup, we want to kill our process.  Otherwise\n            // it will wait for the other backup process that we started, which\n            // we don't want (so status gets reported back right away).\n            process.exit(0);\n        }\n    }\n})();"
				}
			],
			"path": "Tools/rsyncbackup.js",
			"filename": "rsyncbackup.js",
			"dir": "Tools",
			"docsPlugin": "Tools/rsyncbackup.js.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "RSync Backup Bitbar Plugin",
			"version": "v1.0",
			"author": "Gregory S. Read",
			"authors": [
				{
					"name": "Gregory S. Read",
					"githubUsername": "readgs",
					"imageURL": "https://avatars.githubusercontent.com/u/18175637?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Schedule and monitor rsync backups via BitBar",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"node npm/path npm/untildify npm/yargs npm/bitbar npm/mkdirp npm/jsonc npm/lockfile npm/execa npm/moment"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.733974Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/screen.2m.sh",
					"filename": "screen.2m.sh",
					"content": "#!/usr/bin/env bash\n#\n# \u003cbitbar.title\u003eScreen\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJake Gage\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eDispader\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eMonitor, attach, and power detach from GNU Screen sessions.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003escreen\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttps://user-images.githubusercontent.com/2664155/54407949-f5490280-46ad-11e9-86fc-9856d64b5a0e.png\u003c/bitbar.image\u003e\n# \u003cbitbar.abouturl\u003ehttp://github.com/Dispader/screen-bitbar-plugin\u003c/bitbar.abouturl\n\nset -eu\nPATH=\"/usr/local/bin:$PATH\" SCREEN_COMMAND=$(command -v screen)\necho \"💻\"\necho '---'\nSCREENS=$(${SCREEN_COMMAND} -list | grep -o '\\s*.*\\s*(.*)')\nif [[ -z ${SCREENS} ]] || [[ ${SCREENS} =~ ^.*empty.*$ ]]; then\n  echo \"new screen session | refresh=true bash=${SCREEN_COMMAND}\";\nelse\n  (\n    IFS=$'\\n'; for LINE in $(screen -list); do\n      if [[ ${LINE} =~ ^[[:space:]]+[[:digit:]]+\\.(.+)[[:space:]]+(\\(.*\\))$ ]]\n      then\n        SCREEN_SESSION=${BASH_REMATCH[1]}\n        SCREEN_SESSION_STATUS=${BASH_REMATCH[2]}\n        if [[ \"${SCREEN_SESSION_STATUS}\" == \"(Detached)\" ]]\n        then\n          echo \"⚫ ${SCREEN_SESSION} ${SCREEN_SESSION_STATUS} | refresh=true bash=${SCREEN_COMMAND} param1=-R param2=${SCREEN_SESSION}\"\n        else\n          echo \"🔵 ${SCREEN_SESSION} ${SCREEN_SESSION_STATUS}\"\n          echo \"-- power detach | terminal=false refresh=true bash=${SCREEN_COMMAND} param1=-D param2=${SCREEN_SESSION} \"\n        fi\n      fi\n    done\n  )\nfi\n"
				}
			],
			"path": "Tools/screen.2m.sh",
			"filename": "screen.2m.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/screen.2m.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Screen",
			"version": "v1.0",
			"author": "Jake Gage",
			"authors": [
				{
					"name": "Jake Gage",
					"githubUsername": "Dispader",
					"imageURL": "https://avatars.githubusercontent.com/u/2664155?v=4",
					"bio": "adj. [predicative]\r\nAll right; satisfactory\r\n‘everything was jake again’",
					"primary": true
				}
			],
			"desc": "Monitor, attach, and power detach from GNU Screen sessions.",
			"imageURL": "https://user-images.githubusercontent.com/2664155/54407949-f5490280-46ad-11e9-86fc-9856d64b5a0e.png",
			"dependencies": [
				"screen"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.851431Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/sensibo.60s.sh",
					"filename": "sensibo.60s.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eSensibo QuickControl\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMadalin Tache\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eniladam\u003c/bitbar.author.github\u003e\n# \u003cbitbar.dependencies\u003ejq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.desc\u003eProvides Sensibo pods (sky v2) status (temperature, humidity, swing and fan) in your menubar allowing you to quickly turn/schedule them on or off\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/PyEYqGK.png\u003c/bitbar.image\u003e\n#\n#\n# This plugin uses some undocumented Sensibo API functionality\n# shamefully borrowed from their web interface.\n#\n# @Thanks to Omer Enbar (@omere2) for the timer and scheduler (undocumented)\n# info :)\n#\n# This plugin also uses some code from the plugin Network Info bitbar\n# plugin by Raymond Kuiper (https://github.com/matryer/bitbar-plugins/blob/master/Network/netinfo.60s.sh)\n#\n\n\n#####################################################################################\n# Your Sensibo API Key - get or generate on from https://home.sensibo.com/me/api    #\n#####################################################################################\nAPI_KEY=\"\"\n\n######################################################################################\n# STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP !#\n#                                                                                    #\n#               STOP EDITING HERE UNLESS YOU KNOW WHAT YOU'RE DOING :)               #\n#                                                                                    #\n# STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP ! STOP !#\n######################################################################################\n\n# Checks if the API_KEY has been set.\nif [ -z \"$API_KEY\" ]; then\n    echo \"SENSIBO | color=#3e8fcc image=iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAl1JREFUOBFlU01rE1EUPfNlMhNrm69qv01FdEKFCCqo0IUIddmNiC6KP0HonxChdlH/ggsXbtxYXBbsQkWhlrrQagalBKNpapxMMp/e+9KZJngXw7x3zz333PPek+ZX30XoC17oMrDvR3jbDaHSunJMRk6T4ISA1IflX4IeRa9Ywsd2IBKbi6exsVhCmlAfaI+JB7r1E3AiRYBXfz3cmTDwfMnEVXMUl87m8WypjPtTGcr5AtNPkijg4m3qslbJ4dHdMiYKGSHtwHZRHE7j4b0ynlzMCwxj40h+FUlCzQsxndehqTL8gAamMNIqvtdtyJQvFXTU3BCMjUMQsKQgjHAupWD9UwMd14eqyIiiCEZKhesHsDseNncPUCRDQ9qPxxAEzOfSziRpe1rr4Ee9LRqEPRE4YWh4vVPHTqOLM0RAQpPTSEZgRk2W8IckblWbgiBGjY7o2PjcxPuWh+OKhENegUkIWIVPY8zSmb2xWvB8mpUIeTQe58rMECy+F7QXy2eGAQI7iDCXUXHjfBY/m47oEH8uzIxgjEZ0ifDIwkOCnnzAouHMbArXzSJajidq2X2O8YKB22O6UEE2JCqEAoaoBNyj+a/NDiOja0hpinCe6/lIeb1g5rDbDcQxxiqSEXw6mnGi/vbLoblDTBUzcAjMwR6wJxblTmmy8EUkOBf/kD8o6woebDVQ3e9i+VYJJ7O6SO/9bmPl5Vc8tmzcHFLB2FiB1P8a2QudXN52fExSp5WFaeH68rqFL1RVMVR6kYMmJgq4FbMyYI6UNOk5z7+oitt4mW5oxVD+K+aafyol6OP5jf33AAAAAElFTkSuQmCC\"\n    echo \"---\"\n    echo \" NO API KEY PROVIDED | color=red\"\n    echo \"🔄 Refresh | color=green refresh=true size=15\"\n    exit;\nfi\n\n# Generate the PODS URL based on API_KEY.\nPODS_URL=\"https://home.sensibo.com/api/v2/users/me/pods?apiKey=$API_KEY\"\n\n# Get a list of available pods.\nPODS=$(curl -4 --connect-timeout 3 -s \"$PODS_URL\" | /usr/local/bin/jq -r '.result[].id' || echo No pods available)\n\nif [[ -z \"$PODS\" || \"$PODS\" = \"No pods available\" ]]; then\n    echo \"SENSIBO | color=#3e8fcc image=iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAl1JREFUOBFlU01rE1EUPfNlMhNrm69qv01FdEKFCCqo0IUIddmNiC6KP0HonxChdlH/ggsXbtxYXBbsQkWhlrrQagalBKNpapxMMp/e+9KZJngXw7x3zz333PPek+ZX30XoC17oMrDvR3jbDaHSunJMRk6T4ISA1IflX4IeRa9Ywsd2IBKbi6exsVhCmlAfaI+JB7r1E3AiRYBXfz3cmTDwfMnEVXMUl87m8WypjPtTGcr5AtNPkijg4m3qslbJ4dHdMiYKGSHtwHZRHE7j4b0ynlzMCwxj40h+FUlCzQsxndehqTL8gAamMNIqvtdtyJQvFXTU3BCMjUMQsKQgjHAupWD9UwMd14eqyIiiCEZKhesHsDseNncPUCRDQ9qPxxAEzOfSziRpe1rr4Ee9LRqEPRE4YWh4vVPHTqOLM0RAQpPTSEZgRk2W8IckblWbgiBGjY7o2PjcxPuWh+OKhENegUkIWIVPY8zSmb2xWvB8mpUIeTQe58rMECy+F7QXy2eGAQI7iDCXUXHjfBY/m47oEH8uzIxgjEZ0ifDIwkOCnnzAouHMbArXzSJajidq2X2O8YKB22O6UEE2JCqEAoaoBNyj+a/NDiOja0hpinCe6/lIeb1g5rDbDcQxxiqSEXw6mnGi/vbLoblDTBUzcAjMwR6wJxblTmmy8EUkOBf/kD8o6woebDVQ3e9i+VYJJ7O6SO/9bmPl5Vc8tmzcHFLB2FiB1P8a2QudXN52fExSp5WFaeH68rqFL1RVMVR6kYMmJgq4FbMyYI6UNOk5z7+oitt4mW5oxVD+K+aafyol6OP5jf33AAAAAElFTkSuQmCC\"\n    echo \"---\"\n    echo \" NO PODS DETECTED | color=red\"\n    echo \"🔄 Refresh | color=green refresh=true size=15\"\n    exit;\nfi\n\n# Show a notification\nnotify () {\n    osascript -e \"display notification \\\"$1\\\" with title \\\"Sensibo BitBar\\\"\"\n}\n\n# Function to turn on specific POD\nturnon () {\n    POD_DATA=$(curl -4 --connect-timeout 3 -s \"https://home.sensibo.com/api/v2/pods/$1/acStates?apiKey=$API_KEY\u0026limit=1\" || echo No Data Available)\n    POD_AC_STATE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.on')\n    POD_TEMPERATURE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.targetTemperature')\n    POD_TEMPERATURE_UNIT=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.temperatureUnit')\n    POD_MODE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.mode')\n    POD_SWING=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.swing')\n    POD_FAN=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.fanLevel')\n    CURRENTSTATE='{\"currentAcState\":{\"on\":false,\"fanLevel\":\"'${POD_FAN}'\",\"temperatureUnit\":\"'${POD_TEMPERATURE_UNIT}'\",\"targetTemperature\":'${POD_TEMPERATURE}',\"mode\":\"'${POD_MODE}'\",\"swing\":\"'${POD_SWING}'\"},\"newValue\":true}'\n    curl -X PATCH \"https://home.sensibo.com/api/v2/pods/$1/acStates/on?apiKey=$API_KEY\" -d \"$CURRENTSTATE\"\n}\n\n# Function to turn off specific POD\nturnoff () {\n    POD_DATA=$(curl -4 --connect-timeout 3 -s \"https://home.sensibo.com/api/v2/pods/$1/acStates?apiKey=$API_KEY\u0026limit=1\" || echo No Data Available)\n    POD_AC_STATE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.on')\n    POD_TEMPERATURE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.targetTemperature')\n    POD_TEMPERATURE_UNIT=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.temperatureUnit')\n    POD_MODE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.mode')\n    POD_SWING=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.swing')\n    POD_FAN=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.fanLevel')\n    CURRENTSTATE='{\"currentAcState\":{\"on\":true,\"fanLevel\":\"'${POD_FAN}'\",\"temperatureUnit\":\"'${POD_TEMPERATURE_UNIT}'\",\"targetTemperature\":'${POD_TEMPERATURE}',\"mode\":\"'${POD_MODE}'\",\"swing\":\"'${POD_SWING}'\"},\"newValue\":false}'\n    curl -X PATCH \"https://home.sensibo.com/api/v2/pods/$1/acStates/on?apiKey=$API_KEY\" -d \"$CURRENTSTATE\"\n}\n\n# Function to start the pod for specified minutes.\nstartForMinutes () {\n    POD_DATA=$(curl -4 --connect-timeout 3 -s \"https://home.sensibo.com/api/v2/pods/$1/acStates?apiKey=$API_KEY\u0026limit=1\" || echo No Data Available)\n    POD_AC_STATE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.on')\n    POD_TEMPERATURE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.targetTemperature')\n    POD_TEMPERATURE_UNIT=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.temperatureUnit')\n    POD_MODE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.mode')\n    POD_SWING=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.swing')\n    POD_FAN=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.fanLevel')\n    CURRENTSTATE='{\"on\":false,\"fanLevel\":\"'${POD_FAN}'\",\"temperatureUnit\":\"'${POD_TEMPERATURE_UNIT}'\",\"targetTemperature\":'${POD_TEMPERATURE}',\"mode\":\"'${POD_MODE}'\",\"swing\":\"'${POD_SWING}'\"}'\n    TIMER='{\"minutesFromNow\": '${2}', \"acState\": '${CURRENTSTATE}'}'\n    curl -X PUT \"https://home.sensibo.com/api/v1/pods/$1/timer?apiKey=$API_KEY\" -d \"$TIMER\"\n}\n\n# Function to stop the pod after specified minutes.\nstopAfterMinutes () {\n    POD_DATA=$(curl -4 --connect-timeout 3 -s \"https://home.sensibo.com/api/v2/pods/$1/acStates?apiKey=$API_KEY\u0026limit=1\" || echo No Data Available)\n    POD_AC_STATE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.on')\n    POD_TEMPERATURE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.targetTemperature')\n    POD_TEMPERATURE_UNIT=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.temperatureUnit')\n    POD_MODE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.mode')\n    POD_SWING=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.swing')\n    POD_FAN=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result[].acState.fanLevel')\n    CURRENTSTATE='{\"on\":false,\"fanLevel\":\"'${POD_FAN}'\",\"temperatureUnit\":\"'${POD_TEMPERATURE_UNIT}'\",\"targetTemperature\":'${POD_TEMPERATURE}',\"mode\":\"'${POD_MODE}'\",\"swing\":\"'${POD_SWING}'\"}'\n    TIMER='{\"minutesFromNow\": '${2}', \"acState\": '${CURRENTSTATE}'}'\n    curl -X PUT \"https://home.sensibo.com/api/v1/pods/$1/timer?apiKey=$API_KEY\" -d \"$TIMER\"\n}\n\n# Function to turn climate react ON\nturnClimateReactON () {\n    ENABLE_CLIMATE_REACT='{\"enabled\": \"true\"}'\n    curl -X PUT \"https://home.sensibo.com/api/v2/pods/$1/smartmode/?apiKey=$API_KEY\" -d \"$ENABLE_CLIMATE_REACT\"\n}\n\n# Function to turn climate react OFF\nturnClimateReactOFF () {\n    DISABLE_CLIMATE_REACT='{\"enabled\": \"false\"}'\n    curl -X PUT \"https://home.sensibo.com/api/v2/pods/$1/smartmode/?apiKey=$API_KEY\" -d \"$DISABLE_CLIMATE_REACT\"\n}\n\n\n# Input duration\n# @TODO: maybe in a future version.\n# askForDuration () {\n#     DURATION=$(osascript -e 'set T to text returned of (display dialog \"Duration in minutes (default: 5, numbers only)?\" buttons {\"Cancel\", \"OK\"} default button \"OK\" default answer \"5\")')\n#     if [ $DURATION -eq $DURATION 2\u003e/dev/null -o $DURATION -eq 0 2\u003e/dev/null ]; then\n#         turnon \"$2\"\n#         startForMinutes \"$2\" \"$DURATION\"\n#         notify \"Turned ON $3 for $4 minutes\"\n#         # notify \"Turned ON $3 for $DURATION minutes\"\n#         exit 0\n#     else\n#         DURATION=$(osascript -e 'set T to text returned of (display dialog \"Duration in minutes (default: 5, numbers only)?\" buttons {\"Cancel\", \"OK\"} default button \"OK\" default answer \"5\")')\n#     fi\n# }\n\n# If called with turnoff, turn off the specified pod.\nif [ \"$1\" = \"turnoff\" ]; then\n    turnoff \"$2\"\n    notify \"Turned OFF $3\"\n    exit 0\nfi\n\n# If called with turnon, turn on the specified pod.\nif [ \"$1\" = \"turnon\" ]; then\n    turnon \"$2\"\n    notify \"Turned ON $3\"\n    exit 0\nfi\n\n# If called with timerOn, turn ON the specified pod for specified minutes\nif [ \"$1\" = \"timerOn\" ]; then\n    turnon \"$2\"\n    startForMinutes \"$2\" \"$4\"\n    notify \"Turned ON $3 for $4 minutes\"\n    exit 0\nfi\n\n# If called with timerOff, turn OFF the specified pod for specified minutes\nif [ \"$1\" = \"timerOff\" ]; then\n    stopAfterMinutes \"$2\" \"$4\"\n    notify \"Turning OFF $3 in $4 minutes\"\n    exit 0\nfi\n\n# If called with turnClimateReactON, turn ON Climate React for the specified pod\nif [ \"$1\" = \"climatereacton\" ]; then\n    turnClimateReactON \"$2\"\n    notify \"Turned Climate React ON for $3\"\n    exit 0\nfi\n\n# If called with turnClimateReactOFF, turn OFF Climate React for the specified pod\nif [ \"$1\" = \"climatereactoff\" ]; then\n    turnClimateReactOFF \"$2\"\n    notify \"Turned Climate React OFF for $3\"\n    exit 0\nfi\n\n\n\n# If called with enterDuration, show dialogue and notify.\n# @TODO: maybe in a future version.\n# if [ \"$1\" = \"enterDuration\" ]; then\n#     askForDuration\n#     exit 0\n# fi\n\n# Menubar Title (blue color, with Sensibo Logo)\necho \"SENSIBO | color=#3e8fcc image=iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAAAl1JREFUOBFlU01rE1EUPfNlMhNrm69qv01FdEKFCCqo0IUIddmNiC6KP0HonxChdlH/ggsXbtxYXBbsQkWhlrrQagalBKNpapxMMp/e+9KZJngXw7x3zz333PPek+ZX30XoC17oMrDvR3jbDaHSunJMRk6T4ISA1IflX4IeRa9Ywsd2IBKbi6exsVhCmlAfaI+JB7r1E3AiRYBXfz3cmTDwfMnEVXMUl87m8WypjPtTGcr5AtNPkijg4m3qslbJ4dHdMiYKGSHtwHZRHE7j4b0ynlzMCwxj40h+FUlCzQsxndehqTL8gAamMNIqvtdtyJQvFXTU3BCMjUMQsKQgjHAupWD9UwMd14eqyIiiCEZKhesHsDseNncPUCRDQ9qPxxAEzOfSziRpe1rr4Ee9LRqEPRE4YWh4vVPHTqOLM0RAQpPTSEZgRk2W8IckblWbgiBGjY7o2PjcxPuWh+OKhENegUkIWIVPY8zSmb2xWvB8mpUIeTQe58rMECy+F7QXy2eGAQI7iDCXUXHjfBY/m47oEH8uzIxgjEZ0ifDIwkOCnnzAouHMbArXzSJajidq2X2O8YKB22O6UEE2JCqEAoaoBNyj+a/NDiOja0hpinCe6/lIeb1g5rDbDcQxxiqSEXw6mnGi/vbLoblDTBUzcAjMwR6wJxblTmmy8EUkOBf/kD8o6woebDVQ3e9i+VYJJ7O6SO/9bmPl5Vc8tmzcHFLB2FiB1P8a2QudXN52fExSp5WFaeH68rqFL1RVMVR6kYMmJgq4FbMyYI6UNOk5z7+oitt4mW5oxVD+K+aafyol6OP5jf33AAAAAElFTkSuQmCC\"\necho \"---\"\n\n\n# Iterate over the list of pods and generate the values and submenus\nfor podID in $PODS\ndo\n    # Get current POD state and measurements.\n    POD_DATA=$(curl -4 --connect-timeout 3 -s \"https://home.sensibo.com/api/v2/pods/$podID?fields=room,acState,measurements,temperatureUnit,smartMode\u0026apiKey=$API_KEY\" || echo No Data Available)\n    POD_NAME=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result.room.name')\n    # POD_LOC=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result.room.icon')\n    POD_AC_STATE=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result.acState.on')\n    POD_TEMPERATURE_ORIGINAL=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result.measurements.temperature')\n    POD_TEMPERATURE_UNIT=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result.acState.temperatureUnit')\n    POD_HUMIDITY=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result.measurements.humidity')\n    POD_SWING=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result.acState.swing')\n    POD_FAN=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result.acState.fanLevel')\n    POD_CLIMATE_REACT_ENABLED=$(echo \"$POD_DATA\" | /usr/local/bin/jq -r '.result.smartMode.enabled')\n\n    ## If user-defined temperature unit is Fahrenheit, then convert Celsius temperature value to Fahrenheit. If Celsius, keep value obtained from API call as-is.\n    if [ \"$POD_TEMPERATURE_UNIT\" = \"F\" ]; then\n        POD_TEMPERATURE=$(echo \"$POD_TEMPERATURE_ORIGINAL * 1.8 + 32\" | bc)\n    else\n        POD_TEMPERATURE=$POD_TEMPERATURE_ORIGINAL\n    fi\n\n    # If climate react enabled is set to true then relable as ON, else relable as OFF\n    if [ \"$POD_CLIMATE_REACT_ENABLED\" = \"true\" ]; then\n        POD_CLIMATE_REACT_STATUS=\"ON\"\n    else\n        POD_CLIMATE_REACT_STATUS=\"OFF\"\n    fi\n\n    # Pod is turned on.\n    # @TODO: maybe check if theres an error..\n    if [ \"$POD_AC_STATE\" = \"true\" ]; then\n        echo \":white_check_mark: $POD_NAME, $POD_TEMPERATURE °$POD_TEMPERATURE_UNIT 💧 $POD_HUMIDITY% | color=green size=15\"\n        echo \"--SWING: $POD_SWING\"\n        echo \"--FAN: $POD_FAN\"\n        echo \"-- :red_circle: Turn OFF | terminal=false bash='$0' param1=turnoff param2=$podID param3=$POD_NAME refresh=true\"\n        echo \"-- ⏲️ Schedule\"\n        echo \"---- Turn OFF in 5 minutes | terminal=false bash='$0' param1=timerOff param2=$podID param3=$POD_NAME param4=5 refresh=true\"\n        echo \"---- Turn OFF in 10 minutes | terminal=false bash='$0' param1=timerOff param2=$podID param3=$POD_NAME param4=10 refresh=true\"\n        echo \"---- Turn OFF in 15 minutes | terminal=false bash='$0' param1=timerOff param2=$podID param3=$POD_NAME param4=15 refresh=true\"\n        echo \"---- Turn OFF in 30 minutes | terminal=false bash='$0' param1=timerOff param2=$podID param3=$POD_NAME param4=30 refresh=true\"\n        echo \"---- Turn OFF in 60 minutes | terminal=false bash='$0' param1=timerOff param2=$podID param3=$POD_NAME param4=60 refresh=true\"\n        echo \"--Climate React: $POD_CLIMATE_REACT_STATUS\"\n        echo \"---- Turn ON | terminal=false bash='$0' param1=climatereacton param2=$podID param3=$POD_NAME refresh=true\"\n        echo \"---- Turn OFF | terminal=false bash='$0' param1=climatereactoff param2=$podID param3=$POD_NAME refresh=true\"\n\n    else\n        # Pod is turned off or an error has ocurred.\n        echo \":red_circle: $POD_NAME, $POD_TEMPERATURE °$POD_TEMPERATURE_UNIT 💧 $POD_HUMIDITY% | color=red size=15\"\n        echo \"--SWING: $POD_SWING\"\n        echo \"--FAN: $POD_FAN\"\n        echo \"-- :white_check_mark: Turn ON | terminal=false bash='$0' param1=turnon param2=$podID param3=$POD_NAME refresh=true\"\n        echo \"-- ⏲️ Schedule\"\n        echo \"---- Turn ON for 5 minutes | terminal=false bash='$0' param1=timerOn param2=$podID param3=$POD_NAME param4=5 refresh=true\"\n        echo \"---- Turn ON for 10 minutes | terminal=false bash='$0' param1=timerOn param2=$podID param3=$POD_NAME param4=10 refresh=true\"\n        echo \"---- Turn ON for 15 minutes | terminal=false bash='$0' param1=timerOn param2=$podID param3=$POD_NAME param4=15 refresh=true\"\n        echo \"---- Turn ON for 30 minutes | terminal=false bash='$0' param1=timerOn param2=$podID param3=$POD_NAME param4=30 refresh=true\"\n        echo \"---- Turn ON for 60 minutes | terminal=false bash='$0' param1=timerOn param2=$podID param3=$POD_NAME param4=60 refresh=true\"\n        echo \"--Climate React: $POD_CLIMATE_REACT_STATUS\"\n        echo \"---- Turn ON | terminal=false bash='$0' param1=climatereacton param2=$podID param3=$POD_NAME refresh=true\"\n        echo \"---- Turn OFF | terminal=false bash='$0' param1=climatereactoff param2=$podID param3=$POD_NAME refresh=true\"\n        # Maybe in a future version.\n        # echo \"---- Turn ON custom time | terminal=false bash='$0' param1=enterDuration param2=$podID param3=$POD_NAME refresh=true\"\n    fi\ndone\n\necho \"---\"\necho \"🔄 Refresh | color=green refresh=true size=15\"\n\n# Plugin end.\n"
				}
			],
			"path": "Tools/sensibo.60s.sh",
			"filename": "sensibo.60s.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/sensibo.60s.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Sensibo QuickControl",
			"version": "v1.2.2",
			"author": "Madalin Tache",
			"authors": [
				{
					"name": "Madalin Tache",
					"githubUsername": "niladam",
					"imageURL": "https://avatars.githubusercontent.com/u/4151765?v=4",
					"bio": "Father of one. Husband. Developer. Pragmatic dreamer and achiever.",
					"primary": true
				}
			],
			"desc": "Provides Sensibo pods (sky v2) status (temperature, humidity, swing and fan) in your menubar allowing you to quickly turn/schedule them on or off",
			"imageURL": "https://i.imgur.com/PyEYqGK.png",
			"dependencies": [
				"jq"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.867107Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/Slack/slack-multi-teams.1m.rb",
					"filename": "slack-multi-teams.1m.rb",
					"content": "#!/usr/bin/env ruby\n#\n# Slack Mutli-Teams Overview.\n#\n# by Harry Löwen\n#\n# Provides an overview of unread channels, unread messages and channel histories.\n# Features: multiple teams (workspaces) handling,\n# 'mark as read' and 'open in slack' buttons,\n# display all channels or only unread ones.\n#\n# Uses Slack Legacy Token (from now)\n# https://api.slack.com/custom-integrations/legacy-tokens\n#\n# Refresh rate is set to every minute.\n# Because: 180+ lines of code and 4+ requests running per team (one channel, one user)\n# For a simple unread indicator check out: https://github.com/matryer/bitbar-plugins/blob/master/Messenger/slack-unread.1s.py\n#\n# Feel free to customize settings, colors, all-done-messages, etc.\n#\n# metadata\n# \u003cbitbar.title\u003eSlack Multi-Teams Overview\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eHarry Löwen\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eharryloewen\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eProvides an overview of unread channels, unread messages and channel histories.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://drive.google.com/uc?export=preview\u0026id=1vxQ5qr8opWaHhiqFlJZmi0oCOG3ik0uJ\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003cbitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/harryloewen/bitbar-slack-multi-teams/\u003c/bitbar.abouturl\u003e\n\nrequire 'net/http'\nrequire 'open-uri'\nrequire 'json'\n\n# your token(s) please\nTOKENS = [\n  'xoxp-your-slack-token',\n  'xoxp-another-slack-token',\n].freeze\n\n# display all channels or only those with unread messages\nALL_CHANNELS = false\n\n# your default color\nCOLOR = '#696969'.freeze # '#696969' works in darkmode as well\n\n# your random messages if there're no unreads (and if ALL_CHANNELS is set to false)\nALL_DONE_MESSAGES = [\n  \":v: All caught up. | color=#{COLOR}\n    What’s next? | color=#{COLOR}\",\n  \":octopus: All done. | color=#{COLOR}\n    The world is your oyster. | color=#{COLOR}\",\n  \":clap: Everything unread is now read. | color=#{COLOR}\n    You’ve done it. | color=#{COLOR}\",\n  \":boom: Boom. | color=#{COLOR}\n    You’re up to date. | color=#{COLOR}\",\n  \":seedling: Everything’s sorted! | color=#{COLOR}\n    Let’s start something new. | color=#{COLOR}\",\n  \":car: There. | color=#{COLOR}\n    All caught up. | color=#{COLOR}\",\n  \":balloon: There! Caught up. | color=#{COLOR}\n    Set your mind to something new. | color=#{COLOR}\",\n  \":rocket: All done. | color=#{COLOR}\n    The future is yours. | color=#{COLOR}\",\n  \":raised_hands: That’s everything! | color=#{COLOR}\",\n  \":tractor: You’re all read. | color=#{COLOR}\n    Here’s a tractor. | color=#{COLOR}\"\n].freeze\n\n# some helpful methods\ndef load_content(api_method, options = nil)\n  url = \"https://slack.com/api/#{api_method}?token=#{@team[:token]}#{options}\"\n  @content = JSON.parse(open(url).read)\n  return if @content['ok']\n  @output += \"🚫\\n\"\n  @output += \"#{api_method}: #{@content['error']} | color=red\"\nend\n\ndef load_team\n  load_content('team.info')\n  return unless @content['ok']\n  @team[:id] = @content['team']['id']\n  @team[:name] = @content['team']['name']\n  @team.merge!(unreads: 0, users: [], channels: [])\n  @teams \u003c\u003c @team\nend\n\ndef load_channels\n  load_content('users.conversations', '\u0026types=public_channel%2Cprivate_channel%2Cmpim%2Cim')\n  @content['channels'].each do |channel|\n    @team[:channels] \u003c\u003c\n      { id: channel['id'], name: channel['name'], user: channel['user'],\n        is_channel: channel['is_channel'], is_im: channel['is_im'] }\n  end\nend\n\ndef load_users\n  load_content('users.list')\n  @content['members'].each do |user|\n    @team[:users] \u003c\u003c { id: user['id'], name: user['name'] }\n  end\nend\n\ndef find_user(message)\n  return '...' unless message['type'] == 'message'\n  if message['user']\n    '@' + message['user']\n  elsif message['bot_id']\n    if message['attachments']\n      message['attachments'][0]['service_name']\n    else\n      'Bot'\n    end\n  end\nend\n\ndef find_text(message)\n  return '...' unless message['type'] == 'message'\n  if !message['text'].nil? \u0026\u0026 !message['text'].empty?\n    message['text'].tr(\"\\n\", ' ').tr(\"\\r\", ' ')\n  elsif message['attachments']\n    message['attachments'].first['text'].tr(\"\\n\", ' ').tr(\"\\r\", ' ')\n  end\nend\n\ndef handle_messages(channel, red_messages)\n  history = []\n  @content['messages'].each do |message|\n    color = red_messages \u003e 0 ? 'red' : COLOR\n    history \u003c\u003c \"--#{find_user(message)}: #{find_text(message)}|length=90 color=#{color}\\n\"\n    red_messages -= 1\n  end\n  history \u003c\u003c \"\\n-----\\n\"\n  history \u003c\u003c \"--🔗 open in Slack | href=slack://channel?id=#{channel}\u0026team=#{@team[:id]}\\n\"\nend\n\ndef marking_url(channel)\n  timestamp = @content['messages'].first['ts']\n  \"https://slack.com/api/channels.mark?token=#{@team[:token]}\u0026channel=#{channel[:id]}\u0026ts=#{timestamp}\"\nend\n\ndef load_history\n  @team[:channels].each do |channel|\n    method = channel[:is_im] ? 'im.history' : 'channels.history'\n    load_content(method, \"\u0026channel=#{channel[:id]}\u0026count=6\u0026unreads=true\")\n    channel[:unread] = @content['unread_count_display'].to_i\n\n    if channel[:unread] \u003e 0\n      @team[:unreads] += 1\n      channel[:history] = handle_messages(channel[:id], channel[:unread])\n      channel[:history] \u003c\u003c \"--✅ mark as read | bash='/usr/bin/curl' param1='#{marking_url(channel)}' refresh=true terminal=false\\n\"\n    elsif ALL_CHANNELS\n      channel[:history] = handle_messages(channel[:id], channel[:unread])\n    end\n  end\nend\n\n# everything starts here\n@teams = []\n@output = ''\n\nTOKENS.each do |token|\n  @team = { token: token }\n  load_team\nend\n\n@teams.each do |team|\n  @team = team\n  load_channels\n  load_history\n\n  @output += \"\\n---\\n#{@team[:name]}\\n\"\n\n  if @team[:unreads] \u003e 0 || ALL_CHANNELS\n    @team[:channels].each do |channel|\n      next unless channel[:unread] \u003e 0 || ALL_CHANNELS\n      @output += channel[:is_im] ? \"\u003c@#{channel[:user]}\u003e\" : \"##{channel[:name]}\"\n      @output += channel[:unread] \u003e 0 ? \" (#{channel[:unread]})|color=red\\n\" : \"\\n\"\n      channel[:history].each { |message| @output += message.to_s }\n    end\n\n    load_users\n    @team[:users].each do |user|\n      @output = @output.gsub(user[:id], user[:name]).gsub(\"\u003c@#{user[:name]}\u003e\", \"@#{user[:name]}\")\n      @output = @output.gsub('\u003c!channel\u003e', '@channel').gsub('\u003c!here\u003e','@here')\n    end\n  else\n    @output += ALL_DONE_MESSAGES.sample\n  end\nend\n\n@unread_channels = @teams.map { |t| t[:unreads] }.inject(0, :+)\n@unread_channels = '' if @unread_channels.zero?\n\nICON='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'.freeze\n\n# and finally print it!\nputs \"\n#{@unread_channels} | image=#{ICON}\n---\n#{@output}\n---\nSettings\n--Tokens: #{TOKENS.count}\n----Total: #{TOKENS.count}\n----Valid: #{@teams.count} | color=#{@teams.count \u003c TOKENS.count ? 'red' : 'green'}\n----Generate tokens | href=https://api.slack.com/custom-integrations/legacy-tokens\n--Show all channels: #{ALL_CHANNELS} | color=#{ALL_CHANNELS ? 'green' : 'red'}\n---\nRefresh ⟳| refresh=true\n\"\n"
				}
			],
			"path": "Tools/Slack/slack-multi-teams.1m.rb",
			"filename": "slack-multi-teams.1m.rb",
			"dir": "Tools/Slack",
			"docsPlugin": "Tools/Slack/slack-multi-teams.1m.rb.html",
			"docsCategory": "Tools/Slack.html",
			"pathSegments": [
				"Tools",
				"Slack"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/Slack",
					"text": "Slack",
					"isLast": true
				}
			],
			"title": "Slack Multi-Teams Overview",
			"version": "v1.0",
			"author": "Harry Löwen",
			"authors": [
				{
					"name": "Harry Löwen",
					"githubUsername": "harryloewen",
					"imageURL": "https://avatars.githubusercontent.com/u/33319470?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Provides an overview of unread channels, unread messages and channel histories.",
			"imageURL": "https://drive.google.com/uc?export=preview\u0026id=1vxQ5qr8opWaHhiqFlJZmi0oCOG3ik0uJ",
			"dependencies": null,
			"aboutURL": "https://github.com/harryloewen/bitbar-slack-multi-teams/",
			"lastUpdated": "2021-03-08T15:22:07.205451Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/Slack/slack-unread.1s.py",
					"filename": "slack-unread.1s.py",
					"content": "#!/usr/bin/env python\n# coding=utf-8\n#\n# \u003cbitbar.title\u003eSlack Notification\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.2\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emgjo5899\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emgjo5899\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays number of unread Slack messages\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/I3MdNmU.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n# by mgjo5899\n\ntry:\n\timport requests\nexcept ImportError:\n\tprint('You need to `pip install requests`')\n\nimport json\nfrom time import sleep\nfrom threading import Thread\n\n#\n# USER TOKEN\n# You need to modify this part by generating your own tokens\n# https://api.slack.com/custom-integrations/legacy-tokens#legacy_token_generator\n#\ntokens = [\n\t# Replace this line\n\t'xoxp-slack-token-place-holder',\n]\n\nif tokens == ['xoxp-slack-token-place-holder']:\n\timport sys\n\n\tsys.exit('You need to generate a Slack user token and specify it in the \"slack-unread.1s.py\" script. \\nVisit api.slack.com | color=#09f href=https://api.slack.com/custom-integrations/legacy-tokens#legacy_token_generator')\n\ndark_mode = False\n# Build script in terminal\ndebug_mode = False\n\nblank_icon = ' image=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'\ncolor_icon = ' image=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'\nslack_call_command = ' href=slack:'\n\nchannels_list_url = 'https://slack.com/api/channels.list'\nchannels_info_url = 'https://slack.com/api/channels.info'\n\ngroups_list_url = 'https://slack.com/api/groups.list'\ngroups_info_url = 'https://slack.com/api/groups.info'\n\nconversations_list_url = 'https://slack.com/api/conversations.list'\nconversations_info_url = 'https://slack.com/api/im.history'\n\nunread_count = 0\n\n\n# When there are many channels under one Slack group, due to request rate limit per group,\n# some come out with \"ratelimit exceeded error\" returned.\n# So I had to run channel info request as fast as possible for each group\n# ONE TOKEN REPRESENT ONE SLACK GROUP\ndef get_unread_count(url, token, channel_id):\n\tr = requests.get(url + '?token=' + token + '\u0026channel=' + channel_id + '\u0026unreads=true')\n\treturn r\n\ndef get_list(url, scope, scope_type = None):\n\tif debug_mode:\n\t\tprint('get_list: ' + url)\n\n\ttry:\n\t\tr = requests.get(url)\n\n\texcept Exception as e:\n\t\tif debug_mode:\n\t\t\tprint('get_list error')\n\t\t\tprint(e)\n\n\t\treturn\n\n\tresult = json.loads(r.text)[scope]\n\tids = []\n\n\tfor channel in result:\n\t\t# Filter\n\t\tif (\n\t\t\t# Ignore slack user\n\t\t\t'user' in channel and channel['user'] == 'USLACKBOT' or\n\t\t\t# Ignore deleted users\n\t\t\t'is_user_deleted' in channel and channel['is_user_deleted'] == True or\n\t\t\t# Ignore channels that don't have me\n\t\t\t'is_member' in channel and channel['is_member'] != True\n\t\t):\n\t\t\tcontinue\n\n\t\t# Ignore channels for private messages\n\t\tif scope_type == 'user' and not 'user' in channel:\n\t\t\tcontinue\n\n\t\tids.append(channel['id'])\n\n\treturn ids\n\ndef get_channel_unreads(url, token, id, scope = None):\n\tglobal unread_count\n\n\tr = get_unread_count(url, token, id)\n\n\ttry:\n\t\tif scope != None:\n\t\t\tchannel = json.loads(r.text)[scope]\n\t\telse:\n\t\t\tchannel = json.loads(r.text)\n\n\t\t# Only for channels\n\t\tif 'is_member' in channel and channel['is_member'] == False:\n\t\t\treturn\n\n\t\tif 'unread_count_display' in channel.keys():\n\t\t\tunread_count += channel['unread_count_display']\n\n\t\telif 'unread_count' in channel.keys():\n\t\t\tunread_count += channel['unread_count']\n\n\texcept Exception as e:\n\t\tif debug_mode:\n\t\t\tprint('Error: ')\n\t\t\tprint(e)\n\n\t\tsleep(2)\n\t\t\n\t\t\ndef groups(token):\n\tall_threads = []\n\tfor id in get_list(groups_list_url + '?token=' + token + '\u0026exclude_archived=true', 'groups'):\n\t\tif debug_mode:\n\t\t\tprint('Loading groups unreads: %s, id: %s' % (token, id))\n\n\t\tt = Thread(target=get_channel_unreads, args=(groups_info_url, token, id, 'group'))\n\t\tt.start()\n\t\tall_threads.append(t)\n\n\tfor t in all_threads:\n\t\tt.join()\n\n\ndef channels(token):\n\tall_threads = []\n\tfor id in get_list(channels_list_url + '?token=' + token + '\u0026exclude_archived=true', 'channels'):\n\t\tif debug_mode:\n\t\t\tprint('Loading channel unreads: %s, id: %s' % (token, id))\n\n\t\tt = Thread(target=get_channel_unreads, args=(channels_info_url, token, id, 'channel'))\n\t\tt.start()\n\t\tall_threads.append(t)\n\n\tfor t in all_threads:\n\t\tt.join()\n\n\ndef privates(token):\n\tall_threads = []\n\tfor id in get_list(conversations_list_url + '?token=' + token + '\u0026types=public_channel,private_channel,mpim,im', 'channels', 'user'):\n\t\tif debug_mode:\n\t\t\tprint('Loading private channel unreads: %s, id: %s' % (token, id))\n\n\t\tt = Thread(target=get_channel_unreads, args=(conversations_info_url, token, id))\n\t\tt.start()\n\t\tall_threads.append(t)\n\n\tfor t in all_threads:\n\t\tt.join()\n\t\t\n\t\t\nfor token in tokens:\n\tif debug_mode:\n\t\tprint('Processing token: %s' % (token))\n\tg = Thread(target=groups, args=(token,))\n\tc = Thread(target=channels, args=(token,))\n\tp = Thread(target=privates, args=(token,))\n\tg.start()\n\tc.start()\n\tp.start()\n\n\tg.join()\n\tc.join()\n\tp.join()\n\n# THIS IS A SPECIAL FEATURE FOR USERS WITH DARK MENU BAR ENABLED\n# REMOVE COMMENTING OUT TO USE\nif unread_count == 0:\n\tif dark_mode:\n\n\t\tif debug_mode:\n\t\t\tprint('0 - blank_icon')\n\t\telse:\n\t\t\t# Empty white icon\n\t\t\tprint(\" | \" + blank_icon + slack_call_command)\n\n\telse:\n\t\tif debug_mode:\n\t\t\tprint('0 - color_icon')\n\t\telse:\n\t\t\tprint(\" | \" + color_icon + slack_call_command)\n\nelse:\n\tif debug_mode:\n\t\tprint(str(unread_count) + ' - color icon')\n\telse:\n\t\tprint(str(unread_count) + \" | \" + color_icon + slack_call_command)\n"
				}
			],
			"path": "Tools/Slack/slack-unread.1s.py",
			"filename": "slack-unread.1s.py",
			"dir": "Tools/Slack",
			"docsPlugin": "Tools/Slack/slack-unread.1s.py.html",
			"docsCategory": "Tools/Slack.html",
			"pathSegments": [
				"Tools",
				"Slack"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/Slack",
					"text": "Slack",
					"isLast": true
				}
			],
			"title": "Slack Notification",
			"version": "v1.2",
			"author": "mgjo5899",
			"authors": [
				{
					"name": "Joseph",
					"githubUsername": "mgjo5899",
					"imageURL": "https://avatars.githubusercontent.com/u/17048946?v=4",
					"bio": "Listening to Yiruma songs helps me to focus when coding :)",
					"primary": true
				}
			],
			"desc": "Displays number of unread Slack messages",
			"imageURL": "https://i.imgur.com/I3MdNmU.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.318547Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/Slack/slack-status.sh",
					"filename": "slack-status.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eSlack Stuatus\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBen Sehl\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebenjaminsehl\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eChange your status on Slack from the menubar.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eAutocode, Slack\u003c/bitbar.dependencies\u003e\n\n# Sign up for an account at Autocode\n\nif [ -z ${1+x} ]\n  then\n    echo \"| image=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\";\n  else \n    curl -s --request POST \\\n        --url \"https://YOURUSERNAME.api.stdlib.com/slack-status@dev/\" \\\n        --header 'content-type: application/json' \\\n        --data '{\n          \"email\": \"'\"$1\"'\",\n          \"emoji\": \"'\"$2\"'\",\n          \"text\": \"'\"$3\"'\",\n          \"expiration\": \"'\"$4\"'\"\n        }';\nfi\n\n# Configure whatever statuses you want, with your email on slack, the emoji shortcode, the text, and how long you want it to last for\n\necho \"---\"\necho \":hear_no_evil: Focus | bash='$0' param1=you@email.com param2=hear_no_evil param3='Focus mode' param4='in four hours' terminal=false refresh=true\"\necho \":calendar: In a meeting | bash='$0' param1=you@email.com param2=calendar param3='In a meeting' param4='in one hour' terminal=false refresh=true\"\necho \":walking: Taking a break | bash='$0' param1=you@email.com param2=walking param3='Taking a break' param4='in half an hour' terminal=false refresh=true\"\necho \":hamburger: Eating lunch | bash='$0' param1=you@email.com param2=hamburger param3='Eating lunch' param4='in one hour' terminal=false refresh=true\"\necho \":sunglasses: Done for the day | bash='$0' param1=you@email.com param2=sunglasses param3='Done for the day' param4='tomorrow at 8am' terminal=false refresh=true\"\necho \":palm_tree: On vacation  | bash='$0' param1=you@email.com param2=palm_tree param3='On vacation' param4='in one week' terminal=false refresh=true\"\n"
				}
			],
			"path": "Tools/Slack/slack-status.sh",
			"filename": "slack-status.sh",
			"dir": "Tools/Slack",
			"docsPlugin": "Tools/Slack/slack-status.sh.html",
			"docsCategory": "Tools/Slack.html",
			"pathSegments": [
				"Tools",
				"Slack"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/Slack",
					"text": "Slack",
					"isLast": true
				}
			],
			"title": "Slack Stuatus",
			"version": "v1.0",
			"author": "Ben Sehl",
			"authors": [
				{
					"name": "Benjamin Sehl",
					"githubUsername": "benjaminsehl",
					"imageURL": "https://avatars.githubusercontent.com/u/1060770?v=4",
					"bio": "I’m Benjamin Sehl (pronounced /sāl/, like sale or sail) a design strategist and entrepreneur from Toronto, Canada. Find me everywhere @benjaminsehl.",
					"primary": true
				}
			],
			"desc": "Change your status on Slack from the menubar.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"Autocode",
				"Slack"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.223771Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/Slack/slack-team-notifications.1m.js",
					"filename": "slack-team-notifications.1m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n/* jshint esversion: 8 */\n/* jshint asi: true */\n\n// \u003cbitbar.title\u003eSlack Team Notifications\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eBenji Encalada Mora\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003ebenjifs\u003c/bitbar.author.github\u003e\n// \u003cbitbar.image\u003ehttps://i.imgur.com/ORbsRBx.jpg\u003c/bitbar.image\u003e\n// \u003cbitbar.desc\u003eShow notifications for Slack teams and channels with option to mark as read. See https://github.com/benjifs/bitbar-slack-team-notifications for configuration instructions.\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js superagent\u003c/bitbar.dependencies\u003e\n\nconst request = require('superagent');\nconst tokens = require('./.tokens.js');\n\n// CONFIG\n// BITBAR_SLACK_ICON defines which Slack Icon is shown\n// 0 -\u003e Original Slack Icon\n// 1 -\u003e White Slack Icon\n// 2 -\u003e Black Slack Icon\nconst BITBAR_SLACK_ICON = process.env.BitBarDarkMode ? 1 : 2;\n// If MENTIONS_ONLY is true, the count only includes mentions and DMs.\n// If MENTIONS_ONLY is false, the count includes all unread messages.\nconst MENTIONS_ONLY = false;\n// MAX_LENGTH of channel name or user name\nconst MAX_LENGTH = 18;\n// Show `No new notifications` message\nconst SHOW_ZERO_NOTIFICATIONS = true;\n\n// Is Slack.app installed?\nlet SLACK_INSTALLED = true;\nconst { exec } = require('child_process');\nexec('ls /Applications | grep Slack | wc -l', (err, stdout, stderr) =\u003e {\n\tif (!err \u0026\u0026 stdout == 0) {\n\t\tSLACK_INSTALLED = false;\n\t}\n});\n\nconst DEBUG = process.argv.indexOf('--debug') \u003e 0;\nconst SCRIPT = process.argv[1];\n\n// Slack App Credentials\nconst SLACK_OAUTH_AUTHORIZE = 'https://slack.com/oauth/authorize?scope=client\u0026client_id=';\nconst SLACK_CLIENT_ID = '11708641376.684689498789';\n\n// Slack API\nconst SLACK_API = 'https://slack.com/api/';\nconst SLACK_CONVERSATIONS = 'conversations';\nconst SLACK_CHANNELS = 'channels';\nconst SLACK_GROUPS = 'groups';\nconst SLACK_IM = 'im';\nconst SLACK_TEAM = 'team';\nconst SLACK_USERS = 'users';\nconst SLACK_INFO = '.info';\nconst SLACK_LIST = '.list';\nconst SLACK_MARK = '.mark';\nconst SLACK_HISTORY = '.history';\nconst SLACK_AUTH_TEST = 'auth.test';\n\n// ICONS {\n// Original Slack icon (unused)\nconst SLACK_ICON = 'image=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';\n\n// Dark Slack Icon\nconst SLACK_ICON_B = 'image=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';\n\n// White Slack Icon\nconst SLACK_ICON_W = 'image=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'\n// }\n\nlet unread_count = 0;\nconst slack_output = {};\nconst errors = [];\nlet call_log = {};\n\ndebug('Debugging');\n\nif (process.argv.indexOf('--mark') \u003e 0) {\n\tconsole.log('Mark as read');\n\n\tlet token;\n\tfor (let i = 3; i \u003c process.argv.length; i++) {\n\t\tif (process.argv[i].indexOf('--token=') === 0) {\n\t\t\ttoken = process.argv[i].split('=')[1];\n\t\t}\n\t}\n\tif (!token) {\n\t\tconsole.log('Error: Missing token');\n\t\treturn;\n\t}\n\n\tfor (let i = 3; i \u003c process.argv.length; i++) {\n\t\tlet args = process.argv[i].split('=');\n\t\tif (args.length != 2) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ([SLACK_CHANNELS, SLACK_GROUPS, SLACK_IM].indexOf(args[0]) \u003c 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet channels = args[1].split(',');\n\t\tfor (let j in channels) {\n\t\t\tconsole.log('/' + args[0] + SLACK_MARK + ' (' + channels[j] + ')');\n\t\t\tslack_request(SLACK_CONVERSATIONS + SLACK_MARK, {\n\t\t\t\t'token': token,\n\t\t\t\t'channel': channels[j],\n\t\t\t\t'ts': Math.floor(Date.now() / 1000) + '.000000'\n\t\t\t})\n\t\t\t\t.then((body) =\u003e {\n\t\t\t\t\t// console.log('  Success: ' + args[0] + ':' + channels[j]);\n\t\t\t\t});\n\t\t}\n\t}\n\treturn;\n}\n\nfunction debug(message) {\n\treturn DEBUG \u0026\u0026 console.log(message);\n}\n\nfunction slack_request(URL, query) {\n\tdebug('  /' + URL + (query.channel ? ' (' + query.channel + ')' : ''));\n\t// The following is to keep track of how many calls are being made\n\t// for each token to each method. Should help debug the rate limits\n\tif (!call_log[query.token]) {\n\t\tcall_log[query.token] = {};\n\t}\n\tif (!call_log[query.token][URL]) {\n\t\tcall_log[query.token][URL] = 0;\n\t}\n\tcall_log[query.token][URL]++;\n\treturn request\n\t\t.get(SLACK_API + URL)\n\t\t.query(query)\n\t\t.then((res) =\u003e {\n\t\t\tdebug(res.body);\n\t\t\tif (res \u0026\u0026 res.body \u0026\u0026 res.body.ok === true) {\n\t\t\t\treturn Promise.resolve(res.body);\n\t\t\t}\n\t\t\treturn Promise.reject(res.body.error);\n\t\t})\n\t\t.catch((err) =\u003e {\n\t\t\tdebug('ERROR: ' + err);\n\t\t\tdebug('  ' + URL);\n\t\t\tdebug('  ' + JSON.stringify(query));\n\t\t\terrors.push(URL + ': ' + err + ' | color=red');\n\t\t});\n}\n\nfunction output() {\n\tunread_count = unread_count \u003e 10 ? '10+' : unread_count \u003e 0 ? unread_count : '';\n\tconst slack_icon = BITBAR_SLACK_ICON == 2 ? SLACK_ICON_B : BITBAR_SLACK_ICON == 1 ? SLACK_ICON_W : SLACK_ICON;\n\tif (errors.length \u003e 0) {\n\t\tconsole.log('! |color=red ' + slack_icon);\n\t} else {\n\t\tconsole.log(unread_count + ' | ' + slack_icon);\n\t}\n\n\tif (Object.keys(slack_output).length) {\n\t\tfor (let i in slack_output) {\n\t\t\tlet team = slack_output[i];\n\n\t\t\tif (SHOW_ZERO_NOTIFICATIONS || team.notifications.length \u003e 0) {\n\t\t\t\tconsole.log('---');\n\t\t\t\tconsole.log(team.name + ' | size=12');\n\t\t\t}\n\t\t\tif (team.notifications.length \u003e 0) {\n\t\t\t\tfor (let j in team.notifications) {\n\t\t\t\t\tconsole.log(team.notifications[j]);\n\t\t\t\t}\n\t\t\t\tconsole.log('Mark all as read ' +\n\t\t\t\t\t'|bash=' + SCRIPT +\n\t\t\t\t\t' param1=--mark' +\n\t\t\t\t\t' param2=--token=' + team.token +\n\t\t\t\t\t(team.params[SLACK_IM] ? ' param3=' + SLACK_IM + '=' + team.params[SLACK_IM].join() : '') +\n\t\t\t\t\t(team.params[SLACK_GROUPS] ? ' param4=' + SLACK_GROUPS + '=' + team.params[SLACK_GROUPS].join() : '') +\n\t\t\t\t\t(team.params[SLACK_CHANNELS] ? ' param5=' + SLACK_CHANNELS + '=' + team.params[SLACK_CHANNELS].join() : '') +\n\t\t\t\t\t' refresh=true' +\n\t\t\t\t\t' terminal=false');\n\t\t\t} else if (SHOW_ZERO_NOTIFICATIONS) {\n\t\t\t\tconsole.log('No new notifications');\n\t\t\t}\n\t\t}\n\t}\n\tif (errors.length \u003e 0) {\n\t\tconsole.log('---');\n\t\tconsole.log('Errors');\n\t\tfor (let i in errors) {\n\t\t\tconsole.log('--' + errors[i]);\n\t\t}\n\t}\n\tconsole.log('---');\n\tconsole.log('Add New Workspace');\n\tconsole.log('--Generate OAuth Token | href=' + SLACK_OAUTH_AUTHORIZE + SLACK_CLIENT_ID);\n\tdebug(call_log);\n}\n\nfunction channel_output(channel) {\n\tunread_count += channel.count;\n\n\tlet output_str = (channel.is_im ? '@' : '#') + channel.name;\n\tif (output_str.length \u003e MAX_LENGTH) {\n\t\toutput_str = output_str.substring(0, MAX_LENGTH - 1) + '…';\n\t}\n\toutput_str += ' '.repeat(MAX_LENGTH + 2 - output_str.length);\n\toutput_str += (channel.count \u003e 10 ? '10+' : channel.count);\n\n\tlet key = channel.is_im ? SLACK_IM : channel.is_channel ? SLACK_CHANNELS : SLACK_GROUPS;\n\tlet href;\n\tif (SLACK_INSTALLED) {\n\t\thref = 'slack://channel?team=' + channel.team + '\u0026id=' + channel.id;\n\t} else {\n\t\thref = 'https://app.slack.com/client/' + channel.team + '/' + channel.id;\n\t}\n\n\tslack_output[channel.token].notifications.push(output_str + '|font=Menlo size=13 href=' + href);\n\n\tslack_output[channel.token].notifications.push('Mark as read ' +\n\t\t'|alternate=true' +\n\t\t' font=Menlo size=13' +\n\t\t' bash=' + SCRIPT +\n\t\t' param1=--mark' +\n\t\t' param2=--token=' + channel.token +\n\t\t' param3=' + key + '=' + channel.id +\n\t\t' refresh=true' +\n\t\t' terminal=false');\n\n\tif (!slack_output[channel.token].params[key]) {\n\t\tslack_output[channel.token].params[key] = [];\n\t}\n\tslack_output[channel.token].params[key].push(channel.id);\n}\n\nasync function run() {\n\tif (typeof tokens === 'undefined' || !tokens || !tokens.length) {\n\t\terrors.push('Missing Slack Legacy Token | color=red href=https://api.slack.com/custom-integrations/legacy-tokens');\n\t\terrors.push('Generate OAuth Token | color=red href=' + SLACK_OAUTH_AUTHORIZE + SLACK_CLIENT_ID);\n\t\treturn output();\n\t}\n\n\tfor (let i in tokens) {\n\t\tawait get_team_notifications(tokens[i]);\n\t}\n\toutput();\n}\n\nfunction get_team_notifications(token) {\n\treturn get_team_info(token)\n\t\t.then((team) =\u003e {\n\t\t\tif (team) {\n\t\t\t\tslack_output[token] = {\n\t\t\t\t\t'id': team.id,\n\t\t\t\t\t'name': team.name,\n\t\t\t\t\t'token': token,\n\t\t\t\t\t'notifications': [],\n\t\t\t\t\t'params': {},\n\t\t\t\t\t'errors': []\n\t\t\t\t};\n\t\t\t\treturn get_auth_info(token);\n\t\t\t} else {\n\t\t\t\tthrow 'Invalid token';\n\t\t\t}\n\t\t})\n\t\t.then((user_id) =\u003e {\n\t\t\tslack_output[token]['user_id'] = user_id;\n\t\t\treturn get_team_conversations(token);\n\t\t})\n\t\t.then((channels) =\u003e {\n\t\t\treturn check_channels_unread(channels, token);\n\t\t})\n\t\t.then((channels) =\u003e {\n\t\t\tfor (let i in channels) {\n\t\t\t\tif (channels[i]) {\n\t\t\t\t\tchannel_output(channels[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch((errors) =\u003e {\n\t\t\tdebug(errors);\n\t\t})\n}\n\nfunction get_team_info(token) {\n\tdebug('Fetching team info for ' + token);\n\treturn slack_request(SLACK_TEAM + SLACK_INFO, {\n\t\t'token': token\n\t})\n\t\t.then((body) =\u003e {\n\t\t\tif (body \u0026\u0026 body.team) {\n\t\t\t\treturn Promise.resolve(body.team);\n\t\t\t}\n\t\t});\n}\n\nfunction get_auth_info(token) {\n\tdebug('Fetch auth info for ' + token);\n\treturn slack_request(SLACK_AUTH_TEST, {\n\t\t'token': token\n\t}).\n\t\tthen((body) =\u003e {\n\t\t\tif (body \u0026\u0026 body.user_id) {\n\t\t\t\treturn Promise.resolve(body.user_id);\n\t\t\t}\n\t\t});\n}\n\nfunction get_team_conversations(token) {\n\tdebug('Fetching conversations for ' + token);\n\treturn slack_request(SLACK_CONVERSATIONS + SLACK_LIST, {\n\t\t'token': token,\n\t\t'exclude_archived': true,\n\t\t'limit': 200,\n\t\t'types': 'public_channel,private_channel,mpim,im'\n\t})\n\t\t.then((body) =\u003e {\n\t\t\tif (body \u0026\u0026 body.channels) {\n\t\t\t\treturn Promise.resolve(body.channels);\n\t\t\t}\n\t\t});\n}\n\nasync function check_channels_unread(channels, token) {\n\tlet req = [];\n\tfor (let i in channels) {\n\t\tif (channels[i]) {\n\t\t\treq.push(is_channel_unread(channels[i], token));\n\t\t}\n\t}\n\treturn await Promise.all(req);\n}\n\nfunction is_channel_unread(channel, token) {\n\treturn get_unread_count(channel, token)\n\t\t.then((unread_count) =\u003e {\n\t\t\tif (channel \u0026\u0026 unread_count \u003e 0) {\n\t\t\t\tif (channel.is_im) {\n\t\t\t\t\treturn get_user(channel.user, token)\n\t\t\t\t\t\t.then((user) =\u003e {\n\t\t\t\t\t\t\tif (user) {\n\t\t\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\t\t\t'id': channel.id,\n\t\t\t\t\t\t\t\t\t'name': user.name,\n\t\t\t\t\t\t\t\t\t'count': unread_count,\n\t\t\t\t\t\t\t\t\t'team': user.team_id,\n\t\t\t\t\t\t\t\t\t'is_im': true,\n\t\t\t\t\t\t\t\t\t'token': token\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t} else if (channel.is_member || channel.is_group) {\n\t\t\t\t\tlet team = channel.shared_team_ids \u0026\u0026 channel.shared_team_ids.length \u003e 0 ? channel.shared_team_ids[0] : '';\n\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t'id': channel.id,\n\t\t\t\t\t\t'name': channel.name,\n\t\t\t\t\t\t'count': unread_count,\n\t\t\t\t\t\t'team': team,\n\t\t\t\t\t\t'is_channel': channel.is_member \u0026\u0026 channel.is_channel,\n\t\t\t\t\t\t'is_group': channel.is_group || (channel.is_channel \u0026\u0026 channel.is_private),\n\t\t\t\t\t\t'token': token\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n}\n\nfunction get_unread_count(channel, token) {\n\t// unread_count_display is a count of messages that the calling user has\n\t// yet to read that matter to them (this means it excludes things like\n\t// join/leave messages)\n\t// unread_count_display does not show up consistently.\n\t// In the case unread_count_display is not present, check conversations.history\n\tif (channel \u0026\u0026 !('unread_count_display' in channel)) {\n\t\treturn check_conversation_history(channel, token)\n\t\t\t.then((unread_count) =\u003e {\n\t\t\t\treturn Promise.resolve(unread_count);\n\t\t\t})\n\t} else {\n\t\treturn Promise.resolve(channel.unread_count_display);\n\t}\n}\n\nfunction check_conversation_history(channel, token) {\n\tdebug('Fetch history for ' + channel.id);\n\treturn slack_request(SLACK_CONVERSATIONS + SLACK_HISTORY, {\n\t\t'token': token,\n\t\t'channel': channel.id,\n\t\t'oldest': channel.last_read != '0000000000.000000' ? channel.last_read : 0,\n\t\t'unreads': true\n\t})\n\t\t.then((body) =\u003e {\n\t\t\tif (body \u0026\u0026 body.unread_count_display \u003e 0) {\n\t\t\t\tconst user_id = slack_output[token]['user_id'];\n\t\t\t\tif (channel.is_im || channel.is_mpim) {\n\t\t\t\t\treturn Promise.resolve(body.unread_count_display);\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve(count_mentions(body, user_id));\n\t\t\t}\n\t\t\treturn Promise.resolve(0);\n\t\t});\n}\n\nfunction count_mentions(body, user_id) {\n\tif (MENTIONS_ONLY \u0026\u0026 body.messages \u0026\u0026 body.messages.length \u003e 0) {\n\t\tlet count = 0;\n\t\tfor (let i in body.messages) {\n\t\t\tif (i \u003e= body.unread_count_display) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (body.messages[i].text.indexOf(user_id) \u003e= 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\treturn body.unread_count_display;\n}\n\nfunction get_user(user, token) {\n\tdebug('Fetch user info for ' + user);\n\treturn slack_request(SLACK_USERS + SLACK_INFO, {\n\t\t'token': token,\n\t\t'user': user\n\t})\n\t\t.then((body) =\u003e {\n\t\t\tif (body \u0026\u0026 body.user) {\n\t\t\t\treturn Promise.resolve(body.user);\n\t\t\t}\n\t\t});\n}\n\nrun();\n\n"
				}
			],
			"path": "Tools/Slack/slack-team-notifications.1m.js",
			"filename": "slack-team-notifications.1m.js",
			"dir": "Tools/Slack",
			"docsPlugin": "Tools/Slack/slack-team-notifications.1m.js.html",
			"docsCategory": "Tools/Slack.html",
			"pathSegments": [
				"Tools",
				"Slack"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": false
				},
				{
					"path": "Tools/Slack",
					"text": "Slack",
					"isLast": true
				}
			],
			"title": "Slack Team Notifications",
			"version": "v1.1.0",
			"author": "Benji Encalada Mora",
			"authors": [
				{
					"name": "Benji Encalada Mora",
					"githubUsername": "benjifs",
					"imageURL": "https://avatars.githubusercontent.com/u/4167938?v=4",
					"bio": "🇪🇨",
					"primary": true
				}
			],
			"desc": "Show notifications for Slack teams and channels with option to mark as read. See https://github.com/benjifs/bitbar-slack-team-notifications for configuration instructions.",
			"imageURL": "https://i.imgur.com/ORbsRBx.jpg",
			"dependencies": [
				"node.js superagent"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.303048Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/statuspage.1m.rb",
					"filename": "statuspage.1m.rb",
					"content": "#!/usr/bin/env ruby\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eStatusPage.io\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eStephen Yeargin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003estephenyeargin\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow a StatusPage.io's Status in BitBar\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/FsD4zDD.png\u003c/bitbar.image\u003e\n\nrequire 'open-uri'\nrequire 'json'\n\n# BEGIN Configuration #\n\nstatuspage_id = 'YOUR_ID_HERE' # e.g. 4y7j9y37gcns\nurl = \"https://#{statuspage_id}.statuspage.io/api/v2/summary.json\"\n\n# END Configuration #\n\nstatus_map = {\n  operational: {\n    name: 'Operational',\n    color: 'gold'\n  },\n  degraded_performance: {\n    name: 'Degraded Performance',\n    color: 'orange'\n  },\n  partial_outage: {\n    name: 'Partial Outage',\n    color: 'yellow'\n  },\n  major_outage: {\n    name: 'Major Outage',\n    color: 'red'\n  }\n}\n\nbegin\n  raise 'Missing configuration.' if statuspage_id == 'YOUR_ID_HERE'\n\n  summary = JSON.parse(open(url).read)\n\n  puts summary['status']['description']\n  puts '---'\n  puts \"#{summary['page']['name']}|href=#{summary['page']['url']}\"\n  puts summary['status']['description']\n  puts '---'\n  summary['components'].each do |component|\n    next unless component['status'] != 'operational'\n    puts \"#{status_map[component['status'].to_sym][:name]}: \"\\\n      \"#{component['name']}\"\\\n      \"|color=#{status_map[component['status'].to_sym][:color]}\"\n  end\n  puts \"Open: #{summary['page']['url']}|href=#{summary['page']['url']}\"\nrescue StandardError =\u003e e\n  puts 'Unable to load status!|color=red'\n  puts e.message\n  exit 1\nend\n"
				}
			],
			"path": "Tools/statuspage.1m.rb",
			"filename": "statuspage.1m.rb",
			"dir": "Tools",
			"docsPlugin": "Tools/statuspage.1m.rb.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "StatusPage.io",
			"version": "v1.0.0",
			"author": "Stephen Yeargin",
			"authors": [
				{
					"name": "Stephen Yeargin",
					"githubUsername": "stephenyeargin",
					"imageURL": "https://avatars.githubusercontent.com/u/80459?v=4",
					"bio": "Developer at @vanderbilt for the @all-of-us program 🔬; hack on stuff at @websages 🛠 \u0026 @nashvillest 📰; Gets it right after trying every other possible outcome",
					"primary": true
				}
			],
			"desc": "Show a StatusPage.io's Status in BitBar",
			"imageURL": "http://i.imgur.com/FsD4zDD.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.933405Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/todolist.2m.sh",
					"filename": "todolist.2m.sh",
					"content": "#!/bin/sh\n# \u003cbitbar.title\u003eTodo List for menu bar\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJulian Naumann\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eJulianNaumann\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay a todo list in the menu bar with items taken from the macos' Reminders.app from the list called 'Today'. Click the item to complete the reminder and display the next one.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/d4cBUKW.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash,osascript\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/JulianNaumann/bitbar-todolist\u003c/bitbar.abouturl\u003e\n\n# Icon credit, all icons from \u003chttps://www.flaticon.com\u003e:\n# - Bell icon made by Nice And Serious \u003chttps://niceandserious.com\u003e\n# - Todo list icon made by Freepik \u003chttps://www.freepik.com\u003e\n# - Check icon made by Smashicons \u003chttps://smashicons.com\u003e\n\nif [ \"$1\" = \"done\" ]; then\n\tosascript -e \t'tell application \"Reminders\"\n\t\t\t\tset activeReminders to (reminders of list \"Today\" whose completed is false)\n\t\t\t\tset todo to first item of activeReminders\n\t\t\t\ttell todo\n\t\t\t\t\tset completed to true\n\t\t\t\tend tell\n\t\t\tend tell'\nfi\n\nreminder=$(osascript -e 'tell application \"Reminders\"\n\t\t\t\tset activeReminders to (reminders of list \"Today\" whose completed is false)\n\t\t\t\tif activeReminders is not {} then\n\t\t\t\t\treturn name of first item of activeReminders\n\t\t\t\telse\n\t\t\t\t\treturn \"No Todos!\"\n\t\t\t\tend if\n\t\t\tend tell')\n\n# Choose a different icon by uncommenting the appropriate line and commenting out all others:\n# todo list\nimage=iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABYlAAAWJQFJUiTwAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAADs0lEQVRIDbWWW4iNURSAz5mLGeM2TSnXcZkil5SSB28UESGS8ELjlgfxQIkHeUARHlxilFBKKF5mEiajSGZeeCMNRVPzgJLrYI7v+8+/z5zTOWbmhFXfWXvvf+2911p77d1JpFKppCQQ9EH4H3KbRcvcw58k0m0H6UqrxBX0R6iGX/FYMaoE4x9QCuugAsIeUWQleLAankI3nIUJGP2VsIbrvoTWnIUYKIN7oHxLq1S9RrT1tihhTpQ+dBW0w5OcBRjQk/FwA5QtMFQjdHTG/dXxHFPo3EGQs2Hw3qLZBvPhJ+yEOaBEBZVuFv6lBlLxFx0vof+9sGUiETb0+0Aojw2z227YK0bvpvALrIGaeB2LMN9hvYJauAZKPQyOJ/VLYV8Ow2A0tIGF55hF0xYWiQ6XjpFegHlgOs6Dqb2I8Vb0IMj2Vq+9LgMg2C+lfRhMbx3cgpCZkHKGEBY1wmXQCqakAfR0InyF3kT7aTADumLDvfG6FfRfQ6ZKQ4R+12Mvp14ZjZX2FpZBJRhx9nnotfONsIOz+8DCi2hPhZOgmIH8hwND72EzKOEebo6m9POHednOR7MY6/UejsPgOigboaiiyfaLuRtgHnhUryAvpaZqBywEU7cHOqAR4yq030O6aUZiSh0nm8nP2E2mPRcssKPQBI/A9TLXLy8NfFQ0sFiGo+/ACPgMPsaKG/k4D4F32C1Az4YzoLSDAWjj3c483GFDvT0BY2ElHIIHMBI6we9fwQ1DZHr+Cd7DQKK8zMZmaBasov+CvseS2Yx2WvhQqGg2he99aeYbsddrMIwJ9nG/HZ13hnpxDMy/qTkN98FFosVsFxIi8UnDLHpDjfgT7RrGjPwbZM7P+dkd02XflIW2FREt+CeNbSR89wEwwlEM3ESfQrtewaLxw3Yw/17kLfAYnjNxPdpKtQCyozUrA0D7S7Ac9oPj06ElbjvHIHqERb0vtRAe781+pT8J+vO0TcVuJgQ5EM+vZKDg06YXu2AJmIJ9GL4hTU3oNfQLPW1GYsl7Tp3Yej0W055G+whaybkSDoRrYduyN22OfYFImHwztHvTbIZpshEbH4tS2r6hee9o2NAcW5l1sAKOw0MwrXrZl0QLY2sthKJzLPvMe9bA0Ht4F5TweNdrQd9FihLmRIGg8x7vsJjn0QDPwMo7B83gtfBbUcIc60DxfJ2fidTI/NPj4FXaU9AzwCdpN/1qdN45MNaXGIj14H32mFrCPoZOOzpwc290ytq0+me/3lWd6P4NwGhT56kWXgsAAAAASUVORK5CYII=\n\n# bell\n#image=iVBORw0KGgoAAAANSUhEUgAAABoAAAAaCAYAAACpSkzOAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABYlAAAWJQFJUiTwAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAADiElEQVRIDZ2W24uNURTAv2PG/a6UcsllPAgppHgYUV4UpYmUSB4kbyKP/grxwgvlktyKF694QJoHlELGrVwyphnJbYzfb89en+9wztRY9Zu19tprrb2/fTtTFEPIwMBALbqx90E3hPRjnIOpxqBHROywNcktuUg79jc4AkthJWyAt3A8x9Swy4kNazASR+Uih7EfRHLFfwC7E9IA6KZf1RrJf2uSWmu12vfsd3mW4LuPngEjsZ+hZ8IH4gbQiivwK1l//Wn4qXmQn2rij8JOeAi34DFYrA3aYQWchX0M6PI6wZ+0hxYCY1/GYN+EHuholkXfengNd2GCcehUo1lO3ckh+CK8B5fHvmkwJ9ut2OWyY0+Ep3A9imM33S+LpWT0NlBW58KLsF/BodxORWh70sZm30LsL7Art8uJ2C6FgHIG2Lfhgp1oZ38P7sD47Ctjc3tk1seM01aw6+LCGXvTRsBH2JqD92D3wqzcTkVTUv5DXwy0Dtu7tSjHlntVHTFO4HyCPK6Pcp0t6BucJDe8Bf0j+6sqjvdTnF6JBbkzahbVgSJxIobHsyc7ZqPjspaJuS9UDPQZhxOxRp00GmgSEd6TvhzpZofdbKAcWnzDMNcadVIdKGblze9jifpcKmxPT7wQdcmVRsol5wu+XrCGEjXrli6cbnp3CiuKyWg3OtrZ/Y+KXDveQzo46NKfvoiZM5man6y0QZcGMhc80q9AKRMHm4N/yaVEeYGf451vjzWtrR1Llxo4fUIcyMdTmQcuhw+o0nCgwa4i1cDuhHnUcjWU8JP950VYg+2P2yoj0OPB356YkO6GQkx6CdCL4QOsNRCd7lgUiFE30feWT/aB9LfoIPTkJYhYXA2lXy+x3r+XsNk2klZhBAXTJcyFt9NxLXUXhcs4B7xHSnpIiavqlmjTrz0mRRbFFbTv5TgG9uempfw0GnvhBaT3LCf8l6KGP4xPYL8FbLuu6ZPR7fpgOR0um3fIk+iy+lJ44728cSBcSg+Ke2Ad/caq9Vt3DRzTNiD25yT2MrgMXlD9FjPBr3RZvCOxPF+xp4OvgU+PE3MQcfB3cAKUWhqEL2Ap012wYPqhQ5vgRD6BX3sedsMZUDrgFOyAm+D/FX65NeUNNT9HbdqDgsPZNxX6r8Ib2AwboQsuNU2gg/7GNenw5LiR1ZM12mL4psBpULzxpyBdSvRoqOZYw6Us5Teo4ooAlVO16wAAAABJRU5ErkJggg==\n\n# check icon\n#image=iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAABYlAAAWJQFJUiTwAAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgpMwidZAAADHklEQVRIDbWWvWsUURTFN35iExXsFGtjoSgY+0WMtWAKsbARJVoJFv4TgmAQLIMI1hZ+FFpHIYIKiqmUpFHBYOn37zc7Z/I2u2a2MAfOzp377r3nvfvezOxYZxBjuLbAH/XQONcp2IUH4D64E4oVuAzfwafwMfwGxVb4E/7xJrB4Ce83wV9wG7wCz0GTX8J5+BZ+gWIPnIDH4RHoJO/CW/A73Ax/wz5R7isoJMUktPgbOAN3wTYYY6w55lpDlHV7Hn6zMh3T8BOchTtgYKIrtd0l9WWimFWOudawlnC86aaGSxcGfIUXvamxnasCbTDG2MAa1oqoGpWoMxST0FlFzMGMYY4MRbNia1nT2qKp5wGx77ZCKDbKqqrg4idCuqrVcLWmtdVocBXLzc6eNTNpItqNbIuR5qeGNa2tRgWfswU407vt24fa1Xopu3GH6At1RhZgbTXU6pyBziBHv0x2vA3lym4S/BEerJPSRmuroVbnNpzTAOUe9Dzr/xqfnOvYHpBDdUomnvE5/Gp1nsHLGiB913bTm6OsYw3Kg3WesRV4oo4p68RWQ63OIuxqgLWz6nlXn9PcK5ZCp7AV8xUorJETmnuvarzXWNuGBDvbswbUiIC3sY9if4bXdALbJ0tkEbZarQHBJDhzX9I3DKqhkA+22A8/wHK8PEDGiAHB9Vp6jATHH8HdMBjHeAXvxcE1hQtXZcZvSxddzRKcqIZWe+8nxbEX0NeS9nN4GIoH0Pak5a7cb98wZIvUWLKQH0+/Z8LvYKCoz5Ev4JPwIbwPX0OLnIZCMb+D/0JqqqFW64OfA2LsJfgEun+iHOt5+n/Tzr4H3/1YgDN1bA5FmZrE0md32pBa1lZDrQq+WNte3gpkP0YRy+p9n/a9vFV0r+bhrDfAwsNWpX/Y0TenhLmZnDWtrUaFzOR/fYCtF7GhH+By1tMEb/hfDJepaPZFUZ8xW2H/A8edve0qqS+5mO1/ogwSJiXR9tp3N9sT5rFugzHGmmOuNURZt+l1b2h1pRv2RzibG0Gv+mxZ3h4+O1OwC/2rvxdmxSvYy3Dkv/p/ATQejPjjKGMzAAAAAElFTkSuQmCC\n\necho \"$reminder | length=30 bash='$0' param1='done' terminal=false refresh=true templateImage=$image\"\n"
				}
			],
			"path": "Tools/todolist.2m.sh",
			"filename": "todolist.2m.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/todolist.2m.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Todo List for menu bar",
			"version": "v1.0",
			"author": "Julian Naumann",
			"authors": [
				{
					"name": "Julian Naumann",
					"githubUsername": "JulianNaumann",
					"imageURL": "https://avatars.githubusercontent.com/u/8291876?v=4",
					"bio": "CS/Machine Learning student in Germany",
					"primary": true
				}
			],
			"desc": "Display a todo list in the menu bar with items taken from the macos' Reminders.app from the list called 'Today'. Click the item to complete the reminder and display the next one.",
			"imageURL": "https://i.imgur.com/d4cBUKW.png",
			"dependencies": [
				"bash",
				"osascript"
			],
			"aboutURL": "https://github.com/JulianNaumann/bitbar-todolist",
			"lastUpdated": "2021-03-08T15:22:07.94493Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/todotxt.15s.sh",
					"filename": "todotxt.15s.sh",
					"content": "#!/usr/bin/env bash\n#\n## \u003cbitbar.title\u003eTodo.txt\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# # \u003cbitbar.author\u003eDwight Spencer\u003c/bitbar.author\u003e\n# # \u003cbitbar.author.github\u003edenzuko\u003c/bitbar.author.github\u003e\n# # \u003cbitbar.desc\u003eTodo.txt intergration with mac gui, click to do a item\u003c/bitbar.desc\u003e\n# # \u003cbitbar.dependancies\u003etodo.sh\u003c/bitbar.dependancies\u003e\n\n# Dependancies:\n#   todo.sh (brew install todo.sh)\n\nexport PATH=\"$PATH:/usr/local/bin\"\n\nlist_items() {\n    todo.sh ls  | awk 'NR\u003e1 {print buf}{buf = $0}' | sed '/--/d' | awk ' { print $0,\"| bash=/usr/local/bin/todo.sh param1=do param2=\"$1\" terminal=false refresh=true\" }'\n}\n\nadd_item() {\n    todo.sh add \"$(osascript -e 'Tell application \"System Events\" to display dialog \"New task:\" default answer \"\"' -e 'text returned of result' 2\u003e/dev/null)\" \u003e/dev/null\n}\n\nif [ \"${1}\" == \"add\" ]; then\n    add_item\nelse\n    echo \"🗒\"\n    echo \"---\"\n    list_items\n    echo \"---\"\n    echo \"Add task | bash=$0 param1=add\"\nfi\n"
				}
			],
			"path": "Tools/todotxt.15s.sh",
			"filename": "todotxt.15s.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/todotxt.15s.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Todo.txt",
			"version": "v1.0",
			"author": "Dwight Spencer",
			"authors": [
				{
					"name": "Dwight Spencer",
					"githubUsername": "denzuko",
					"imageURL": "https://avatars.githubusercontent.com/u/19776?v=4",
					"bio": "Director of devopsroundtable.com\r\nInvestor, thought leader for #devops +#makermovement, and champion of change.\r\n\r\nFounded VCC@dallasmakes, CompuTEK Industries,",
					"primary": true
				}
			],
			"desc": "Todo.txt intergration with mac gui, click to do a item",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.9425Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/wallpaper_refresh.1h.sh",
					"filename": "wallpaper_refresh.1h.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eWallpaper refresh\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAnmol Arora\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eanmolarora\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eA new HD wallpaper every hour.\u003c/bitbar.desc\u003e\n\necho 'W'\necho ---\n\n# Download image from server\ncurl \"$(curl https://powerful-inlet-26346.herokuapp.com/image_url)\" \u003e \"/tmp/wallpaper_refresh_image.png\"\n# Set image as wallpaper\nSCRIPT_TEXT='tell application \"Finder\" to set desktop picture to POSIX file \"/tmp/wallpaper_refresh_image.png\"'\nosascript -e \"${SCRIPT_TEXT}\"\n"
				}
			],
			"path": "Tools/wallpaper_refresh.1h.sh",
			"filename": "wallpaper_refresh.1h.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/wallpaper_refresh.1h.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Wallpaper refresh",
			"version": "v1.0",
			"author": "Anmol Arora",
			"authors": [
				{
					"name": "Anmol Arora",
					"githubUsername": "anmolarora",
					"imageURL": "https://avatars.githubusercontent.com/u/5461473?v=4",
					"bio": "Engineer",
					"primary": true
				}
			],
			"desc": "A new HD wallpaper every hour.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.975486Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/yabai.365d.sh",
					"filename": "yabai.365d.sh",
					"content": "#!/usr/bin/env bash\n# \u003cbitbar.title\u003eYabai status\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAlbert Groothedde\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ealber70g\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003e\n# Shows the status of Yabai. Current space, and whether window is floating, sticky, on top and fullscreen.echo \"setting up signals\"\n# ```\n# yabai -m signal --add event=space_changed \\\n#   action=\"set SHELL=/bin/sh \u0026\u0026 open -g \\\"bitbar://refreshPlugin?name=yabai-window-info.*?.sh\\\"\"\n# yabai -m signal --add event=window_resized \\\n#   action=\"set SHELL=/bin/sh \u0026\u0026 open -g \\\"bitbar://refreshPlugin?name=yabai-window-info.*?.sh\\\"\"\n# yabai -m signal --add event=window_focused \\\n#   action=\"set SHELL=/bin/sh \u0026\u0026 open -g \\\"bitbar://refreshPlugin?name=yabai-window-info.*?.sh\\\"\"\n# yabai -m signal --add event=application_activated \\\n#   action=\"set SHELL=/bin/sh \u0026\u0026 open -g \\\"bitbar://refreshPlugin?name=yabai-window-info.*?.sh\\\"\"\n# echo \"signals ready\"\n# ```\n# \u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eyabai,jq\u003c/bitbar.dependencies\u003e\nPATH=$PATH:/usr/local/bin\n\nwindowFocused=$(yabai -m query --windows --space | jq '.[] | select(.\"focused\"==1)')\nspace=$(yabai -m query --spaces --space | jq \".index\")\n\nif [[ $windowFocused ]]; then\n  yabaiinfo=$(yabai -m query --windows --window |\n    jq -r \"[.floating,.sticky,.topmost,.\\\"zoom-fullscreen\\\"] | @sh\")\n  read -r -a props \u003c\u003c\u003c \"$yabaiinfo\"\n\n  echo [\"$space\"] ~\"${props[0]}\" s\"${props[1]}\" ^\"${props[2]}\" f\"${props[3]}\"\nelse\n  # no window active\n  echo [\"$space\"] w0\nfi"
				}
			],
			"path": "Tools/yabai.365d.sh",
			"filename": "yabai.365d.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/yabai.365d.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "Yabai status",
			"version": "v1.0",
			"author": "Albert Groothedde",
			"authors": [
				{
					"name": "Albert G",
					"githubUsername": "alber70g",
					"imageURL": "https://avatars.githubusercontent.com/u/516972?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"yabai",
				"jq"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:08.007142Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/chunkwm_skhd.1s.sh",
					"filename": "chunkwm_skhd.1s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003echunkwm/skhd helper\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eShi Han NG\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eshihanng\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePlugin that displays desktop id and desktop mode of chunkwm.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebrew,chunkwm,skhd\u003c/bitbar.dependencies\u003e\n\n# Info about chunkwm, see: https://github.com/koekeishiya/chunkwm\n# For skhd, see: https://github.com/koekeishiya/skhd\n\nexport PATH=/usr/local/bin:$PATH\n\nif [[ \"$1\" = \"stop\" ]]; then\n  brew services stop chunkwm\n  brew services stop skhd\nfi\n\nif [[ \"$1\" = \"restart\" ]]; then\n  brew services restart chunkwm\n  brew services restart skhd\nfi\n\necho \"$(chunkc tiling::query --desktop id):$(chunkc tiling::query --desktop mode) | length=5\"\necho \"---\"\necho \"Restart chunkwm \u0026 skhd | bash='$0' param1=restart terminal=false\"\necho \"Stop chunkwm \u0026 skhd | bash='$0' param1=stop terminal=false\"\n"
				}
			],
			"path": "Tools/chunkwm_skhd.1s.sh",
			"filename": "chunkwm_skhd.1s.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/chunkwm_skhd.1s.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "chunkwm/skhd helper",
			"version": "v1.0",
			"author": "Shi Han NG",
			"authors": [
				{
					"name": "Shi Han",
					"githubUsername": "shihanng",
					"imageURL": "https://avatars.githubusercontent.com/u/7593229?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Plugin that displays desktop id and desktop mode of chunkwm.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"brew",
				"chunkwm",
				"skhd"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:07.464768Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Tools/yabai_skhd.1s.sh",
					"filename": "yabai_skhd.1s.sh",
					"content": "#!/bin/bash\n\n# \u003cbitbar.title\u003eyabai/skhd helper\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJames Won\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejwon\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ePlugin that displays desktop id and desktop mode of yabai.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ebrew,yabai,skhd\u003c/bitbar.dependencies\u003e\n\n# Info about yabai, see: https://github.com/koekeishiya/yabai\n# For skhd, see: https://github.com/koekeishiya/skhd\n# This plugin has been forked from https://github.com/matryer/bitbar-plugins/blob/master/Tools/chunkwm_skhd.1s.sh\n\nexport PATH=/usr/local/bin:$PATH\n\nif [[ \"$1\" = \"stop\" ]]; then\n  brew services stop yabai\n  brew services stop skhd\nfi\n\nif [[ \"$1\" = \"restart\" ]]; then\n  brew services restart yabai\n  brew services restart skhd\nfi\n\necho \"$(yabai -m query --spaces --display | jq 'map(select(.\"focused\" == 1))[-1].index'):$(yabai -m query --spaces --display | jq -r 'map(select(.\"focused\" == 1))[-1].type') | length=5\"\necho \"---\"\necho \"Restart yabai \u0026 skhd | bash='$0' param1=restart terminal=false\"\necho \"Stop yabai \u0026 skhd | bash='$0' param1=stop terminal=false\"\n"
				}
			],
			"path": "Tools/yabai_skhd.1s.sh",
			"filename": "yabai_skhd.1s.sh",
			"dir": "Tools",
			"docsPlugin": "Tools/yabai_skhd.1s.sh.html",
			"docsCategory": "Tools.html",
			"pathSegments": [
				"Tools"
			],
			"categoryPathSegments": [
				{
					"path": "Tools",
					"text": "Tools",
					"isLast": true
				}
			],
			"title": "yabai/skhd helper",
			"version": "v1.0",
			"author": "James Won",
			"authors": [
				{
					"name": "James Won",
					"githubUsername": "jwon",
					"imageURL": "https://avatars.githubusercontent.com/u/1187117?v=4",
					"bio": "SRE @ LinkedIn",
					"primary": true
				}
			],
			"desc": "Plugin that displays desktop id and desktop mode of yabai.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"brew",
				"yabai",
				"skhd"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:08.157248Z",
			"vars": null
		}
	]
}