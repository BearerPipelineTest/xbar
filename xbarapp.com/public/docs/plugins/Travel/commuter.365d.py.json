{
	"plugin": {
		"files": [
			{
				"path": "Travel/commuter.365d.py",
				"filename": "commuter.365d.py",
				"content": "#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n\n# \u003cbitbar.title\u003eCommuter\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eFrak Nuaimy\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003efrakman1\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/JN8ad03.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eShow commute details (GoogleMaps API)\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython, simplejson\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\nimport os, sys\nimport argparse\nimport subprocess\nimport simplejson, urllib\nimport json\n\nfullPathFileName = os.path.realpath(__file__)\ncommuterdir = \"commuter_data\"\ncommuterdir_path = os.path.dirname(os.path.abspath(__file__))+'/'+commuterdir\n\nkey_filename = \"google-map-api.txt\"\nkey_path = commuterdir_path+'/'+key_filename\norigin_filename = \"origin.txt\"\norigin_path = commuterdir_path+'/'+origin_filename\ndest_filename = \"dest.txt\"\ndest_path = commuterdir_path+'/'+dest_filename\n\ndef run_script(script):\n    return (subprocess.Popen([script], stdout=subprocess.PIPE, shell=True).communicate()[0].strip()).replace(\"'\", \"‚Äô\")\n\n# Create plugin data folder if it doesn't exist. \n# This is where input is stored (api key, origin, destination)\ncommuterdir_exists = os.path.exists(commuterdir_path) \nif not commuterdir_exists:\n    os.mkdir( commuterdir_path, 0755 );\n\ndebug = False\napi_key = \"\"\norig_coord=\"Earth\"\ndest_coord=\"Mars\"\ndriving_time = \"\"\ndriving_dist = \"\"\norigin = \"\"\ndestination = \"\"\ncommuter_icon = \"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\"\n\nprint \"| image={}\".format(commuter_icon)\nprint \"---\"\n\n# Get inputs from files if they exist\nkeyfile_exists = os.path.isfile(key_path) \nif keyfile_exists:\n    with open(key_path, 'r') as file:\n        api_key = file.read()\n\noriginfile_exists = os.path.isfile(origin_path) \nif originfile_exists:\n    with open(origin_path, 'r') as file:\n        orig_coord = file.read()   \n        origin = orig_coord  \n\ndestfile_exists = os.path.isfile(dest_path) \nif destfile_exists:\n    with open(dest_path, 'r') as file:\n        dest_coord = file.read()  \n        destination = dest_coord\n\n###############################################################################################################################################################################################################################################\n# Handle inputs\nparser = argparse.ArgumentParser()\nparser.add_argument('-k', action='store', dest='localkey',help='Create Google Maps API Key')\nparser.add_argument('-o', action='store', dest='localorigin',help='Origin Street Address')\nparser.add_argument('-d', action='store', dest='localdest',help='Destination Street Address')\nresults = parser.parse_args()\n\nif('-k' in sys.argv):    \n    cmd = \"osascript -e \\'set theString to text returned of (display dialog \\\"Please Enter The Google API Key. \\n\\nIt will be stored in:\\n{}\".format(key_path) + \"  \\\" with icon note default answer \\\"\\\" buttons {\\\"OK\\\",\\\"Cancel\\\"} default button 1) \\'\" \n    api_key = run_script(cmd)\n    with open(key_path, 'w') as f:\n        f.write(api_key)\n    sys.exit(1)\n    \nif('-o' in sys.argv):    \n    cmd = \"osascript -e \\'set theString to text returned of (display dialog \\\"Please Enter Origin Street Address. \\n\\nIt will be stored in:\\n{}\".format(origin_path) + \"  \\\" with icon note default answer \\\"\\\" buttons {\\\"OK\\\",\\\"Cancel\\\"} default button 1) \\'\" \n    orig_coord = run_script(cmd)\n    with open(origin_path, 'w') as f:\n        f.write(orig_coord)\n    sys.exit(1)    \n\nif('-d' in sys.argv):    \n    cmd = \"osascript -e \\'set theString to text returned of (display dialog \\\"Please Enter Destination Street Address. \\n\\nIt will be stored in:\\n{}\".format(dest_path) + \"  \\\" with icon note default answer \\\"\\\" buttons {\\\"OK\\\",\\\"Cancel\\\"} default button 1) \\'\" \n    dest_coord = run_script(cmd)\n    with open(dest_path, 'w') as f:\n        f.write(dest_coord)\n    sys.exit(1)     \n\n###############################################################################################################################################################################################################################################\n# Check API Key\nif api_key == \"\" or api_key == \"invalid\":\n    print(\"üîë Add API KEY | trim=false, color=red font='Lucida Grande Bold' bash=\" + fullPathFileName +  \" param1=-k param2=null terminal=false refresh=true\")\nelse:\n    #print(\"üîë API Key: ‚úÖ \" )\n    key_tooltip = str(key_path)\n    print \"üîë API Key | checked=true color=#179C52 font='Lucida Grande Bold' bash=\" + fullPathFileName +  \" param1=-k param2=null terminal=false refresh=true tooltip=\\\"%s\\\"\" % (key_tooltip) \nprint \"--\" + api_key\n    \n###############################################################################################################################################################################################################################################\n# Make API Call to Google\nurl = \"https://maps.googleapis.com/maps/api/distancematrix/json?key={0}\u0026units=imperial\u0026origins={1}\u0026destinations={2}\u0026mode=driving\u0026language=en-EN\u0026departure_time=now\u0026traffic_model=best_guess\".format(api_key,str(orig_coord),str(dest_coord))\nresult= simplejson.load(urllib.urlopen(url))\nprint \"---\"\nif result['status'] != 'OK':\n    #print(result)\n    debug = True\n    if 'status' in result.keys():\n        print(\"üö´ \" + str(result['status']) + ' üö´| color=red')\n    if 'error_message' in result.keys():\n        print(\"\" + str(result['error_message']) + '| color=red')\n        if str(result['error_message']) == \"The provided API key is invalid.\":\n            api_key = \"invalid\"\n            with open(key_path, 'w') as f:\n                f.write(api_key)\n            \n        \n    print(\"üöÄ From: \" + origin    + \"| trim=false, bash=\" + fullPathFileName +  \" param1=-o param2=null terminal=false refresh=true\")\n    print(\"üèÅ To: \" + destination + \"| trim=false, bash=\" + fullPathFileName +  \" param1=-d param2=null terminal=false refresh=true\")   \n         \nelse:\n###############################################################################################################################################################################################################################################\n    print \"---\"\n    try:\n        driving_time = result['rows'][0]['elements'][0]['duration_in_traffic']['text']\n        driving_dist = result['rows'][0]['elements'][0]['distance']['text']\n        origin = str(result['origin_addresses'][0])\n        with open(origin_path, 'w') as f:\n            f.write(origin)\n        destination = str(result['destination_addresses'][0])\n        with open(dest_path, 'w') as f:\n            f.write(destination)\n    \n    except Exception, e:\n        print '‚ùó Error parsing results- reason \"%s\" | color=red' % str(e)\n        debug = True\n        print 'Result:'\n        print result\n        #sys.exit(1)\n\n    #Print results\n    print(\"üöó Commute | color=red font='Lucida Grande Bold'\")\n    print(\"üöÄ From: \" + origin + \"| trim=false, bash=\" + fullPathFileName +  \" param1=-o param2=null terminal=false refresh=true\")\n    print(\"üèÅ To: \" + destination+ \"| trim=false, bash=\" + fullPathFileName +  \" param1=-d param2=null terminal=false refresh=true\")\n    print(\"‚è±Ô∏è Driving Time: \"+ driving_time)\n    print(\"üìè Driving Dist: \"+ driving_dist)\n    directions = \"https://www.google.com/maps?saddr={}\u0026daddr={}\u0026t=m\u0026z=7\u0026layer=t\".format(origin.replace(\" \",\"+\").replace(\",\",\"\"),destination.replace(\" \",\"+\").replace(\",\",\"\"))\n    print \"üó∫Ô∏è View in Google Maps\" + \"| color =#4285F4 font='Lucida Grande Bold' href=%s \" % (directions)\n\n###############################################################################################################################################################################################################################################\n# When things go wrong...\n#debug = True\nif debug:\n    print \"---\"\n    print \"üêû debug | color=#DB4437\"\n    json_formatted_str = json.dumps(result, indent=2)\n    print('-- Result| color=white')\n    for line in json_formatted_str.split('\\n'):\n        print(\"----\" + '‚Äé‚Äé' + line + \"| color=white size=11 font='Courier New'\")\n    if 'directions' in vars():    \n        print('-- Directions URL | color=white')\n        print('---- ' + directions + '|  color=#4285F4 href=%s ' % (directions))\n###############################################################################################################################################################################################################################################\nprint \"---\"\nprint \"üîÑ Refresh | refresh=true\"\n\n\n"
			}
		],
		"path": "Travel/commuter.365d.py",
		"filename": "commuter.365d.py",
		"dir": "Travel",
		"docsPlugin": "Travel/commuter.365d.py.html",
		"docsCategory": "Travel.html",
		"pathSegments": [
			"Travel"
		],
		"categoryPathSegments": [
			{
				"path": "Travel",
				"text": "Travel",
				"isLast": true
			}
		],
		"title": "Commuter",
		"version": "v1.0",
		"author": "Frak Nuaimy",
		"authors": [
			{
				"name": "Frak",
				"githubUsername": "frakman1",
				"imageURL": "https://avatars.githubusercontent.com/u/5826484?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Show commute details (GoogleMaps API)",
		"imageURL": "https://i.imgur.com/JN8ad03.png",
		"dependencies": [
			"python",
			"simplejson"
		],
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:22:08.235218Z",
		"vars": null
	}
}