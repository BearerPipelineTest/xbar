{
	"plugins": [
		{
			"files": [
				{
					"path": "Weather/aqi.15m.sh",
					"filename": "aqi.15m.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eAir Quality Index\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eChongyu Yuan\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ennnggel\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eReal-time Air Quality Index, you need an 'aqi api token' and install 'jq' first.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/7bc5qqh.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://www.yuanchongyu.com\u003c/bitbar.abouturl\u003e\n\nMENUFONT=\"size=12 font=UbuntuMono-Bold\"\nCOLORS=(\"#0ed812\" \"#ffde33\" \"#ff9933\" \"#cc0033\" \"#660099\" \"#7e0023\" \"#404040\")\n\n# where to get the token -\u003e https://aqicn.org/api/\nTOKEN=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nCITY=\"shanghai\"\n\nURL=\"http://aqicn.org/city/${CITY}/\"\n\nDATA=$(curl -s http://api.waqi.info/feed/${CITY}/?token=${TOKEN})\n# DELETE ME, TEST DATA\nDATA=\"{\\\"status\\\":\\\"ok\\\",\\\"data\\\":{\\\"aqi\\\":824,\\\"idx\\\":1437,\\\"attributions\\\":[{\\\"url\\\":\\\"http://www.semc.gov.cn/\\\",\\\"name\\\":\\\"Shanghai Environment Monitoring Center(‰∏äÊµ∑Â∏ÇÁéØÂ¢ÉÁõëÊµã‰∏≠ÂøÉ)\\\"},{\\\"url\\\":\\\"http://106.37.208.233:20035/emcpublish/\\\",\\\"name\\\":\\\"China National Urban air quality real-time publishing platform (ÂÖ®ÂõΩÂüéÂ∏ÇÁ©∫Ê∞îË¥®ÈáèÂÆûÊó∂ÂèëÂ∏ÉÂπ≥Âè∞)\\\"},{\\\"url\\\":\\\"https://china.usembassy-china.org.cn/embassy-consulates/shanghai/air-quality-monitor-stateair/\\\",\\\"name\\\":\\\"U.S. Consulate Shanghai Air Quality Monitor\\\"},{\\\"url\\\":\\\"https://waqi.info/\\\",\\\"name\\\":\\\"World Air Quality Index Project\\\"}],\\\"city\\\":{\\\"geo\\\":[31.2047372,121.4489017],\\\"name\\\":\\\"Shanghai (‰∏äÊµ∑)\\\",\\\"url\\\":\\\"https://aqicn.org/city/shanghai\\\"},\\\"dominentpol\\\":\\\"pm25\\\",\\\"iaqi\\\":{\\\"co\\\":{\\\"v\\\":6.4},\\\"h\\\":{\\\"v\\\":20.4},\\\"no2\\\":{\\\"v\\\":20.2},\\\"o3\\\":{\\\"v\\\":67.5},\\\"p\\\":{\\\"v\\\":1019.2},\\\"pm10\\\":{\\\"v\\\":57},\\\"pm25\\\":{\\\"v\\\":824},\\\"so2\\\":{\\\"v\\\":4.6},\\\"t\\\":{\\\"v\\\":17.5},\\\"w\\\":{\\\"v\\\":0.3}},\\\"time\\\":{\\\"s\\\":\\\"2019-04-01 17:00:00\\\",\\\"tz\\\":\\\"+08:00\\\",\\\"v\\\":1554138000},\\\"debug\\\":{\\\"sync\\\":\\\"2019-04-01T18:49:19+09:00\\\"}}}\"\n\n# how to install jq -\u003e https://stedolan.github.io/jq/download/\nAQI=$(echo \"${DATA}\" | /usr/local/bin/jq '.data.aqi' | sed -e \"s/\\\"//g\")\n\nfunction colorize {\n  if [ \"$AQI\" = \"-\" ]; then\n    echo \"${COLORS[6]}\"\n  elif [ \"$1\" -le 50 ]; then\n    echo \"${COLORS[0]}\"\n  elif [ \"$1\" -le 100 ]; then\n    echo \"${COLORS[1]}\"\n  elif [ \"$1\" -le 150 ]; then\n    echo \"${COLORS[2]}\"\n  elif [ \"$1\" -le 200 ]; then\n    echo \"${COLORS[3]}\"\n  elif [ \"$1\" -le 300 ]; then\n    echo \"${COLORS[4]}\"\n  else\n    echo \"${COLORS[5]}\"\n  fi\n}\n\nCOLOR=\"$(colorize \"${AQI}\")\"\necho \"üò∑${AQI} | color=${COLOR} ${MENUFONT}\"\n\necho \"---\"\necho \"Detail... | href=${URL}\"\necho \"Refresh... | refresh=true\""
				}
			],
			"path": "Weather/aqi.15m.sh",
			"filename": "aqi.15m.sh",
			"dir": "Weather",
			"docsPlugin": "Weather/aqi.15m.sh.html",
			"docsCategory": "Weather.html",
			"pathSegments": [
				"Weather"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": true
				}
			],
			"title": "Air Quality Index",
			"version": "v1.0",
			"author": "Chongyu Yuan",
			"authors": [
				{
					"name": "Chongyu Yuan",
					"githubUsername": "nnnggel",
					"imageURL": "https://avatars.githubusercontent.com/u/17697169?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Real-time Air Quality Index, you need an 'aqi api token' and install 'jq' first.",
			"imageURL": "https://i.imgur.com/7bc5qqh.jpg",
			"dependencies": [
				"bash"
			],
			"aboutURL": "http://www.yuanchongyu.com",
			"lastUpdated": "2021-03-08T15:22:08.63791Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Weather/Foobot.10m.rb",
					"filename": "Foobot.10m.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eFoobot\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAlessio Signorini\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ealessio-signorini\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay readings from your sensors in the menu bar\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://user-images.githubusercontent.com/453354/93032602-57f2c580-f5e7-11ea-87f9-e4e559b0c12a.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://foobot.io/\u003c/bitbar.abouturl\u003e\n\n\n\n# ==============================================================================\n# SETTINGS\n# ==============================================================================\n\n# Request API key from\n#    http://api.foobot.io/apidoc/index.html\nAPI_KEY=\" ... \"\n\n# Get Device ID from\n#    http://api.foobot.io/apidoc/index.html#!/device-owner-controller/getDeviceUsingGET\nDEVICE_ID=\" ... \"\n\n# ==============================================================================\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# ==============================================================================\n# CODE\n# ==============================================================================\nrequire 'net/http'\nrequire 'json'\n\nuri = URI(\"http://api.foobot.io/v2/device/#{DEVICE_ID}/datapoint/0/last/600/\")\n\nreq = Net::HTTP::Get.new(uri)\nreq['Accept'] = 'application/json;charset=UTF-8'\nreq['X-API-KEY-TOKEN'] = API_KEY\n\nres = Net::HTTP.start(uri.hostname, uri.port) {|http|\n  http.request(req)\n}\n\ndata = JSON.parse(res.body)\n\ndef color(value, ok_threshold, bad_threshold)\n  return ' color=red' if value \u003e bad_threshold\n  return ' color=orange' if value \u003e ok_threshold\n  return ''\nend\n\nvalue = data['sensors'].each_with_index.map do |key, i|\n  [key, data['datapoints'].first[i] ]\nend.to_h\n\nputs \"üåø #{value['allpollu'].round} | size=12\" + color(value['allpollu'],50,75)\n\nputs \"---\"\n\nputs \"#{(value['tmp'] * 9 / 5).round + 32}F / #{value['hum'].round}%\"\nputs \"pm #{value['pm'].round}ugm3 | \" + color(value['pm'],27,37.5)\nputs \"co2 #{value['co2'].round}ppm | \" + color(value['co2'], 1300,1925)\nputs \"voc #{value['voc'].round}ppb | \" + color(value['voc'], 300, 450)\n"
				}
			],
			"path": "Weather/Foobot.10m.rb",
			"filename": "Foobot.10m.rb",
			"dir": "Weather",
			"docsPlugin": "Weather/Foobot.10m.rb.html",
			"docsCategory": "Weather.html",
			"pathSegments": [
				"Weather"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": true
				}
			],
			"title": "Foobot",
			"version": "v1.0",
			"author": "Alessio Signorini",
			"authors": [
				{
					"name": "Alessio Signorini",
					"githubUsername": "alessio-signorini",
					"imageURL": "https://avatars.githubusercontent.com/u/453354?v=4",
					"bio": "üë®üèª‚Äçüíª Technologist\r\nüë®üèª‚Äçüéì PhD in AI \u0026 Epidemiology\r\nüåé  Dir. of Tech at Ask.com\r\nüöÄ  TechStars \u0026 RockHealth\r\nüî¨ Founder Evidation Health",
					"primary": true
				}
			],
			"desc": "Display readings from your sensors in the menu bar",
			"imageURL": "https://user-images.githubusercontent.com/453354/93032602-57f2c580-f5e7-11ea-87f9-e4e559b0c12a.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://foobot.io/",
			"lastUpdated": "2021-03-08T15:22:08.532344Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Weather/GeoIPWeather.15m.rb",
					"filename": "GeoIPWeather.15m.rb",
					"content": "#!/usr/bin/env ruby\n# coding: utf-8\n\n# \u003cbitbar.title\u003eGeoIPWeather\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTaylor Zane\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etaylorzane\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eYour weather in the menu bar üå§\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/vrT6vfb.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/taylorzane\u003c/bitbar.abouturl\u003e\n\n### USER VARIABLES\nUNITS = 'F' # This can be: (F)ahrenheit, (C)elsius, (K)elvin\nAPI_KEY = '8b4824b451d5db1612156837df880f55' # you can also get your own at http://openweathermap.org/\n\nrequire 'json'\nrequire 'net/http'\n\ndef no_data(message = nil)\n  if message\n    puts message\n  else\n    puts 'Cannot get weather.'\n  end\n  exit\nend\n\ndef location\n  location_uri = URI('http://ipinfo.io/json')\n\n  begin\n  \tlocation_data = Net::HTTP.get location_uri\n  rescue\n  \tno_data\n  end\n\n  location_json = JSON.parse location_data\n\n  zip = nil\n  country = nil\n\n  if location_json['postal']\n    zip = location_json['postal']\n  else\n    no_data\n  end\n\n  if location_json['country']\n    country = location_json['country']\n  else\n    no_data\n  end\n\n  [zip, country]\nend\n\ndef weather(zip_code, country)\n  temperature_unit =\n    case UNITS.upcase\n    when 'F'\n      '\u0026units=imperial'\n    when 'C'\n      '\u0026units=metric'\n    else\n      ''\n    end\n\n  temperature_symbol =\n    case UNITS.upcase\n    when 'F'\n      '‚Ñâ'\n    when 'C'\n      '‚ÑÉ'\n    else\n      'K'\n    end\n\n  weather_uri =\n    URI('http://api.openweathermap.org/data/2.5/weather' \\\n        \"?zip=#{zip_code},#{country}\" \\\n        \"\u0026appid=#{API_KEY}\" \\\n        \"#{temperature_unit}\")\n\n  weather_data = Net::HTTP.get(weather_uri)\n\n  no_data unless weather_data\n\n  weather_json = JSON.parse weather_data\n\n  no_data weather_json['message'] if weather_json['cod'] == '404'\n\n  temperature = weather_json['main']['temp'].round\n\n  city = weather_json['name']\n  country = weather_json['sys']['country']\n\n  puts \"#{city}, #{country}: #{temperature}#{temperature_symbol}\"\nend\n\nweather(*location)\n"
				}
			],
			"path": "Weather/GeoIPWeather.15m.rb",
			"filename": "GeoIPWeather.15m.rb",
			"dir": "Weather",
			"docsPlugin": "Weather/GeoIPWeather.15m.rb.html",
			"docsCategory": "Weather.html",
			"pathSegments": [
				"Weather"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": true
				}
			],
			"title": "GeoIPWeather",
			"version": "v0.1.1",
			"author": "Taylor Zane",
			"authors": [
				{
					"name": "Taylor Zane Glaeser",
					"githubUsername": "taylorzane",
					"imageURL": "https://avatars.githubusercontent.com/u/5092987?v=4",
					"bio": "Software Engineer\r\nhttps://keybase.io/taylorzane\r\nhttps://gitlab.com/taylorzane",
					"primary": true
				}
			],
			"desc": "Your weather in the menu bar üå§",
			"imageURL": "http://i.imgur.com/vrT6vfb.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/taylorzane",
			"lastUpdated": "2021-03-08T15:22:08.565657Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Weather/KRAL.metar.5m.php",
					"filename": "KRAL.metar.5m.php",
					"content": "#!/usr/bin/php\n\n\u003c?php\n\n# \u003cbitbar.title\u003eMenuMetar\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eAndrew Larson\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ehtmlarson\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eA simple METAR reporter with direct links to the DarkSky or NWS report.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003ephp\u003c/bitbar.dependencies\u003e\n\n\n/*\nTo configure this plugin or if you desire multiple reports, use this syntax:\n\n{ICAO}.metar.10m.php\n\nFor example, for KJFK:\n\nKJFK.MenuMETAR.5m.php\n\n*/\n\n$filename_array = explode(\".\", basename(__FILE__));\n$ICAO = strtoupper($filename_array[0]);\n\n\n$metar = file_get_contents(\"https://www.aviationweather.gov/adds/dataserver_current/httpparam?datasource=metars\u0026requestType=retrieve\u0026format=xml\u0026mostRecentForEachStation=constraint\u0026hoursBeforeNow=1.25\u0026stationString=\" . $ICAO) or die($ICAO . \": No data\");\n\n$metar_object = new SimpleXMLElement($metar);\n$ready_to_parse = $metar_object-\u003edata-\u003eMETAR;\n\n$skycond_setup = $ready_to_parse-\u003esky_condition-\u003eattributes();\n$skycond_ready = $skycond_setup[0];\nif($skycond_setup[1]) {\n  $skycond_ready .= \" @ \" . $skycond_setup[1] . \" feet\";\n}\n$temp_f = (intVal($ready_to_parse-\u003etemp_c) * 1.8) + 32;\n$dewpoint_c = $ready_to_parse-\u003edewpoint_c;\n$dewpoint_f = (intVal($ready_to_parse-\u003edewpoint_c) * 1.8) + 32;\n$wind = $ready_to_parse-\u003ewind_speed_kt . \"kt @ \" . $ready_to_parse-\u003ewind_dir_degrees . \"¬∞\";\n// Bitbar content echo\n\n$bitbar_content = $temp_f . \"¬∞F\";\n$bitbar_content .= \"\\n---\";\n$bitbar_content .= \"\\n Current information for \" . $ICAO;\n$bitbar_content .= \"\\nView Report From...\";\n$bitbar_content .= \"\\n--DarkSky|href=https://darksky.net/forecast/\" . $ready_to_parse-\u003elatitude . \",\" . $ready_to_parse-\u003elongitude;\n$bitbar_content .= \"\\n--National Weather Service|href=https://forecast.weather.gov/MapClick.php?lat=\" . $ready_to_parse-\u003elatitude . \"\u0026lon=\" . $ready_to_parse-\u003elongitude;\n$bitbar_content .= \"\\nSky Condition: \" . $skycond_ready;\n$bitbar_content .= \"\\nVisibility: \" . $ready_to_parse-\u003evisibility_statute_mi . \" miles\";\n$bitbar_content .= \"\\nPressure: \" . $ready_to_parse-\u003ealtim_in_hg . \" mmHg\";\n$bitbar_content .= \"\\nDewpoint: \". $dewpoint_f . \"¬∞F\";\n$bitbar_content .= \"\\nWind: \" . $wind;\n\n\necho $bitbar_content;\n"
				}
			],
			"path": "Weather/KRAL.metar.5m.php",
			"filename": "KRAL.metar.5m.php",
			"dir": "Weather",
			"docsPlugin": "Weather/KRAL.metar.5m.php.html",
			"docsCategory": "Weather.html",
			"pathSegments": [
				"Weather"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": true
				}
			],
			"title": "MenuMetar",
			"version": "v1.0",
			"author": "Andrew Larson",
			"authors": [
				{
					"name": "Andrew Larson",
					"githubUsername": "htmlarson",
					"imageURL": "https://avatars.githubusercontent.com/u/18153857?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "A simple METAR reporter with direct links to the DarkSky or NWS report.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"php"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:08.577799Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Weather/metar.5m.rb",
					"filename": "metar.5m.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eMetar\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMichael Heijmans\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eparabuzzle\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays the current METAR aviation weather information for the airport of your choice\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://github.com/parabuzzle/bitbar_metar/raw/master/metar-ifr.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://www.github.com/parabuzzle/bitbar_metar\u003c/bitbar.abouturl\u003e\n\n# Handle RVM Machines\nunless ENV['USING_RVM']\n  # Re-run this script with RVM's default Ruby, after setting up the RVM path,\n  # and setting USING_RVM to true, so that this sentry code won't run the second\n  # time through.\n  system(\n    \u003c\u003c-EOF\n      export USING_RVM=true\n      export PATH=\"~/.rvm/bin:$PATH\"\n      rvm-auto-ruby #{File.expand_path(__FILE__)}\n    EOF\n  )\n  # Return the exit code from running the script with RVM:\n  exit $?.exitstatus.to_i\nend\n\n\nrequire 'bitbar'\nrequire 'Base64'\nrequire 'metar'\nrequire 'inifile'\n\ndef flight_rules\n  c = ceiling\n  v = meters_to_miles(visibility)\n  return \"LIFR\" if c \u003c= 500  || v \u003c= 1\n  return \"IFR\"  if c \u003c= 1000 || v \u003c 3\n  return \"MVFR\" if c \u003c= 3000 || v \u003c 5\n  return \"VFR\"\nend\n\ndef ceiling\n  conditions = PARSED_METAR.sky_conditions\n  c = 300000\n  conditions.each do |condition|\n    if [\"broken\", \"overcast\"].include? condition.quantity\n      f = meters_to_feet(condition.height.value).to_i\n      c = f if f \u003c c\n    end\n  end\n  return c\nend\n\ndef airport_code\n  config = IniFile.load(ENV['HOME'] + '/.bitbarrc')['metar']\n  config['airport'].upcase\nend\n\ndef visibility\n  PARSED_METAR.visibility.distance.value.to_i\nend\n\ndef meters_to_feet(num)\n  num * 3.28084\nend\n\ndef meters_to_miles(num)\n  (num * 0.000621371).round(1)\nend\n\ndef celius_to_fahrenheit(num)\n  ((num * 1.8) + 32).round(1)\nend\n\ndef format_number(num)\n  num.to_s.reverse.gsub(/(\\d{3})(?=\\d)/, '\\\\1,').reverse\nend\n\ndef color(fr)\n  case fr\n  when \"LIFR\"\n    return \"#ff00ff\"\n  when \"IFR\"\n    return :red\n  when \"MVFR\"\n    return :blue\n  else\n    return :green\n  end\nend\n\ndef temperature\n  PARSED_METAR.temperature_and_dew_point.temperature.value.to_i if PARSED_METAR.temperature_and_dew_point.temperature\nend\n\ndef dew_point\n  PARSED_METAR.temperature_and_dew_point.dew_point.value.to_i if PARSED_METAR.temperature_and_dew_point.dew_point\nend\n\n# String generation methods\n\ndef wind_gust_string\n  wind = PARSED_METAR.wind\n  \" (Gusting at #{wind.gusts.value.round * 2})\" if wind.gusts\nend\n\ndef wind_string\n  wind = PARSED_METAR.wind\n  return unless wind\n  if wind.direction == :variable_direction\n    direction = \"Wind: Variable Direction @ #{parsed.wind.speed.value.round * 2} Knots\"\n  else\n    direction = \"Wind #{wind.direction.value.round}¬∞ @ #{wind.speed.value.round * 2} Knots\"\n  end\n  return \"#{direction}#{wind_gust_string}\"\nend\n\ndef metar_issued_at_string\n  \"Metar Issued: #{PARSED_METAR.time.localtime.strftime('%m/%d/%Y %I:%M %p')}\"\nend\n\ndef visibility_string\n  \"Visibility #{meters_to_miles(visibility)} sm\" if visibility\nend\n\n\ndef temp_string\n  \"Temp: #{celius_to_fahrenheit(temperature)}¬∞ F\" if temperature\nend\n\ndef dew_point_string\n  \"Dew Point: #{celius_to_fahrenheit(dew_point)}¬∞ F\" if dew_point\nend\n\n# setup variables\nPARSED_METAR = Metar::Station.find_by_cccc(airport_code).parser\n\nflight_rule = flight_rules\n\n# Make the menu\nBitBar::Menu.new do\n  item flight_rule,  color: color(flight_rule)\n  item airport_code, color: color(flight_rule)\n\n  separator\n\n  item metar_issued_at_string, color: :black\n  item visibility_string, color: :black\n  item temp_string, color: :black\n  item dew_point_string, color: :black\n  item wind_string, color: :black\n  item \"Sky Conditions\" do\n    PARSED_METAR.sky_conditions.each do |condition|\n      if condition.height\n        item \"#{condition.quantity} - #{format_number(meters_to_feet(condition.height.value).to_i)} ft\", color: :black\n      else\n        item \"Sky Clear\", color: :blue\n      end\n    end\n  end\n  separator\nend\n\n\n"
				}
			],
			"path": "Weather/metar.5m.rb",
			"filename": "metar.5m.rb",
			"dir": "Weather",
			"docsPlugin": "Weather/metar.5m.rb.html",
			"docsCategory": "Weather.html",
			"pathSegments": [
				"Weather"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": true
				}
			],
			"title": "Metar",
			"version": "v1.0",
			"author": "Michael Heijmans",
			"authors": [
				{
					"name": "Mike Heijmans",
					"githubUsername": "parabuzzle",
					"imageURL": "https://avatars.githubusercontent.com/u/428?v=4",
					"bio": "Mike Heijmans has over 10 years of experience in the tech industry. He is a Builder, Rubyist, DevOps architect, public speaker, and open source advocate.",
					"primary": true
				}
			],
			"desc": "Displays the current METAR aviation weather information for the airport of your choice",
			"imageURL": "http://github.com/parabuzzle/bitbar_metar/raw/master/metar-ifr.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "http://www.github.com/parabuzzle/bitbar_metar",
			"lastUpdated": "2021-03-08T15:22:08.748147Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Weather/DarkSky/weather.15m.py",
					"filename": "weather.15m.py",
					"content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eWeather\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev3.5.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDaniel Seripap\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eseripap\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDetailed weather plugin powered by DarkSky with auto location lookup. Supports metric and imperial units. Needs API key from https://darksky.net/dev/.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/683200/16276583/ff267f36-387c-11e6-9fd0-fc57b459e967.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\n\n# -----------------------------------------------------------------------------------\n# For a more accurate location lookup, download and install CoreLocationCLI\n# Available here: https://github.com/fulldecent/corelocationcli/releases\n# This will allow a more precise location lookup as it uses native API for loc lookup\n# -----------------------------------------------------------------------------------\n\nimport json\nimport urllib2\nimport textwrap\nfrom random import randint\nimport commands\n\n# get yours at https://darksky.net/dev\napi_key = ''\n\n# get yours API key for encode location at https://opencagedata.com\ngeo_api_key = ''\n\n# if you want to set manual location, define following two vars. If left empty, script will try to determine the location\n# example:\n# manual_city = 'Novi Sad'\n# manual_latlng = '45.2526331,19.7817785'\nmanual_city = ''\nmanual_latlng = ''\n\n\n# set to si for metric, leave blank for imperial\nunits = ''\n\n# optional, see message above\ncore_location_cli_path = '~/CoreLocationCLI'\n\ndef manual_location_lookup():\n  if manual_latlng == \"\" or manual_city == \"\":\n     return False;\n  else:\n     return { \"loc\": manual_latlng, \"preformatted\": manual_city }\n\ndef mac_location_lookup():\n  try:\n    exit_code, loc = commands.getstatusoutput(core_location_cli_path + ' -once -format \"%latitude,%longitude\"')\n    if exit_code != 0:\n      raise ValueError('CoreLocationCLI not found')\n    formatted_city_name = reverse_latlong_lookup(loc)\n    return { \"loc\": loc, \"preformatted\": formatted_city_name }\n  except:\n    return False\n\ndef auto_loc_lookup():\n  try:\n    location = urllib2.urlopen('https://ipinfo.io/json')\n    return json.load(location)\n  except urllib2.URLError:\n    return False\n\ndef reverse_latlong_lookup(loc):\n  try:\n    location_url = 'https://api.opencagedata.com/geocode/v1/json?q=' + loc + '\u0026key=' + geo_api_key + '\u0026language=en\u0026no_annotations=1\u0026pretty=1'\n    location = json.load(urllib2.urlopen(location_url))\n    if 'results' in location:\n      return location['results'][0]['formatted'].encode('UTF-8')\n    else:\n      return 'Could not lookup location name'\n  except:\n    return 'Could not lookup location name'\n\ndef full_country_name(country):\n  try:\n    countries = json.load(urllib2.urlopen('http://country.io/names.json'))\n    try:\n      if country in countries:\n        return countries[country].encode('UTF-8')\n      else:\n        return False\n    except KeyError:\n      return False\n  except urllib2.URLError:\n    return False\n\ndef calculate_bearing(degree):\n  cardinals = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']\n  return cardinals[int(round(((6 * degree)) / 360))]\n\ndef get_wx_icon(icon_code):\n  if icon_code == 'clear-day':\n    icon = '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'\n  elif icon_code == 'clear-night':\n    icon = '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'\n  elif icon_code == 'rain':\n    icon = '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'\n  elif icon_code == 'snow':\n    icon = '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'\n  elif icon_code == 'sleet':\n    icon = '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'\n  elif icon_code == 'wind':\n    icon = 'iVBORw0KGgoAAAANSUhEUgAAAFoAAAA0CAQAAACgX+ejAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAJcEhZcwAARt4AAEbeAY4mMlsAAAAHdElNRQfkAwQTLi3Ze1bDAAAAEGNhTnYAAADDAAAAxAAAADUAAABIB/ZTzgAAA85JREFUaN7tmU1oVEccwH9vd3aT0GRj4ldKpUZCqiERJApCcrAN9aPoQcSD4MEPFAyouamgUCkeEgpFES/SHlqqpUWw7aEUIcXUb9EIHoyCkgiN2RiNkl3XfOzu9GCjMZm8mbeZl6fQ3zvlvf/834/JvPnPzDrYJ0YdX7CYWaSJc5lztJP24T3WcGjgLM+Rr68M3RxnUdBikxNlL71jhN9ct1kVtJyaEE2klMoSSRefBS2oYhV9kypLJNeZH7TieIr5w1VZIvnSzqsc5hL1FD9IH1LxZA1n+EDT+g6r+Wfq0oKjLCVrHB/mGjsYVDz5VKsMFdTakS6n0lOLXkKKuxFqDNrmUcXvxm8qpowYkgHiDLwtbYcCSo3i5hjmq2EjDZRTCCTopJUzdLyR7qLUw/AQdCmjHRyj9tIgpohdNLLg9d8lfMwKtnCCk7x4JdHk+UMcUtxP0WfUPq6NmEkzWxUjoIIWKjnIMw+2Wg5rJzzJC9ZosuRz1KV9lhZPXaxlGT1a6VuUabJscqmpEkmC9SCYY8m9nxusc42QnNIMj1IaKXCNKKSRNsExaj18iG7M0jw/z4+aiGUs1b5lOcsF5XxiRVnHHfZpP8N6gwJVTEPIUi/ruMh2bmhiwmOmOTcqBWGfdUfo5DTfGZRvQYlRxhmCX7iJIOKDbj5p4rRzlS6j+KxyTTORpOAbHON65o0Q0tPecIROo7hOAUij4uqdjOcWl3mpmfIgRZsvtjlTxF/aAnWFDwV1lJIhi+NTf5vjkNGO/mG+pcehjXrSgQuPEtLU5x/YTUIQIez7tGeLXzlEAsQ708c6+vmeZh6DvZ2Lf2RJEucCp7gwOoE6rGXuO93bSeI8pDuHCfR/poxD1JcS7o5keGrSzVQhyeJMW3lxGKSbB1yhw3CJNIGrBhtSP64svfxEfW7/50sBSb+6ethD3vvT06PXSw54rciCDvKQ/y2Z/ECSzyKXFUU++7nHWS8pHUqIAFnfPsIM6zipWSVfZIPhCdU0EeW0dogMs9lLSkGUIkt6GQYUe/uFBr+1RFjJz+ZbM0EdX1s5YwrRQSNPJ9yv0h7iACymkOfm0sUssbTWk8o8ZUbZY8TMpUOYnRmbSavvmuT3dB4gSPHQyvAI80i5fOwlY9DXibd/oNBJX+JzSzP0sPLA+z7PmK1te5ekFQdLFNKqnfIy7AxaczzbGNJItzMvaMnxzOA3V+UUW4NWVFHNzUmV07Tkss6bDmo5r1Qe4AixoOUmZx5fcZ+RMcJJWtmQyyHzdO4PHapZyQo+ooB+7vInf/Mkl0T/Ao94doovE2BiAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIwLTAzLTA0VDE5OjQ2OjMyKzAwOjAwxbZSTQAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMC0wMy0wNFQxOTo0NjozMiswMDowMLTr6vEAAAAZdEVYdFNvZnR3YXJlAHd3dy5pbmtzY2FwZS5vcmeb7jwaAAAAAElFTkSuQmCC'\n  elif icon_code == 'fog':\n    icon = 'iVBORw0KGgoAAAANSUhEUgAAAFoAAAAeCAQAAAAGaMHzAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAJcEhZcwAARt4AAEbeAY4mMlsAAAAHdElNRQfkAwQTLi3Ze1bDAAAAEGNhTnYAAADVAAAA1QAAAD4AAABcxaWZlwAAAKBJREFUWMPt2MERwjAMRNG/jiF10A0lUQD1UAlHDimFAE44UIEuFjvjV8GORiPZEndmdnyIVTyZs3MErcWqyj97QdkZwiQu1OwUQZ/sAMNfE1cOVhNEvMXKMTtH0KuwZWcI2wpTdoawqXLzaw8x2+1Ep7FhTpz82kMsfu/psVw62SqNlp0iqIkzk9Xkk12Rh74sP7bjWNOJ57Gm8vA7QH4B1oUmCMzIWB0AAAAldEVYdGRhdGU6Y3JlYXRlADIwMjAtMDMtMDRUMTk6NDY6MzIrMDA6MDDFtlJNAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIwLTAzLTA0VDE5OjQ2OjMyKzAwOjAwtOvq8QAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAAASUVORK5CYII='\n  elif icon_code == 'cloudy':\n    icon = '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'\n  elif icon_code == 'partly-cloudy-day':\n    icon = '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'\n  elif icon_code == 'partly-cloudy-night':\n    icon = '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'\n  else:\n    icon = ''\n\n  return icon\n\ndef get_wx():\n\n  if api_key == \"\":\n    return False\n\n  location = manual_location_lookup() or mac_location_lookup() or auto_loc_lookup()\n\n  if location is False:\n    return False\n\n  for locData in location:\n    locData.encode('utf-8')\n\n  try:\n    if 'loc' in location:\n      wx = json.load(urllib2.urlopen('https://api.darksky.net/forecast/' + api_key + '/' + location['loc'] + '?units=' + units + \"\u0026v=\" + str(randint(0,100))))\n    else:\n      return False\n  except urllib2.HTTPError:\n    return False\n\n  if units == 'si':\n    unit = 'C'\n    distance = 'm/s'\n    distance_short = 'km'\n  else:\n    unit = 'F'\n    distance = 'mph'\n    distance_short = 'mi'\n\n  try:\n\n    weather_data = {}\n\n    if 'currently' in wx:\n      for item in wx['currently']:\n        if item == 'temperature':\n          weather_data['temperature'] = str(int(round(wx['currently']['temperature']))) + '¬∞' + unit\n        elif item == 'icon':\n          weather_data['icon'] = get_wx_icon(str(wx['currently']['icon']))\n        elif item == 'summary':\n          weather_data['condition'] = str(wx['currently']['summary'].encode('utf-8'))\n        elif item == 'windSpeed':\n          weather_data['wind'] = str(wx['currently']['windSpeed']) + ' ' + distance\n        elif item == 'windBearing':\n          weather_data['windBearing'] = calculate_bearing(wx['currently']['windBearing'])\n        elif item == 'humidity':\n          weather_data['humidity'] = str(int(round(wx['currently']['humidity'] * 100))) + '%'\n        elif item == 'dewPoint':\n          weather_data['dewPoint'] = str(wx['currently']['dewPoint'])\n        elif item == 'visibility':\n          weather_data['visibility'] = str(int(round(wx['currently']['visibility']))) + ' ' + distance_short\n        elif item == 'pressure':\n          weather_data['pressure'] = str(wx['currently']['pressure']) + ' mb'\n        elif item == 'apparentTemperature':\n          weather_data['feels_like'] = str(int(round(wx['currently']['apparentTemperature']))) + '¬∞' + unit\n\n    if 'minutely' in wx:\n      for item in wx['minutely']:\n        if item == 'summary':\n          weather_data['next_hour'] = str((wx['minutely']['summary'].encode('utf-8')))\n\n    if 'daily' in wx:\n      for item in wx['daily']:\n        if item == 'summary':\n          weather_data['week'] = str((wx['daily']['summary'].encode('utf-8', 'ignore')))\n\n    if 'city' in location and 'region' in location:\n      if location['city'] == '' and location['region'] == '':\n        if 'country' in location:\n            country = full_country_name(location['country'])\n\n            if country is False or location['country'] == '':\n              weather_data['country'] = 'See Full Forecast'\n            else:\n              weather_data['country'] = country\n      else:\n        weather_data['city'] = str(location['city'].encode('utf-8'))\n        weather_data['region'] = str(location['region'].encode('utf-8'))\n\n    if 'loc' in location:\n      weather_data['loc'] = str(location['loc'])\n\n    if 'preformatted' in location:\n      weather_data['preformatted'] = location['preformatted']\n\n  except KeyError:\n    return False\n\n  return weather_data\n\ndef render_wx():\n\n  if api_key == '':\n    print 'Missing API key'\n    print '---'\n    print 'Get an API Key | href=https://darksky.net/dev'\n    return False\n\n  weather_data = get_wx()\n\n  if weather_data is False:\n    print '--'\n    print '---'\n    print 'Could not get weather data at this time'\n    return False\n\n  if 'icon' in weather_data and 'temperature' in weather_data:\n    print weather_data['temperature'] + ' | templateImage=' + weather_data['icon']\n  else:\n    print 'N/A'\n\n  print '---'\n\n\n  if 'city' in weather_data and 'region' in weather_data:\n    print weather_data['city'] + ', ' + weather_data['region'] + ' | href=https://darksky.net/' + weather_data['loc']\n  elif 'country' in weather_data:\n    print weather_data['country'] + ' | href=https://darksky.net/' + weather_data['loc']\n  elif 'preformatted' in weather_data:\n    print weather_data['preformatted'] + ' | href=https://darksky.net/' + weather_data['loc']\n\n  if 'condition' in weather_data and 'feels_like' in weather_data:\n    print weather_data['condition'] + ', Feels Like: ' + weather_data['feels_like']\n\n  print '---'\n\n  if 'next_hour' in weather_data:\n    print weather_data['next_hour']\n    print '---'\n\n  print '---'\n\n  if 'week' in weather_data:\n    print \"\\n\".join(textwrap.wrap(weather_data['week'], 50))\n    print '---'\n\n  if 'wind' in weather_data and 'windBearing' in weather_data:\n    print 'Wind: ' + weather_data['wind'] + ' ' + weather_data['windBearing']\n\n  if 'humidity' in weather_data:\n    print 'Humidity: ' + weather_data['humidity']\n\n  if 'dewPoint' in weather_data:\n    print 'Dew Point: ' + weather_data['dewPoint']\n\n  if 'visibility' in weather_data:\n    print 'Visibility: ' + weather_data['visibility']\n\n  if 'pressure' in weather_data:\n    print 'Pressure: ' + weather_data['pressure']\n\n  print '---'\n  print 'Powered by DarkSky | href=https://darksky.net/poweredby/?ref=bitbarWeather'\n\nrender_wx()\n"
				}
			],
			"path": "Weather/DarkSky/weather.15m.py",
			"filename": "weather.15m.py",
			"dir": "Weather/DarkSky",
			"docsPlugin": "Weather/DarkSky/weather.15m.py.html",
			"docsCategory": "Weather/DarkSky.html",
			"pathSegments": [
				"Weather",
				"DarkSky"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": false
				},
				{
					"path": "Weather/DarkSky",
					"text": "DarkSky",
					"isLast": true
				}
			],
			"title": "Weather",
			"version": "v3.5.0",
			"author": "Daniel Seripap",
			"authors": [
				{
					"name": "Daniel Seripap",
					"githubUsername": "seripap",
					"imageURL": "https://avatars.githubusercontent.com/u/683200?v=4",
					"bio": "untitled_document.html",
					"primary": true
				}
			],
			"desc": "Detailed weather plugin powered by DarkSky with auto location lookup. Supports metric and imperial units. Needs API key from https://darksky.net/dev/.",
			"imageURL": "https://cloud.githubusercontent.com/assets/683200/16276583/ff267f36-387c-11e6-9fd0-fc57b459e967.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:08.376364Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Weather/DarkSky/weather.15m.sh",
					"filename": "weather.15m.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eWeather\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRichard Colley\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etyperlc\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay local weather collected using darksky-weather (install from brew).\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003edarksky-weather,curl,jq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/typerlc/bitbar-weather/\u003c/bitbar.abouturl\u003e\n# \u003cbitbar.image\u003ehttps://github.com/typerlc/bitbar-weather/raw/master/weather_preview.png\u003c/bitbar.image\u003e\n\nscript_dir=$(dirname \"$0\")\nscript_name=$(basename \"$0\")\nlocation_config=\"${script_dir:-.}/.$script_name.location\"\n\n# shellcheck source=/dev/null\n[ -f \"$location_config\" ] \u0026\u0026 . \"$location_config\"\n\nprint_weather_icon() {\n    case $1 in\n        clear*) echo -n ‚òÄÔ∏è  ;;\n        cloud*) echo -n ‚òÅÔ∏è ;;\n        fog|haze*|mist) echo -n üå´ ;;\n        partly-cloudy*) echo -n ‚õÖÔ∏è ;;\n        rain) echo -n üåß ;;\n        sleet|snow) echo -n üå® ;;\n        thunderstorm) echo -n ‚õà  ;;\n        tornado) echo -n üå™ ;;\n        wind) echo -n üå¨ ;;\n        *) echo -n \"?\" ;;\n    esac\n}\n\nprint_temperature() {\n    temperature=$1\n    units=$2\n    case $units in\n        celsius|si|ca|uk) unit_string=C ;;\n        fahrenheit|us) unit_string=F ;;\n        *) unit_string=C ;;\n    esac\n    echo -n \"$temperature¬∞$unit_string\"\n}\n\n\nexport PATH=\"/usr/local/bin:${PATH}\"\n\n[ -n \"$LOCATION\" ] \u0026\u0026 LOCATION_OPT=-l\n\nWEATHER_DATA=\"$(weather -json \"$LOCATION_OPT\" \"$LOCATION\")\"\n\nLATITUDE=$(echo \"$WEATHER_DATA\" | jq -r '.latitude')\nLONGITUDE=$(echo \"$WEATHER_DATA\" | jq -r '.longitude')\nUNITS=$(echo \"$WEATHER_DATA\" | jq -r '.flags.units')\n\n# NOW_ALERTS=$(echo \"$WEATHER_DATA\" | jq -r '.alerts')\n# NOW_SUMMARY=$(echo \"$WEATHER_DATA\" | jq -r '.currently.summary')\nNOW_TEMP=$(echo \"$WEATHER_DATA\" | jq -r '.currently.temperature')\nNOW_ICON=$(echo \"$WEATHER_DATA\" | jq -r '.currently.icon')\n# NOW_HUMIDITY=$(echo \"$WEATHER_DATA\" | jq -r '.currently.humidity')\n# NOW_PRECIP_TYPE=$(echo \"$WEATHER_DATA\" | jq -r '.currently.precipType')\n# NOW_PRECIP_PROB=$(echo \"$WEATHER_DATA\" | jq -r '.currently.precipProbability')\n# NOW_PRECIP_PROB=$(echo \"$WEATHER_DATA\" | jq -r '.currently.precipProbability')\n\n# FORECAST_SUMMARY=$(echo \"$WEATHER_DATA\" | jq -r '.daily.summary')\n# FORECAST_ICON=$(echo \"$WEATHER_DATA\" | jq -r '.daily.icon')\n\necho \"$(print_weather_icon \"$NOW_ICON\")   $(print_temperature \"$NOW_TEMP\" \"$UNITS\")\"\necho \"---\"\nweather --hide-icon \"$LOCATION_OPT\" \"$LOCATION\" | sed 's/$/| trim=false/' | sed '/Rain chance:/{s/$/ font=Courier/;n;s/$/ font=Courier/;}'\necho \"---\"\necho \"View details on web ...|href=https://darksky.net/forecast/$LATITUDE,$LONGITUDE/${UNITS}12\"\necho \"---\"\necho \"Refresh... | refresh=true\"\n"
				}
			],
			"path": "Weather/DarkSky/weather.15m.sh",
			"filename": "weather.15m.sh",
			"dir": "Weather/DarkSky",
			"docsPlugin": "Weather/DarkSky/weather.15m.sh.html",
			"docsCategory": "Weather/DarkSky.html",
			"pathSegments": [
				"Weather",
				"DarkSky"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": false
				},
				{
					"path": "Weather/DarkSky",
					"text": "DarkSky",
					"isLast": true
				}
			],
			"title": "Weather",
			"version": "v0.0.0",
			"author": "Richard Colley",
			"authors": [
				{
					"name": "Richard Colley",
					"githubUsername": "typerlc",
					"imageURL": "https://avatars.githubusercontent.com/u/57333?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display local weather collected using darksky-weather (install from brew).",
			"imageURL": "https://github.com/typerlc/bitbar-weather/raw/master/weather_preview.png",
			"dependencies": [
				"darksky-weather",
				"curl",
				"jq"
			],
			"aboutURL": "https://github.com/typerlc/bitbar-weather/",
			"lastUpdated": "2021-03-08T15:22:08.407817Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Weather/typerlc-weather.15m.sh",
					"filename": "typerlc-weather.15m.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eWeather\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRichard Colley\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etyperlc\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay local weather collected using darksky-weather (install from brew).\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003edarksky-weather,curl,jq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/typerlc/bitbar-weather/\u003c/bitbar.abouturl\u003e\n# \u003cbitbar.image\u003ehttps://github.com/typerlc/bitbar-weather/raw/master/weather_preview.png\u003c/bitbar.image\u003e\n\nscript_dir=$(dirname \"$0\")\nscript_name=$(basename \"$0\")\nlocation_config=\"${script_dir:-.}/.$script_name.location\"\n\n# shellcheck source=/dev/null\n[ -f \"$location_config\" ] \u0026\u0026 . \"$location_config\"\n\nprint_weather_icon() {\n    case $1 in\n        clear*) echo -n ‚òÄÔ∏è  ;;\n        cloud*) echo -n ‚òÅÔ∏è ;;\n        fog|haze*|mist) echo -n üå´ ;;\n        partly-cloudy*) echo -n ‚õÖÔ∏è ;;\n        rain) echo -n üåß ;;\n        sleet|snow) echo -n üå® ;;\n        thunderstorm) echo -n ‚õà  ;;\n        tornado) echo -n üå™ ;;\n        wind) echo -n üå¨ ;;\n        *) echo -n \"?\" ;;\n    esac\n}\n\nprint_temperature() {\n    temperature=$1\n    units=$2\n    case $units in\n        celsius|si|ca|uk) unit_string=C ;;\n        fahrenheit|us) unit_string=F ;;\n        *) unit_string=C ;;\n    esac\n    echo -n \"$temperature¬∞$unit_string\"\n}\n\n\nexport PATH=\"/usr/local/bin:${PATH}\"\n\n[ -n \"$LOCATION\" ] \u0026\u0026 LOCATION_OPT=-l\n\nWEATHER_DATA=\"$(weather -json \"$LOCATION_OPT\" \"$LOCATION\")\"\n\nLATITUDE=$(echo \"$WEATHER_DATA\" | jq -r '.latitude')\nLONGITUDE=$(echo \"$WEATHER_DATA\" | jq -r '.longitude')\nUNITS=$(echo \"$WEATHER_DATA\" | jq -r '.flags.units')\n\nNOW_TEMP=$(echo \"$WEATHER_DATA\" | jq -r '.currently.temperature')\nNOW_ICON=$(echo \"$WEATHER_DATA\" | jq -r '.currently.icon')\n\necho \"$(print_weather_icon \"$NOW_ICON\")   $(print_temperature \"$NOW_TEMP\" \"$UNITS\")\"\necho \"---\"\nweather --hide-icon \"$LOCATION_OPT\" \"$LOCATION\" | sed 's/$/| trim=false/' | sed '/Rain chance:/{s/$/ font=Courier/;n;s/$/ font=Courier/;}'\necho \"---\"\necho \"View details on web ...|href=https://darksky.net/forecast/$LATITUDE,$LONGITUDE/${UNITS}12\"\necho \"---\"\necho \"Refresh... | refresh=true\"\n"
				}
			],
			"path": "Weather/typerlc-weather.15m.sh",
			"filename": "typerlc-weather.15m.sh",
			"dir": "Weather",
			"docsPlugin": "Weather/typerlc-weather.15m.sh.html",
			"docsCategory": "Weather.html",
			"pathSegments": [
				"Weather"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": true
				}
			],
			"title": "Weather",
			"version": "v0.0.0",
			"author": "Richard Colley",
			"authors": [
				{
					"name": "Richard Colley",
					"githubUsername": "typerlc",
					"imageURL": "https://avatars.githubusercontent.com/u/57333?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display local weather collected using darksky-weather (install from brew).",
			"imageURL": "https://github.com/typerlc/bitbar-weather/raw/master/weather_preview.png",
			"dependencies": [
				"darksky-weather",
				"curl",
				"jq"
			],
			"aboutURL": "https://github.com/typerlc/bitbar-weather/",
			"lastUpdated": "2021-03-08T15:22:08.797218Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Weather/weather.15m.py",
					"filename": "weather.15m.py",
					"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 /usr/bin/python3\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eWeather - OpenWeatherMap\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.3\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDaniel Seripap\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eseripap\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGrabs simple weather information from openweathermap. Needs configuration for location and API key.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://poolis.github.io/bitbar-plugins/open-weather-preview.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython,emoji\u003c/bitbar.dependencies\u003e\n\nimport emoji\nimport json\nfrom urllib.request import urlopen\nfrom urllib.error import URLError\nfrom random import randint\nimport datetime\n\nlocation_name = 'London,GB'\napi_key = '8b4824b451d5db1612156837df880f55'\nunits = 'imperial'  # kelvin, metric, imperial\nlang = 'en'\n\n\ndef get_wx():\n    if api_key == \"\":\n        return False\n\n    try:\n        daily_wx = json.load(urlopen(f'http://api.openweathermap.org/data/2.5/forecast/daily?q={location_name}'\n                                     f'\u0026units={units}\u0026lang={lang}\u0026appid={api_key}\u0026v={str(randint(0, 100))}'))\n        location = str(daily_wx['city']['id'])\n        wx = json.load(urlopen(\n            'http://api.openweathermap.org/data/2.5/weather?id=' + location + '\u0026units=' + units + '\u0026lang=' + lang + '\u0026appid=' + api_key + \"\u0026v=\" + str(\n                randint(0, 100))))\n    except URLError:\n        return False\n\n    if units == 'metric':\n        unit = 'C'\n    elif units == 'imperial':\n        unit = 'F'\n    else:\n        unit = 'K'  # Default is kelvin\n\n    try:\n        daily_forecast = []\n        for day in daily_wx['list']:\n            daily_forecast.append({'id': day['weather'][0]['id'],\n                                   'datetime': datetime.datetime.fromtimestamp(day['dt']),\n                                   'max': str(int(round(day['temp']['max']))),\n                                   'min': str(int(round(day['temp']['min'])))})\n        weather_data = {\n            'temperature': str(int(round(wx['main']['temp']))),\n            'condition': str(wx['weather'][0]['description']),\n            'id': wx['weather'][0]['id'],\n            'city': wx['name'],\n            'unit': '¬∞' + unit,\n            'daily_forecast': daily_forecast\n        }\n    except KeyError:\n        return False\n\n    return weather_data\n\n\ndef render_wx():\n    weather_data = get_wx()\n    emoji_dict = {\n        200: \":zap:\", 201: \":zap:\", 202: \":zap:\", 210: \":zap:\", 211: \":zap:\", 212: \":zap:\", 221: \":zap:\", 230: \":zap:\",\n        231: \":zap:\", 232: \":zap:\",\n        300: \":umbrella:\", 301: \":umbrella:\", 302: \":umbrella:\", 310: \":umbrella:\", 311: \":umbrella:\",\n        312: \":umbrella:\", 313: \":umbrella:\", 314: \":umbrella:\", 321: \":umbrella:\",\n        500: \":umbrella:\", 501: \":umbrella:\", 502: \":umbrella:\", 503: \":umbrella:\", 504: \":umbrella:\",\n        511: \":umbrella:\", 520: \":umbrella:\", 521: \":umbrella:\", 522: \":umbrella:\", 531: \":umbrella:\",\n        600: \":snowflake:\", 601: \":snowflake:\", 602: \":snowflake:\", 611: \":snowflake:\", 612: \":snowflake:\",\n        613: \":snowflake:\", 615: \":snowflake:\", 616: \":snowflake:\", 620: \":snowflake:\", 621: \":snowflake:\",\n        622: \":snowflake:\",\n        701: \":fog:\", 711: \":fog:\", 721: \":fog:\", 731: \":fog:\", 741: \":fog:\", 751: \":fog:\", 761: \":fog:\", 762: \":fog:\",\n        771: \":fog:\",\n        781: \":cyclone:\",\n        800: \":sunny:\",\n        801: \":partly_sunny:\", 802: \":partly_sunny:\", 803: \":cloud:\", 804: \":cloud:\",\n    }\n    tridash = '\\n' + '---' + '\\n'\n\n    if weather_data is False:\n        return 'Err' + tridash + 'Could not get weather; Maybe check API key or location?'\n\n    emojiweather = emoji.emojize(emoji_dict[weather_data['id']])\n\n    emoji_t = '' + emojiweather + weather_data['temperature'] + weather_data['unit']\n    condi = [x.capitalize() for x in weather_data['condition'].split(' ')]\n    daily_forecast_encoded = '\\n'\n    for daily_forecast in weather_data['daily_forecast']:\n        daily_forecast_encoded = f\"{daily_forecast_encoded}{daily_forecast['datetime'].strftime('%a')} \" \\\n                                 f\"{daily_forecast['datetime'].month}/{daily_forecast['datetime'].day} \" \\\n                                 f\"{emoji.emojize(emoji_dict[daily_forecast['id']])} \" \\\n                                 f\"{daily_forecast['max']}{weather_data['unit']}/\" \\\n                                 f\"{daily_forecast['min']}{weather_data['unit']} | font=Menlo color=white\\n\"\n    return f'{emoji_t}{tridash}{\" \".join(condi)} | refresh = true{daily_forecast_encoded}'\n\n\nprint(render_wx())\n"
				}
			],
			"path": "Weather/weather.15m.py",
			"filename": "weather.15m.py",
			"dir": "Weather",
			"docsPlugin": "Weather/weather.15m.py.html",
			"docsCategory": "Weather.html",
			"pathSegments": [
				"Weather"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": true
				}
			],
			"title": "Weather - OpenWeatherMap",
			"version": "v1.3",
			"author": "Daniel Seripap",
			"authors": [
				{
					"name": "Daniel Seripap",
					"githubUsername": "seripap",
					"imageURL": "https://avatars.githubusercontent.com/u/683200?v=4",
					"bio": "untitled_document.html",
					"primary": true
				}
			],
			"desc": "Grabs simple weather information from openweathermap. Needs configuration for location and API key.",
			"imageURL": "https://poolis.github.io/bitbar-plugins/open-weather-preview.png",
			"dependencies": [
				"python",
				"emoji"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:08.810476Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Weather/yahoo-weather.5m.py",
					"filename": "yahoo-weather.5m.py",
					"content": "#!/usr/bin/env LC_ALL=en_US.UTF-8 /usr/local/bin/python3\n#\n# \u003cbitbar.title\u003eYahoo Weather\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev3.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003emgjo5899\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emgjo5899\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eIt tells you the current weather condition of the location where your computer is located at.  It knows the location of the computer by using its public IP.  You can also manually set the city and region through modifying the file. \u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/YNypf0P.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n# by mgjo5899\n\nimport json, uuid, time, hmac, hashlib\n\nfrom base64 import b64encode\nfrom urllib.request import urlopen, Request\nfrom urllib.parse import urlencode, quote\n\n# Change unit to 'c' for celsius and 'f' for fahrenheit\nunit = 'c'\n\n# General Placeholders\nurl = 'https://weather-ydn-yql.media.yahoo.com/forecastrss'\nmethod = 'GET'\nconcat = '\u0026'\n\n# Credentials\napp_id = 'f776QQ32'\nconsumer_key = 'dj0yJmk9RlJhbUVpUEpsSUxEJmQ9WVdrOVpqYzNObEZSTXpJbWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmc3Y9MCZ4PTk0'\nconsumer_secret = '75c592717d22c5cce623d2c2a1d5a5b36786d865'\n\n# Query and authentication related\nquery = {'location': 'seoul,korea', 'format': 'json', 'u': unit}\noauth = {\n    'oauth_consumer_key': consumer_key,\n    'oauth_nonce': uuid.uuid4().hex,\n    'oauth_signature_method': 'HMAC-SHA1',\n    'oauth_timestamp': str(int(time.time())),\n    'oauth_version': '1.0'\n}\n\n\n# Error handling decorator\ndef exception_handler(msg=\"Something is wrong\"):\n    def decorator(func):\n        def new_func(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n            except:\n                print(f\"Error: {msg}\")\n                exit(1)\n        return new_func\n    return decorator\n\n\n@exception_handler(msg=\"Location service\")\ndef get_location_using_ip():\n    service_endpoint = 'http://ip-api.com/json'\n    r = urlopen(service_endpoint).read()\n    j = json.loads(r)\n    city = j['city']\n    region = j['region']\n\n    return f\"{city},{region}\"\n\n\ndef get_auth_header():\n    global oauth\n    merged_params = query.copy()\n    merged_params.update(oauth)\n    sorted_params = [k + '=' + quote(merged_params[k], safe='') for k in sorted(merged_params.keys())]\n    signature_base_str =  method + concat + quote(url, safe='') + concat + quote(concat.join(sorted_params))\n    composite_key = quote(consumer_secret, safe='') + concat\n    oauth_signature = b64encode(hmac.new(composite_key.encode(), msg=signature_base_str.encode(), digestmod=hashlib.sha1).digest()).decode()\n    oauth['oauth_signature'] = oauth_signature\n    auth_header = 'OAuth ' + ', '.join(['{}=\"{}\"'.format(k,v) for k,v in oauth.items()])\n\n    return auth_header\n\n\n@exception_handler(msg=\"Yahoo Weather API\")\ndef get_weather(auth_header):\n    request_url = url + '?' + urlencode(query)\n    request = Request(request_url)\n    request.add_header('Authorization', auth_header)\n    request.add_header('X-Yahoo-App-Id', app_id)\n    r = urlopen(request).read()\n    j = json.loads(r)\n    condition_data = j['current_observation']['condition']\n    condition = condition_data['text']\n    temperature = condition_data['temperature']\n\n    return (condition, temperature)\n\nlocation = get_location_using_ip()\nquery['location'] = location\nauth_header = get_auth_header()\ncondition, temperature = get_weather(auth_header)\n\nif unit == 'c':\n  print(str(condition) + ' : ' + str(int(temperature)) + '¬∞C')\nelif unit == 'f':\n  print(str(condition) + ' : ' + str(int(temperature)) + '¬∞F')\n"
				}
			],
			"path": "Weather/yahoo-weather.5m.py",
			"filename": "yahoo-weather.5m.py",
			"dir": "Weather",
			"docsPlugin": "Weather/yahoo-weather.5m.py.html",
			"docsCategory": "Weather.html",
			"pathSegments": [
				"Weather"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": true
				}
			],
			"title": "Yahoo Weather",
			"version": "v3.0",
			"author": "mgjo5899",
			"authors": [
				{
					"name": "Joseph",
					"githubUsername": "mgjo5899",
					"imageURL": "https://avatars.githubusercontent.com/u/17048946?v=4",
					"bio": "Listening to Yiruma songs helps me to focus when coding :)",
					"primary": true
				}
			],
			"desc": "It tells you the current weather condition of the location where your computer is located at.  It knows the location of the computer by using its public IP.  You can also manually set the city and region through modifying the file. ",
			"imageURL": "https://i.imgur.com/YNypf0P.jpg",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:08.917558Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Weather/emojiWeather.30m.js",
					"filename": "emojiWeather.30m.js",
					"content": "#!/usr/local/bin/node\n/* jshint esversion: 6 */\n\n//# \u003cbitbar.title\u003eemojiWeather\u003c/bitbar.title\u003e\n//# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n//# \u003cbitbar.author\u003eChandler Davidson\u003c/bitbar.author\u003e\n//# \u003cbitbar.author.github\u003eChandler-Davidson\u003c/bitbar.author.github\u003e\n//# \u003cbitbar.desc\u003eDisplays weather info as an emoji.\u003c/bitbar.desc\u003e\n//# \u003cbitbar.image\u003ehttps://static1.squarespace.com/static/5818f78ef5e2314f65b76331/t/59ded8e6bce1769ff7340715/1507776754374/emojiWeather?format=1500w\u003c/bitbar.image\u003e\n//# \u003cbitbar.dependencies\u003enode/bitbar.dependencies\u003e\n//# \u003cbitbar.abouturl\u003ehttps://github.com/Chandler-Davidson/emojiWeather/blob/master/emojiWeather.1h.js\u003c/bitbar.abouturl\u003e\n\n\nlet request = require('request');\n\nlet apiKey = '';    // https://home.openweathermap.org/api_keys\nlet city = 'Huntsville';\nlet url = `http://api.openweathermap.org/data/2.5/weather?q=${city}\u0026units=imperial\u0026appid=${apiKey}`;\n\nlet emojis = [\n    ':cry:',        // No connection\n    '::',           // \n    ':zap:',        // Thunderstorm\n    ':umbrella:',    // Rain\n    '::',           // \n    ':cloud:',      // Cloudy\n    ':snowflake:',  // Snow\n    '::',           // \n    ':sunny:',      // Clear\n    ':cyclone:'];    // Extreme\n\nrequest(url, function (err, response, body) {   // Collect JSON object\n    if (err) {  // If no connection, so sad...\n        console.log(emojis[0]);\n    } else {\n\n        let weather = JSON.parse(body);\n        let id = weather.weather[0].id; // Seperate the weather ID\n        id = Math.ceil(id / 100);       // Get only the hundreds place (1xx, 2xx)\n\n        console.log(emojis[id]);        // Print the emoji \n    }\n});"
				}
			],
			"path": "Weather/emojiWeather.30m.js",
			"filename": "emojiWeather.30m.js",
			"dir": "Weather",
			"docsPlugin": "Weather/emojiWeather.30m.js.html",
			"docsCategory": "Weather.html",
			"pathSegments": [
				"Weather"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": true
				}
			],
			"title": "emojiWeather",
			"version": "v1.0",
			"author": "Chandler Davidson",
			"authors": [
				{
					"name": "Chandler Davidson",
					"githubUsername": "Chandler-Davidson",
					"imageURL": "https://avatars.githubusercontent.com/u/16169308?v=4",
					"bio": "A coffee fueled Software Engineer.",
					"primary": true
				}
			],
			"desc": "Displays weather info as an emoji.",
			"imageURL": "https://static1.squarespace.com/static/5818f78ef5e2314f65b76331/t/59ded8e6bce1769ff7340715/1507776754374/emojiWeather?format=1500w",
			"dependencies": null,
			"aboutURL": "https://github.com/Chandler-Davidson/emojiWeather/blob/master/emojiWeather.1h.js",
			"lastUpdated": "2021-03-08T15:22:08.627393Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Weather/weather.15m.sh",
					"filename": "weather.15m.sh",
					"content": "#!/bin/bash\n#\n# \u003cbitbar.title\u003eweather\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eChongyu Yuan\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ennnggel\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003ereal-time Chinese weather info(includes aqi), required jq(https://aqicn.org/api/) and aqi token(https://aqicn.org/api/)(\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://s2.ax1x.com/2019/04/01/As7pVO.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash,jq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttp://www.yuanchongyu.com\u003c/bitbar.abouturl\u003e\n\nMENUFONT=\"size=12 font=UbuntuMono-Bold\"\nCOLORS=(\"#0ed812\" \"#ffde33\" \"#ff9933\" \"#cc0033\" \"#660099\" \"#7e0023\")\n\n# where to get the token -\u003e https://www.juhe.cn/docs/api/id/73\nWEATHER_TOKEN=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nWEATHER_CITY=\"xx\" #eg. ‰∏äÊµ∑\n\n# where to get the token -\u003e https://aqicn.org/api/\nAQI_TOKEN=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nAQI_CITY=\"xx\" #eg. shanghai\nAQI_DETAIL_URL=\"http://aqicn.org/city/${AQI_CITY}/\"\n\n\nWEATHER_DATA=$(curl -s \"http://apis.juhe.cn/simpleWeather/query?city=${WEATHER_CITY}\u0026key=${WEATHER_TOKEN}\")\n# DELETE ME, TEST DATA\nWEATHER_DATA=\"{\\\"reason\\\":\\\"Êü•ËØ¢ÊàêÂäü!\\\",\\\"result\\\":{\\\"city\\\":\\\"‰∏äÊµ∑\\\",\\\"realtime\\\":{\\\"temperature\\\":\\\"15\\\",\\\"humidity\\\":\\\"25\\\",\\\"info\\\":\\\"Êô¥\\\",\\\"wid\\\":\\\"00\\\",\\\"direct\\\":\\\"ÂåóÈ£é\\\",\\\"power\\\":\\\"0Á∫ß\\\",\\\"aqi\\\":\\\"55\\\"},\\\"future\\\":[{\\\"date\\\":\\\"2019-04-01\\\",\\\"temperature\\\":\\\"9\\\\/17‚ÑÉ\\\",\\\"weather\\\":\\\"Êô¥ËΩ¨Â§ö‰∫ë\\\",\\\"wid\\\":{\\\"day\\\":\\\"00\\\",\\\"night\\\":\\\"01\\\"},\\\"direct\\\":\\\"ÂçóÈ£é\\\"},{\\\"date\\\":\\\"2019-04-02\\\",\\\"temperature\\\":\\\"11\\\\/16‚ÑÉ\\\",\\\"weather\\\":\\\"Èò¥ËΩ¨Â§ö‰∫ë\\\",\\\"wid\\\":{\\\"day\\\":\\\"02\\\",\\\"night\\\":\\\"01\\\"},\\\"direct\\\":\\\"‰∏úÂçóÈ£éËΩ¨‰∏úÈ£é\\\"},{\\\"date\\\":\\\"2019-04-03\\\",\\\"temperature\\\":\\\"11\\\\/17‚ÑÉ\\\",\\\"weather\\\":\\\"Èò¥\\\",\\\"wid\\\":{\\\"day\\\":\\\"02\\\",\\\"night\\\":\\\"02\\\"},\\\"direct\\\":\\\"‰∏úÈ£éËΩ¨‰∏úÂçóÈ£é\\\"},{\\\"date\\\":\\\"2019-04-04\\\",\\\"temperature\\\":\\\"13\\\\/15‚ÑÉ\\\",\\\"weather\\\":\\\"Â∞èÈõ®\\\",\\\"wid\\\":{\\\"day\\\":\\\"07\\\",\\\"night\\\":\\\"07\\\"},\\\"direct\\\":\\\"‰∏úÂçóÈ£éËΩ¨ÂçóÈ£é\\\"},{\\\"date\\\":\\\"2019-04-05\\\",\\\"temperature\\\":\\\"13\\\\/19‚ÑÉ\\\",\\\"weather\\\":\\\"Â§ö‰∫ë\\\",\\\"wid\\\":{\\\"day\\\":\\\"01\\\",\\\"night\\\":\\\"01\\\"},\\\"direct\\\":\\\"Ë•øÂåóÈ£éËΩ¨ÂçóÈ£é\\\"}]},\\\"error_code\\\":0}\"\n\nWEATHER_RES_REALTIME=$(echo \"${WEATHER_DATA}\" | /usr/local/bin/jq '.result.realtime')\nWEATHER_RES_REALTIME_INFO=$(echo \"${WEATHER_RES_REALTIME}\" | /usr/local/bin/jq -r '.info')\nWEATHER_RES_REALTIME_TEMPERATURE=$(echo \"${WEATHER_RES_REALTIME}\" | /usr/local/bin/jq -r '.temperature')\nWEATHER_FUTURE=$(echo \"${WEATHER_DATA}\" | /usr/local/bin/jq '.result.future')\nWEATHER_FUTURE_LENGTH=$(echo \"${WEATHER_FUTURE}\" | /usr/local/bin/jq 'length')\n\nAQI_DATA=$(curl -s \"http://api.waqi.info/feed/${AQI_CITY}/?token=${AQI_TOKEN}\")\n# DELETE ME, TEST DATA\nAQI_DATA=\"{\\\"status\\\":\\\"ok\\\",\\\"data\\\":{\\\"aqi\\\":824,\\\"idx\\\":1437,\\\"attributions\\\":[{\\\"url\\\":\\\"http://www.semc.gov.cn/\\\",\\\"name\\\":\\\"Shanghai Environment Monitoring Center(‰∏äÊµ∑Â∏ÇÁéØÂ¢ÉÁõëÊµã‰∏≠ÂøÉ)\\\"},{\\\"url\\\":\\\"http://106.37.208.233:20035/emcpublish/\\\",\\\"name\\\":\\\"China National Urban air quality real-time publishing platform (ÂÖ®ÂõΩÂüéÂ∏ÇÁ©∫Ê∞îË¥®ÈáèÂÆûÊó∂ÂèëÂ∏ÉÂπ≥Âè∞)\\\"},{\\\"url\\\":\\\"https://china.usembassy-china.org.cn/embassy-consulates/shanghai/air-quality-monitor-stateair/\\\",\\\"name\\\":\\\"U.S. Consulate Shanghai Air Quality Monitor\\\"},{\\\"url\\\":\\\"https://waqi.info/\\\",\\\"name\\\":\\\"World Air Quality Index Project\\\"}],\\\"city\\\":{\\\"geo\\\":[31.2047372,121.4489017],\\\"name\\\":\\\"Shanghai (‰∏äÊµ∑)\\\",\\\"url\\\":\\\"https://aqicn.org/city/shanghai\\\"},\\\"dominentpol\\\":\\\"pm25\\\",\\\"iaqi\\\":{\\\"co\\\":{\\\"v\\\":6.4},\\\"h\\\":{\\\"v\\\":20.4},\\\"no2\\\":{\\\"v\\\":20.2},\\\"o3\\\":{\\\"v\\\":67.5},\\\"p\\\":{\\\"v\\\":1019.2},\\\"pm10\\\":{\\\"v\\\":57},\\\"pm25\\\":{\\\"v\\\":824},\\\"so2\\\":{\\\"v\\\":4.6},\\\"t\\\":{\\\"v\\\":17.5},\\\"w\\\":{\\\"v\\\":0.3}},\\\"time\\\":{\\\"s\\\":\\\"2019-04-01 17:00:00\\\",\\\"tz\\\":\\\"+08:00\\\",\\\"v\\\":1554138000},\\\"debug\\\":{\\\"sync\\\":\\\"2019-04-01T18:49:19+09:00\\\"}}}\"\n\n# how to install jq -\u003e https://stedolan.github.io/jq/download/\nAQI_RES=$(echo \"${AQI_DATA}\" | /usr/local/bin/jq '.data.aqi')\n\nfunction aqi_colorize {\n  if [ \"$1\" -le 50 ]; then\n    echo \"${COLORS[0]}\"\n  elif [ \"$1\" -le 100 ]; then\n    echo \"${COLORS[1]}\"\n  elif [ \"$1\" -le 150 ]; then\n    echo \"${COLORS[2]}\"\n  elif [ \"$1\" -le 200 ]; then\n    echo \"${COLORS[3]}\"\n  elif [ \"$1\" -le 300 ]; then\n    echo \"${COLORS[4]}\"\n  else\n    echo \"${COLORS[5]}\"\n  fi\n}\n\nCOLOR=\"$(aqi_colorize \"${AQI_RES}\")\"\necho \"üå°Ô∏è${WEATHER_RES_REALTIME_INFO}${WEATHER_RES_REALTIME_TEMPERATURE}‚ÑÉüò∑${AQI_RES} | color=${COLOR} ${MENUFONT}\"\necho \"---\"\nfor(( i=0;i\u003cWEATHER_FUTURE_LENGTH;i++)) do\n  WEATHER_FUTURE_N=$(echo \"${WEATHER_FUTURE}\" | /usr/local/bin/jq \".[${i}]\")\n  WEATHER_FUTURE_N_DATE=$(echo \"${WEATHER_FUTURE_N}\" | /usr/local/bin/jq -r '.date')\n  WEATHER_FUTURE_N_WEATHER=$(echo \"${WEATHER_FUTURE_N}\" | /usr/local/bin/jq -r '.weather')\n  WEATHER_FUTURE_N_TEMPERATURE=$(echo \"${WEATHER_FUTURE_N}\" | /usr/local/bin/jq -r '.temperature')\n  echo \"${WEATHER_FUTURE_N_DATE} ${WEATHER_FUTURE_N_WEATHER}Ôºà${WEATHER_FUTURE_N_TEMPERATURE}Ôºâ\";\ndone;\necho \"AQI Detail... | href=${AQI_DETAIL_URL}\"\necho \"Refresh... | refresh=true\""
				}
			],
			"path": "Weather/weather.15m.sh",
			"filename": "weather.15m.sh",
			"dir": "Weather",
			"docsPlugin": "Weather/weather.15m.sh.html",
			"docsCategory": "Weather.html",
			"pathSegments": [
				"Weather"
			],
			"categoryPathSegments": [
				{
					"path": "Weather",
					"text": "Weather",
					"isLast": true
				}
			],
			"title": "weather",
			"version": "v1.0",
			"author": "Chongyu Yuan",
			"authors": [
				{
					"name": "Chongyu Yuan",
					"githubUsername": "nnnggel",
					"imageURL": "https://avatars.githubusercontent.com/u/17697169?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "real-time Chinese weather info(includes aqi), required jq(https://aqicn.org/api/) and aqi token(https://aqicn.org/api/)(",
			"imageURL": "https://s2.ax1x.com/2019/04/01/As7pVO.jpg",
			"dependencies": [
				"bash",
				"jq"
			],
			"aboutURL": "http://www.yuanchongyu.com",
			"lastUpdated": "2021-03-08T15:22:08.866956Z",
			"vars": null
		}
	]
}