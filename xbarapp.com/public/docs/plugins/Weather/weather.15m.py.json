{
	"plugin": {
		"files": [
			{
				"path": "Weather/weather.15m.py",
				"filename": "weather.15m.py",
				"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 /usr/bin/python3\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eWeather - OpenWeatherMap\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.3\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eDaniel Seripap\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eseripap\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGrabs simple weather information from openweathermap. Needs configuration for location and API key.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://poolis.github.io/bitbar-plugins/open-weather-preview.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython,emoji\u003c/bitbar.dependencies\u003e\n\nimport emoji\nimport json\nfrom urllib.request import urlopen\nfrom urllib.error import URLError\nfrom random import randint\nimport datetime\n\nlocation_name = 'London,GB'\napi_key = '8b4824b451d5db1612156837df880f55'\nunits = 'imperial'  # kelvin, metric, imperial\nlang = 'en'\n\n\ndef get_wx():\n    if api_key == \"\":\n        return False\n\n    try:\n        daily_wx = json.load(urlopen(f'http://api.openweathermap.org/data/2.5/forecast/daily?q={location_name}'\n                                     f'\u0026units={units}\u0026lang={lang}\u0026appid={api_key}\u0026v={str(randint(0, 100))}'))\n        location = str(daily_wx['city']['id'])\n        wx = json.load(urlopen(\n            'http://api.openweathermap.org/data/2.5/weather?id=' + location + '\u0026units=' + units + '\u0026lang=' + lang + '\u0026appid=' + api_key + \"\u0026v=\" + str(\n                randint(0, 100))))\n    except URLError:\n        return False\n\n    if units == 'metric':\n        unit = 'C'\n    elif units == 'imperial':\n        unit = 'F'\n    else:\n        unit = 'K'  # Default is kelvin\n\n    try:\n        daily_forecast = []\n        for day in daily_wx['list']:\n            daily_forecast.append({'id': day['weather'][0]['id'],\n                                   'datetime': datetime.datetime.fromtimestamp(day['dt']),\n                                   'max': str(int(round(day['temp']['max']))),\n                                   'min': str(int(round(day['temp']['min'])))})\n        weather_data = {\n            'temperature': str(int(round(wx['main']['temp']))),\n            'condition': str(wx['weather'][0]['description']),\n            'id': wx['weather'][0]['id'],\n            'city': wx['name'],\n            'unit': 'Â°' + unit,\n            'daily_forecast': daily_forecast\n        }\n    except KeyError:\n        return False\n\n    return weather_data\n\n\ndef render_wx():\n    weather_data = get_wx()\n    emoji_dict = {\n        200: \":zap:\", 201: \":zap:\", 202: \":zap:\", 210: \":zap:\", 211: \":zap:\", 212: \":zap:\", 221: \":zap:\", 230: \":zap:\",\n        231: \":zap:\", 232: \":zap:\",\n        300: \":umbrella:\", 301: \":umbrella:\", 302: \":umbrella:\", 310: \":umbrella:\", 311: \":umbrella:\",\n        312: \":umbrella:\", 313: \":umbrella:\", 314: \":umbrella:\", 321: \":umbrella:\",\n        500: \":umbrella:\", 501: \":umbrella:\", 502: \":umbrella:\", 503: \":umbrella:\", 504: \":umbrella:\",\n        511: \":umbrella:\", 520: \":umbrella:\", 521: \":umbrella:\", 522: \":umbrella:\", 531: \":umbrella:\",\n        600: \":snowflake:\", 601: \":snowflake:\", 602: \":snowflake:\", 611: \":snowflake:\", 612: \":snowflake:\",\n        613: \":snowflake:\", 615: \":snowflake:\", 616: \":snowflake:\", 620: \":snowflake:\", 621: \":snowflake:\",\n        622: \":snowflake:\",\n        701: \":fog:\", 711: \":fog:\", 721: \":fog:\", 731: \":fog:\", 741: \":fog:\", 751: \":fog:\", 761: \":fog:\", 762: \":fog:\",\n        771: \":fog:\",\n        781: \":cyclone:\",\n        800: \":sunny:\",\n        801: \":partly_sunny:\", 802: \":partly_sunny:\", 803: \":cloud:\", 804: \":cloud:\",\n    }\n    tridash = '\\n' + '---' + '\\n'\n\n    if weather_data is False:\n        return 'Err' + tridash + 'Could not get weather; Maybe check API key or location?'\n\n    emojiweather = emoji.emojize(emoji_dict[weather_data['id']])\n\n    emoji_t = '' + emojiweather + weather_data['temperature'] + weather_data['unit']\n    condi = [x.capitalize() for x in weather_data['condition'].split(' ')]\n    daily_forecast_encoded = '\\n'\n    for daily_forecast in weather_data['daily_forecast']:\n        daily_forecast_encoded = f\"{daily_forecast_encoded}{daily_forecast['datetime'].strftime('%a')} \" \\\n                                 f\"{daily_forecast['datetime'].month}/{daily_forecast['datetime'].day} \" \\\n                                 f\"{emoji.emojize(emoji_dict[daily_forecast['id']])} \" \\\n                                 f\"{daily_forecast['max']}{weather_data['unit']}/\" \\\n                                 f\"{daily_forecast['min']}{weather_data['unit']} | font=Menlo color=white\\n\"\n    return f'{emoji_t}{tridash}{\" \".join(condi)} | refresh = true{daily_forecast_encoded}'\n\n\nprint(render_wx())\n"
			}
		],
		"path": "Weather/weather.15m.py",
		"filename": "weather.15m.py",
		"dir": "Weather",
		"docsPlugin": "Weather/weather.15m.py.html",
		"docsCategory": "Weather.html",
		"pathSegments": [
			"Weather"
		],
		"categoryPathSegments": [
			{
				"path": "Weather",
				"text": "Weather",
				"isLast": true
			}
		],
		"title": "Weather - OpenWeatherMap",
		"version": "v1.3",
		"author": "Daniel Seripap",
		"authors": [
			{
				"name": "Daniel Seripap",
				"githubUsername": "seripap",
				"imageURL": "https://avatars.githubusercontent.com/u/683200?v=4",
				"bio": "untitled_document.html",
				"primary": true
			}
		],
		"desc": "Grabs simple weather information from openweathermap. Needs configuration for location and API key.",
		"imageURL": "https://poolis.github.io/bitbar-plugins/open-weather-preview.png",
		"dependencies": [
			"python",
			"emoji"
		],
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:22:08.810476Z",
		"vars": null
	}
}