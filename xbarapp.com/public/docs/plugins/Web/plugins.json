{
	"plugins": [
		{
			"files": [
				{
					"path": "Web/beeminder.10m.py",
					"filename": "beeminder.10m.py",
					"content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eBeeminder\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eBen Congdon\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebcongdon\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/XamwU1E.png\u003c/bitbar.image\u003e\n# \u003cbitbar.desc\u003eDisplays your active Beeminder goals and their due dates/amounts\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003epython,requests\u003c/bitbar.dependencies\u003e\n\nimport requests\n\n# NOTE: Change these to set your credentials\nUSERNAME = ''\nAUTH_TOKEN = ''\n\n# Don't change anythine below this line\nif not USERNAME or not AUTH_TOKEN:\n    print('⚠️\\n---\\nBeeminder: No username and/or auth token provided!')\n    exit(1)\nAPI_URL = 'https://www.beeminder.com/api/v1/users/{}.json'.format(USERNAME)\n\nreq = requests.get(API_URL, params=dict(\n    auth_token=AUTH_TOKEN, datapoints_count=1, associations=True))\n\ndata = req.json()\ngoals = data['goals']\n\noutput = '🐝\\n---\\n'\nmax_slug_len = max(len(goal['slug']) + 1 for goal in goals)\nfor goal in goals:\n    if goal.get('coasting'):\n        continue\n    goal_url = 'https://www.beeminder.com/{}/{}'.format(USERNAME, goal['slug'])\n    goal_params = 'href={} color={}'.format(\n        goal_url, goal['roadstatuscolor'])\n    output += \"{:\u003c20.15s}\\t{}|{}\\n\".format(goal['slug'] + ':',\n                                           goal['limsum'], goal_params)\n\nprint(output)\n"
				}
			],
			"path": "Web/beeminder.10m.py",
			"filename": "beeminder.10m.py",
			"dir": "Web",
			"docsPlugin": "Web/beeminder.10m.py.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Beeminder",
			"version": "v1.0",
			"author": "Ben Congdon",
			"authors": [
				{
					"name": "Ben Congdon",
					"githubUsername": "bcongdon",
					"imageURL": "https://avatars.githubusercontent.com/u/706257?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays your active Beeminder goals and their due dates/amounts",
			"imageURL": "https://i.imgur.com/XamwU1E.png",
			"dependencies": [
				"python",
				"requests"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.363387Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/nightscout.30s.js",
					"filename": "nightscout.30s.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n/* jshint esversion: 6 */\n\n/*\n\u003cbitbar.title\u003eBitBar Nightscout Plugin\u003c/bitbar.title\u003e\n\u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n\u003cbitbar.author\u003eCharlie Chrisman\u003c/bitbar.author\u003e\n\u003cbitbar.author.github\u003ecachrisman\u003c/bitbar.author.github\u003e\n\u003cbitbar.desc\u003eGets the most recent reading and trend arrow from nightscout\u003c/bitbar.desc\u003e\n\u003cbitbar.image\u003ehttps://raw.githubusercontent.com/cachrisman/bitbar-nightscout/master/screenshot.png\u003c/bitbar.image\u003e\n\u003cbitbar.dependencies\u003enode, npm, npm/fs, npm/got\u003c/bitbar.dependencies\u003e\n\u003cbitbar.abouturl\u003ehttps://github.com/cachrisman/bitbar-nightscout\u003c/bitbar.abouturl\u003e\n*/\n\n// user settings\nconst HOSTNAME = 'your_nightscout_site.herokuapp.com';\nconst TOKEN = 'your_nightscout_api_token_with_read_access';\nconst BG_HIGH_LEVEL = 180;\nconst BG_LOW_LEVEL = 70;\n\n// don't edit code below!\n\nconst fs = require('fs');\nconst got = require('got');\n\nconst requestUrl = `https://${HOSTNAME}/api/v1/entries.json?count=1\u0026TOKEN=${TOKEN}`;\nconst ver = '1.0';\n\nconst symbols = {\n  'NONE': '?',\n  'DoubleUp': '⇈',\n  'SingleUp': '↑',\n  'FortyFiveUp': '↗',\n  'Flat': '→',\n  'FortyFiveDown': '↘',\n  'SingleDown': '↓',\n  'DoubleDown': '⇊',\n  'NOT COMPUTABLE': '??',\n  'RATE OUT OF RANGE': '⇕'\n};\n\nconst data_dir = __dirname + '/nightscout/';\nif (!fs.existsSync(data_dir)) fs.mkdirSync(data_dir);\nconst last_reading_file = data_dir + 'last_reading';\n\nfunction getLastReading() {\n  let last_reading;\n  try {\n    last_reading = JSON.parse(fs.readFileSync(last_reading_file, 'utf8'))[0];\n  } catch (e) {\n    logger('error.log', JSON.stringify(e));\n    last_reading = {_id:''};\n  }\n  return last_reading;\n}\n\nfunction logger(file, data) {\n  if (fs.existsSync(data_dir + file)) \n    fs.appendFileSync(data_dir + file, data + '\\n');\n  else \n    fs.writeFileSync(data_dir + file, data + '\\n');\n}\n\nfunction writeOutput(data) {\n  let glucose = parseInt(data.sgv);\n  let date = new Date(data.date);\n  let trend = data.trend;\n  let direction = data.direction;\n\n  let top_line = `BG: ${glucose} ${symbols[direction]}`;\n\n  if (glucose \u003e BG_HIGH_LEVEL)\n    top_line += ' | color=yellow';\n  else if (glucose \u003c BG_LOW_LEVEL)\n    top_line += ' | color=red';\n\n  console.log(`${top_line}\n---\nLast Reading: ${date.toLocaleString()}\nBlood Glucose: ${glucose}\nTrend: ${trend}\nDirection: ${direction} ${symbols[direction]}\n---\nRefresh | refresh=true terminal=false\n---\nBitBar Nightscout Plugin v${ver}\n--by Charlie Chrisman | href=http://www.charliechrisman.com\n-----\n--GitHub Page | href=https://github.com/cachrisman/bitbar-nightscout\n--Changelog | href=https://github.com/cachrisman/bitbar-nightscout/blob/master/CHANGELOG.md`);\n}\n\ngot(requestUrl).then(response =\u003e {\n  let last_reading = getLastReading();\n  let data = JSON.parse(response.body)[0];\n  if (data._id !== last_reading._id) {\n    logger('readings.log', response.body);\n    fs.writeFileSync(last_reading_file, response.body);\n  }\n  writeOutput(data);\n}).catch(err =\u003e {\n  writeOutput(last_reading);\n  logger('error.log', `${new Date()} - ${JSON.stringify(err)}`);\n});\n"
				}
			],
			"path": "Web/nightscout.30s.js",
			"filename": "nightscout.30s.js",
			"dir": "Web",
			"docsPlugin": "Web/nightscout.30s.js.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "BitBar Nightscout Plugin",
			"version": "1.0",
			"author": "Charlie Chrisman",
			"authors": [
				{
					"name": "Charlie Chrisman",
					"githubUsername": "cachrisman",
					"imageURL": "https://avatars.githubusercontent.com/u/6521666?v=4",
					"bio": "Solution Engineer @contentful",
					"primary": true
				}
			],
			"desc": "Gets the most recent reading and trend arrow from nightscout",
			"imageURL": "https://raw.githubusercontent.com/cachrisman/bitbar-nightscout/master/screenshot.png",
			"dependencies": [
				"node",
				"npm",
				"npm/fs",
				"npm/got"
			],
			"aboutURL": "https://github.com/cachrisman/bitbar-nightscout",
			"lastUpdated": "2021-03-08T15:22:10.07372Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/bilibili.py",
					"filename": "bilibili.py",
					"content": "#!/usr/bin/env PYTHONIOENCODING=UTF-8 /usr/local/bin/python3\n# coding=utf-8\n#\n# \u003cbitbar.title\u003eB站UP主粉丝和投稿视频播放信息获取\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003e胖哥带你入坑带你飞\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ebihell\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003e实时显示B站粉丝数和最新20次投稿的视频信息，请把userId改为你自己的。\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://bihell.com/media/2020/02/bilibili-bitbar.jpg\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n#\n# by tpxcer\n\nimport requests\nfrom datetime import datetime\n\n# 请把下面88900889改为你的用户Id\nuserId = 88900889\n\nuserInfoUrl = \"https://api.bilibili.com/x/web-interface/card?mid=\" + str(userId)\nuserInfoRes = requests.request(\"GET\", userInfoUrl).json()\nprint(\"粉丝：\" + str(userInfoRes['data']['follower']))\n\nsubMitVideosUrl = \"http://space.bilibili.com/ajax/member/getSubmitVideos?mid=\" + str(userId)\nsubMitVideosRes = requests.request(\"GET\", subMitVideosUrl).json()\nprint(\"---\")\nfor video in subMitVideosRes[\"data\"][\"vlist\"]:\n    print(video[\"title\"] + \"| color=#123def href=http://bilibili.com/video/av\" + str(video[\"aid\"]))\n    print(\"    投稿时间:\" + datetime.fromtimestamp(video[\"created\"]).strftime(\"%Y-%m-%d %H:%M:%S\") +\n          \"    时长:\" + str(video[\"length\"]) +\n          \"    播放:{0:6}\".format(video[\"play\"]) +\n          \"    收藏:\" + str(video[\"favorites\"]) +\n          \"    评论:\" + str(video[\"comment\"]) +\n          \"    弹幕:\" + str(video[\"video_review\"]))\n"
				}
			],
			"path": "Web/bilibili.py",
			"filename": "bilibili.py",
			"dir": "Web",
			"docsPlugin": "Web/bilibili.py.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "B站UP主粉丝和投稿视频播放信息获取",
			"version": "v1.0",
			"author": "胖哥带你入坑带你飞",
			"authors": [
				{
					"name": "Haseo Chen",
					"githubUsername": "bihell",
					"imageURL": "https://avatars.githubusercontent.com/u/19926035?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "实时显示B站粉丝数和最新20次投稿的视频信息，请把userId改为你自己的。",
			"imageURL": "https://bihell.com/media/2020/02/bilibili-bitbar.jpg",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.391771Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/commitstrip.1h.sh",
					"filename": "commitstrip.1h.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eCommitStrip\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e0.0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eYukai Huang\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eYukaii\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eRandom CommitStrip comics\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/CllAUAl.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash, jq\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/parvez/bitbar-plugins\u003c/bitbar.abouturl\u003e\necho \"| image=/9j/4AAQSkZJRgABAQAAAQABAAD//gAgQ29tcHJlc3NlZCBieSBqcGVnLXJlY29tcHJlc3MA/9sAhAADAwMDAwMEBAQEBQUFBQUHBwYGBwcLCAkICQgLEQsMCwsMCxEPEg8ODxIPGxUTExUbHxoZGh8mIiImMC0wPj5UAQMDAwMDAwQEBAQFBQUFBQcHBgYHBwsICQgJCAsRCwwLCwwLEQ8SDw4PEg8bFRMTFRsfGhkaHyYiIiYwLTA+PlT/wgARCAAQABADASIAAhEBAxEB/8QAFgABAQEAAAAAAAAAAAAAAAAABAUH/9oACAEBAAAAAMPam/8A/8QAFAEBAAAAAAAAAAAAAAAAAAAAB//aAAgBAhAAAABA/8QAFAEBAAAAAAAAAAAAAAAAAAAABv/aAAgBAxAAAAA//8QAIhAAAgICAgICAwAAAAAAAAAAAgQBAwUSBhEAEwcUIkFR/9oACAEBAAE/AHOHq4zAqPP5xOh11KXFsfpaZlTJahuYDIgZ9TIj/POSfG73F8Enkncoh7WV1r4SgGRt9bQRYEgZ1DVb1Extoc9eMcw4o+mmxkcAy7llcVSgG7mifS9fqquKsBgyIRiPx3iO48b+UsSXDcpx9VDLxQ+rTUCLOS+yglaBic3LVnXuE9jPUbfvz//EABsRAAEEAwAAAAAAAAAAAAAAAAIAARExBCIy/9oACAECAQE/ACLKkIZ+9qpf/8QAGBEAAgMAAAAAAAAAAAAAAAAAASEAA0H/2gAIAQMBAT8AArbxT//Z\"\necho ---\n\nJQ=$(command -v jq)\nCURL=$(curl --silent \"http://www.commitstrip.com/en/wp-json/wp/v2/posts?per_page=100\")\nIMG_NUM=$(echo \"${CURL}\" | $JQ -r 'length')\nIMG_RAND=$(( ( RANDOM % IMG_NUM )  + 1 ))\nID=$(echo \"${CURL}\" | $JQ -r \".[$IMG_RAND].id\")\n\nCURL=$(curl --silent \"http://www.commitstrip.com/en/wp-json/wp/v2/posts/$ID\")\nIMG_URL=$(echo \"${CURL}\" | $JQ -r '.content.rendered | match(\"http[^ \\\"]+\") | .string')\nLINK=$(echo \"${CURL}\" | $JQ -r '.link')\nTITLE=$(echo \"${CURL}\" | $JQ -r '.title.rendered')\nIMAGE=$(base64 -w 0 \u003c(curl --silent \"$IMG_URL\"))\necho \"| image=$IMAGE\"\necho ---\necho \"$TITLE | size=14 href='$LINK'\"\necho ---\necho \"Refresh... | refresh=true\"\n"
				}
			],
			"path": "Web/commitstrip.1h.sh",
			"filename": "commitstrip.1h.sh",
			"dir": "Web",
			"docsPlugin": "Web/commitstrip.1h.sh.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "CommitStrip",
			"version": "0.0.1",
			"author": "Yukai Huang",
			"authors": [
				{
					"name": "Yukai Huang",
					"githubUsername": "Yukaii",
					"imageURL": "https://avatars.githubusercontent.com/u/4230968?v=4",
					"bio": "會在網路上喵喵叫的都是男孩子;\r\n\r\nCo-founder and developer of HackMD.\r\n\r\n\r\nI use tabs, meow.",
					"primary": true
				}
			],
			"desc": "Random CommitStrip comics",
			"imageURL": "https://i.imgur.com/CllAUAl.png",
			"dependencies": [
				"bash",
				"jq"
			],
			"aboutURL": "https://github.com/parvez/bitbar-plugins",
			"lastUpdated": "2021-03-08T15:22:09.461106Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/disqus_comments.rb",
					"filename": "disqus_comments.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eDidqus Comments\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eCaleb Marble\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emarblenix\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShow comment count per post and number of commenets that are pending.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://raw.githubusercontent.com/marblenix/Disqus-Comments/master/disqus.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/marblenix/Disqus-Comments\u003c/bitbar.abouturl\u003e\n\nrequire 'net/http'\nrequire 'json'\n\n# Get your API key here: https://disqus.com/api/applications/\n# You only need \"read\" permissions and the public key.\npublic_key = ENV[\"DISQUS_API_KEY\"] || ''\nforum = ENV[\"DISQUS_FORUM\"] || 'marblenix' # Disqus shortname\n\nthreads_url = \"https://disqus.com/api/3.0/forums/listThreads.json\" +\n           \"?api_key=#{public_key}\" +\n           \"\u0026forum=#{forum}\"\n\npending_url = \"https://disqus.com/api/3.0/posts/list.json\" +\n           \"?api_key=#{public_key}\" +\n           \"\u0026forum=#{forum}\" +\n           \"\u0026include=unapproved\"\n\nthread_uri = URI(threads_url)\npending_uri = URI(pending_url)\n\nthread_results = JSON.parse(Net::HTTP.get(thread_uri))\npending_results = JSON.parse(Net::HTTP.get(pending_uri))\n\nthreads = []\npending = []\n\nif thread_results[\"code\"] == 0\n    posts = thread_results[\"response\"]\n    for post in posts\n        next if post[\"isClosed\"] == true\n        next if post[\"isDeleted\"] == true\n        threads \u003c\u003c {\n            \"link\"  =\u003e post[\"link\"],\n            \"title\" =\u003e post[\"clean_title\"],\n            \"posts\" =\u003e post[\"posts\"]\n        }\n    end\nend\n\nif pending_results[\"code\"] == 0\n    posts = pending_results[\"response\"]\n    for post in posts\n        next if post[\"isSpam\"] == true\n        next if post[\"isDeleted\"] == true\n        next if post[\"isDeletedByAuthor\"] == true\n        pending \u003c\u003c {\n            \"createdAt\" =\u003e post[\"createdAt\"]\n        }\n    end\nend\n\ncolor = pending.count \u003e 0 ? \"red\" : \"black\"\n\nputs \"#{forum.capitalize} | color=#{color}\"\nputs \"---\"\n\nputs \"#{pending.count}\\tComment(s) Pending... | href=https://#{forum}.disqus.com/admin/moderate/#/pending\"\n\nputs \"---\"\n\nfor thread in threads\n    puts \"#{thread[\"posts\"]}\\t#{thread[\"title\"]} | href=#{thread[\"link\"]}\"\nend\n"
				}
			],
			"path": "Web/disqus_comments.rb",
			"filename": "disqus_comments.rb",
			"dir": "Web",
			"docsPlugin": "Web/disqus_comments.rb.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Didqus Comments",
			"version": "v1.0",
			"author": "Caleb Marble",
			"authors": [
				{
					"name": "Cassidy Marble",
					"githubUsername": "marblenix",
					"imageURL": "https://avatars.githubusercontent.com/u/6401427?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Show comment count per post and number of commenets that are pending.",
			"imageURL": "https://raw.githubusercontent.com/marblenix/Disqus-Comments/master/disqus.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "https://github.com/marblenix/Disqus-Comments",
			"lastUpdated": "2021-03-08T15:22:09.562792Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/edd.15m.py",
					"filename": "edd.15m.py",
					"content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Easy Digital Downloads\n#\n# \u003cbitbar.title\u003eEasy Digital Downloads\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eZack Katz (zack@katz.co)\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ezackkatz\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003e\u003c/bitbar.image\u003e\n#\n# Fetch EDD sales for the day. Change your API domain, key, token, and currency as necessary.\n#\n# See http://docs.easydigitaldownloads.com/article/1135-edd-rest-api---stats for the API used\n# See http://docs.easydigitaldownloads.com/article/1131-edd-rest-api-introduction for general REST API info\n\nimport json\nimport urllib2\nimport calendar\nimport datetime\nfrom datetime import timedelta\n\ndomain = 'https://domain.co'\napi_key = 'yourAPIkey'\napi_token = 'yourAPItoken'\n\ndef get_edd():\n\n  if api_key == \"\":\n    return False\n\n  opener = urllib2.build_opener()\n  opener.addheaders = [('User-Agent', 'Mozilla/5.0')]\n  edd_stats = json.load( opener.open( domain + '/edd-api/stats/?key=' + api_key + '\u0026token=' + api_token ) )\n\n  try:\n    response = edd_stats\n  except KeyError:\n    return False\n\n  return response\n\ntry:\n  edd_data = get_edd()\n\n  # Get how many days have passed this month\n  now = datetime.datetime.now()\n  days_so_far = now.day\n\n  # Get how many days there were last month\n  last_month = now.replace(day=1) - timedelta(days=1)\n  days_last_month = calendar.monthrange(last_month.year, last_month.month)[1]\n\n  print 'Today: ${0:,.2f} from {1:,.0f} sales'.format( edd_data['stats']['earnings']['today'], float(edd_data['stats']['sales']['today']) )\n  print '---' # Show each of the next lines in a drop-down\n  print 'Current Month: ${0:,.2f} from {1:,.0f} sales'.format( edd_data['stats']['earnings']['current_month'], float(edd_data['stats']['sales']['current_month']))\n  print '${0:,.2f} daily average, ${1:,.2f} ASP'.format( float( edd_data['stats']['earnings']['current_month'] / days_so_far ), float(edd_data['stats']['earnings']['current_month'] / int(edd_data['stats']['sales']['current_month'])))\n  print 'Last Month: ${0:,.2f} from {1:,.0f} sales'.format( edd_data['stats']['earnings']['last_month'], float(edd_data['stats']['sales']['last_month']) )\n  print '${0:,.2f} daily average, ${1:,.2f} ASP'.format( float(edd_data['stats']['earnings']['last_month'] / days_last_month), float(edd_data['stats']['earnings']['last_month'] / int(edd_data['stats']['sales']['last_month'])))\n  print 'Total: ${0:,.2f} from {1:,.0f} sales'.format(edd_data['stats']['earnings']['totals'], float(edd_data['stats']['sales']['totals']))\n\nexcept Exception as inst:\n  print 'Error fetching stats'\n  print '---'\n  print type(inst)     # the exception instance\n  print inst.args      # arguments stored in .args\n  print inst\n"
				}
			],
			"path": "Web/edd.15m.py",
			"filename": "edd.15m.py",
			"dir": "Web",
			"docsPlugin": "Web/edd.15m.py.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Easy Digital Downloads",
			"version": "",
			"author": "Zack Katz (zack@katz.co)",
			"authors": [
				{
					"name": "Zack Katz",
					"githubUsername": "zackkatz",
					"imageURL": "https://avatars.githubusercontent.com/u/870979?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.682719Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/faith_in_humanity_score.6h.py",
					"filename": "faith_in_humanity_score.6h.py",
					"content": "#!/usr/bin/python\n# coding=utf-8\n#\n# \u003cbitbar.title\u003eFaith in humanity score\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eimpshum\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eimpshum\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays current score from https://faithinhumanityscore.com\u003c/bitbar.desc\u003e\n#\n# by impshum\n\nfrom requests import get\n\ndata = get('https://faithinhumanityscore.com/api.php').json()\nscore = data['score']\nprint(score)\n"
				}
			],
			"path": "Web/faith_in_humanity_score.6h.py",
			"filename": "faith_in_humanity_score.6h.py",
			"dir": "Web",
			"docsPlugin": "Web/faith_in_humanity_score.6h.py.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Faith in humanity score",
			"version": "v1.0",
			"author": "impshum",
			"authors": [
				{
					"name": "impshum",
					"githubUsername": "impshum",
					"imageURL": "https://avatars.githubusercontent.com/u/3229127?v=4",
					"bio": "If it wasn't for those damn whelks!",
					"primary": true
				}
			],
			"desc": "Displays current score from https://faithinhumanityscore.com",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.750996Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/feedly.rb",
					"filename": "feedly.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eFeedly\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003emorizyun\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emorizyun\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://farm2.staticflickr.com/1541/25991545133_924f4a1a59_c.jpg\u003c/bitbar.image\u003e\n\nrequire 'net/http'\nrequire 'json'\n\nARTICLE_LIMIT = 20.freeze\n\n## PROCEDURE TO GET AUTH TOKEN ##\n# https://blog.morizyun.com/blog/feedly-feed-api-script-bitbar/index.html\nFEEDLY_AUTH_TOKEN = 'YOUR access_token'.freeze\n\ndef get_json_by_feedly_api(url)\n  uri = URI(url)\n\n  req = Net::HTTP::Get.new(uri)\n\n  req['Authorization'] = \"Bearer #{FEEDLY_AUTH_TOKEN}\"\n\n  res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\n  JSON.parse(res.body)\nend\n\ndef feedly_feeds\n  # get profile\n  profile = get_json_by_feedly_api('https://cloud.feedly.com/v3/profile')\n\n  # get feed information in your profile\n  url = \"https://cloud.feedly.com/v3/streams/contents?streamId=user/#{profile['id']}/category/global.all\"\n  content = get_json_by_feedly_api(url)\n\n  return content['items']\nend\n\ndef output(item)\n  puts \"#{item['title']} | href=#{item['originId']}\"\nrescue =\u003e e\n  puts \"An error occured: #{e}\"\nend\n\nputs 'Feedly'\nputs '---'\nbegin\n  feedly_feeds.each { |item| output(item) }\nrescue\n  puts 'Content is currently unavailable. Please try resetting. | color=red'\nend\n"
				}
			],
			"path": "Web/feedly.rb",
			"filename": "feedly.rb",
			"dir": "Web",
			"docsPlugin": "Web/feedly.rb.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Feedly",
			"version": "",
			"author": "morizyun",
			"authors": [
				{
					"name": "morizyun",
					"githubUsername": "morizyun",
					"imageURL": "https://avatars.githubusercontent.com/u/2871482?v=4",
					"bio": "JavaScript (React, Redux,  Vue, Nuxt), Ruby, Rails, Firebase, Kotlin, Java",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://farm2.staticflickr.com/1541/25991545133_924f4a1a59_c.jpg",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.764432Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/freshdesk.3m.rb",
					"filename": "freshdesk.3m.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eFreshdesk\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eSean Stewart\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etheseanstewart\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/EqWSeUP.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eRuby\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.desc\u003eShows open Freshesk tickets count\u003c/bitbar.desc\u003e\n\n# Configurations\nFRESHDESK_SUBDOMAIN = \"\"\nFRESHDESK_API_KEY = \"\"\n\nrequire 'net/http'\nrequire 'json'\nrequire 'date'\n\ndef fetch_tickets()\n  uri = URI(\"https://#{FRESHDESK_SUBDOMAIN}.freshdesk.com/api/v2/tickets?filter=new_and_my_open\")\n  req = Net::HTTP::Get.new(uri)\n  req.basic_auth FRESHDESK_API_KEY, 'x'\n  res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }\n  JSON.parse(res.body)\nrescue\n  []\nend\n\ndef get_color(count)\n  if count \u003e 0\n    return \"color=red\"\n  end\n\n  return \"\"\nend\n\ndef get_image(count)\n\n  if count \u003e 0\n    return \"image=iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMDY3IDc5LjE1Nzc0NywgMjAxNS8wMy8zMC0yMzo0MDo0MiAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKE1hY2ludG9zaCkiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NUJDMUNBQUNBRDk5MTFFNjk4NTg5RDBEODEwOTAwMzkiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6RDMxMzA1MzBBRDk5MTFFNjk4NTg5RDBEODEwOTAwMzkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo1QkMxQ0FBQUFEOTkxMUU2OTg1ODlEMEQ4MTA5MDAzOSIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo1QkMxQ0FBQkFEOTkxMUU2OTg1ODlEMEQ4MTA5MDAzOSIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PiNRA1gAAAM6SURBVHjalFRZTBNhEN6r24tSKLYVaAlFCHIUMBo0KoEQIgQDaEggYqtvRh89iE9GTXwwEjG8+ESiQQ3G+GLEGA2gCQJBUUsBCVQOW45ydFOglHbZw9nFNgXF6J/M7r+z/3wz883Mj/I8j/zrokxpwosEaQCxgKAgj0DqUe39K78Z1CRmnf2+Rt1w+r1GP8tgDM+hqGjDI1fb7Uhdv2PL+c5D5gUiUmEx5mT2UK6+ZzPDUSpCyueq9R9lOOHmeF6IgkBRlKu2vyyGvSTSrvDTN0UYqM5oPgoAXSykejJh700Sw+2rDF2+xtAZNMeqMBRlISqG2wxty8JZlg4DvV+c6iBQjK9JzMieC/oaOxYmrv+Jp+fZRsT6eXy7ulkEKtGlvGhfmCBrDFnW8TXqaS81bUbEXDDkcJyxVy2R9jM8rxxdXaq9U5SlRKE+lcNOEWEiPWUszz56jag1ZJ145XZU7I9NmNjgWFMIBLhByvVplxieNc4FfBVyXLJ4ICbhXLpqV2lTmcx6q8QspliqT/3SdHmUJtwBX72PoVG9VNk+G1g9FYq1WGtqXueYvNdux5lfqtQ4Up7vodcJS1LO3SfOwQEeEVqHxzSTDgTzbgSShVNynBhz+pdThb2GlHMKXPK1j5q2RBIBIDg4ePvYabcDKIuIDbFJPgZFEDsSihWuRqZK2y/BsFGKXse2swo9pQKwN0u0HxcrhmJ+ESiWlI8ImxUmWBBHKryb0UlmW11DHdnRuvlIkFiJjAuwjObd4uSxkE6G4aI9lihXXTTIo4PzAd9BnVRpE5TdHmeV0FdpUZp7kUD5GkOrn92ICQ2VGoCVBNkiAkG+Q3nq3Q8GVxb0EOayUR4dgMNoq2uwq83tuB32DFUEZ4UOH6UL6cCup/G4dU4EEh5t7rEL4H3lg8dZnaRQjwDR4ihDO4SjgZQQ27LbEOQY8TteFkWblDFVof9hMo/EJe3RkDK62+Pap5UqAsDTjteCwFWRNrns4Q8bFdKFRwSUS0IG0Mm2Ho8rdycQSGcmR60vaHEOTEbqie0HASSvMj69YcrvPQ3DKoUxYVmew4WhhaJ0xstU58Gpd7sd+j8X29/WTwEGAFnYUubYvJP/AAAAAElFTkSuQmCC\"\n  end\n\n  return \"image=iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMDY3IDc5LjE1Nzc0NywgMjAxNS8wMy8zMC0yMzo0MDo0MiAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKE1hY2ludG9zaCkiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6RDMxMzA1MzNBRDk5MTFFNjk4NTg5RDBEODEwOTAwMzkiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6RDMxMzA1MzRBRDk5MTFFNjk4NTg5RDBEODEwOTAwMzkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpEMzEzMDUzMUFEOTkxMUU2OTg1ODlEMEQ4MTA5MDAzOSIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpEMzEzMDUzMkFEOTkxMUU2OTg1ODlEMEQ4MTA5MDAzOSIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PjKq6SYAAAGwSURBVHjarNQ9SFtRGMbxRmOpg4qLIioKRbRNsUIrbqJFVETBVSiCBaHiYOlmERGhYId2qJtfi65dtBQHJ1FwC9SIILFiMBoFHQx+Vent/8Bz5Hgbi4Mv/CR5c31y7nvOTcDzvAf3UYFIJJKqX413qEU2HuKPuR6emPdBZGI06AvIwyxqcIhJJBSUrn++VJAJfaTeDzeoFOv6llbE8AJlyMGV2MqQL6FQKOoGzeM3SvAG3+84nm18skHvUY6XGESv+ib4M35qFj2an1vH5k8anmEA05qRDTlBM8Jo0i2+RTeO/MsyK+pALhbQ7nxmAh9j3Ol1oki3HddC0uyKKnTRDl7p9R42Mez74kJ80E7G7RGyQZ7bUM3o4oIUw81CP4r1/swGhdV4jg293kU0xc4lNMePTi9mgyawhjos68MhnauvviDTz3dWf4AVG7SPEbQhiVUdwF+Yc0LMLjag3umNcRiT/mdtCZV6LLoU9r8yY6gi6HpGthq1c+Zh3dLqbitzFy120P6gUzzVXKq0O6nqG57oeNw4kP7qwyJeK+xCT/+ldnEK5//8Ht3XD9tfAQYAOuxnKfg3floAAAAASUVORK5CYII=\"\nend\n\nbegin\n  tickets = fetch_tickets\n\n  count = 0\n\n  if tickets.length \u003e 0\n    count = tickets.length\n  end\n\n  puts \"#{tickets.length}\" + \" | \" + get_color(count) + \" \" + get_image(count)\n\n  puts \"---\"\n\n  puts \"View Tickets | href=https://#{FRESHDESK_SUBDOMAIN}.freshdesk.com/helpdesk/tickets\"\n\nrescue StandardError =\u003e msg\n  puts 'Error occured, please refresh bitbar! \u003e' + msg.to_s\nend\n"
				}
			],
			"path": "Web/freshdesk.3m.rb",
			"filename": "freshdesk.3m.rb",
			"dir": "Web",
			"docsPlugin": "Web/freshdesk.3m.rb.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Freshdesk",
			"version": "",
			"author": "Sean Stewart",
			"authors": [
				{
					"name": "Sean Stewart",
					"githubUsername": "theseanstewart",
					"imageURL": "https://avatars.githubusercontent.com/u/2438547?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows open Freshesk tickets count",
			"imageURL": "http://i.imgur.com/EqWSeUP.png",
			"dependencies": [
				"Ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.800005Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/git-repo-stars.1h.js",
					"filename": "git-repo-stars.1h.js",
					"content": "#!/usr/local/bin/node\n/*\n* \u003cbitbar.title\u003eGithub Repo Stars\u003c/bitbar.title\u003e\n* \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n* \u003cbitbar.author\u003eVarun Malhotra\u003c/bitbar.author\u003e\n* \u003cbitbar.author.github\u003esoftvar\u003c/bitbar.author.github\u003e\n* \u003cbitbar.image\u003ehttp://varunmalhotra.xyz/media/images/bitbar-plugin-github-repos-stars.png\u003c/bitbar.image\u003e\n* \u003cbitbar.desc\u003eGithub repos stars and Emoji notification 🔔 on change in stars count\u003c/bitbar.desc\u003e\n* \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n* \u003cbitbar.abouturl\u003ehttp://varunmalhotra.xyz/blog/2016/02/bitbar-plugins-for-github-and-producthunt.html\u003c/bitbar.abouturl\u003e\n*/\n\n\n// Configurable params\nvar config = {\n    accessToken: '',\n    username: 'softvar',\n    hideZeroStarsRepo: false,\n    filename: '/tmp/github-repo-stars.txt'\n};\n\nvar https = require('https');\nvar fs = require('fs');\n\nvar displayInMenuBar = 'Git| color=green dropdown=false';\ndisplayInMenuBar += '\\n---\\n';\n\nfunction checkIfFileExists() {\n    fs.exists(config.filename, function (exists) {\n        if (exists) {\n            return;\n        } else {\n            fs.writeFile(config.filename, {flag: 'wx'}, 0, function (err, data) {\n                if (err) { throw err; }\n            });\n        }\n    });\n}\n\nfunction sortOn(arr, key, orderBy) {\n    arr.sort(function (a, b) {\n        return orderBy ? b[key] - a[key] : a[key] - b[key];\n    });\n}\n\nfunction getRepoStars(options) {\n    var output = '';\n    var req = https.request(options, function(res) {\n        var body = '';\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n            var name;\n            var stars = [];\n            var response = JSON.parse(body);\n\n            // sort on stargazers_count to show repos having more stars on top\n            sortOn(response, 'stargazers_count', true);\n\n            for (var i = 0; i \u003c response.length; i++) {\n                // show only `your` repos, not the forked ones\n                if (response[i].fork) { continue; }\n\n                if (response[i].stargazers_count === 0 \u0026\u0026 config.hideZeroStarsRepo) { continue; }\n\n                name = response[i].name;\n                output += '(' + response[i].stargazers_count + ')' + name + ' | length=15 href=' + response[i].html_url;\n                output += '\\n---\\n';\n                stars.push(response[i].stargazers_count);\n            }\n\n            var oldData;\n            fs.readFile(config.filename, 'utf8', function (err, data) {\n                if (err) { throw err; }\n                oldData = data;\n\n                // SHow notification bell in OS X menu bar if current and revious data doesnt match\n                // Voilla, someone starred your repo on Github\n                if (oldData.toString() !== stars.toString()) {\n                    displayInMenuBar = 'Git🔔| color=green dropdown=false';\n                    displayInMenuBar += '\\n---\\n';\n                }\n\n                // Write all the stars count in the file\n                fs.writeFile(config.filename, stars.toString(), {flag: 'w'}, function (err) {\n                    if (err) { throw err; }\n                });\n\n                // Finally log the entire output\n                console.log(displayInMenuBar + output);\n            });\n        });\n    });\n    req.end();\n\n    req.on('error', function(e) {\n        console.error(e);\n    });\n}\n\ncheckIfFileExists();\n\n// API call options\nvar options = {\n    hostname: 'api.github.com',\n    path: '/users/' + config.username + '/repos',\n    method: 'GET',\n    headers: {\n        'Authorization': 'token ' + config.accessToken,\n        'User-Agent': 'Awesome-Octocat-App'\n    }\n};\n\ngetRepoStars(options);\n"
				}
			],
			"path": "Web/git-repo-stars.1h.js",
			"filename": "git-repo-stars.1h.js",
			"dir": "Web",
			"docsPlugin": "Web/git-repo-stars.1h.js.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Github Repo Stars",
			"version": "v1.0",
			"author": "Varun Malhotra",
			"authors": [
				{
					"name": "Varun Malhotra",
					"githubUsername": "softvar",
					"imageURL": "https://avatars.githubusercontent.com/u/4180800?v=4",
					"bio": "Lead Software Engineer | Science \u0026 Cosmos Fanatic | Being Psychologist to enhance AI skills\r\n",
					"primary": true
				}
			],
			"desc": "Github repos stars and Emoji notification 🔔 on change in stars count",
			"imageURL": "http://varunmalhotra.xyz/media/images/bitbar-plugin-github-repos-stars.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "http://varunmalhotra.xyz/blog/2016/02/bitbar-plugins-for-github-and-producthunt.html",
			"lastUpdated": "2021-03-08T15:22:09.835548Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/googleapps.sh",
					"filename": "googleapps.sh",
					"content": "#!/usr/bin/env bash\n\n# \u003cbitbar.title\u003eGoogle Apps\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJens Schumacher\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejeschu\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eThis plugin's dropdown menu will open Google Documents, Spreadsheets or Presentations in App-Mode of Chromium or Google Chrome.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://lh3.googleusercontent.com/dZhJy5gcVrm77Y0upTcDnnDd7ZuIvVPCCZaBrcP8qFFdXdk3gZIj5WyfXF1Unl2sAW58UxDP7feASybLUyEt-RMBuk2ZAdBkoo2c\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003e\u003c/bitbar.dependencies\u003e\n\nfunction openBrowser() {\n  if [[ -d /Applications/Chromium.app ]]; then\n    BROWSER=\"/Applications/Chromium.app\"\n  elif [[ -d /Applications/Google\\ Chrome.app ]]; then\n    BROWSER=\"/Applications/Google Chrome.app\"\n  fi\n  open -n -a \"${BROWSER}\" --args --app=\"${1}\"\n}\n\nfunction generateBitBar() {\n  declare -a titles=(\n    \"Docs\"         # Docs\n    \"Spreadsheets\" # Spreadsheets\n    \"Slides\"       # Slides\n    \"Notes\"        # Notes\n    \"Contacts\"     # Contacts\n    \"Calendars\"    # Calendars\n    \"Pictures\"     # Pictures\n    \"Mail\"         # Mail\n    \"Translate\"    # Translate\n    \"Drive\"        # Drive\n    \"Maps\"         # Maps\n    \"YouTube\"      # YouTube\n  )\n  declare -a colors=(\n    \"#4889f1\" # Docs\n    \"#2aa366\" # Spreadsheets\n    \"#f4b830\" # Slides\n    \"#edbc45\" # Notes\n    \"#16319a\" # Contacts\n    \"#5489ec\" # Calendars\n    \"#9bc260\" # Pictures\n    \"#f3f4f6\" # Mail\n    \"#677b88\" # Translate\n    \"#4c9c66\" # Drive\n    \"#fade65\" # Maps\n    \"#eb3323\" # YouTube\n  )\n  declare -a urls=(\n    \"https://docs.google.com/document\"     # Docs\n    \"https://docs.google.com/spreadsheets\" # Spreadsheets\n    \"https://docs.google.com/presentation\" # Slides\n    \"https://keep.google.com\"              # Notes\n    \"https://contacts.google.com/\"         # Contacts\n    \"https://calendar.google.com\"          # Calendars\n    \"https://photos.google.com/\"           # Pictures\n    \"https://mail.google.com/\"             # Mail\n    \"https://translate.google.de/\"         # Translate\n    \"https://drive.google.com/\"            # Drive\n    \"https://maps.google.de/\"               # Maps\n    \"https://www.youtube.com\"              # YouTube\n  )\n  declare -a images=(\n    # Docs\n    \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gkaCSgxpr5QvAAAAx1JREFUWMOlV89rE0EU/t7MZk1okmIN4sGD4EXwVMSjJ+lVBRUVsaAi7R8h+B94klYsrfZQqK2XYNGD/QNKD4IgevOkVmzaWvJrk92d5yGbdrOZzc4mAyGzb2bn/fi+9+YtITKeLNTPN12sE2iSGeBAzsEk/Hw0V8DFs1S+cJru3rmSdZBiiKig6mDVcTHpuIymy+j+N73O3AnJuvNGm1HM0XUlxMbih73iSAb4Cpco8JACGaF3HpUBDMUACFezxbF3S5sH9tAGMIP6wh1+CO/VHSjElG1nV15uVHLDGRD66ZRwiA9xVggpbxXGC+X597u51AZoPeR4j+MGCZrKj+eXlzYPxUgRgIb9A2EJyaSUtzO2vfai/DtnHgHutyIuFUP+Ymffh5TUd5SQ8ub4xMTq0sc/UmeAlRRK1ngWjYwQwNefPoRfxbkzNgT1vkuga/u1EwsAHiUawANCygOMy1gCX3Yktr9X4Dn1owhyJz0hLPnQzABOR8gjWIiQyVjInCqh3chCtVtgOn4njsDGEAxS3rNOBDtfhNuow/fcxNRJhCAqSCIkB4symwNaAuy5A1PYMipvEbFWeZgrwQaZzcJvEVj5seemgyCOIxyuktwTCZGxoXwPUGo4CDhgcqMNEOkJGVbODOTsYG+wTtIC4BsaoPGwVABez/iAa1CDM8D0vEClFrFRyCFJCKDaAuY/CXh+fyYQ9YbdEkDNiXIiRRbohtMGyp8phpCdShOGxZKdXoGTuW2WBaU88GbWAxQlU1Ywpucs7Nb6W7ehIThsAk/XJJQ6Dre+ZhCEAP41Ncp5BAhcj/HtV/cMii1WQdmH60Wu9FQR0DCmVACWZ5XZpUGMB3MW/lYNCGAKwX4dePxK9DUhuupIBOzV9XViaAh6GhTSH3hQB1qeXlEqEup2nxwDFmc8HN+vfQ0Rnq0LbP2g2B6SeQQIKjXgxnNLew13p+EiNfDKHgYCBuC4Zr2CWQ85SkeUoleIu7iSIOCer64UihN6SDb7LlBqOzETIiIkec6AUmrLjAOee88n8VYQXeakILBZ/8iKtwF1X3fOf/0oxgGt/yZTAAAAAElFTkSuQmCC\"\n    # Spreadsheets\n    \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gkaCSgowtX4fAAAA81JREFUWMOll02IHFUQx3/1unu+dneyQXMWDYjXkAgi6EFZEOMmh41gFESDVy9eFET0YOIYRYQcPakYNlkVFxSUiFlNiHH1lCDowUMURJFk13E++6s8TE9v9073TM9uDz3zpvrxql79//V/1cK26/5PX9zfDXorCgdUFQAFVBVF43lh4llIyH377l49NL//iecPHukxxWW2G5pua7nt9w90/D4d32Xw2yP5v+33o/+Du+V22VueO+pb+nnj27P1XQXgaXBQoq1JZBMEgejeGhPbQDUE4WGnXvu4ceVcaccBqCJRduOUD9Jf7BIjC3al9NHJy2erOwsg8Rk6H3mesCVDG46MZY6VZ6qrp9Y+rE4dQDobmlq4eB5ARBacuZn3Gz+cN1NCoPGd5TxVGSTHGYtb5nHbsc+/evGD6hQQpO8856ndAjea/2AbaxQ2Y5Zm98wuv3thxcoKwJ6UynFcGNqNGNb//pWyB/fsuyPFCB3AceSm/vsecGJiANtxThMunyO2bXHp1i9c/u0a0g0iGCPRQrFs82yxAFRzMjEeDgUs20ZvtzFtH+OGJLUzzMlwAQjy4dCsuQLBnIW2AT8AFbJn50JQDBLNyZiioBBUDdIH8cLcKinEgXFcyOPH0B5WDCJAsMWH6SGIZNgL/bQjTetAUiUdY8dzQkcQ0VwSTCShAlWrxJN3PbAVhOaXq2MsPrlxlY7vbsFlCwSyMw4A1Es1Goee4WZ3I15URKg7NZpeJ2W7rbaXC39eo+O7aT2wdpgBhketgacvnaEfegDM2hU+W3iZE2tv8Z/XBaBkOXz5yGspKWcMAQtxYLCAgMD1zd/pBS6KMl+qgYGfN/9g022jQMUqgUCW6zx9KQQBKHg+Pz72ZkwAEaHVaXHl0VPp3breiBTnOS9chgpg2yxdPE0vGDioO1W+OXySxS/eoOl1UVXKlsP3i6cznWtRIcrVAIFb/Ra9wEMBf9CCseG22ey3AKFi2TEEk3Y+9VmA57P60EvxTgSh3Wmx8uALhAkbnh/1iDpR3ApzQAEcm2Nrb9P1+3Fp/nT0HY5/9QpNtxOT8PrSmcy0626qIGr+2eNUqRgHBepOBYB5ZwYT9TVly4kUsgixp4BAoq/vFhvbYPH4+vDrmfN1W+ILl2FWvH91N7hz+bkR7QeJFtbBeKAYMVEpQMSCQqR0AnfCCZl/Wu6ahLkSzfjjON3EFOeAJt68xjaqRZ2P29toWx7q+mgrln5j0rz2PWfnqkCoVwtlQHw9joTnjMi9mqyCDJYPPUuChnErnuhcVHUd5amsAP4Heq1/ylGBlx4AAAAASUVORK5CYII=\"\n    # Slides\n    \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gkaCSMW4EA8HAAAAvRJREFUWMOtVz1rFFEUPffN7K67JjG7UbRWRKMgBLERRJCglQjBQrHR0srfYBH1D1iJhVUiwUJBEDub6EYEwcIyBBEiMYoma3bn4x2LnTGzM/NmZmd98Jh9H9x73v04964gNjpvTh2B/2dJwBmAwS4BEgPr8DcJQEM1zz33xs5eGzt2p4shhkrsuL8W4W/P0O8gd3r9r3a3gMrklYrqvlz/8GBiNAB0TgMSLKLflCmRMxIivLBvnM++f7xfLQ8AlEFTI2b+6NXklqUw29iDha/t+XpZACk+TjtPW/e/to25qaZ68eXtvUYJAFHZMUukPdkkWHF2qoUnPz/NqyFjgLszVbnJLUlwtoWrtaosrbXvNkq6IEt5ZIjA76xClJ0AY1ucO9i0F9feP7TTANj5xjSZf3dfRMH7sQzHqaHaPBHJnuCeyOUJd/URgFtx6ZIgotf7aQx1GoKPBAm4roetTaC3LWDkTISwbIXDtztSwAIcLiCDfRGiWrXQOkT0tgReL3xdH6jodLn5LiDN7khJURGgPqnhbgt8J6Rxs3g7W2GG72mODWrAqmsAgHaDUGdhCzAnGPP5gcG51SBkR0CfuzFRKgukArYuAZWpmK4U67gbwOYrgA5AQNU1tCOARkkLkEClCX38MUAvH69YUO1pwPn2z//K1qBfOgaCbJVq4NA8Dq4N8luYJdZIMcA+ht/LAHXsnkTqqACti4aChbIxENZZQH2+CeidAYGMBKSoOvzz6zkpXNYCAEC3PxPKw3z3IolBQ/kunYYGpQZqNu+VcEGolOQQ5MRC/YOd/cKYgr3TgO6a01XVChSxsi7wAX1yAdQZ3ZEI4JtqBUfLAmoAajyviTPoGdUC7PYptnogH6mzAeheoZatOBM6m7DaR8OyllOkNKCdwo1scSLS3YIVMqOR/W/lOJfpmJGi+QCY1isWb1qMfmehtpweVoxKB/4vIKN9j72cBH28K2QB35frovlUBGeyCGRQmSSVR5aaXIHGjTQpfwGlFczsVsBQ3wAAAABJRU5ErkJggg==\"\n    # Notes\n    \"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\"\n    # Contacts\n    \"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\"\n    # Calendars\n    \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gkaBxwdJdLiogAAAzJJREFUWMPtlsuLXFUQxn9V57562u6YZNJtMkYFiS5cCBEfhCEbwYWLgOJrFtm6l/wVWbjwj3AlCC6yUgQRjKIRgroYTRNFJc7EmXG6h+7bfe895eLe7mnBPLi9EexaHW7VOfXV+erWd2BpS/u/m9xHTGsuTgG7Q9zUZ1V8H/CLAugAR6s4D4yA5r/sU2AAhEBSgciAn+4FILirN+6ugCUVVgNirEgQzWb4zUoA4gTLGiAgmoNvML5NfQDrn3UYbb+B5WtIVZPPHaKGaHXNApiUa69Y4ZCwmN1Q3Im4+uLVegB88QxJ91XQAkGwKfeiiAkeELTygZhgUoKZfvPjVeC1egDM98HvA0mZWsqqxPuqtRSjqnaa3MDQMt4U73v3okDv3J6yB3oAolVyQQhBQpBorlIBcSAhhsy1p6LSq98DhaY4m8yO9MU+e72PGNz8jbCZ0H3+Ii5aw49vMd75llvXvuTxC++CHx1C0N36N1D8+RfYoKQDYzzYpHHsMR59+TKdsxf446v3MZ8y3PoCcwGjvXTGPSaIOIb7N+oD+Ob1XYwBhgMcUespkuPr4HO8L3ArCSJHaD2yQWP1PKqKmWBW9YQp/Z9/XGwORNEQKDA8BC2KtMfgxidsX9vkiY1LuHAIYngbwmCfpDnB/GTar/TeGS4G4OSTI/pbKUUGKg574CRHOhusPf01Bzffo332MmiKyphi83eOnxohDEENI7sfLdC7ep1zPHhqQhB6isl1xP+KC2Jc+xy7n/6CaEoQgIaeMPflzxB4UEOVxQGYDwCh/VBGEN5msnOFIv+eov8hpy8+i4Yx4kAVdq5nqJtKUcnBcx806lNw/uMIiBBAVGg//ALDOCA/+A6NW8Tdt1FNUQWRmFc238JsPEtuCCfOtCsBqwHg6OlGpWxS0RHQPLFO2gwRDHUFqoaqgUZEq2+CTaAaToKh8TFgqx4FjXYTZAWrDjQEcQVJc4wLclQNUTC1SizzueTlPAhWOvUpyEcZYTxE3KRS3nLWi0KYGEUm/3gWWFXM4TDKsSJd7EHy0uddWmtnENG5RIdbfcZcy1GpYSlck61trpz7YfnoXNrS/vP2N/i7K8c4zH8MAAAAAElFTkSuQmCC\"\n    # Pictures\n    \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gkaBx0AX8+/OgAAAxNJREFUWMPtlkFoXEUYx3/fzOy+t5t0tyFp1qSxxIaCVJqDKIKIUKNVEEQq9aJ4DGIJEhWpKCpVkN5EKBqlBxFpDdiDYKloD4LXGCurlCpra0m6bra1bZK37+3ue5+HJEdhm10qwv5gbjPf/Oebmf/3QZcubTDfR+7HPnraiWHaWqzca2Bqfvfm47QlQMAJPCmLHPpPBCgkKImBfT/leXczMVyrE89OIf07MZGs7Tw2TSwWozGqQmLggfkcb219jMN3zKIdFfDSfmTsQR6lyk5JUASCj9Cr3zJa/YaGpNYSIkYe/utUzyKsfNJRAUee5wVi3o5Dst4qgmAQ7JbbqVQa/GJTOAH+rm3PXI1G7jxD0ZtgJeqIgPA0rzjDy1iEbayGCn6ARbAkhAhYQavBsFeOdt8mJLaXFe3IIwxPczCdYhpwKOoc4grYwEdRVCE0Qry0OpQuR+PbFWsNiWonfkHtFE+nLW8K9CC49WGdQ7xhbOBTDSJmKuFwuRLtGUnACIig7KDNRxh9zYCzPCHCHEpTgT/rXqFU791lRBVl+Yo1R5+aqX48nX/8ka3OGxUoAG7Zz2Yn75sZxx9sAIKqovULnCjc+BcvaZHDew+Q6/sQ1VXEKtH5r8aL9rOfq5/uZXDXPZi0jwjEdY9GmAEEIYUmczSjd5gdKm/eB14VQ2+YxYst4nyv9tvFh7YVR67smJikFIxhSkK+EIGT9SOFCCmIf0Xj15kdutaeE27cqNhUuvb7xX354sLAlkSNlRGUDLXA4/plH21uzHXQuESNKY4PXmvfig2AiNdYuDyRKy7memJFMLp2hYYEIYh8bpQzaMMh8SXC1UlO9tc7Y8XpAe1Pzi/tyaz8MdAbq64nOpWqLZNQQRRQIQgMdqlKKnuEL0fDFgtaazx3jP4kwxSOuxFUQZp1/4cvnql9wP0nfGwTGikonQ2ovFe/iYraOvuPkvf7eE0cdwmICt99foD3b1lDcvIg178/xhtJnZIKbq0stcdN9wMLZ2gef5YX4wbnBOwtF7DBhXMcqgXMdTvjLl3+9/wD8Wckw9CpEogAAAAASUVORK5CYII=\"\n    # Mail\n    \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gkaBx42u1h5YAAABMNJREFUWMPtl12IVHUYxn/v/5w55+x87IdrS+v6UYhpYASVBCFBRXVRGNVaoIlZFEiSBn2IUBRBhdkHpV1FN90ZFWVElpUSFpSQFRJWZmbrOrrr7Me4O3Nm5rxdnJkzc2ZnBa2u8g/n5vznf57nfZ7nfc8ZOL/+70sADm/cgH/wgDoLFpF58GFM90w0CP4TQP/H78m/thm/MEHvo0+KABy64yYVy4IgQNraSK5Yg3vdzWhh8t+rNOEw/vJzFL/ZDYGAgG8EU9cBEEELBfJvvMLEW9vQYhGM+WfIxhCcyHJq3b0Uv/qMGJ4SEhjxKxi0elMR16Ww6xPGnn6cyrEBkHMjIV4bxZ07GNm4jiA7CHYi2gtQfskNhwRsLXO0WKYiBlQbmA8ytmk9pf3fnXXVOjlB/vUXGX9zK+r7INWyVcgbw77hYcqlYpUA0C4BRyYLTLZ3IBqA1kOYf/UF8lu3II5Tf9C04BblI4cZ2fQIhS92IgknKkpKJbLdM/lp+CQJreBKLQMKCYVeSznedQEjCxfHvRfB//ZrcmtXU/nrT7Cs1uCq+Hu/ZPSxhwhOZsGqPiMICJJJRh7YwM8/7MMLKngS+h83N4Derk7yt/YzcMtyAjEQBKgqWBbBaI6xZ56g8P52SCRiBLEsxrc8S37bS2Db9a1Khcn5l3Di/vXI5VfSbgweilSdtkPiGslkG4u5c+YwYFkc6e2jd8c7uEf/CBURQX2fie1vU84Oklp5H6a9ndKhX8k//xTB+Fj4O1VAUWMxvuQaxm5cRtpzyaTTOAQIAigiVQJTbBShr7eXQRGO376C9IH9dH/+cd1/y8Lfs4vywQMkFi2muHcPlPwwfKpIEFD22hi+ezVcNJ/OtjaSySSe51U7UCMsm6Yb9SAb+mbNIpvNcvqKq8nO7GHGR++SyI9VJTcEJ7MUB49F6tRyMLlgIUN3riKZTNLmebiui23biEhYvdYxTe0QUfLjZHp6ekgnk+jFCzixei0Tl16GlPxYyzWuoWV3cap/FZlMhkw6jed52A2ZiDoCEG22oCEL9XwJPT09DA0N4VuGU/33UJo9l8zuTzHFYli5Kn5HJ7n+lQQXzqYjlcTz2rAsK6y64Wqsvm5BC+Dm1d3dTS6Xw/g+hSVLOT1vPj0fbsf+/TdOX3sDuaXX42Q66EyncBwHq9qq0jw3agqEOWxBYBoiIkJXVxe5XA6REkFvH0NrHiJ1fICRvnmkbItUKoVt2xF441kRiXIiDSLELFDOrIKI0NnZyejoKCJCKpWi1N5Ol2pUtWnKRE2BuhIa+t9oQQistVE9zZDT6EEzZsygUChQqVRiPhtjYpLXyMg041vQ+iiOXU3A2mCL4zg4jkMmk4nJe6bKGwk0Vs+UUdwwE5qBRQTXdWPh6ujoiBRoBdoIrqpUp0AMysRCqApKDLgmpeu6iEhszxhDOp2eIn0r70MycfmJLGihQNSnto3rumd49RtSqVRLyRttqXWB1MA1ZkHrADiOg23bUxRpRSKZTEZKNPveKgu1F6CJpkI0CxQxBs/zpgTrbEnUiMeUQNFAERSra2bYhu23LZfcB+8pVLA0PFAqlc7pO9CyLHzfD0PXbEWpTDkAC5COLq7avE3O/zM6v/4GV3raXtP/zYoAAAAASUVORK5CYII=\"\n    # Translate\n    \"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\"\n    # Drive\n    \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gkaBxwD393fwQAAAzNJREFUWMPtll2IVVUUx39r7XPOvY7OjEwlShI1lYVBVmD1EE4JTeUHiGCFQU9FL31Q9BQRPSSFFFGRkxVCPQg9hGhpNYQD9RIYgYUoTi9qM/kxMOo4c+895+y9erhn7tzqpevcIOguWOccDnuv9V9r/dfaGzrSkf+7SKsbjnxZWrKyq3YtofhhgCEomOeEPsDpVuxFrQK45ee7Xp1Y9V3fFSUEELQIwlCUo8DLrdjTlrzv2Lie3r41jx3pX4YSA0mhpeJ9U/VrBv4dADs39SLyCJH1fJPeuPzgmcjhGmUQABG6Y8dgdT+L2g8ghHuBAcw8CyN5euy25ZYTmngkgFfljihidXsBfLiljPEiSISJEKuMypWL3/x92eI/WZDCpvD4zH6S9gEItadQViCWIyY40TyO4k8uXdc7Pq0eEKSRidwp18TKlva04c7NV+HznxAMzOZAASlDdusX48DDDVtWD8oCmqc8mmxgcn4Z8OnrCK7uQOY02DhnartQ9mKca3YOIAoS89z8SjC0cS3o2iJeaahRJvMf8cbwWbmPCyGwh0DpL7k151idHeDOywOw48FFwJMI5WLdrMZ4+4UXvto1u9QNsi8Yx6FoTEEwVCBxMZsv7qWrdQCW3I/JPU2RF3FZGTv/zN8MldmOkuBQBC2eIo7bu7u5uzUSvr2ui8RtR2UrkM6Nm+A4u3SUo699jJStifkIxhMrPh3oK00uMcQo6CoiiYbqsOaT7217Zaj6z7vgnfWDxPoBwkIQQwwyMb7fcBJ7aIakJ2A2B8EQfCkDtcYhBYqFKjW2sW/BD62V4GRthMBIgVHAhFP9F5junyGd8FjIEFKMDKP+HdUMVwFXgagiRBXBTR3i0siPrXPgrW8zMv8uRg1QKgs8J1adhx5DTMkvOkSbMzB7JkgxDQUJNWpTuzm4Lr+8Nnz+wGG8/wwk5rerp5i8eRpVIDJ8KvhMmpzOaZ2CEb4yzJ7rf53fIDp87iWqOsGxNWMkUY6LMjROQVNClgMZkAM5Qo7iMTJ8PsXY7vfbcyPa+uxKTm9aSskFogSkBBqBlg1JQIWmUVyfg5ae4vMbRjuXzo505D8vfwAGwh/bk+zM8AAAAABJRU5ErkJggg==\"\n    # Maps\n    \"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\"\n    # YouTube\n    \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gkaBwIjMPLA1gAAAWdJREFUWMPt1rFqVFEQBuBvzt11DUQ0GIKkShGLCCoIFoKtWAaJtYWvoI9hZeEjWLkPoLWCjYKpLLcQQUiKYNwk4O5YqBi73N3Lvc3+MMWBc2b+M+efOcMCC3SMOL1I/atMb+M6sUJe+7cnt8jLZ3dddnHw5/w+5QvTET7Tex9O9vwfvHqR4jhFtmDj1H9wKvi5Ry0F/mvTFD/SYK1KlyrGQ6y0/PR98kPh6CKWO9LgzcJkFRc6InC3EBVKvQTmU0wbILAsxZ26IoLcMEiGKX7OI8gys4pGToId8hb5ZlY/pQE57wb3yYciv85C4HxDdTWUNvEY31rLwLzo4bgJR8mO8Fxab1UDyY3kNfFKxvosGZgt8IaBkZfENqo5btDfqv0LhicpJvN/StXHHjmp3dUynjWkwcNCtYfvHRXB28LSAQ47IvCpy4FknAZrXY1kR2npXt2hdJO8UqPFvPvdJjjTULrAAl3hF3EOr16s/vPHAAAAAElFTkSuQmCC\"\n  )\n\n  echo \"| image=iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAB3RJTUUH4gkaBwArDB8qZgAABTtJREFUWMPFl2tsVFUQx39z7u22FPrYlkfRtiDFoiVBQIREYmKMPBI0YhQUfGFMACWiRMUHicHYYDQxQAWJJgKfqqCiEEkgxAQSPoBCAiRgEeS1LS0P+7KPfd0zftiFtnh3u4rGSU5y7p4zc/4z+585c4Q00lQAJW2J+aUcBsQNxcZhsucw2UIlwjAsrhG6gCZVTjhGDliVY4GwbR4aJkY/IqkW6ougtBkUnFAhjzswTWEchhwgDtjkuGZHAAfBRWlGOaSW78ra2A9wYTCUX80QQGM+DG+HUDG3AJ+KMjwd2HQOWuWADmLZiBBxvw2m94cCJwsThzcUMtt47BKl9B8eDqBGmGo62dZYQGW/AM4XwphWuJDPS2p4Rw3hXmH+pxIXKPM8RvQLYGQrhPJZYFwWZ+phEqCm22TjbCrtYE8oFQk1OWks4B7PYV2akLsqIJbD4nHKc2gwljAOeSKUq+UOhbEiRJNmHRtnY3k761OBcwF+GQWcgbjDG5KIip9HWaockTjvY2m8tYPu3ou/AYFC8vCYYIVq45Jr43xu2vkcIASU+UVAd4LMgisTmRc5wwoMXX774soPI1t4D+AyMNSvbgAlwLk8Bme5LLy1hVUZ1QHdTU60jbMdW+no2k2zZPX8BaoERPmstJUNmZDiQj6Ut/d8p/K8Dwlj3cw2QYbkL2Zk/vOUaHcP842w34EvAM4O6R9A78Pp53AAox8gZDMbUBQGPk5ZUTUVpgAXi417bB7eShTgtiv862K828kTQ8X1kEfwAuMJFlUzJnAXbSPaOJRS+7GWmwbgegEGilLSJ+8s6gwlN7icWval0f42CE+11gAT/n6NJIzVp12BHIEi3xLTyd5MKh30f+v50H8ArpNtNECWCrl+e7Lmcp7/TgyeHWj4P8WIayRKTNS3+BD70v8C+dfEI2xUCCs0+5UodxAPZBRKcNIM/yhbYnja5TpxOjVAY7KKXrMov0a4Ov983nT4Y1N6NutGoCDVRYilAkcWAZEbHGzDaNR1orRHczllkqnkGtwdLVyYVz+8vssUVMgapuirdQd9zc9vgdrgsbQA5/9xL3g+PYVcAbfbyBMgYXYAIsCKEEcfaai63GXyAmBFxS5g9Z3ZANSM7mujNpimTQAe/b0I8Wb4pqkSYsvADgOQ1WS+b4hw9clz2cdWtVZGkN7tm05F44sAWHq6f0bMCcHO5DzbXZKCA4KNHwTB6A6QRTbycP2o177pKgtgblAQieDIs9RUVl//bfX41AC+LoNZAvPa3sLRB1I0aTEmNu7q6YrfBD4Eaiq3AqNSNSSgx4kH3sPVepae+Gvq1lTkgpYSG7aSujXldN0R9TGVjepH1Aa380xTEoBqggFrR09CzPqUqQMOikHkCFZOAw2odGN0EGgJYkeBjAM1qOsRejFCw8IoJtyTYKrHqQ0uYdpe2HO/T++3pvI5DK8D4Qyb0tRvDLHQfF+Mk+u6kZgAETyW8VVhHQsUNgtOH4XqKlhed5SZxYJkdMNJr+G/nHvWIbg/QPukbjqLP2Zr/kFeaIZNucmQ9pYfr0DHeHj3+M/MHHIZsdMTbqRvu/sr+AQuRci5+Dbr5+7joUuwZTAk2ssbGQ98fATWVsErddtBZ4DU3xQAz17EyZvDu5sOsHIl/DCsT8BSP7lqRifyfsMMg3d2LlYeRBmPaHaax6kBslDpRPQoyC6WntwGwCdj4eXjmb+OE0pV8PKJJDmrBoAUIzoZvCkIo/F0GI4GUDeC2CawJ1HnJzwO49hmXvk18Xb47G5YdNj3iD8BrUHrdrBTK68AAAAASUVORK5CYII=\"\n  echo \"---\"\n  for (( i=0; i\u003c${#titles[@]}; i++ )); do\n    title=\"${titles[${i}]}\"\n    color=\"${colors[${i}]}\"\n    url=\"${urls[${i}]}\"\n    image=\"${images[${i}]}\"\n    echo \"${title} | color=${color} bash='${0}' param1='${url}' terminal=false image=${image}\"\n  done\n}\n\nif [[ \"${1}\" != \"\" ]]; then\n  openBrowser \"${1}\"\nelse\n  generateBitBar\nfi\n"
				}
			],
			"path": "Web/googleapps.sh",
			"filename": "googleapps.sh",
			"dir": "Web",
			"docsPlugin": "Web/googleapps.sh.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Google Apps",
			"version": "v1.0.1",
			"author": "Jens Schumacher",
			"authors": [
				{
					"name": "Jens Schumacher",
					"githubUsername": "jeschu",
					"imageURL": "https://avatars.githubusercontent.com/u/5919254?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "This plugin's dropdown menu will open Google Documents, Spreadsheets or Presentations in App-Mode of Chromium or Google Chrome.",
			"imageURL": "https://lh3.googleusercontent.com/dZhJy5gcVrm77Y0upTcDnnDd7ZuIvVPCCZaBrcP8qFFdXdk3gZIj5WyfXF1Unl2sAW58UxDP7feASybLUyEt-RMBuk2ZAdBkoo2c",
			"dependencies": [],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.900948Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/isItUp.5s.js",
					"filename": "isItUp.5s.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eIs It Up?\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eZachary David Saunders\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003eZacharyDavidSaunders\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eA MacOs Menu Bar (BitBar) plugin that allows you to check whether or not a website is currently up (online).\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.image\u003ehttps://i.imgur.com/BxHFJMn.png\u003c/bitbar.image\u003e\n/*jshint esversion: 6 */\n\n\n\n//👋👋👋 Feel free to change the following varaibles to best suit your needs.\nvar upMessage = 'Yes ✅';\nvar unknownMessage = 'Error, click for details ⚠️';\nvar downMessage = 'No 🔥';\nvar website = \"www.google.com\";\n\n\n\n//\u003c--- DO NOT EDIT THE CODE BELOW THIS LINE. ---\u003e\nconst https = require('https');\n\nvar version = \"v1.1\";\n\nrenderPlugin();\n\nfunction renderPlugin(){\n  checkWebsite(function(status){\n    var menuBarIcon = \"Is \\\"\"+website+\"\\\" up?: \" + getMessage(status);\n    if(status === \"up\"){\n      console.log(menuBarIcon+\" |color:green\");\n      console.log(\"---\");\n      console.log(\"Visit \\\"\"+website+\"\\\". [Click to visit site] |href=https://\"+website);\n    }else if (status === \"down\"){\n      console.log(menuBarIcon+\" |color:red\");\n    }else{\n      console.log(menuBarIcon+\" |color:yellow\");\n      console.log(\"---\");\n      console.log(\"Error: Unable to contact \\\"\"+ website+\"\\\".\");\n      console.log(\"Please verify that you entered the website correctly (remember, you don't need a www/http/https prefix).\");\n      console.log(\"If this problem persists, isitdown.site's API may be unavailable.\");\n    }\n\n    console.log(\"---\");\n    console.log(\"Powered by \\\"isitdown.site\\\". [Click to visit site] |href=https://isitdown.site\");\n    console.log(\"For more information, please see the github repository. [Click to visit site] |href=https://github.com/ZacharyDavidSaunders/IsItUp-BitBarPlugin\");\n    console.log(\"---\");\n    console.log(\"Version: \"+version+\"\\n© Zachary David Saunders 2018 |size:10\");\n  });\n}\n\nfunction checkWebsite(callback){\n  var result;\n  https.get('https://isitdown.site/api/'+website, (resp) =\u003e {\n    var data = '';\n    resp.on('data', (chunk) =\u003e {\n      data += chunk;\n    });\n\n    resp.on('end', () =\u003e {\n      try{\n        var response = JSON.parse(data);\n        if(response.isitdown == false){\n          result = \"up\";\n        }else if (response.isitdown == true){\n          result = \"down\";\n        }else{\n          result = \"unknown\";\n        }\n      }catch(error){\n        result = \"unknown\";\n      }\n      callback(result);\n    });\n\n  }).on(\"error\", (err) =\u003e {\n      result = \"unknown\";\n      callback(result);\n  });\n}\n\nfunction getMessage(status){\n  if(status === \"up\"){\n    return upMessage;\n  }else if (status === \"down\"){\n    return downMessage;\n  }else{\n    return unknownMessage;\n  }\n}\n"
				}
			],
			"path": "Web/isItUp.5s.js",
			"filename": "isItUp.5s.js",
			"dir": "Web",
			"docsPlugin": "Web/isItUp.5s.js.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Is It Up?",
			"version": "v1.1",
			"author": "Zachary David Saunders",
			"authors": [
				{
					"name": "Zachary David Saunders",
					"githubUsername": "ZacharyDavidSaunders",
					"imageURL": "https://avatars.githubusercontent.com/u/14244868?v=4",
					"bio": "Since most of my professional work is classified (not held in git), this profile is a graveyard of half-baked ideas and Frankenstein'd projects. ",
					"primary": true
				}
			],
			"desc": "A MacOs Menu Bar (BitBar) plugin that allows you to check whether or not a website is currently up (online).",
			"imageURL": "https://i.imgur.com/BxHFJMn.png",
			"dependencies": [
				"node.js"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.949388Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/mailchimp.10m.rb",
					"filename": "mailchimp.10m.rb",
					"content": "#!/usr/bin/ruby\n# \u003cbitbar.title\u003eMailChimp Subscribers\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTim Novis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etimnovis\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay your MailChimp subscriber count for a given list\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://www.novis.co/media/misc/mc-bitbar.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n\nrequire 'net/http'\nrequire 'json'\n\ndef main\n  mc_user = \"\" # your mailchimp username\n  mc_key = \"\" # a valid mailchimp API key\n  mc_list = \"\" # the list ID you woud like to track\n  mc_dc = \"\" # your mc datacenter location, e.g. us16\n\n  req_uri = URI(\"https://#{mc_dc}.api.mailchimp.com/3.0/lists/#{mc_list}\")\n\n  http = Net::HTTP.new(req_uri.host, req_uri.port)\n  http.use_ssl = true\n\n  request = Net::HTTP::Get.new(req_uri)\n  request.basic_auth(mc_user, mc_key)\n\n  res = http.request(request)\n\n  response = JSON.parse(res.body)\n\n  return \"MailChimp: \" + response['stats']['member_count'].to_s.reverse.gsub(/(\\d{3})(?=\\d)/, '\\\\1,').reverse\nend\n\nputs main\n"
				}
			],
			"path": "Web/mailchimp.10m.rb",
			"filename": "mailchimp.10m.rb",
			"dir": "Web",
			"docsPlugin": "Web/mailchimp.10m.rb.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "MailChimp Subscribers",
			"version": "v0.1.0",
			"author": "Tim Novis",
			"authors": [
				{
					"name": "Tim Novis",
					"githubUsername": "timnovis",
					"imageURL": "https://avatars.githubusercontent.com/u/867553?v=4",
					"bio": "software engineer",
					"primary": true
				}
			],
			"desc": "Display your MailChimp subscriber count for a given list",
			"imageURL": "https://www.novis.co/media/misc/mc-bitbar.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.979551Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/XKCD/new-xkcd.5m.js",
					"filename": "new-xkcd.5m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n/*\n# \u003cbitbar.title\u003eNew XKCD\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRob Tarr\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003erobtarr\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eCheck for new XKCD comic\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/robtarr/bitbar-plugins\u003c/bitbar.abouturl\u003e\n*/\n\nconst https = require(\"https\");\nconst fs = require('fs');\n\nconst url = 'https://xkcd.com/atom.xml';\nconst icon = '| image=AAABAAIAEBAAAAAAAABoBQAAJgAAACAgEAAAAAAA6AIAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAJycnABGRkYAenp6AIODgwAkJCQA6+vrAIyMjAAdHR0A29vbAHx8fAAvLy8Ajo6OADg4OAD///8AFhYWAEpKSgB+fn4AsrKyACgoKAAGBgYA+Pj4AKKiogDW1tYAd3d3AICAgAAqKioAiYmJAOjo6AC9vb0AXl5eAPHx8QBnZ2cA+vr6AHBwcADh4eEAgoKCAIuLiwBgYGAA8/PzAJ2dnQBHR0cAe3t7AOPj4wAlJSUAn5+fANPT0wB0dHQAsbGxAFtbWwCPj48AMDAwADk5OQChoaEAdnZ2AH9/fwApKSkAiIiIAJqamgBvb28AeHh4ANfX1wzADc7NwAzMwAEBAATNzM8DgAODg4ADg4ADg4ADg48Ig4aKg4DGg4OKTASDQ4OIiIOKggOOAMODi00NDUODiIZIA4AKAAOHgkOAAAOLh08OQ8bDgAOGwUAFQwMFQAjGBgfAA4ADgAcIQACAgAnDiIiDiQsACwkDgEQAAAQAQ4iIg4OFgAWDg4CAAAAAAIOIiIOJAAAACQOLxEODjsvDiIYKxQXDhcUKzYlDg4OJg4iGTs9Dg4OPTsyAAcOIjsOIhkYPA4ODjw2BwAAAAAKDiIYBgALMgsACQ4xAAAxDg4iPA46AAAAOg4ODg4ODg4OPDMYEQwyDBE7Ozs7Ozs7GDMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACAAAABAAAAAAQAEAAAAAAAAAgAAAAAAAAAAAAAQAAAAAAAAAAAAAADPz88A39/fACAgIAD///8AcHBwAICAgACQkJAAoKCgANfX1wAoKCgAf39/AIiIiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAAREREAARAAEREAAREQAREAERERABERABERABEREAERABEREQAREQAVEUARERABEQwNERDA0REYHRHDEREQAREQAREQAREREAEQAFEREAEREAJREAERERABmAERERABERDCkQwNERETAiAxEREQARERABEAEREREEAABREREAEAEQwAANEADREMANEQwRABAA0QwA0QwADREAERDA0QARABEQAREAEMDRABEMDREAEQwNEAEQwNEMDQAQwNERABEQwNABDA0REMAAAA0REQAREQAQAQAREREAAAAREREAEREMAAAA0RFAAAAAABURABEREMAADRERQAAAAAAVEQAREREQAREREQAAAAAAEREAEREQwAANEREADREQwBERABEQwAAAAA0RAJEREQgREQAREAAREQABEQEREREQEREAEQwRERERANEADREREBERABEAEREREQARAADREQwREQARAREREREQEQAAERCAEREAEQARERERABEAAAAAABERABEAEREREQARDAAAAADREQARDAAREQAA0RDAAAANEREAERAAAAAAARERLAAC0RERABEQwAAAAA0REREREREREQARERDAAA0REREREREREREAERERERERERERERERERERAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'\nconst errorIcon = '| image=iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAAAAACo4kLRAAAACXBIWXMAAAsTAAALEwEAmpwYAAAGVWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDAgNzkuMTYwNDUxLCAyMDE3LzA1LzA2LTAxOjA4OjIxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHRpZmY6Q29tcHJlc3Npb249IjEiIHRpZmY6UGhvdG9tZXRyaWNJbnRlcnByZXRhdGlvbj0iMSIgdGlmZjpPcmllbnRhdGlvbj0iMSIgdGlmZjpSZXNvbHV0aW9uVW5pdD0iMiIgeG1wOkNyZWF0ZURhdGU9IjIwMTktMTAtMTdUMTU6MTQ6MzEtMDQ6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDE5LTEwLTE3VDE1OjIzOjMwLTA0OjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDE5LTEwLTE3VDE1OjIzOjMwLTA0OjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMSIgcGhvdG9zaG9wOklDQ1Byb2ZpbGU9IkdlbmVyaWMgR3JheSBQcm9maWxlIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOmIwMTQ1YjIyLWU1NzMtNDI4Ni1iNDgyLTMxYjA0YWQ0NDJhYyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo1NmZkNmU2NS0xNjEwLTQ2ZjItYTJiNy02YTU0MzA3YTRiNGMiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo1NmZkNmU2NS0xNjEwLTQ2ZjItYTJiNy02YTU0MzA3YTRiNGMiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo1NmZkNmU2NS0xNjEwLTQ2ZjItYTJiNy02YTU0MzA3YTRiNGMiIHN0RXZ0OndoZW49IjIwMTktMTAtMTdUMTU6MjE6NTItMDQ6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDQyAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YjAxNDViMjItZTU3My00Mjg2LWI0ODItMzFiMDRhZDQ0MmFjIiBzdEV2dDp3aGVuPSIyMDE5LTEwLTE3VDE1OjIzOjMwLTA0OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCkiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+olXGbQAAAUtJREFUGJVt0M9KAmEABPDZ9ds1NRGlbaOkBSmi8FTgoUOF1EkihHqBnqAXiPIBrFuHLoVQ1CEpCIKCCiQqFNKyUPuDEAsGuYa6mdr6dTADsTn+mLkMIrQlMot/0sDvS7UFE5tKMNOE6okSmvIMXP0hAcAn0pIEZ7GpSbSvnl2cxhvGsACeuWTUubFSywIANJljAfTOc8HQuX8mDACI+XMEAA+XXVhyvJD62uFj2wE8xQIuK6QqAKiWfJxEA0Zd0bKQSgliBgBMN8k1sj/Up7eLBjk5vCMCr++EjDFkcBEA0KEJ/ET+QBSsSmKSdRcAAGUaNmdJmr7tHbkkHKuUUkorZ0Fl+55GZqczVCa/j3A5avVuGUZWbxlUWVWr66MJbd6Hdd/13EUnKaRt1VpJX+keBWyeZe+4+5NnDvtLDKPpyl3GEkBsug8zc/cDY8OIy7Tw+C0AAAAASUVORK5CYII=';\n\nfunction isNew(xml) {\n  const updatedOn = xml.match(/\u003cupdated\u003e(.*?)Z\u003c\\/updated\u003e.*/);\n  if (!updatedOn || !updatedOn[1]) return false;\n\n  const updatedDate = new Date(updatedOn[1]);\n  return updatedDate.getDay() === new Date().getDay();\n}\n\nhttps.get(url, res =\u003e {\n  res.setEncoding('utf8');\n  let body = '';\n  res.on('data', data =\u003e {\n    body += data;\n  });\n  res.on('end', () =\u003e {\n    if (isNew(body)) {\n      console.log(icon);\n      console.log('---');\n      console.log('xkcd.com | href=http://www.xkcd.com');\n    }\n  });\n});\n"
				}
			],
			"path": "Web/XKCD/new-xkcd.5m.js",
			"filename": "new-xkcd.5m.js",
			"dir": "Web/XKCD",
			"docsPlugin": "Web/XKCD/new-xkcd.5m.js.html",
			"docsCategory": "Web/XKCD.html",
			"pathSegments": [
				"Web",
				"XKCD"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/XKCD",
					"text": "XKCD",
					"isLast": true
				}
			],
			"title": "New XKCD",
			"version": "v1.0.0",
			"author": "Rob Tarr",
			"authors": [
				{
					"name": "Rob Tarr",
					"githubUsername": "robtarr",
					"imageURL": "https://avatars.githubusercontent.com/u/270461?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Check for new XKCD comic",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "https://github.com/robtarr/bitbar-plugins",
			"lastUpdated": "2021-03-08T15:22:09.154718Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/openui5ver.1h.sh",
					"filename": "openui5ver.1h.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eOpenUI5 Latest Version Display\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eDJ Adams\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eqmacro\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/5GVxySB.png\u003c/bitbar.image\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n\n# OpenUI5 Latest Version Display\n# BitBar plugin\n#\n# by DJ Adams\n\nURI=\"https://openui5.hana.ondemand.com/resources/sap-ui-version.json\"\n\nVER=$(curl -s --compressed $URI | grep '\"version\"' | head -1 | sed -E 's/^.+([0-9]+\\.[0-9]+\\.[0-9]+).+$/\\1/')\n\necho \"$VER\"\n"
				}
			],
			"path": "Web/openui5ver.1h.sh",
			"filename": "openui5ver.1h.sh",
			"dir": "Web",
			"docsPlugin": "Web/openui5ver.1h.sh.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "OpenUI5 Latest Version Display",
			"version": "1.0",
			"author": "DJ Adams",
			"authors": [
				{
					"name": "DJ Adams",
					"githubUsername": "qmacro",
					"imageURL": "https://avatars.githubusercontent.com/u/73068?v=4",
					"bio": "Developer, Author, Speaker, Teacher.",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://i.imgur.com/5GVxySB.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:10.093446Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/pocket.10m.py",
					"filename": "pocket.10m.py",
					"content": "#!/usr/bin/env -S PATH=\"${PATH}:/usr/local/bin\" python3\n\n# \u003cbitbar.title\u003ePocket Bar\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.6.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eSergey Shlyapugin\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003einbalboa\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eBasic Pocket client.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/XQnh7US.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython3,pocket-api,keyring\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/inbalboa/pocketbar\u003c/bitbar.abouturl\u003e\n\nfrom argparse import ArgumentParser\nfrom dataclasses import dataclass\nimport json\nfrom pathlib import Path\nimport subprocess\nimport sys\n\nAPPNAME = 'pocketbar'\nCMD = sys.argv[0]\nCACHE_PATH = f'~/Library/Caches/{APPNAME}/articles.json'\n\n\n@dataclass(frozen=True)\nclass Article:\n    id: str\n    link: str\n    title: str\n    cmd: str\n\n    def __str__(self):\n        title_ = self.title.replace('|', '—').strip() if self.title else self.link\n        return f'''{title_}|href={self.link} length=60\\n➖ {title_}|alternate=true length=60 bash={self.cmd} param1=--delete param2={self.id} terminal=false refresh=true'''\n\n\ndef get_secrets():\n    consumer_key = keyring.get_password(APPNAME, 'consumer_key')\n    access_token = keyring.get_password(APPNAME, 'access_token')\n    return consumer_key, access_token\n\n\ndef update_secrets():\n    consumer_key = get_input('\\\"Enter your consumer key from\\\\n\\\\\"https://getpocket.com/developer/apps/\\\\\"\\\"', hidden=True)\n    if not consumer_key:\n        return None, None\n    keyring.set_password(APPNAME, 'consumer_key', consumer_key)\n\n    pocket = Pocket(consumer_key=consumer_key)\n    redirect_uri = 'https://getpocket.com/connected_applications'\n    request_token = pocket.get_request_token(redirect_uri)\n    auth_url = f'https://getpocket.com/auth/authorize?request_token={request_token}\u0026redirect_uri={redirect_uri}'\n    subprocess.Popen(['open', auth_url])\n    get_ok('\\\"Press the Authorize button in the opened browser tab, then close this dialog.\\\"')\n    access_token = pocket.get_access_token(request_token)\n    keyring.set_password(APPNAME, 'access_token', access_token)\n\n\ndef parse_args():\n    parser = ArgumentParser(description='Pocket Bar')\n    parser.add_argument('-a', '--add', action='store_true', help='add item')\n    parser.add_argument('-d', '--delete', type=str, help='delete item')\n    parser.add_argument('-f', '--full', action='store_true', help='full retrieve')\n    parser.add_argument('-s', '--secrets', action='store_true', help='update secrets')\n    args = parser.parse_args()\n    return args\n\n\ndef pocket_icon():\n    return 'iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAQAAABuvaSwAAABIElEQVR4Xs3OvS9DYRQH4KdKfaViRWq2SUpCzKJithKrpISko6E6WJBg8L8ws0g6dJMIg6nNbZcmEkLEcG96qduZ31nec/LknJd/lVkVF84T6kLF7HeaU/Xoxm1C3XhUlYvxisCyQSMJNWhZYCXGa+ryeiWvYe03HjdjoDNNmzSCvHoSPlJX1A/6bHhw0BvvedO2o1/KpqbPCP/4xqqGeQwpe9W2Y0vTh3NZzGtYjfFipw35i7b3iIarFmI84V45eof83VlEKbs3EeOUSzVTUTds276xqJtScynlW+Y8O5HRnYxTz+a6x0Uth519YcZUtBS7KRklgWvrcrKypq27Figl3ENawZXAkzt3ngSuFKSTaJhRS3YdO7ZryWhv+If5AkpGXVSbf9oEAAAAAElFTkSuQmCC'\n\n\ndef get_ok(caption):\n    osa_bin = 'osascript'\n    osa_params = f\"-e 'Tell application \\\"System Events\\\" to display alert \\\"Pocket Bar\\\" message {caption} buttons \\\"Close\\\" default button \\\"Close\\\"'\"\n    task = subprocess.Popen(f'{osa_bin} {osa_params} \u003e /dev/null', shell=True)\n    task.wait()\n\n\ndef get_input(caption, hidden=False):\n    osa_bin = 'osascript'\n    hidden_text = ' with hidden answer' if hidden else ''\n    osa_params = f\"-e 'Tell application \\\"System Events\\\" to display dialog {caption} default answer \\\"\\\" with title \\\"Pocket Bar\\\" with icon 1 {hidden_text}' -e 'text returned of result'\"\n    task = subprocess.Popen(f'{osa_bin} {osa_params}', shell=True, stdout=subprocess.PIPE)\n    answer_text = task.stdout.read()\n    task.wait()\n\n    return answer_text.decode().replace('\\n', '').replace('\\r', '').strip()\n\n\ndef print_error(error):\n    print('!|color=#ECB935')\n    print('---')\n    print(f'Exception: {error}')\n\n\ndef print_refresh():\n    print('---')\n    print('Refresh|refresh=yes')\n    print(f'Full refresh|alternate=true bash={CMD} param1=--full terminal=false refresh=yes')\n    print('---')\n    print('Open Pocket|href=\"https://getpocket.com/\" refresh=no')\n    print(f'Re-authorize...|alternate=true bash={CMD} param1=--secrets terminal=false refresh=true')\n\n\ndef print_secrets_error():\n    print('!|color=#ECB935')\n    print('---')\n    print('Need authorization')\n    print('---')\n    print(f'Authorize...|bash={CMD} param1=--secrets terminal=false refresh=true')\n\n\ndef print_import_error():\n    print('!|color=#ECB935')\n    print('---')\n    print('Need to install pocket-api or/and keyring packages')\n    print('---')\n    print('Install (with PIP)...|bash=pip3 param1=install param2=-U param3=pocket-api param4=keyring terminal=true refresh=true')\n\n\ndef get_cache(cache_path):\n    try:\n        with open(Path(cache_path).expanduser()) as json_file:\n            return json.load(json_file)\n    except:\n        return {}\n\n\ndef set_cache(cache_path, json_data):\n    expanded_cache_path = Path(cache_path).expanduser()\n    expanded_cache_path.parent.mkdir(exist_ok=True)\n    with open(expanded_cache_path, 'w+') as json_file:\n        json.dump(json_data, json_file)\n\n\ndef update_from_cache(main_dict, update_dict):\n    if update_dict['status'] == 2:\n        return main_dict\n    res = dict(main_dict)\n    res_list = res.get('list', {})\n    res_list.update(update_dict.get('list', {}))\n    res.update(update_dict)\n    res['list'] = res_list\n    return res\n\n\ndef main():\n    parsed_args = parse_args()\n\n    try:\n        global keyring, Pocket, PocketException\n        import keyring\n        from pocket import Pocket, PocketException\n    except ImportError:\n        print_import_error()\n        print_refresh()\n        return\n\n    consumer_key, access_token = get_secrets()\n    pocket = Pocket(consumer_key=consumer_key, access_token=access_token)\n\n    if parsed_args.add:\n        new_url = get_input('\\\"Save an item to Pocket:\\\"')\n        if new_url:\n            pocket.add(url=new_url)\n        return\n    elif parsed_args.delete:\n        pocket.delete(parsed_args.delete).commit()\n        return\n    elif parsed_args.secrets:\n        update_secrets()\n        return\n\n    raw_articles = {} if parsed_args.full else get_cache(CACHE_PATH)\n    try:\n        raw_answer = pocket.retrieve(detailType='simple', since=raw_articles.get('since'))\n    except PocketException as e:\n        if e.http_code in (400, 401):\n            print_secrets_error()\n        else:\n            print_error(e)\n        print_refresh()\n        return\n    except Exception as e:\n        print_error(e)\n        print_refresh()\n        return\n\n    raw_articles = update_from_cache(raw_articles, raw_answer)\n    set_cache(CACHE_PATH, raw_articles)\n\n    adapted_articles = [Article(\n                            id=i.get('item_id'),\n                            link=i.get('resolved_url', i.get('given_url')),\n                            title=i.get('resolved_title', i.get('given_title')),\n                            cmd=CMD\n                        )\n                        for i in sorted(raw_articles['list'].values(), key=lambda x: x.get('time_added', ''), reverse=True) if i['status'] == '0']\n    print(f'{len(adapted_articles)}|font=Verdana size=14 templateImage={pocket_icon()}')\n    print('---')\n    print(*adapted_articles, sep='\\n')\n    print('---')\n    print(f'➕ Save a URL|bash={CMD} param1=--add terminal=false refresh=true')\n    print_refresh()\n\n\nif __name__ == '__main__':\n    main()\n"
				}
			],
			"path": "Web/pocket.10m.py",
			"filename": "pocket.10m.py",
			"dir": "Web",
			"docsPlugin": "Web/pocket.10m.py.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Pocket Bar",
			"version": "v1.6.1",
			"author": "Sergey Shlyapugin",
			"authors": [
				{
					"name": "Sergey Shlyapugin",
					"githubUsername": "inbalboa",
					"imageURL": "https://avatars.githubusercontent.com/u/2811912?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Basic Pocket client.",
			"imageURL": "https://i.imgur.com/XQnh7US.png",
			"dependencies": [
				"python3",
				"pocket-api",
				"keyring"
			],
			"aboutURL": "https://github.com/inbalboa/pocketbar",
			"lastUpdated": "2021-03-08T15:22:10.157915Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/ProductHunt/producthunt-tech-hunts.1d.py",
					"filename": "producthunt-tech-hunts.1d.py",
					"content": "#!/usr/bin/env python\n\n# \u003cbitbar.title\u003eProduct Hunt - Today in Tech\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eJohn Flesch\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eflesch\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eToday's featured tech hunts on Product Hunt\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://cloud.githubusercontent.com/assets/13259/12370591/3039c57e-bbdc-11e5-9b42-e4ab9f6bf851.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://www.producthunt.com/\u003c/bitbar.abouturl\u003e\n\nimport json\nimport urllib2\n\ndef get_token():\n    data = json.dumps(credentials)\n    try:\n        request = urllib2.Request('https://api.producthunt.com/v1/oauth/token', headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Content-Length': len(data.encode('utf-8'))\n        })\n        response = urllib2.urlopen(request, data)\n        response = json.load(response)\n        return response['access_token']\n    except Exception:\n        print ':('\n\ndef get_posts():\n    try:\n        token = get_token()\n        request = urllib2.Request('https://api.producthunt.com/v1/posts', headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': ('Bearer %s' % token)\n        })\n        response = urllib2.urlopen(request)\n        response = json.load(response)\n        return map(format_posts, response['posts'])\n    except Exception:\n        print ':('\n\ndef format_posts(post):\n    return (u'%s - %s| href=%s' % (post['name'], post['tagline'], post['discussion_url'])).encode('utf-8')\n\ncredentials = {\n    'client_id': '92822f15f8f1dac5477cd3e8639d8153c70a5b976d2b55bad7cb117ff6d5bd72',\n    'client_secret': 'fb5d3738f716b4c99cc3d798cd0a27401734edd20a8cf2efdc29a6c04dda344b',\n    'grant_type': 'client_credentials'\n}\n\nprint (u'\\u2117 | size=18').encode('utf-8')\nprint '---'\nprint '\\n'.join(get_posts())\nprint '---'\nprint 'Product Hunt - Today in Tech | href=https://www.producthunt.com/tech'\n"
				}
			],
			"path": "Web/ProductHunt/producthunt-tech-hunts.1d.py",
			"filename": "producthunt-tech-hunts.1d.py",
			"dir": "Web/ProductHunt",
			"docsPlugin": "Web/ProductHunt/producthunt-tech-hunts.1d.py.html",
			"docsCategory": "Web/ProductHunt.html",
			"pathSegments": [
				"Web",
				"ProductHunt"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/ProductHunt",
					"text": "ProductHunt",
					"isLast": true
				}
			],
			"title": "Product Hunt - Today in Tech",
			"version": "v1.0.0",
			"author": "John Flesch",
			"authors": [
				{
					"name": "John Flesch",
					"githubUsername": "flesch",
					"imageURL": "https://avatars.githubusercontent.com/u/13259?v=4",
					"bio": "𝕱 • Insatiable curiosity for technologies that make life better.",
					"primary": true
				}
			],
			"desc": "Today's featured tech hunts on Product Hunt",
			"imageURL": "https://cloud.githubusercontent.com/assets/13259/12370591/3039c57e-bbdc-11e5-9b42-e4ab9f6bf851.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://www.producthunt.com/",
			"lastUpdated": "2021-03-08T15:22:09.066361Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/ProductHunt/producthunt-posts-votes.1h.js",
					"filename": "producthunt-posts-votes.1h.js",
					"content": "#!/usr/local/bin/node\n/*\n* \u003cbitbar.title\u003eProductHunt Posts Votes Count\u003c/bitbar.title\u003e\n* \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n* \u003cbitbar.author\u003eVarun Malhotra\u003c/bitbar.author\u003e\n* \u003cbitbar.author.github\u003esoftvar\u003c/bitbar.author.github\u003e\n* \u003cbitbar.image\u003e\u003c/bitbar.image\u003e\n* \u003cbitbar.desc\u003eProductHunt Posts Votes count and Emoji notification 🔔  on change in votes count\u003c/bitbar.desc\u003e\n* \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n* \u003cbitbar.abouturl\u003ehttp://varunmalhotra.xyz/blog/2016/02/bitbar-plugins-for-github-and-producthunt.html\u003c/bitbar.abouturl\u003e\n*/\n\nvar https = require('https');\nvar fs = require('fs');\n\n// Configurable params\n// Either of userId or username should be provided\n// Providing userId will save one extra call for getting userId from username since PH API works on userId\nvar config = {\n    accessToken: '',\n    username: null,\n    userId: 294870,\n    filename: '/tmp/product-hunt-bitbar-votes-data.txt'\n};\n\n\nvar userId;\nvar displayInMenuBar = 'PH| color=#da552f dropdown=false';\ndisplayInMenuBar += '\\n---\\n';\n\nfunction checkIfFileExists() {\n    fs.exists(config.filename, function (exists) {\n        if (exists) {\n            return;\n        } else {\n            fs.writeFile(config.filename, {flag: 'wx'}, 0, function (err, data) {\n                if (err) { throw err; }\n            });\n        }\n    });\n}\n\nfunction sortOn(arr, key, orderBy) {\n    arr.sort(function (a, b) {\n        return orderBy ? b[key] - a[key] : a[key] - b[key];\n    });\n}\n\nfunction fetchPostVotes() {\n    // Fetch votes on each posts\n    var options = {\n        hostname: 'api.producthunt.com',\n        path: '/v1/users/' + userId + '/posts',\n        method: 'GET',\n        headers: {\n         'Authorization': 'Bearer ' + config.accessToken\n        }\n    };\n    var output = '';\n    var req = https.request(options, function(res) {\n        var body = '';\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n            var name;\n            var votes = [];\n            var response = JSON.parse(body);\n            var posts = response.posts;\n\n            // sort response on votes_count to show posts having higher votes on top\n            sortOn(posts, 'votes_count', true);\n\n            for (var i = 0; i \u003c posts.length; i++) {\n                name = posts[i].name;\n                output +=  '(' + posts[i].votes_count + ')' + name + ' | length=15 href=' + posts[i].discussion_url;\n                output += '\\n---\\n';\n                votes.push(posts[i].votes_count);\n            }\n\n            var oldData;\n            fs.readFile(config.filename, 'utf8', function (err, data) {\n                if (err) { throw err; }\n                oldData = data;\n\n                // SHow notification bell in OS X menu bar if current and previous data dont match\n                // Voilla! someone upvoted your post on ProductHunt\n                if (oldData.toString() !== votes.toString()) {\n                    displayInMenuBar = 'PH🔔| color=#da552f dropdown=false';\n                    displayInMenuBar += '\\n---\\n';\n                }\n\n                // Write all the votes count in the file\n                fs.writeFile(config.filename, votes.toString(), function (err) {\n                    if (err) { throw err; }\n                });\n\n                // Finally log the entire output\n                console.log(displayInMenuBar + output);\n            });\n        });\n    });\n    req.end();\n\n    req.on('error', function(e) {\n        console.error(e);\n    });\n}\n\nfunction getUserId(options) {\n    var req = https.request(options, function(res) {\n        var body = '';\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n            var response = JSON.parse(body);\n            if (response.error) {\n                console.log('No such PH User Found');\n                return;\n            }\n            // Update userId\n            userId = response.user.id;\n            console.log(userId);\n            fetchPostVotes();\n        });\n    });\n\n    req.end();\n\n    req.on('error', function(e) {\n        console.error(e);\n    });\n}\n\ncheckIfFileExists();\n\nif (config.userId) {\n    userId = config.userId;\n    fetchPostVotes();\n} else if (config.username) {\n    // Since we need ProductHunt userId for fetching user related data, get userId\n    // API call options\n    var options = {\n        hostname: 'api.producthunt.com',\n        path: '/v1/users/' + config.username,\n        method: 'GET',\n        headers: {\n            'Authorization': 'Bearer ' + config.accessToken\n        }\n    };\n    getUserId(options);\n} else {\n    console.log('!PH| color=#da552f dropdown=false\\n---\\n Provide PH userId/username.');\n}\n"
				}
			],
			"path": "Web/ProductHunt/producthunt-posts-votes.1h.js",
			"filename": "producthunt-posts-votes.1h.js",
			"dir": "Web/ProductHunt",
			"docsPlugin": "Web/ProductHunt/producthunt-posts-votes.1h.js.html",
			"docsCategory": "Web/ProductHunt.html",
			"pathSegments": [
				"Web",
				"ProductHunt"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/ProductHunt",
					"text": "ProductHunt",
					"isLast": true
				}
			],
			"title": "ProductHunt Posts Votes Count",
			"version": "v1.0",
			"author": "Varun Malhotra",
			"authors": [
				{
					"name": "Varun Malhotra",
					"githubUsername": "softvar",
					"imageURL": "https://avatars.githubusercontent.com/u/4180800?v=4",
					"bio": "Lead Software Engineer | Science \u0026 Cosmos Fanatic | Being Psychologist to enhance AI skills\r\n",
					"primary": true
				}
			],
			"desc": "ProductHunt Posts Votes count and Emoji notification 🔔  on change in votes count",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "http://varunmalhotra.xyz/blog/2016/02/bitbar-plugins-for-github-and-producthunt.html",
			"lastUpdated": "2021-03-08T15:22:08.985727Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/Reddit/reddit.1m.py",
					"filename": "reddit.1m.py",
					"content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# \u003cbitbar.title\u003eReddit\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eParvez\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eparvez\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays Reddit for Mac\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/zUHPCvq.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/parvez/bitbar-plugins\u003c/bitbar.abouturl\u003e\n#\n# by Parvez\n\n# encoding=utf8\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf8')\n\nimport json\nimport urllib2\nreddit0 = \"https://www.reddit.com\"\nreddit1 = [\n  [\"All\", \"https://www.reddit.com/r/all\", \"\"],\n  [\"Hour\", \"https://www.reddit.com/r/all/top/\", \"?sort=top\u0026t=hour\"],\n  [\"News\", \"https://www.reddit.com/r/news+worldnews+politics\", \"\"],\n]\nicons = {\n  \"bayarea\": \"🇺🇸\",\n  \"news\": \"📰\",\n  \"worldnews\": \"🌎\"\n}\n\nprint (\"🐈\")\nprint (\"---\")\n\nfor r1 in reddit1:\n  print (r1[0])\n  request = urllib2.Request(r1[1] + \".json\" + r1[2], headers={\n    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36\",\n    \"Pragma\": \"no-cache\"\n  })\n  jsonUrl = urllib2.urlopen(request).read()\n  jsonRet = json.loads(jsonUrl)\n  for j in jsonRet['data']['children']:\n    child = j['data']\n    line = child['title']\n    color = \"\"\n    if child['quarantine'] or child['over_18']:\n      line = \"(NSFW) \" + line\n      color = \" color=#EEEEEE\"\n    lim=75\n    w=0\n    l = []\n    sr = child['permalink'].split(\"/\")[2].lower()\n    i = \"\"\n    if sr in icons: i = icons[sr] + \" \"\n    for d in line.split():\n      if w + len(d) + 1 \u003c= lim:\n        l.append(d)\n        w += len(d) + 1\n      else:\n        print (\"--\" + i + \" \".join(l) + \" | href=\" + child['url'] + \" trim=false size=11\" + color)\n        i = \"\"\n        l = [d]\n        w = len(d)\n    if (len(l)):\n      print (\"--\" + i + \" \".join(l) + \" | href=\" + child['url'] + \" trim=false size=11\" + color)\n    print (\"--          [\" + sr + \"] \" + \"Score: \" + str(child['score']) + \", Comments: \" + str(child['num_comments']) + \" | href=\" + reddit0 + child['permalink'] + \" trim=false size=9\" + color)\n    print (\"--          | trim=false size=4\")\nprint (\"---\")\nprint (\"Refresh... | refresh=true\")\n"
				}
			],
			"path": "Web/Reddit/reddit.1m.py",
			"filename": "reddit.1m.py",
			"dir": "Web/Reddit",
			"docsPlugin": "Web/Reddit/reddit.1m.py.html",
			"docsCategory": "Web/Reddit.html",
			"pathSegments": [
				"Web",
				"Reddit"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/Reddit",
					"text": "Reddit",
					"isLast": true
				}
			],
			"title": "Reddit",
			"version": "v1.0",
			"author": "Parvez",
			"authors": [
				{
					"name": "Parvez",
					"githubUsername": "parvez",
					"imageURL": "https://avatars.githubusercontent.com/u/126749?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays Reddit for Mac",
			"imageURL": "http://i.imgur.com/zUHPCvq.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/parvez/bitbar-plugins",
			"lastUpdated": "2021-03-08T15:22:09.035313Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/Reddit/redditnotify.30s.py",
					"filename": "redditnotify.30s.py",
					"content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# \u003cbitbar.title\u003eReddit Notifications\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eHeyItsShuga\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eShugabuga\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eCheck your Reddit messages in your status bar!\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/ohM8E6u.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython,praw\u003c/bitbar.dependencies\u003e\n\n############################################################################\n#                      Reddit Notifications for BitBar                     #\n#                            by /u/HeyItsShuga                             #\n#                                                                          #\n#                              Configuration                               #\n#  Tip: Make sure that the quotes stay as real quotes (if using TextEdit). #\n############################################################################\n\nUSERNAME = \"\" # Please put your username inside of the quotes.\nPASSWORD = \"\" # Please put your password inside of the quotes.\n\n############################################################################\n#                        End Configuration. Enjoy!                         #\n############################################################################\n\nimport os\nimport praw\n\nif USERNAME == '':\n    print \"Not Configured! | color=#e51b1b\"\n    print \"---\"\n    print \"Click here to open the config in nano. | color=#e51b1b bash=' nano\", __file__, '\"'\n    os.system(\"open \" + __file__)\n\nmessage_noteInt = \"No Messages!\"\nmessageCount = 0\n\nr = praw.Reddit(user_agent=\"Reddit Notifications for BitBar\",disable_update_check=True)\nr.login(USERNAME, PASSWORD, disable_warning=True)\n\nunreadInt = r.get_unread()\nunread = r.get_unread()\n\nfor messages in unreadInt:\n    message_noteInt = str(messages)\n    messageCount = messageCount + 1\n\nif message_noteInt == \"No Messages!\":\n    print \"| image=iVBORw0KGgoAAAANSUhEUgAAABkAAAAQCAMAAADUOCSZAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAJ9QTFRFAAAAAAAAgICAgICAbW1tgICAeHh4gICAgICAfHx8fHx8fX19fX19e3t7fX19fHx8fn5+fHx8fn5+fHx8fn5+fn5+fHx8fX19fn5+fX19fHx8fn5+fX19fn5+fX19fX19fX19fX19fX19fX19fX19fn5+fn5+fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19ui5QtQAAADR0Uk5TAAECBgcIERIUISUvNTY7REdISUpLT1BWYWhpgIWOj5Gjpau/wMHFyNbX2+Dh4uPk5efo6c9RgL0AAACeSURBVBjTddHZEoIwDAXQiyKItYribkVRcANaEP7/25TRUsGat+RkMk0KT5S64B7ELiFoB0l8jhLzYtaCcbF81UtgmG0asMpHeAuc675T143tfQApsE7H3ge6h3MfSupc9UiRM9RcJSwWFFTEzGiKGYSWm7PctcLA/BY7qnJyIVVPZCtxbn9eTbO1ftPF73Ue1XW4r79oiinX/kI6eQKV6hmFxUk2wQAAAABJRU5ErkJggg==\"\nelse:\n    print \"| image=iVBORw0KGgoAAAANSUhEUgAAABkAAAAQCAMAAADUOCSZAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAJ9QTFRFAAAA/wAA/wAA1Ssr2yQk3yAg4R4e4xwc5hoa6BcX4xwc5Bsb5x0d4xwc5Roa5Roa5h0d5hwc5xwc4xwc5Bsb5Roa5hoa5Bsb5Roa5Bsb5Bsb5Rwc5Bsb5hsb5Bsb5Roa5Bsb5Roa5hsb5hsb5Bsb5Roa5Rsb5hsb5Rsb5Rsb5Rsb5Rsb5Rsb5Rsb5Rsb5Rsb5Rsb5Roa5Rsb5Rsb5RsbcU/E7wAAADR0Uk5TAAECBgcIERIUISUvNTY7REdISUpLT1BWYWhpgIWOj5Gjpau/wMHFyNbX2+Dh4uPk5efo6c9RgL0AAACeSURBVBjTddHZEoIwDAXQiyKItYribkVRcANaEP7/25TRUsGat+RkMk0KT5S64B7ELiFoB0l8jhLzYtaCcbF81UtgmG0asMpHeAuc675T143tfQApsE7H3ge6h3MfSupc9UiRM9RcJSwWFFTEzGiKGYSWm7PctcLA/BY7qnJyIVVPZCtxbn9eTbO1ftPF73Ue1XW4r79oiinX/kI6eQKV6hmFxUk2wQAAAABJRU5ErkJggg==\"\n\nprint \"---\"\nprint \"Messages: \", messageCount, \"| font=HelveticaNeue-Bold href=https://www.reddit.com/message/unread/\"\nprint \"---\"\nif message_noteInt == \"No Messages!\":\n    print \"No Unread Messages! | color=teal\"\nfor messages in unread:\n    print str(messages), \" | color=teal\"\n    print \"---\"\n"
				}
			],
			"path": "Web/Reddit/redditnotify.30s.py",
			"filename": "redditnotify.30s.py",
			"dir": "Web/Reddit",
			"docsPlugin": "Web/Reddit/redditnotify.30s.py.html",
			"docsCategory": "Web/Reddit.html",
			"pathSegments": [
				"Web",
				"Reddit"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/Reddit",
					"text": "Reddit",
					"isLast": true
				}
			],
			"title": "Reddit Notifications",
			"version": "v1.0.0",
			"author": "HeyItsShuga",
			"authors": [
				{
					"name": "Shuga",
					"githubUsername": "Shugabuga",
					"imageURL": "https://avatars.githubusercontent.com/u/10801851?v=4",
					"bio": "\r\n    Developer and Designer.\r\n",
					"primary": true
				}
			],
			"desc": "Check your Reddit messages in your status bar!",
			"imageURL": "http://i.imgur.com/ohM8E6u.png",
			"dependencies": [
				"python",
				"praw"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.041368Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/service-status.5s.js",
					"filename": "service-status.5s.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\nconst https = require('https');\n\n// \u003cbitbar.title\u003eService Status\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eVitaly Emelyanov\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003eVitalyEmelyanov\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eSimple plugin to monitor your services/websites availability\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttps://hsto.org/webt/dd/yv/qn/ddyvqnycz-hytbdolo5ti48pii4.png\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003enodejs\u003c/bitbar.dependencies\u003e\n\n// Customize as you wish!\nconst services = [\n  {name: 'Example', url: 'https://example.com'},\n];\n\n// Emoji statuses\nconst successStatus = '🟢|size=10';\nconst warningStatus = '🟠|size=10';\nconst errorStatus = '🔴|size=10';\n\n// Text statuses - replace emoji if you want\n// const successStatus = '●|color=green';\n// const warningStatus = '●|color=orange';\n// const errorStatus = '●|color=red';\n\nfunction main() {\n  Promise.all(services.map(checkStatus))\n      .then(serviceStatuses =\u003e {\n        const allSuccess = serviceStatuses.every(s =\u003e s.status === 'success');\n        const allError = serviceStatuses.every(s =\u003e s.status === 'error');\n\n        let globalStatusIcon;\n\n        if (allSuccess) globalStatusIcon = successStatus;\n        else if (allError) globalStatusIcon = errorStatus;\n        else globalStatusIcon = warningStatus;\n\n        console.log(`${globalStatusIcon}`);\n        console.log('---');\n\n        serviceStatuses.forEach(s =\u003e {\n          const color = s.status === 'success' ? 'green' : 'red';\n          console.log(`${s.service.name} |color=${color}`);\n          if (s.status === 'success') {\n            console.log(`${s.res.statusCode} ${s.res.statusMessage} |size=10`);\n          } else {\n            console.log(`${s.error} |size=10`);\n          }\n          console.log('---');\n        });\n\n        if (!serviceStatuses.length) console.log('There are no configured services to check!\\n---');\n      });\n}\nmain();\n\nfunction checkStatus(service) {\n  return new Promise(resolve =\u003e {\n    const req = https.get(service.url, res =\u003e {\n      if (res.statusCode === 200) {\n        return resolve({status: 'success', res, service})\n      }\n      return resolve({status: 'error', error: `${res.statusCode} ${res.statusMessage}`, service})\n    });\n    req.on('error', error =\u003e resolve({status: 'error', error, service}));\n    req.end();\n\n    setTimeout(() =\u003e {\n      resolve({status: 'error', error: 'Request timeout', service});\n      req.abort();\n    }, 3000)\n  });\n}\n"
				}
			],
			"path": "Web/service-status.5s.js",
			"filename": "service-status.5s.js",
			"dir": "Web",
			"docsPlugin": "Web/service-status.5s.js.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Service Status",
			"version": "v1.0",
			"author": "Vitaly Emelyanov",
			"authors": [
				{
					"name": "Vitaly",
					"githubUsername": "VitalyEmelyanov",
					"imageURL": "https://avatars.githubusercontent.com/u/15330670?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple plugin to monitor your services/websites availability",
			"imageURL": "https://hsto.org/webt/dd/yv/qn/ddyvqnycz-hytbdolo5ti48pii4.png",
			"dependencies": [
				"nodejs"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:10.395162Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/rss.15m.php",
					"filename": "rss.15m.php",
					"content": "#!/usr/bin/env php\n\u003c?php\n// \u003cbitbar.title\u003eSimple RSS reader\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eAleš Farčnik\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003ealesf\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eSimple RSS \"reader\" that will list latest feed items and link to them.\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttp://i.imgur.com/JDdgcGH.png\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003ephp \u003e= 5.4\u003c/bitbar.dependencies\u003e\n\ndefine('FEED_URL', 'http://feedpress.me/sixcolors?type=xml');\ndefine('ITEM_LIMIT', 25);\n\n// You should not need to change anything below this part\n\n// TODO:\n// - multiple feeds\n// - keep older items in log file for some time\n\ndefine('FEED_LOG', dirname(__FILE__).'/.rss.log');\ndefine('SCRIPT_PATH', __FILE__);\ndefine('PHP_PATH', exec(\"which php\"));\n\n$feed_image = \"iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRT\".\n    \"b2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAATBJREFUeNqc0b1KQzEYxvFQq4i2kwiCD\".\n    \"jo4dZIKQm+hm5tUUHDxBnQSF1cXh1IR3AqdBK+gLl5BURz82hy0Iq2lYkHqP/BGHsKxFgM/Tv\".\n    \"vk5D3Jm7Rzro8OHtHABc7x6oYc/QSfqCH33wLBF8rIDiowj2Ws4wQvCYVuh92NH6NW7D4q8oa\".\n    \"VpAVH2EMRk5KP4zChSG5QD/xtVDAr82voRcfJ/tXEd5SiIjpfDhMjmEETc0hbPoZVu85LXNlX\".\n    \"Czafx5k1/GdMYAet6Gsl6Yk2tvbbLSziLjpO6MmG5L4vU7rIbysl/9vy8rFccVPyLR/uS1CXP\".\n    \"uxGt5Ox/FTyqrMt6plDo/yCD8mLlm9K1kjZVnW07NmxGwhjyZ43ki34Att4QhcHuJYXHuT3tD\".\n    \"2fJct8CzAAqHZ3QQFiFvsAAAAASUVORK5CYII=\";\n\nif (isset($argv[1])) {\n    $log_data = @file_get_contents(FEED_LOG);\n    $log_data = json_decode($log_data, true);\n\n    if ($argv[1] == 'MARK_ALL_AS_READ') {\n        foreach ($log_data as \u0026$log_item) {\n            $log_item['visited'] = true;\n        }\n        file_put_contents(FEED_LOG, json_encode($log_data));\n        exit();\n    }\n    exec('open ' . $log_data[$argv[1]]['link']);\n    $log_data[$argv[1]]['visited'] = true;\n    file_put_contents(FEED_LOG, json_encode($log_data));\n    exit();\n}\n\nclass RSSParser\n{\n    protected $url;\n    protected $feed;\n    protected $feed_type;\n    protected $feed_channel;\n    protected $feed_items;\n    protected $feed_guid;\n\n    protected $log_data;\n\n    public $title;\n    public $items;\n    public $unread_no = 0;\n\n    public function __construct($url)\n    {\n        $this-\u003eload($url);\n    }\n\n    private function loadLogData()\n    {\n        $log_data = @file_get_contents(FEED_LOG);\n        if ($log_data) {\n            $this-\u003elog_data = json_decode($log_data, true);\n        }\n    }\n\n    public function load($url)\n    {\n        $this-\u003eloadLogData();\n\n        $feed_data = @file_get_contents(FEED_URL);\n\n        if ($feed_data === '') {\n            $this-\u003etitle = 'No new items at this time.';\n            return;\n        }\n\n        $this-\u003efeed = new DOMDocument();\n        $this-\u003efeed-\u003eloadXML($feed_data);\n\n        if ($this-\u003efeed-\u003egetElementsByTagName('channel')-\u003eitem(0)) {\n            $this-\u003efeed_type = 'rss';\n            $this-\u003efeed_channel = $this-\u003efeed-\u003egetElementsByTagName('channel')-\u003eitem(0);\n            $this-\u003efeed_items = $this-\u003efeed-\u003egetElementsByTagName('channel')\n                -\u003eitem(0)-\u003egetElementsByTagName('item');\n            $this-\u003efeed_guid = 'guid';\n        } else {\n            $this-\u003efeed_type = 'atom';\n            $this-\u003efeed_channel = $this-\u003efeed;\n            $this-\u003efeed_items = $this-\u003efeed-\u003egetElementsByTagName('entry');\n            $this-\u003efeed_guid = 'id';\n        }\n\n        $this-\u003esetTitle();\n        $this-\u003esetItems();\n    }\n\n    public function setTitle()\n    {\n        $this-\u003etitle = $this-\u003egetItemElement($this-\u003efeed_channel, 'title');\n    }\n\n    public function setItems()\n    {\n        $item_count = 1;\n        foreach ($this-\u003efeed_items as $item) {\n            if ($item_count \u003e ITEM_LIMIT) {\n                break;\n            }\n            $title = $this-\u003egetItemElement($item, 'title');\n            $guid = $this-\u003egetItemElement($item, $this-\u003efeed_guid);\n            $link = $this-\u003egetItemElement($item, 'link');\n\n            $this-\u003eitems[$guid] = [\n                'title' =\u003e $title,\n                'link' =\u003e $link,\n                'guid' =\u003e $guid\n            ];\n            if (!isset($this-\u003elog_data[$guid])) {\n                $this-\u003eitems[$guid]['visited'] = false;\n                $this-\u003eunread_no++;\n            } else {\n                $this-\u003eitems[$guid] = $this-\u003elog_data[$guid];\n                if (!$this-\u003eitems[$guid]['visited']) {\n                    $this-\u003eunread_no++;\n                }\n            }\n            $item_count++;\n        }\n\n        if (!empty($this-\u003eitems)) {\n            file_put_contents(FEED_LOG, json_encode($this-\u003eitems));\n        }\n    }\n\n    public function getUnreadCnt()\n    {\n        return $this-\u003eunread_no ? $this-\u003eunread_no : '';\n    }\n\n    private function getItemElement($item, $element)\n    {\n        if (!$item) {\n            return '';\n        }\n        if ($this-\u003efeed_type == 'rss') {\n            return trim($item-\u003egetElementsByTagName($element)-\u003eitem(0)-\u003efirstChild-\u003enodeValue);\n        }\n\n        if ($this-\u003efeed_type == 'atom') {\n            if ($element == 'link') {\n                return trim($item-\u003egetElementsByTagName($element)-\u003eitem(0)-\u003egetAttribute('href'));\n            }\n            return trim($item-\u003egetElementsByTagName($element)-\u003eitem(0)-\u003enodeValue);\n        }\n    }\n}\n\n/**\n * BitBar display\n */\nclass BitBar\n{\n    public function divider()\n    {\n        echo \"---\\n\";\n    }\n\n    public function icon($icon, $text = '')\n    {\n        if ($text) {\n            echo \"{$text} \";\n        }\n        echo \"| size=10 templateImage={$icon}\\n\";\n    }\n\n    public function println($text)\n    {\n        echo \"{$text}\";\n        echo \"\\n\";\n    }\n\n    public function rssItem($title, $guid, $unread = false)\n    {\n        if ($unread) {\n            echo \"● \";\n        }\n        echo \"$title | length=65 terminal=false refresh=true \";\n        echo \"bash=\".PHP_PATH.\" param1=\".SCRIPT_PATH.\" param2=$guid\\n\";\n    }\n\n    public function rssItems($items)\n    {\n        if (empty($items)) {\n            return false;\n        }\n        foreach ($items as $item) {\n            $this-\u003erssItem($item['title'], $item['guid'], !$item['visited']);\n        };\n    }\n\n    public function markAsRead()\n    {\n        echo \"Mark all as read | terminal=false refresh=true \";\n        echo \"bash=\".PHP_PATH.\" param1=\".SCRIPT_PATH.\" param2=MARK_ALL_AS_READ\\n\";\n    }\n\n    public function refresh()\n    {\n        echo \"Refresh | refresh=true\";\n    }\n}\n\n$parser = new RSSParser(FEED_URL);\n$bb = new BitBar();\n\n$bb-\u003eicon($feed_image, $parser-\u003egetUnreadCnt());\n$bb-\u003edivider();\n$bb-\u003eprintln($parser-\u003etitle);\n$bb-\u003edivider();\n$bb-\u003erssItems($parser-\u003eitems);\n$bb-\u003edivider();\n$bb-\u003emarkAsRead();\n$bb-\u003erefresh();\n"
				}
			],
			"path": "Web/rss.15m.php",
			"filename": "rss.15m.php",
			"dir": "Web",
			"docsPlugin": "Web/rss.15m.php.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Simple RSS reader",
			"version": "1.0",
			"author": "Aleš Farčnik",
			"authors": [
				{
					"name": "alesf",
					"githubUsername": "alesf",
					"imageURL": "https://avatars.githubusercontent.com/u/1148574?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Simple RSS \"reader\" that will list latest feed items and link to them.",
			"imageURL": "http://i.imgur.com/JDdgcGH.png",
			"dependencies": [
				"php \u003e= 5.4"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:10.302588Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/reputationizer.5m.sh",
					"filename": "reputationizer.5m.sh",
					"content": "#!/bin/bash\n\n# Stackoverflow reputation score and Emoji on change :)\n# BitBar plugin\n#\n# \u003cbitbar.title\u003eStackoverflow Reputation Score\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eBruce Steedman\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eMatzFan\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/0XHs8R0.png\u003c/bitbar.image\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n#\n# by Bruce Steedman\n#\n# Shows current reputation and 👍 / 👎 on change\n# 5 minute refresh is just under the 300 calls a day no-key api limit\n\n# id for user from url - e.g. https://stackoverflow.com/users/4114896/matzfan\nSO_ID=22656 # CHANGE THIS VALUE to your's (or watch Mr Skeet reach 7 figures!)\n\nURI=\"https://api.stackexchange.com/2.2/users/$SO_ID?site=stackoverflow\" # api\nSO_ICON=\"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\"\n\n# file used to persist old score. set score to 0 if file doesn't exist\nif [ ! -f \"/tmp/reputationizer.dat\" ] ; then\n  OLDREP=0\nelse\n  OLDREP=$(cat /tmp/reputationizer.dat) # read value from file\nfi\n# get reputation from api\nNEWREP=$(curl -s --compressed \"$URI\" | egrep -o '\"reputation\":*([0-9])+' | sed 's/\"reputation\"://')\n\nif [ -z \"$OLDREP\" ] || [ -z \"$NEWREP\" ] ; then\n  echo \"? | color=orange image=$SO_ICON\"\nelif [ \"$NEWREP\" -gt \"$OLDREP\" ] ; then\n  echo \"+$((NEWREP - OLDREP)) | color=green image=$SO_ICON\"\nelif [ \"$OLDREP\" -gt \"$NEWREP\" ] ; then\n  echo \"$((NEWREP - OLDREP)) | color=red image=$SO_ICON\"\nelse\n  echo \"$NEWREP | image=$SO_ICON\" # output score\nfi\n\necho \"$NEWREP\" \u003e /tmp/reputationizer.dat # write new score to file\n"
				}
			],
			"path": "Web/reputationizer.5m.sh",
			"filename": "reputationizer.5m.sh",
			"dir": "Web",
			"docsPlugin": "Web/reputationizer.5m.sh.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Stackoverflow Reputation Score",
			"version": "1.0",
			"author": "Bruce Steedman",
			"authors": [
				{
					"name": "Bruce Steedman",
					"githubUsername": "MatzFan",
					"imageURL": "https://avatars.githubusercontent.com/u/3764715?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://i.imgur.com/0XHs8R0.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:10.194316Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/Reddit/subreddit_links.rb",
					"filename": "subreddit_links.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eSubreddit Links\u003c/bitbar.title\u003e\n# \u003cbitbar.author\u003eJoe Canero\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ecaneroj1\u003c/bitbar.author.github\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/3ZDUdNH.png\u003c/bitbar.image\u003e\n# \u003cbitbar.version\u003e1.0\u003c/bitbar.version\u003e\n\nrequire 'net/http'\nrequire 'json'\n\n#### Tips ####\n# Update the list of subreddits below\n# to customize the functionality of this\n# plugin.\n# The format should be like this:\n# [name_of_subreddit, \"/top\" or \"/new\"]\n# If you instead want to get links from\n# the front page instead of a subreddit,\n# leave name_of_subreddit empty: \"\"\n#### #### ####\nSUBREDDITS = [\n  [\"\",            \"/top\"],\n  [\"r/AskReddit\", \"/top\"],\n]\n\n# Feel free to make the user agent your username\n# It looks like reddit just requires the user agent to be\n# something unique and not generic.\nUSER_AGENT = \"bitbar-user-agent\"\nREDDIT = \"https://www.reddit.com/\"\nDEFAULT_PORT = 443\n\ndef to_json(subreddit, type)\n  uri = URI.parse(\"#{REDDIT}#{subreddit}#{type}.json\")\n  @http = Net::HTTP::Get.new(uri)\n  @http.add_field('User-Agent', USER_AGENT)\n \n  res = Net::HTTP.start(uri.host, DEFAULT_PORT, :use_ssl =\u003e true) do |http| \n    http.request(@http)\n  end\n \n  data = JSON.parse(res.body)\n  data[\"subreddit_name\"] = (subreddit.eql?(\"\") ? \"Front Page\" : subreddit) + type\n  data\nend\n\ndef prettify(json)\n  puts \"---\"\n  if json[\"quarantine\"] || json[\"over_18\"]\n    puts \"NSFW | color=red\"\n  end\n\n  puts json[\"title\"] + \"| href=#{REDDIT}\" + json[\"permalink\"] + \" color=#337ab7\"\n  puts \"Score: #{json[\"score\"]}, Comments: #{json[\"num_comments\"]}\"\nend\n\n\nbegin\n  puts \"Reddit\\n---\"\n  SUBREDDITS.map { |subreddit| to_json(*subreddit) }\n            .each do |data|\n              puts \"\\n---\\n#{data[\"subreddit_name\"]} | color=black\\n---\"\n              data[\"data\"][\"children\"].each { |child| prettify(child[\"data\"]) }\n            end\nrescue =\u003e e\n  puts e\n  puts \"Content is currently unavailable. Please try resetting. | color=red\"\nend\n"
				}
			],
			"path": "Web/Reddit/subreddit_links.rb",
			"filename": "subreddit_links.rb",
			"dir": "Web/Reddit",
			"docsPlugin": "Web/Reddit/subreddit_links.rb.html",
			"docsCategory": "Web/Reddit.html",
			"pathSegments": [
				"Web",
				"Reddit"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/Reddit",
					"text": "Reddit",
					"isLast": true
				}
			],
			"title": "Subreddit Links",
			"version": "1.0",
			"author": "Joe Canero",
			"authors": [
				{
					"name": "Joe Canero",
					"githubUsername": "caneroj1",
					"imageURL": "https://avatars.githubusercontent.com/u/3110602?v=4",
					"bio": "Software Engineer",
					"primary": true
				}
			],
			"desc": "",
			"imageURL": "https://i.imgur.com/3ZDUdNH.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.066361Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/toggl.1m.js",
					"filename": "toggl.1m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eToggl status\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eStefan du Fresne\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003eSCdF\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eShows hours completed today, hours completed this week.\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttps://i.imgur.com/1dlNZLW.png\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n\n/*jshint esversion: 6 */\n\nconst fs = require('fs');\n\n// TODO: Add month-long work leveling\n//   You're supposed to work N hours a week, but also N*M hours a month\n//   Take longer / shorter weeks into account all the way to the month\n\n/* jshint -W100 */\nconst AVATARS = {\n  '👶': ['👶', '👶🏻', '👶🏼', '👶🏽', '👶🏾', '👶🏿'],\n  '👦': ['👦', '👦🏻', '👦🏼', '👦🏽', '👦🏾', '👦🏿'],\n  '👧': ['👧', '👧🏻', '👧🏼', '👧🏽', '👧🏾', '👧🏿'],\n  '👨': ['👨', '👨🏻', '👨🏼', '👨🏽', '👨🏾', '👨🏿'],\n  '👩': ['👩', '👩🏻', '👩🏼', '👩🏽', '👩🏾', '👩🏿'],\n  '👱‍♀️': ['👱‍♀️', '👱🏻‍♀️', '👱🏼‍♀️', '👱🏽‍♀️', '👱🏾‍♀️', '👱🏿‍♀️'],\n  '👱': ['👱', '👱🏻', '👱🏼', '👱🏽', '👱🏾', '👱🏿'],\n  '👴': ['👴', '👴🏻', '👴🏼', '👴🏽', '👴🏾', '👴🏿'],\n  '👵': ['👵', '👵🏻', '👵🏼', '👵🏽', '👵🏾', '👵🏿'],\n  '👲': ['👲', '👲🏻', '👲🏼', '👲🏽', '👲🏾', '👲🏿'],\n  '👳‍♀️': ['👳‍♀️', '👳🏻‍♀️', '👳🏼‍♀️', '👳🏽‍♀️', '👳🏾‍♀️', '👳🏿‍♀️'],\n  '👳': ['👳', '👳🏻', '👳🏼', '👳🏽', '👳🏾', '👳🏿'],\n  '👮‍♀️': ['👮‍♀️', '👮🏻‍♀️', '👮🏼‍♀️', '👮🏽‍♀️', '👮🏾‍♀️', '👮🏿‍♀️'],\n  '👮': ['👮', '👮🏻', '👮🏼', '👮🏽', '👮🏾', '👮🏿'],\n  '👷‍♀️': ['👷‍♀️', '👷🏻‍♀️', '👷🏼‍♀️', '👷🏽‍♀️', '👷🏾‍♀️', '👷🏿‍♀️'],\n  '👷': ['👷', '👷🏻', '👷🏼', '👷🏽', '👷🏾', '👷🏿'],\n  '💂‍♀️': ['💂‍♀️', '💂🏻‍♀️', '💂🏼‍♀️', '💂🏽‍♀️', '💂🏾‍♀️', '💂🏿‍♀️'],\n  '💂': ['💂', '💂🏻', '💂🏼', '💂🏽', '💂🏾', '💂🏿'],\n  '🕵️‍♀️': ['🕵️‍♀️', '🕵🏻‍♀️', '🕵🏼‍♀️', '🕵🏽‍♀️', '🕵🏾‍♀️', '🕵🏿‍♀️'],\n  '🕵️': ['🕵️', '🕵🏻', '🕵🏼', '🕵🏽', '🕵🏾', '🕵🏿'],\n  '👩‍⚕️': ['👩‍⚕️', '👩🏻‍⚕️', '👩🏼‍⚕️', '👩🏽‍⚕️', '👩🏾‍⚕️', '👩🏿‍⚕️'],\n  '👨‍⚕️': ['👨‍⚕️', '👨🏻‍⚕️', '👨🏼‍⚕️', '👨🏽‍⚕️', '👨🏾‍⚕️', '👨🏿‍⚕️'],\n  '👩‍🌾': ['👩‍🌾', '👩🏻‍🌾', '👩🏼‍🌾', '👩🏽‍🌾', '👩🏾‍🌾', '👩🏿‍🌾'],\n  '👨‍🌾': ['👨‍🌾', '👨🏻‍🌾', '👨🏼‍🌾', '👨🏽‍🌾', '👨🏾‍🌾', '👨🏿‍🌾'],\n  '👩‍🍳': ['👩‍🍳', '👩🏻‍🍳', '👩🏼‍🍳', '👩🏽‍🍳', '👩🏾‍🍳', '👩🏿‍🍳'],\n  '👨‍🍳': ['👨‍🍳', '👨🏻‍🍳', '👨🏼‍🍳', '👨🏽‍🍳', '👨🏾‍🍳', '👨🏿‍🍳'],\n  '👩‍🎓': ['👩‍🎓', '👩🏻‍🎓', '👩🏼‍🎓', '👩🏽‍🎓', '👩🏾‍🎓', '👩🏿‍🎓'],\n  '👨‍🎓': ['👨‍🎓', '👨🏻‍🎓', '👨🏼‍🎓', '👨🏽‍🎓', '👨🏾‍🎓', '👨🏿‍🎓'],\n  '👩‍🎤': ['👩‍🎤', '👩🏻‍🎤', '👩🏼‍🎤', '👩🏽‍🎤', '👩🏾‍🎤', '👩🏿‍🎤'],\n  '👨‍🎤': ['👨‍🎤', '👨🏻‍🎤', '👨🏼‍🎤', '👨🏽‍🎤', '👨🏾‍🎤', '👨🏿‍🎤'],\n  '👩‍🏫': ['👩‍🏫', '👩🏻‍🏫', '👩🏼‍🏫', '👩🏽‍🏫', '👩🏾‍🏫', '👩🏿‍🏫'],\n  '👨‍🏫': ['👨‍🏫', '👨🏻‍🏫', '👨🏼‍🏫', '👨🏽‍🏫', '👨🏾‍🏫', '👨🏿‍🏫'],\n  '👩‍🏭': ['👩‍🏭', '👩🏻‍🏭', '👩🏼‍🏭', '👩🏽‍🏭', '👩🏾‍🏭', '👩🏿‍🏭'],\n  '👨‍🏭': ['👨‍🏭', '👨🏻‍🏭', '👨🏼‍🏭', '👨🏽‍🏭', '👨🏾‍🏭', '👨🏿‍🏭'],\n  '👩‍💻': ['👩‍💻', '👩🏻‍💻', '👩🏼‍💻', '👩🏽‍💻', '👩🏾‍💻', '👩🏿‍💻'],\n  '👨‍💻': ['👨‍💻', '👨🏻‍💻', '👨🏼‍💻', '👨🏽‍💻', '👨🏾‍💻', '👨🏿‍💻'],\n  '👩‍💼': ['👩‍💼', '👩🏻‍💼', '👩🏼‍💼', '👩🏽‍💼', '👩🏾‍💼', '👩🏿‍💼'],\n  '👨‍💼': ['👨‍💼', '👨🏻‍💼', '👨🏼‍💼', '👨🏽‍💼', '👨🏾‍💼', '👨🏿‍💼'],\n  '👩‍🔧': ['👩‍🔧', '👩🏻‍🔧', '👩🏼‍🔧', '👩🏽‍🔧', '👩🏾‍🔧', '👩🏿‍🔧'],\n  '👨‍🔧': ['👨‍🔧', '👨🏻‍🔧', '👨🏼‍🔧', '👨🏽‍🔧', '👨🏾‍🔧', '👨🏿‍🔧'],\n  '👩‍🔬': ['👩‍🔬', '👩🏻‍🔬', '👩🏼‍🔬', '👩🏽‍🔬', '👩🏾‍🔬', '👩🏿‍🔬'],\n  '👨‍🔬': ['👨‍🔬', '👨🏻‍🔬', '👨🏼‍🔬', '👨🏽‍🔬', '👨🏾‍🔬', '👨🏿‍🔬'],\n  '👩‍🎨': ['👩‍🎨', '👩🏻‍🎨', '👩🏼‍🎨', '👩🏽‍🎨', '👩🏾‍🎨', '👩🏿‍🎨'],\n  '👨‍🎨': ['👨‍🎨', '👨🏻‍🎨', '👨🏼‍🎨', '👨🏽‍🎨', '👨🏾‍🎨', '👨🏿‍🎨'],\n  '👩‍🚒': ['👩‍🚒', '👩🏻‍🚒', '👩🏼‍🚒', '👩🏽‍🚒', '👩🏾‍🚒', '👩🏿‍🚒'],\n  '👨‍🚒': ['👨‍🚒', '👨🏻‍🚒', '👨🏼‍🚒', '👨🏽‍🚒', '👨🏾‍🚒', '👨🏿‍🚒'],\n  '👩‍✈️': ['👩‍✈️', '👩🏻‍✈️', '👩🏼‍✈️', '👩🏽‍✈️', '👩🏾‍✈️', '👩🏿‍✈️'],\n  '👨‍✈️': ['👨‍✈️', '👨🏻‍✈️', '👨🏼‍✈️', '👨🏽‍✈️', '👨🏾‍✈️', '👨🏿‍✈️'],\n  '👩‍🚀': ['👩‍🚀', '👩🏻‍🚀', '👩🏼‍🚀', '👩🏽‍🚀', '👩🏾‍🚀', '👩🏿‍🚀'],\n  '👨‍🚀': ['👨‍🚀', '👨🏻‍🚀', '👨🏼‍🚀', '👨🏽‍🚀', '👨🏾‍🚀', '👨🏿‍🚀'],\n  '👩‍⚖️': ['👩‍⚖️', '👩🏻‍⚖️', '👩🏼‍⚖️', '👩🏽‍⚖️', '👩🏾‍⚖️', '👩🏿‍⚖️'],\n  '👨‍⚖️': ['👨‍⚖️', '👨🏻‍⚖️', '👨🏼‍⚖️', '👨🏽‍⚖️', '👨🏾‍⚖️', '👨🏿‍⚖️'],\n  '🤶': ['🤶', '🤶🏻', '🤶🏼', '🤶🏽', '🤶🏾', '🤶🏿'],\n  '🎅': ['🎅', '🎅🏻', '🎅🏼', '🎅🏽', '🎅🏾', '🎅🏿'],\n  '👸': ['👸', '👸🏻', '👸🏼', '👸🏽', '👸🏾', '👸🏿'],\n  '🤴': ['🤴', '🤴🏻', '🤴🏼', '🤴🏽', '🤴🏾', '🤴🏿'],\n  '👰': ['👰', '👰🏻', '👰🏼', '👰🏽', '👰🏾', '👰🏿'],\n  '🤵 ': ['🤵', '🤵🏻', '🤵🏼', '🤵🏽', '🤵🏾', '🤵🏿']\n};\n/* jshint +W100 */\nconst randomItem = array =\u003e array[Math.floor(Math.random() * array.length)];\nconst randomAvatar = () =\u003e randomItem([].concat(...Object.values(AVATARS)));\n\nconst CONFIG_FILE = `${process.env.HOME}/.toggl.json`;\n\nlet configDirty = false;\nconst config = (() =\u003e {\n  if (fs.existsSync(CONFIG_FILE)) {\n    try {\n      return JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8'));\n    } catch (_) {}\n  }\n\n  // Defaults\n  configDirty = true;\n  return {\n    avatar: randomAvatar(),\n    hoursInDay: 8,\n    daysInWeek: 5,\n    style: 'hours'\n  };\n})();\n\nconst relativeThreshold = 15 * 60; // TODO: configurable?\n\nconst endOutput = () =\u003e {\n  if (configDirty) {\n    fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2));\n  }\n\n  console.log('---');\n  console.log('Refresh | refresh=true');\n  process.exit();\n};\n\nconst badApiToken = wrong =\u003e {\n  console.log(`🚨 ${wrong ? 'provided api token is wrong' : 'token needed'} 🚨`);\n  console.log('---');\n  console.log('🖱 Click here to find your token| href=https://toggl.com/app/profile');\n  console.log('It will be at the bottom of the page|size=12');\n  console.log(`Once you've found your token, copy it (CMD+C)|size=12`);\n  console.log(`🤞 I've copied it 🤞|bash=${process.argv[1]} param1=api_token refresh=true terminal=false `);\n  endOutput();\n};\n\nconst NOW = new Date();\n\nconst unix = date =\u003e Math.round(date.getTime() / 1000);\nconst outputUnix = (unixTime, verbose) =\u003e {\n  const negative = (() =\u003e {if (unixTime \u003c 0) {\n    // TODO: turn red if it's negative\n    unixTime *= -1;\n    return true;\n  }})();\n\n  const fmt = x =\u003e x.toLocaleString(undefined, {minimumIntegerDigits: 2});\n  const hours = Math.floor(unixTime / 60 / 60);\n  const minutes = Math.floor(unixTime / 60) - (hours * 60);\n\n  if (verbose) {\n    return `${negative ? '-' : ''}${hours} hours ${minutes} minutes`;\n  } else {\n    return `${negative ? '-' : ''}${hours}:${fmt(minutes)}`;\n  }\n};\n\n// TODO: alter this so you can pass the considered start day (ie Sunday or Monday)\n//       Might as well be the offset integer, 0 or 1, but in theory could be 0-6\nconst startOfWeek = () =\u003e {\n  const thisWeek = new Date(NOW.getFullYear(), NOW.getMonth(), NOW.getDate() - NOW.getDay());\n  return unix(thisWeek);\n};\n\nconst avatar = () =\u003e config.avatar === 'avatar' ?  randomAvatar() : config.avatar;\n\nconst outputHeader = (timeDay, timeWeek) =\u003e {\n  let daySection; // Output string\n  let dayAmount; // single amount, if possible\n  if (typeof timeDay === 'object') {\n    const max = Math.max(...timeDay);\n    const min = Math.min(...timeDay);\n    if ((max - min) \u003e relativeThreshold) {\n      daySection = `${outputUnix(min)} — ${outputUnix(max)}`;\n    } else {\n      dayAmount = min + Math.round((max - min) / 2);\n      daySection = `${outputUnix(dayAmount)}`;\n    }\n  } else {\n    dayAmount = timeDay;\n    daySection = `${outputUnix(dayAmount)}`;\n  }\n\n  if (dayAmount \u0026\u0026 Math.abs(timeWeek - dayAmount) \u003e relativeThreshold) {\n    console.log(`${avatar()} ${daySection} (${outputUnix(timeWeek)})`);\n  } else {\n    console.log(`${avatar()} ${daySection}`);\n  }\n};\n\nconst displayTimes = me =\u003e {\n  // Calculate times\n  const unixToday = unix(new Date(NOW.getFullYear(), NOW.getMonth(), NOW.getDate()));\n  const completeDay = config.hoursInDay * 60 * 60;\n  const completeWeek = completeDay * config.daysInWeek;\n\n  let full = 0,\n      today = 0;\n  const days = [];\n\n  let currentlyWorking,\n      currentWid,\n      currentPid;\n\n  const timeByWidByPid = {};\n\n  (me.data.time_entries || []).forEach(({start, duration:entryDuration, wid, pid}) =\u003e {\n    // TODO: deal with partial entries that cross over midnight\n    //       (both daily and weekly)\n    // TODO: respect configured start of week in me.beginning_of_week\n    //\n    start = new Date(start);\n\n    let duration;\n    if (entryDuration \u003e 0) {\n      duration = entryDuration;\n    } else {\n      duration = unix(NOW) - unix(start);\n      currentlyWorking = true;\n      currentWid = wid;\n      currentPid = pid;\n    }\n\n    if (!timeByWidByPid[wid]) {\n      timeByWidByPid[wid] = {};\n    }\n    if (!timeByWidByPid[wid][pid]) {\n      timeByWidByPid[wid][pid] = 0;\n    }\n    timeByWidByPid[wid][pid] += duration;\n\n    if (unix(start) \u003e startOfWeek()) {\n      full += duration;\n      let day = start.getDay();\n      const end = new Date(start.getTime() + duration * 1000);\n      if (day === end.getDay()) {\n        days[day] = (days[day] || 0) + duration;\n      } else {\n        // TODO: We want to split a duration over midnights and distribute them to the correct days\n        days[day] = (days[day] || 0) + duration;\n      }\n    }\n\n    if (unix(start) \u003e unixToday) {\n      today += duration;\n    }\n  });\n\n  // Output times\n  if (!currentlyWorking) {\n    process.exit(0);\n  }\n\n  switch(config.style) {\n    case 'hours': {\n      outputHeader(today, full);\n      break;\n    }\n    case 'left': {\n      outputHeader(completeDay - today, completeWeek - full);\n      break;\n    }\n    case 'percentage': {\n      const completeDay = config.hoursInDay * 60 * 60;\n      const completeWeek = completeDay * config.daysInWeek;\n      const dayPercent = Math.round((today / completeDay) * 100);\n      const weekPercent = Math.round((full / completeWeek) * 100);\n      console.log(`${avatar()} ${dayPercent}% (${weekPercent}%)`);\n      break;\n    }\n    case 'relative': {\n      const startOfWeekday = 1; // TODO: support using configured day from /me\n      const todayWeekday = NOW.getDay();\n      const daysLeft = config.daysInWeek - (todayWeekday - startOfWeekday);\n\n      const timeInWeek = config.daysInWeek * config.hoursInDay * 60 * 60;\n\n      const allButTodaysTime = full - today;\n      const allButTodaysTimeLeft = timeInWeek - allButTodaysTime;\n      const timePerDayLeft = Math.round(allButTodaysTimeLeft / daysLeft);\n      const amortisedTimeLeft = timePerDayLeft - today;\n\n      const onTrackTime = (daysLeft - 1) * config.hoursInDay * 60 * 60;\n      const timeOffTrack = allButTodaysTimeLeft - onTrackTime - today;\n      const fullDay = Math.min(completeDay - today, timeInWeek - full);\n\n      outputHeader([amortisedTimeLeft, timeOffTrack, fullDay], timeInWeek - full);\n      break;\n    }\n  }\n\n  // TODO: add end day time, either as its own option, or as a custom estimate\n  //       in the menu.\n  //       I think having it as an option might be a bit more chill, you don't\n  //       see it counting down, just an idea of when knocking off time is\n\n  // Have to filter first before showing length because Monday is idx 1 / length 2\n  if (days.filter(d =\u003e !!d).length \u003e 1) {\n    console.log('---');\n    const dayNames = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];\n    days.forEach((val, day) =\u003e {\n      console.log(`${dayNames[day]}:\\t${outputUnix(val, true)}`);\n    });\n    console.log(`Σ:\\t${outputUnix(full, true)}`);\n    console.log(`T-:\\t${outputUnix(completeWeek - full, true)}`);\n  }\n\n  // TODO: figure out how we want to pull in wids and pid labels, and if it's worth the extra api calls\n  // console.log('---');\n  // console.log(`${currentWid} :: ${currentPid}`);\n  // console.log(outputUnix(timeByWidByPid[currentWid][currentPid], true));\n\n  // TODO: display project summary for the week\n  // TODO: allow muting of a project as it relates to time\n  //       (if you're on a muted project just show emoji but not time)\n  //       (it would still show in this project summary)\n};\n\nconst avatarChoice = () =\u003e {\n  console.log(`Change ${config.avatar}`);\n  console.log(`--((surprise me))|bash=${process.argv[1]} param1=avatar param2=avatar refresh=true terminal=false size=10`);\n  Object.keys(AVATARS).forEach(k =\u003e {\n    console.log(`--${k}|size=32`);\n    AVATARS[k].forEach(v =\u003e {\n      console.log(`----${v}|bash=${process.argv[1]} param1=avatar param2=${v} refresh=true terminal=false size=32`);\n    });\n  });\n};\n\nconst styleChoice = () =\u003e {\n  const current = style =\u003e style === config.style ? '✓ ' : '';\n  const link = style =\u003e `|bash=${process.argv[1]} param1=style param2=${style} refresh=true terminal=false`;\n  console.log('Change reporting style');\n  console.log(`--${current('hours')}Hours complete${link('hours')}`);\n  console.log(`--${current('left')}Hours left${link('left')}`);\n  console.log(`--${current('percentage')}Percentage complete${link('percentage')}`);\n  console.log(`--${current('relative')}Relative weekly goals${link('relative')}`);\n};\n\nconst input = () =\u003e {\n  switch (process.argv[2]) {\n    case 'avatar': {\n      config.avatar = process.argv[3];\n      configDirty = true;\n      break;\n    }\n    case 'api_token': {\n      config.apiToken = require('child_process').execSync('pbpaste').toString();\n      configDirty = true;\n      break;\n    }\n    case 'style': {\n      config.style = process.argv[3];\n      configDirty = true;\n      break;\n    }\n  }\n};\n\nconst output = () =\u003e {\n  require('https').get({\n    hostname: 'toggl.com',\n    // NB: since is \"edited since\", and so isn't really reliable\n    path: `/api/v8/me?with_related_data=true\u0026since=${startOfWeek()}`,\n    auth: `${config.apiToken}:api_token`\n  }, res =\u003e {\n    if (res.statusCode === 403) {\n      badApiToken(true);\n      endOutput();\n    }\n\n    let body = '';\n    res.on('data', data =\u003e body += data);\n    res.on('end', () =\u003e {\n      try {\n        displayTimes(JSON.parse(body));\n        console.log('---');\n        avatarChoice();\n        styleChoice();\n        endOutput();\n      } catch (error) {\n        console.log(':-(');\n        console.log('---');\n        console.log(error);\n        console.log('---');\n        console.log(body);\n        endOutput();\n      }\n    });\n    res.on('error', err =\u003e {\n      console.log(':-(');\n      console.log('---');\n      console.log(err);\n      endOutput();\n    });\n  });\n};\n\ninput();\nif (!config.apiToken) {\n  badApiToken();\n}\noutput();\n"
				}
			],
			"path": "Web/toggl.1m.js",
			"filename": "toggl.1m.js",
			"dir": "Web",
			"docsPlugin": "Web/toggl.1m.js.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Toggl status",
			"version": "v1.1",
			"author": "Stefan du Fresne",
			"authors": [
				{
					"name": "Stefan du Fresne",
					"githubUsername": "SCdF",
					"imageURL": "https://avatars.githubusercontent.com/u/583851?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows hours completed today, hours completed this week.",
			"imageURL": "https://i.imgur.com/1dlNZLW.png",
			"dependencies": [
				"node"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:10.40311Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/Twitch/livestreamer-now-playing.5m.js",
					"filename": "livestreamer-now-playing.5m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eTwitch Following\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev2.3\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eStefan du Fresne\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003eSCdF\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eShows which channels you follow are live, what they're playing, for how long etc. Lets you watch them with streamlink and open the chat in your browser. Based on the play-with-livestreamer bitbar plugin. Requires a Twitch account.\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttps://i.imgur.com/dhscE7r.png\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003enode, streamlink\u003c/bitbar.dependencies\u003e\n\n// TOOD: map response into a datastructure we can both use and store\n//       this helps with DRY, since it removes indirection in the native format\n// TODO: store options in a file so people don't have to edit this.\n//       This will require that we allow editing via the UI. Worst case a link\n//       open it in an editor, best case toggling favourites per stream etc\n// TODO: DRY error handling better\n//       DRY usages of :-( everywhere\n//       Work out how to get HTTP code out of request, error cleaner on that\n// TODO: Consider: show the last 24hrs of video from all your favourites\n\n'use strict';\n\n/*jshint esversion: 6 */\n\nconst fs = require('fs');\n\nconst STREAMLINK_PATH = '/usr/local/bin/streamlink';\nconst STREAMLINK_CONFIG_PATH = process.env.HOME + '/.config/streamlink/config';\nconst AUTH_PROP_KEY = 'twitch-oauth-token';\nconst ACCESS_TOKEN = readAccessToken();\n\nconst OPTIONS = {\n  // The followers you care about. This affects the bitbar tray count,\n  // notifications and other stuff.\n  //\n  // Leave as false to count everyone\n  // An empty list means no one\n  // Otherwise list twitch stream usernames, as strings, or regex, or a function\n  // predicate that evaluates over the stream object\n  // e.g.\n  // FAVOURITES: [\n  //   'manvsgame',\n  //   /evo[0-9]/,\n  //   stream =\u003e stream.channel.name === 'itmejp' \u0026\u0026 stream.channel.status.includes('Dropped Frames')\n  // ],\n  // Would show MANvsGAME as a favourite, along with any of the evo rooms, along\n  // with itmeJP if he's streaming Dropped Frames\n  FAVOURITES: false,\n  // True if you want native OSX notifications when a favourite goes live\n  // (if favourites are disabled notifications will work on everyone)\n  NOTIFICATIONS: true,\n  // True if we want to count the game changing as a new notification\n  NOTIFICATIONS_ON_GAME_CHANGE: true,\n  // True if we want to count a VOD-cast as favourite-worthy\n  // TODO: switching from VOD to live should generate notification\n  //       This will be much easier once we do the TODO at the top of the page\n  //       to map the datastructure, because then notification code can easily\n  //       understand if it's a VOD or not\n  FAVOURITES_WITH_VOD: false\n};\n\nconst TWITCH_ICON_36_RETINA =\n  \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTw\" +\n  \"AAA5pGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlk\" +\n  \"PSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9i\" +\n  \"ZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxMTEgNzkuMTU4MzI1\" +\n  \"LCAyMDE1LzA5LzEwLTAxOjEwOjIwICAgICAgICAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9\" +\n  \"Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8\" +\n  \"cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0\" +\n  \"dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnhtcE1NPSJo\" +\n  \"dHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgogICAgICAgICAgICB4bWxuczpzdFJl\" +\n  \"Zj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIKICAg\" +\n  \"ICAgICAgICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlw\" +\n  \"ZS9SZXNvdXJjZUV2ZW50IyIKICAgICAgICAgICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9y\" +\n  \"Zy9kYy9lbGVtZW50cy8xLjEvIgogICAgICAgICAgICB4bWxuczpwaG90b3Nob3A9Imh0dHA6\" +\n  \"Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9\" +\n  \"Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlm\" +\n  \"PSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6Q3JlYXRv\" +\n  \"clRvb2w+QWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9y\" +\n  \"VG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTYtMDQtMDlUMTY6MDY6MjIrMDE6\" +\n  \"MDA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAxNi0wNC0w\" +\n  \"OVQxNjoxNjozOSswMTowMDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6TWV0YWRh\" +\n  \"dGFEYXRlPjIwMTYtMDQtMDlUMTY6MTY6MzkrMDE6MDA8L3htcDpNZXRhZGF0YURhdGU+CiAg\" +\n  \"ICAgICAgIDx4bXBNTTpJbnN0YW5jZUlEPnhtcC5paWQ6NGU2ZThiY2EtZTQ3MC00M2RjLTg2\" +\n  \"YzEtNWIyZmVhNGM2YjNkPC94bXBNTTpJbnN0YW5jZUlEPgogICAgICAgICA8eG1wTU06RG9j\" +\n  \"dW1lbnRJRD54bXAuZGlkOjYzRUJDOTVDQTBDQzExRTNCRjU1OEFFRTJEQkQzMDM3PC94bXBN\" +\n  \"TTpEb2N1bWVudElEPgogICAgICAgICA8eG1wTU06RGVyaXZlZEZyb20gcmRmOnBhcnNlVHlw\" +\n  \"ZT0iUmVzb3VyY2UiPgogICAgICAgICAgICA8c3RSZWY6aW5zdGFuY2VJRD54bXAuaWlkOjYz\" +\n  \"RUJDOTU5QTBDQzExRTNCRjU1OEFFRTJEQkQzMDM3PC9zdFJlZjppbnN0YW5jZUlEPgogICAg\" +\n  \"ICAgICAgICA8c3RSZWY6ZG9jdW1lbnRJRD54bXAuZGlkOjYzRUJDOTVBQTBDQzExRTNCRjU1\" +\n  \"OEFFRTJEQkQzMDM3PC9zdFJlZjpkb2N1bWVudElEPgogICAgICAgICA8L3htcE1NOkRlcml2\" +\n  \"ZWRGcm9tPgogICAgICAgICA8eG1wTU06T3JpZ2luYWxEb2N1bWVudElEPnhtcC5kaWQ6NjNF\" +\n  \"QkM5NUNBMENDMTFFM0JGNTU4QUVFMkRCRDMwMzc8L3htcE1NOk9yaWdpbmFsRG9jdW1lbnRJ\" +\n  \"RD4KICAgICAgICAgPHhtcE1NOkhpc3Rvcnk+CiAgICAgICAgICAgIDxyZGY6U2VxPgogICAg\" +\n  \"ICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAg\" +\n  \"ICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAg\" +\n  \"ICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOjRlNmU4YmNhLWU0NzAtNDNkYy04\" +\n  \"NmMxLTViMmZlYTRjNmIzZDwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAg\" +\n  \"PHN0RXZ0OndoZW4+MjAxNi0wNC0wOVQxNjoxNjozOSswMTowMDwvc3RFdnQ6d2hlbj4KICAg\" +\n  \"ICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgUGhvdG9zaG9wIEND\" +\n  \"IDIwMTUgKE1hY2ludG9zaCk8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAg\" +\n  \"ICAgIDxzdEV2dDpjaGFuZ2VkPi88L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwv\" +\n  \"cmRmOmxpPgogICAgICAgICAgICA8L3JkZjpTZXE+CiAgICAgICAgIDwveG1wTU06SGlzdG9y\" +\n  \"eT4KICAgICAgICAgPGRjOmZvcm1hdD5pbWFnZS9wbmc8L2RjOmZvcm1hdD4KICAgICAgICAg\" +\n  \"PHBob3Rvc2hvcDpDb2xvck1vZGU+MzwvcGhvdG9zaG9wOkNvbG9yTW9kZT4KICAgICAgICAg\" +\n  \"PHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHRpZmY6\" +\n  \"WFJlc29sdXRpb24+MTQ0MDAwMC8xMDAwMDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAg\" +\n  \"PHRpZmY6WVJlc29sdXRpb24+MTQ0MDAwMC8xMDAwMDwvdGlmZjpZUmVzb2x1dGlvbj4KICAg\" +\n  \"ICAgICAgPHRpZmY6UmVzb2x1dGlvblVuaXQ+MjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICAg\" +\n  \"ICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAg\" +\n  \"ICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MzI8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAg\" +\n  \"ICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzI8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgog\" +\n  \"ICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAog\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAog\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg\" +\n  \"ICAKPD94cGFja2V0IGVuZD0idyI/Ps99cBwAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUw\" +\n  \"AADqYAAAOpgAABdvkl/FRgAAAb1JREFUeNrsl00rRUEYx3/X68pLJFFSCjckJBvZ+AKUhdiw\" +\n  \"cL+AUkpslYW8LUSunWJBLCwoUmykCMVHEAspXQvuPTYPjTGne07mnrPxr2meM890/v95ZuaZ\" +\n  \"mYjjOISJnC8j1r3xZY4DdRnmPV09Goz/EKBgOoCBlwNxgCzNMRRQ5B9/TYFgVLEPgGWLpNnA\" +\n  \"GlAIOCYBjUCz8n0J7Fge+ZII+IY6BWNa52LL5LkSBdwEFIWxDVUBb2EL8IN+4M5ljSyIb9JX\" +\n  \"IvKJSiAKFBh8TeKry2QEElI/GXzPUr9kUkDoa+BfQInUtQZftbJQM7YLDoF84MHgmwEagHOt\" +\n  \"3bEp4EKKCVsu7R+KiEgYa2BYmbqyoAXEgHU5jFLAnJcpcCySr4j9DnQAV14ikLBAPqKQo5On\" +\n  \"i8AA0G5onwBOxY4Ci0Ceyw2oU+yk/OvKzy6okKKjRgREgWu5aKRDC3BrKxGdyCl444E8CbS5\" +\n  \"kesCqjyQp4AeuS96ySGt0tdTJpyS8JowBHRJApnXfHtSdJwB935S8bEUE+oVASp2gd4gDqNS\" +\n  \"Q9v2X8n9CNCvXptAn9XHaRrsA69Khpy1laMjYT/PPwcA7IpMXaKcVm4AAAAASUVORK5CYII=\";\n\nfunction readAccessToken() {\n  try {\n    const data = fs.readFileSync(STREAMLINK_CONFIG_PATH, 'utf8');\n    if (data) {\n      const line = data.split('\\n').find(line =\u003e line.indexOf(AUTH_PROP_KEY) \u003e= 0);\n\n      return line.substring(line.indexOf('=') + 1);\n    }\n  } catch (e) {}\n}\n\nfunction outputForStream(stream) {\n  const channel = stream.channel;\n\n  let timeLive = Math.floor((Date.now() - Date.parse(stream.created_at)) / 1000 / 60);\n  if (timeLive \u003e 60) {\n    timeLive = Math.floor(timeLive / 60) + 'h ' + (timeLive % 60) + 'm';\n  } else {\n    timeLive = timeLive + 'm';\n  }\n\n\n  const name = `${!live(stream) ? '[' : ''}${channel.display_name}${!live(stream) ? ']' : ''}`;\n\n  return  [\n      `${name} | href=https://twitch.tv/${channel.name}`,\n      `--📺 ${live(stream) ? 'livestream' : 'VOD'} | terminal=false bash=${STREAMLINK_PATH} param1=${channel.url.replace('http://', '')}`,\n      `--👥 chat | href=https://twitch.tv/${channel.name}/chat?popout=`,\n      `--👤 chit.chat | href=https://chitchat.ma.pe/${channel.name}`,\n      `-----`,\n      isFavourite(stream) ? `--${stream.channel.game}|size=10 color=#888888` : undefined,\n      `--${channel.status.replace(/\\n/g, '')} | color=grey size=10 length=30`,\n      `--👤 ${stream.viewers} live for ${timeLive}| size=10`,\n      ''].join('\\n');\n}\n\nfunction endOutput() {\n  console.log('---');\n  console.log('Refresh | refresh=true');\n}\n\nconst streamName = stream =\u003e stream.channel.name;\nconst live = stream =\u003e stream.stream_type === 'live';\nconst isFavourite = stream =\u003e\n  OPTIONS.FAVOURITES \u0026\u0026 OPTIONS.FAVOURITES.find(f =\u003e\n    typeof f === 'function' ? f(stream) :\n    f instanceof RegExp ? streamName(stream).match(f) :\n    streamName(stream) === f) \u0026\u0026\n  (OPTIONS.FAVOURITES_WITH_VOD || live(stream));\n\nfunction notifications(streams) {\n  const TEMP_FILE = '/tmp/livestreamer-now-playing.json';\n  const statusFile = () =\u003e {\n    try {\n      return JSON.parse(fs.readFileSync(TEMP_FILE, 'utf8'));\n    } catch (error) {\n      return {\n        live: []\n      };\n    }\n  };\n\n  if (fs.existsSync(TEMP_FILE)) {\n    const status = statusFile();\n    const currentStreamers = streams.filter(isFavourite);\n    const changedStreams = currentStreamers.filter(stream =\u003e\n      // Just went live\n      !Object.keys(status.live).includes(streamName(stream)) ||\n      // Just changed games\n      (OPTIONS.NOTIFICATIONS_ON_GAME_CHANGE \u0026\u0026\n       status.live[streamName(stream)].game !== stream.channel.game));\n\n    if (changedStreams.length) {\n      const exec = require('child_process').exec;\n      const safe = text =\u003e text.replace(/('|\")/, \"\");\n\n      // TODO: better notification approach\n      //       osascript doesn't let you set the click action\n      //       https://stackoverflow.com/questions/24606225/redirected-to-applescript-editor-on-clicking-apple-notification\n      changedStreams.map(stream =\u003e\n        exec(`osascript -e 'display notification \"${safe(stream.channel.status)}\" with title \"${safe(streamName(stream))} is playing ${safe(stream.channel.game)}\" sound name \"Ping\"'`));\n    }\n  }\n\n  fs.writeFileSync(TEMP_FILE, JSON.stringify({\n    live: streams.reduce((live, s) =\u003e {\n      live[streamName(s)] = {\n        game: s.channel.game\n      };\n      return live;\n    }, {})\n  }));\n}\n\nfunction handleResponse(body) {\n  const streamByGame = {};\n\n  if (!(body \u0026\u0026 body.streams)) {\n    console.log(':-(');\n    console.log('---');\n    console.log(body);\n    return endOutput();\n  }\n\n  const onlineStreams = body.streams.filter(stream =\u003e !stream.is_playlist);\n\n  const importantStreams = [];\n\n  onlineStreams.forEach(stream =\u003e {\n    if (isFavourite(stream)) {\n      return importantStreams.push(stream);\n    }\n\n    if (!streamByGame[stream.channel.game]) {\n      streamByGame[stream.channel.game] = [];\n    }\n\n    streamByGame[stream.channel.game].push(stream);\n  });\n\n  const outputs = [];\n\n  if (importantStreams.length) {\n    outputs.push(importantStreams.map(outputForStream).join(''));\n  }\n\n  for (const game in streamByGame) {\n    outputs.push([game, '| size=10 color=#888888 length=30\\n', streamByGame[game].map(outputForStream).join('')].join(''));\n  }\n\n  if (onlineStreams.length === 0) {\n    console.log('|templateImage=\"'+ TWITCH_ICON_36_RETINA + '\"\\n');\n  } else {\n    const count =\n      (OPTIONS.FAVOURITES ? importantStreams.length : onlineStreams.length) || '';\n    console.log(count + '|image=\"'+ TWITCH_ICON_36_RETINA + '\"\\n');\n  }\n\n  console.log('---\\n' + outputs.join('\\n---\\n'));\n\n  endOutput();\n\n  if (OPTIONS.NOTIFICATIONS) {\n    notifications(onlineStreams);\n  }\n}\ntry {\n  if (ACCESS_TOKEN) {\n    const urlHost = 'api.twitch.tv';\n    const urlPath = '/kraken/streams/followed';\n\n    require('https').get({\n      hostname: urlHost,\n      path: urlPath,\n      headers: {\n        'Authorization': 'OAuth ' + ACCESS_TOKEN\n      }\n    }, res =\u003e {\n      let body = '';\n      res.on('data', data =\u003e body += data);\n      res.on('end', () =\u003e {\n        try {\n          handleResponse(JSON.parse(body));\n        } catch (error) {\n          console.log(':-(');\n          console.log('---');\n          console.log(error);\n          endOutput();\n        }\n      });\n      res.on('error', err =\u003e {\n        console.log(':-(');\n        console.log('---');\n        console.log(err);\n        endOutput();\n      });\n    });\n  } else {\n    console.log('💔');\n    console.log('---');\n    console.log('Click to authenticate streamlink | terminal=false bash=' + STREAMLINK_PATH + ' param1=--twitch-oauth-authenticate');\n    endOutput();\n  }\n} catch (error) {\n  console.log(':-(');\n  endOutput();\n}\n\n"
				}
			],
			"path": "Web/Twitch/livestreamer-now-playing.5m.js",
			"filename": "livestreamer-now-playing.5m.js",
			"dir": "Web/Twitch",
			"docsPlugin": "Web/Twitch/livestreamer-now-playing.5m.js.html",
			"docsCategory": "Web/Twitch.html",
			"pathSegments": [
				"Web",
				"Twitch"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/Twitch",
					"text": "Twitch",
					"isLast": true
				}
			],
			"title": "Twitch Following",
			"version": "v2.3",
			"author": "Stefan du Fresne",
			"authors": [
				{
					"name": "Stefan du Fresne",
					"githubUsername": "SCdF",
					"imageURL": "https://avatars.githubusercontent.com/u/583851?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows which channels you follow are live, what they're playing, for how long etc. Lets you watch them with streamlink and open the chat in your browser. Based on the play-with-livestreamer bitbar plugin. Requires a Twitch account.",
			"imageURL": "https://i.imgur.com/dhscE7r.png",
			"dependencies": [
				"node",
				"streamlink"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.115892Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/Twitch/play-with-livestreamer.5m.js",
					"filename": "play-with-livestreamer.5m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eTwitch Livestreamer\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eGoran Gajic\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003egorangajic\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003elist top 10 twitch streams for provided GAME, defaults to Dota 2\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js, livestreamer\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.image\u003ehttp://i.imgur.com/XEQQaxC.png\u003c/bitbar.image\u003e\n\n\nvar GAME = \"Dota 2\"; // game you want to fetch streams for\nvar LIMIT = 10; // streams limit\nvar url = 'https://api.twitch.tv/kraken/streams/?limit=' + LIMIT + '\u0026game=' + encodeURIComponent(GAME);\nvar icon = '👾';\nvar LIVESTREAMER_PATH = '/usr/local/bin/livestreamer';\n\nfunction handleResponse(body) {\n    var output = body.streams.map(function(stream){\n        var channel = stream.channel;\n        var url = channel.url.replace('http://', '');\n        var status = channel.status.replace(/\\|/g, '').substr(0,40) + '...';\n        return [status, '| size=9 \\n', channel.display_name, ' - ', stream.viewers, ' | size=12 terminal=false bash=' + LIVESTREAMER_PATH + ' param1=', url, ' param2=best\\n'].join('');\n    }).join('\\n---\\n');\n    console.log(icon + '\\n---\\n' + output);\n}\n\n\nvar https = require('https');\nhttps.get(url, function(res) {\n    var body = '';\n    res.on('data', function(data) {\n        body += data;\n    });\n    res.on('end', function() {\n        handleResponse(JSON.parse(body));\n    });\n});\n"
				}
			],
			"path": "Web/Twitch/play-with-livestreamer.5m.js",
			"filename": "play-with-livestreamer.5m.js",
			"dir": "Web/Twitch",
			"docsPlugin": "Web/Twitch/play-with-livestreamer.5m.js.html",
			"docsCategory": "Web/Twitch.html",
			"pathSegments": [
				"Web",
				"Twitch"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/Twitch",
					"text": "Twitch",
					"isLast": true
				}
			],
			"title": "Twitch Livestreamer",
			"version": "v1.0",
			"author": "Goran Gajic",
			"authors": [
				{
					"name": "Goran Gajic",
					"githubUsername": "gorangajic",
					"imageURL": "https://avatars.githubusercontent.com/u/249310?v=4",
					"bio": "Full Stack Developer \r\n- \r\nNode.js, React, React-Native",
					"primary": true
				}
			],
			"desc": "list top 10 twitch streams for provided GAME, defaults to Dota 2",
			"imageURL": "http://i.imgur.com/XEQQaxC.png",
			"dependencies": [
				"node.js",
				"livestreamer"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.144172Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/cornify.1m.sh",
					"filename": "cornify.1m.sh",
					"content": "#!/bin/sh\n#\n# \u003cbitbar.title\u003eUnicorn!\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eMartin Wilhelmi\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003emnin\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eUnicorn\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/UMphE3q.png\u003c/bitbar.image\u003e\n\nTIMESTAMP=$(date +\"%s\")\nIMAGE=$(curl -s \"http://www.cornify.com/getacorn.php?r=$TIMESTAMP\" | base64)\n\necho '🦄'\necho '---';\necho \"| href=http://www.cornify.com/unicornpictures terminal=false image=$IMAGE\"\n"
				}
			],
			"path": "Web/cornify.1m.sh",
			"filename": "cornify.1m.sh",
			"dir": "Web",
			"docsPlugin": "Web/cornify.1m.sh.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Unicorn!",
			"version": "v1.0",
			"author": "Martin Wilhelmi",
			"authors": [
				{
					"name": "Martin Wilhelmi",
					"githubUsername": "mnin",
					"imageURL": "https://avatars.githubusercontent.com/u/92227?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Unicorn",
			"imageURL": "http://i.imgur.com/UMphE3q.png",
			"dependencies": null,
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.556907Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/bitbar-uptime_robot.py",
					"filename": "bitbar-uptime_robot.py",
					"content": "#!/usr/local/bin/python3\n\n# \u003cbitbar.title\u003eUptimeRobot Monitor\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eFinn LeSueur\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003efinnito\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eGet UptimeRobot statistics for an account.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://uptimerobot.com/assets/img/logo_plain.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://gitlab.com/Finnito/bitbar-uptime_robot\u003c/bitbar.abouturl\u003e\n\nimport http.client\nimport json\n\n# Insert your Read-Only API Key.\nAPI_KEY = \"ur381063-288bfb3885e923a80db0f3c5\"\n\ndef main():\n    \"\"\" The main call for the script.\"\"\"\n    response = getMonitors()\n    numMonitors = len(response[\"monitors\"])\n    upMonitors = countUpMonitors(response)\n    outputArray = parseMonitors(response)\n    output = makeOutput(\n        numMonitors,\n        upMonitors,\n        outputArray\n    )\n    print(output)\n\n\ndef getMonitors():\n    \"\"\" Sets up and makes the request\n    to UptimeRobot to get all monitors\n    for an account.\n    \"\"\"\n    conn = http.client.HTTPSConnection(\"api.uptimerobot.com\")\n\n    payload = \"api_key={0}\u0026format=json\u0026logs=0\u0026response_times_average=30\u0026response_times=1\".format(API_KEY)\n\n    headers = {\n        'content-type': \"application/x-www-form-urlencoded\",\n        'cache-control': \"no-cache\"\n        }\n     \n    conn.request(\"POST\", \"/v2/getMonitors\", payload, headers)\n     \n    res = conn.getresponse()\n    data = res.read()\n    resp = data.decode(\"utf-8\")\n    resp = json.loads(resp)\n    return resp\n\n\ndef countUpMonitors(resp):\n    \"\"\" Iterates over the response\n    from getMonitors() to count the number\n    of monitors with response code 2.\n    \"\"\"\n    upMonitors = 0\n    for monitor in resp[\"monitors\"]:\n        if monitor[\"status\"] == 2:\n            upMonitors += 1\n    return upMonitors\n\n\ndef parseMonitors(resp):\n    \"\"\" Iterates over the repsonse\n    from getMonitors to create a string\n    with the name of the monitor and\n    its status using emoji.\n    \"\"\"\n    output = []\n    fmtString = \"{1}  {0} ({3}ms)|href={2}\"\n\n    for monitor in resp[\"monitors\"]:\n        status = monitor[\"status\"]\n        name = monitor[\"friendly_name\"]\n        url = monitor[\"url\"]\n        responseTime = int(float(monitor[\"average_response_time\"]))\n        if (status == 0):\n            output.append(fmtString.format(name, \"⏸\", url, responseTime))\n        elif (status == 1):\n            output.append(fmtString.format(name, \"❔\", url, responseTime))\n        elif (status == 2):\n            output.append(fmtString.format(name, \"🟢\", url, responseTime))\n        elif (status == 8):\n            output.append(fmtString.format(name, \"🟠\", url, responseTime))\n        elif (status == 9):\n            output.append(fmtString.format(name, \"🔴\", url, responseTime))\n        else:\n            output.append(fmtString.format(name, \"⁉️\", url, responseTime))\n    return output\n\n\ndef makeOutput(numMonitors, upMonitors, outputArray):\n    \"\"\" Does string formatting to\n    output the result in the format\n    required by BitBar.\n    \"\"\"\n    outputString = \"\"\"{0}/{1} 🆙\n---\n{2}\nIcon Definitions\n--⏸: Paused\n--❔: Not Yet Checked\n--🟢: Up\n--🟠: Seems Down\n--🔴: Down\n--⁉️: Unknown\n\"\"\".format(\n        upMonitors,\n        numMonitors,\n        \"\\n\".join(outputArray)\n    )\n    return outputString\n\n\nif __name__== \"__main__\":\n  main()\n"
				}
			],
			"path": "Web/bitbar-uptime_robot.py",
			"filename": "bitbar-uptime_robot.py",
			"dir": "Web",
			"docsPlugin": "Web/bitbar-uptime_robot.py.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "UptimeRobot Monitor",
			"version": "v0.1",
			"author": "Finn LeSueur",
			"authors": [
				{
					"name": "Finn LeSueur",
					"githubUsername": "finnito",
					"imageURL": "https://avatars.githubusercontent.com/u/6530078?v=4",
					"bio": "I am Finn, a science educator and hobbyist programmer from New Zealand.",
					"primary": true
				}
			],
			"desc": "Get UptimeRobot statistics for an account.",
			"imageURL": "https://uptimerobot.com/assets/img/logo_plain.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://gitlab.com/Finnito/bitbar-uptime_robot",
			"lastUpdated": "2021-03-08T15:22:09.45281Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/wanikani.15m.py",
					"filename": "wanikani.15m.py",
					"content": "#!/usr/local/bin/python3.6\n# -*- coding: utf-8 -*-\n\n# BitBar plugin that displays the number of items and some basic information from WaniKani!\n\n# \u003cbitbar.title\u003eWaniKani\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.1\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003ejakeoid\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003ejakeoid\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays the number of items and some basic information from WaniKani!\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/Tohefs7.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n\nimport requests\n\n# =================================\n\n# EDIT THESE SETTINGS\n\n# You can find your key here https://www.wanikani.com/settings/account\n\nkey = \"\"\n\n# =================================\n\n# CODE BEGINS HERE\n\n# =================================\n\nurl_study = f\"https://www.wanikani.com/api/user/{key}/study-queue\"\nurl_srs = f\"https://www.wanikani.com/api/user/{key}/srs-distribution\"\n\nimage = \"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/GMzLdsAADo2aVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzEzOCA3OS4xNTk4MjQsIDIwMTYvMDkvMTQtMDE6MDk6MDEgICAgICAgICI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgICAgICAgICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICAgICAgICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICAgICAgICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgICAgICAgICAgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgICAgICAgICAgeG1sbnM6ZXhpZj0iaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC8iPgogICAgICAgICA8eG1wOkNyZWF0b3JUb29sPkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE3IChNYWNpbnRvc2gpPC94bXA6Q3JlYXRvclRvb2w+CiAgICAgICAgIDx4bXA6Q3JlYXRlRGF0ZT4yMDE3LTA5LTIyVDAyOjEzOjM3KzEwOjAwPC94bXA6Q3JlYXRlRGF0ZT4KICAgICAgICAgPHhtcDpNZXRhZGF0YURhdGU+MjAxNy0wOS0yMlQwMjoxMzozNysxMDowMDwveG1wOk1ldGFkYXRhRGF0ZT4KICAgICAgICAgPHhtcDpNb2RpZnlEYXRlPjIwMTctMDktMjJUMDI6MTM6MzcrMTA6MDA8L3htcDpNb2RpZnlEYXRlPgogICAgICAgICA8eG1wTU06SW5zdGFuY2VJRD54bXAuaWlkOjYzYmZkZTkyLWI1ZjctNDVlZi1iNWY4LTE4Mzg2ZDBjZTIyMzwveG1wTU06SW5zdGFuY2VJRD4KICAgICAgICAgPHhtcE1NOkRvY3VtZW50SUQ+YWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOjM5NWUyM2IyLWRmNzYtMTE3YS05OGZjLTk1OTk3NmI0NTMxNTwveG1wTU06RG9jdW1lbnRJRD4KICAgICAgICAgPHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD54bXAuZGlkOmM1NzRkMTQ5LTJmMjQtNGI0ZC1iY2Y2LWRmMjE2NWZiODI3MzwveG1wTU06T3JpZ2luYWxEb2N1bWVudElEPgogICAgICAgICA8eG1wTU06SGlzdG9yeT4KICAgICAgICAgICAgPHJkZjpTZXE+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNyZWF0ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpjNTc0ZDE0OS0yZjI0LTRiNGQtYmNmNi1kZjIxNjVmYjgyNzM8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMTctMDktMjJUMDI6MTM6MzcrMTA6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE3IChNYWNpbnRvc2gpPC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDo2M2JmZGU5Mi1iNWY3LTQ1ZWYtYjVmOC0xODM4NmQwY2UyMjM8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMTctMDktMjJUMDI6MTM6MzcrMTA6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE3IChNYWNpbnRvc2gpPC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4vPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgPC9yZGY6U2VxPgogICAgICAgICA8L3htcE1NOkhpc3Rvcnk+CiAgICAgICAgIDxkYzpmb3JtYXQ+aW1hZ2UvcG5nPC9kYzpmb3JtYXQ+CiAgICAgICAgIDxwaG90b3Nob3A6Q29sb3JNb2RlPjM8L3Bob3Rvc2hvcDpDb2xvck1vZGU+CiAgICAgICAgIDxwaG90b3Nob3A6SUNDUHJvZmlsZT5zUkdCIElFQzYxOTY2LTIuMTwvcGhvdG9zaG9wOklDQ1Byb2ZpbGU+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjcyMDAwMC8xMDAwMDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6WVJlc29sdXRpb24+NzIwMDAwLzEwMDAwPC90aWZmOllSZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpSZXNvbHV0aW9uVW5pdD4yPC90aWZmOlJlc29sdXRpb25Vbml0PgogICAgICAgICA8ZXhpZjpDb2xvclNwYWNlPjE8L2V4aWY6Q29sb3JTcGFjZT4KICAgICAgICAgPGV4aWY6UGl4ZWxYRGltZW5zaW9uPjE2PC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6UGl4ZWxZRGltZW5zaW9uPjE2PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz57zJYOAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAAMBSURBVHjapJPLa1x1HEc/v8d95M5k3jN5TTrNq61WjTa2UVJxp1BaA65EcKMuWrCCoIK6cemq0E1BCO6KmwpSsIJSRSyaBqQxba2TaScxNTOZJPPIvO6d+/h9XVgQ1zn/wYFzGBFhP3DsE3YhlcQNrg6df2J4oaTY+vLvxbcFI1cSw94kw1JEwMroqG4GiLYV3tnUEHiEosbQ9Txwy9AnP3ju0LfZbGKs2PB+dgYGnqlGUljLJVGYNeBaAHtkyQgQisCJmFIERQQ+fDD1yUxcH99i4q8Xhvren9bZzEFGKKVtcMXA1CNXApoWoZCzsKablM5EPjQ1McPjljjp1VtIwZ+rtx3tx3z5yrVegJJPEIoQ+AARwBTQBaEZNazYYPRseih+bH5m7Ko0fNeypAk83MVP+fICxaLb5bDFc6PBu0a/+3xyRBWEg0tKoRQbUucag83Xngpn41oXKxMRIy07rk8gQqVj20dPv3pzYKs0W44tzU+92P6o11UIjxGald5pfYhvHDhinhkNHUb16477sqEfeVjrlGRXkb3n+tgmzZm4e/+84y+fGn/d1aZ6R9EVAumEgJmJTYcMOW02kl71l7+12WpXt6ICF1crF+SDdnD9WIIms4Li+uKN+fqZA9CdHt569iXYNQ27nXZv6e7m938ubRQmtgtvzAmkBsIWvnhQW1hueZfYeyMj8cezyauD7Z2T4+E+LFs6tOM5kCawU2mA31yvKSG/GyU6PjecmFjcad3O1zufrda9L29JSRLKNzMSUUMR1kMGThweQdfmWPxjCyjVEAp4NcyYKtvu9YurlU9bDfubflPWdc7AAMgTk5nPg2b1yV0hkIyFMDY1iCu/raFTqsLsOPD6rNi9Hr+20ehc9liANGeQnAH4ty6522jXQ0yqlu3cKubLxZVmr397z74TVFqVx1KRj01di/aBXlGmcZkjgO84/3tBrlTbb+YssWoZ0V/vbJR/uJ3fwtOJCEYV1+oOpcr1vVrZc7/yzRAACZ9xMPx3MNvvzv8MACmeZYKGf/ctAAAAAElFTkSuQmCC\"\n\nresponse = requests.request(\"GET\", url_study)\ndata = response.json()\n\nlessons = data['requested_information']['lessons_available']\nreviews = data['requested_information']['reviews_available']\n\nif lessons \u003e 0:\n    print(f'{lessons} Lessons | templateImage={image}')\nelif reviews \u003e 0:\n    print(f'{reviews} Reviews | templateImage={image}')\nelse:\n    print(f' | templateImage={image}')\n\nprint('---')\n\nusername = data['user_information']['username']\ntitle = data['user_information']['title']\n\nprint(f'{username} | href=https://community.wanikani.com/u/{username}')\nprint(f'Sect. {title}')\n\nprint('---')\n\nprint('LESSONS \u0026 REVIEWS | size=10')\n\nprint(f'Lessons - {lessons} | href=https://www.wanikani.com/lesson')\nprint(f'Reviews - {reviews} | href=https://www.wanikani.com/review')\n\nprint('---')\n\nprint('STATISTICS | size=10')\n\nresponse = requests.request(\"GET\", url_srs)\ndata = response.json()\n\nlevels = ['apprentice', 'guru', 'master', 'enlighten', 'burned']\n\ndef get_stat(level):\n    return str(data['requested_information'][level]['total'])\n\nfor level in levels:\n    total = get_stat(level)\n    level = level.capitalize()\n    print(f'{level} - {total}')"
				}
			],
			"path": "Web/wanikani.15m.py",
			"filename": "wanikani.15m.py",
			"dir": "Web",
			"docsPlugin": "Web/wanikani.15m.py.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "WaniKani",
			"version": "v0.1",
			"author": "jakeoid",
			"authors": [
				{
					"name": "Jake",
					"githubUsername": "jakeoid",
					"imageURL": "https://avatars.githubusercontent.com/u/13518213?v=4",
					"bio": "My name's Jake and I make websites and other useful tidbits.",
					"primary": true
				}
			],
			"desc": "Displays the number of items and some basic information from WaniKani!",
			"imageURL": "https://i.imgur.com/Tohefs7.png",
			"dependencies": [
				"python"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:10.524847Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/waniKaniStats.5m.rb",
					"filename": "waniKaniStats.5m.rb",
					"content": "#!/usr/bin/env ruby\n# frozen_string_literal: true\n\n# \u003cbitbar.title\u003eWaniKani Stats\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eNzebo\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eNzebo\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays user details \u0026 review + lesson tracking for WaniKani.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/orRd3Ga.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n\nrequire 'net/http'\nrequire 'json'\nrequire 'time'\nrequire 'date'\n\n\n# WaniKani API Token v2 - Retrieved from https://www.wanikani.com/settings/personal_access_tokens\nAPI_TOKEN = ''\n\nCOLORS = {\n  Radicals: '#00AAFF',\n  Kanji: '#FF00AA',\n  Vocabulary: '#7c04b7'\n}.freeze\n\n\n##\n# Base64 encoded icon for the menu\nIMG_BASE64 = 'iVBORw0KGgoAAAANSUhEUgAAACoAAAAgCAYAAABkWOo9AAAKx2lDQ1BJQ0MgUHJv' \\\n'ZmlsZQAASImVlwdUk8kWgOf/0xsEAhGQEmro0quU0AMovdoISSChxJgQVOzK4gquKCIiqCzIooCCaw' \\\n'FkLYgotkWxYd8gi4K4LhZEReX9wCPsvnfee+fdnHvmy82de+/MmZlzAwAFzxGLM2AqAJmiLElkoA8j' \\\n'PiGRgesDGEABysAQMDlcqZgVHh4KEJke/y4f7gFoYrxtNRHr33//r6LC40u5AEDhCCfzpNxMhE8g+p' \\\n'orlmQBgKpG7IbLs8QTfBlhNQlSIMKPJzh1iocnOHmS0ehJn+hIX4Q1AMCTORxJKgBkI8TOyOamInHI' \\\n'fgjbiHhCEcLId+DJFXB4CCN5gWVm5tIJliNsmvyXOKl/i5msiMnhpCp4ai2TgvcTSsUZnJX/53b8b8' \\\n'nMkE3nMEGULJAERSIjHdmz++lLQxQsSp4fNs1C3qT/JAtkQTHTzJX6Jk4zj+MXopibMT90mlOEAWxF' \\\n'nCx29DTzpf5R0yxZGqnIlSLxZU0zRzKTV5Yeo7AL+GxF/BxBdNw0Zwtj50+zND0qZMbHV2GXyCIV9f' \\\n'NFgT4zeQMUa8+U/mW9QrZibpYgOkixds5M/XwRayamNF5RG4/v5z/jE6PwF2f5KHKJM8IV/vyMQIVd' \\\n'mh2lmJuFHMiZueGKPUzjBIdPM/AD/iAU+TBAOLAD9sAWOACk2iz+iokzCnyXildKhKmCLAYLuWV8Bl' \\\n'vEtbZk2NnYugIwcWenjsS7+5N3EaLjZ2z84wA42CBG6oxNwAGgFQMAtWDGZtqOXMerAJwv4sok2VO2' \\\n'ieuEvAVE5C1QA5pAF3kRTIEVUp8TcAfeSMXBIAxEgwSwGHCBAGQCCVgOVoMNIA8UgO1gFygDFeAAOA' \\\n'SOgGOgGZwG58ElcA3cBHfBIyAH/WAIDIMPYAyCIBxEgWiQJqQHGUMWkB3kAnlC/lAoFAklQElQKiSC' \\\n'ZNBqaBNUABVBZVAlVAv9DJ2CzkNXoG7oAdQLDUJvoc8wCibDarAObALPgV1gFhwCR8OL4FR4GZwD58' \\\n'Lb4FK4Cj4MN8Hn4WvwXVgOD8EjKIAioegofZQVygXliwpDJaJSUBLUWlQ+qgRVhWpAtaI6UbdRctQr' \\\n'1Cc0Fk1DM9BWaHd0EDoGzUUvQ69Fb0WXoQ+hm9Ad6NvoXvQw+huGgtHGWGDcMGxMPCYVsxyThynB1G' \\\n'BOYi5i7mL6MR+wWCwdy8Q6Y4OwCdg07CrsVuw+bCO2DduN7cOO4HA4TZwFzgMXhuPgsnB5uD24w7hz' \\\n'uFu4ftxHPAmvh7fDB+AT8SL8RnwJvg5/Fn8L/wI/RqASjAluhDACj7CSUEioJrQSbhD6CWNEFSKT6E' \\\n'GMJqYRNxBLiQ3Ei8THxHckEsmA5EqKIAlJ60mlpKOky6Re0ieyKtmc7EteSJaRt5EPktvID8jvKBSK' \\\n'CcWbkkjJomyj1FIuUJ5SPirRlKyV2Eo8pXVK5UpNSreUXisTlI2VWcqLlXOUS5SPK99QfkUlUE2ovl' \\\n'QOdS21nHqK2kMdUaGp2KqEqWSqbFWpU7miMqCKUzVR9VflqeaqHlC9oNpHQ9EMab40Lm0TrZp2kdav' \\\n'hlVjqrHV0tQK1I6odakNq6uqO6jHqq9QL1c/oy6no+gmdDY9g15IP0a/R/88S2cWaxZ/1pZZDbNuzR' \\\n'rVmK3hrcHXyNdo1Lir8VmToemvma65Q7NZ84kWWstcK0JrudZ+rYtar2arzXafzZ2dP/vY7IfasLa5' \\\n'dqT2Ku0D2te1R3R0dQJ1xDp7dC7ovNKl63rrpukW657VHdSj6XnqCfWK9c7pvWSoM1iMDEYpo4MxrK' \\\n'+tH6Qv06/U79IfM2AaxBhsNGg0eGJINHQxTDEsNmw3HDbSM5pntNqo3uihMcHYxVhgvNu403jUhGkS' \\\n'Z7LZpNlkgKnBZDNzmPXMx6YUUy/TZaZVpnfMsGYuZulm+8xumsPmjuYC83LzGxawhZOF0GKfRbclxt' \\\n'LVUmRZZdljRbZiWWVb1Vv1WtOtQ603Wjdbv55jNCdxzo45nXO+2TjaZNhU2zyyVbUNtt1o22r71s7c' \\\n'jmtXbnfHnmIfYL/OvsX+jYOFA99hv8N9R5rjPMfNju2OX52cnSRODU6DzkbOSc57nXtc1FzCXba6XH' \\\n'bFuPq4rnM97frJzckty+2Y25/uVu7p7nXuA3OZc/lzq+f2eRh4cDwqPeSeDM8kzx895V76XhyvKq9n' \\\n'3obePO8a7xcsM1Ya6zDrtY+Nj8TnpM+or5vvGt82P5RfoF++X5e/qn+Mf5n/0wCDgNSA+oDhQMfAVY' \\\n'FtQZigkKAdQT1sHTaXXcseDnYOXhPcEUIOiQopC3kWah4qCW2dB88Lnrdz3uP5xvNF85vDQBg7bGfY' \\\n'k3Bm+LLwXyKwEeER5RHPI20jV0d2RtGilkTVRX2I9okujH4UYxoji2mPVY5dGFsbOxrnF1cUJ4+fE7' \\\n'8m/lqCVoIwoSURlxibWJM4ssB/wa4F/QsdF+YtvLeIuWjFoiuLtRZnLD6zRHkJZ8nxJExSXFJd0hdO' \\\n'GKeKM5LMTt6bPMz15e7mDvG8ecW8Qb4Hv4j/IsUjpShlINUjdWfqoMBLUCJ4JfQVlgnfpAWlVaSNpo' \\\n'elH0wfz4jLaMzEZyZlnhKpitJFHUt1l65Y2i22EOeJ5cvclu1aNiwJkdRIIekiaUuWGtIcXZeZyr6T' \\\n'9WZ7Zpdnf1weu/z4CpUVohXXV5qv3LLyRU5Azk+r0Ku4q9pX66/esLp3DWtN5VpobfLa9nWG63LX9a' \\\n'8PXH9oA3FD+oZfN9psLNr4flPcptZcndz1uX3fBX5Xn6eUJ8nr2ey+ueJ79PfC77u22G/Zs+VbPi//' \\\n'aoFNQUnBl63crVd/sP2h9IfxbSnbugqdCvdvx24Xbb+3w2vHoSKVopyivp3zdjYVM4rzi9/vWrLrSo' \\\n'lDScVu4m7ZbnlpaGnLHqM92/d8KROU3S33KW/cq713y97Rfbx9t/Z772+o0KkoqPj8o/DH+5WBlU1V' \\\n'JlUlB7AHsg88r46t7vzJ5afaGq2agpqvB0UH5YciD3XUOtfW1mnXFdbD9bL6wcMLD9884nekpcGqob' \\\n'KR3lhwFByVHX35c9LP946FHGs/7nK84YTxib0naSfzm6CmlU3DzYJmeUtCS/ep4FPtre6tJ3+x/uXg' \\\n'af3T5WfUzxSeJZ7NPTt+LufcSJu47dX51PN97UvaH12Iv3CnI6Kj62LIxcuXAi5d6GR1nrvscfn0Fb' \\\n'crp666XG2+5nSt6brj9ZO/Ov56ssupq+mG842Wm643W7vndp+95XXr/G2/25fusO9cuzv/bve9mHv3' \\\n'exb2yO/z7g88yHjw5mH2w7FH6x9jHuc/oT4pear9tOo3s98a5U7yM71+vdefRT171MftG/pd+vuX/t' \\\n'znlOclL/Re1A7YDZweDBi8+XLBy/4h8dDYq7w/VP7Y+9r09Yk/vf+8Phw/3P9G8mb87dZ3mu8Ovnd4' \\\n'3z4SPvL0Q+aHsdH8j5ofD31y+dT5Oe7zi7HlX3BfSr+afW39FvLt8Xjm+LiYI+FMtgIoROGUFADeHg' \\\n'SAkgAA7SYAxAVTPfWkQFP/AyYJ/Cee6rsnxQmAmjYAYtcDEOkNwD5EmQhTkTEc0WhvANvbK/SfIk2x' \\\n't5uKRWpGWpOS8fF3SP+IMwPga8/4+Fjz+PjXGqTYhwC0fZjq5SeEehgA7z1Odq5RN4aSh8G/yD8AZG' \\\n'YR7evMlgYAAAAJcEhZcwAAFiUAABYlAUlSJPAAAAILaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8' \\\n'eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA1LjQuMC' \\\n'I+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYt' \\\n'c3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgIC' \\\n'AgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIj4KICAgICAgICAgPHRp' \\\n'ZmY6UmVzb2x1dGlvblVuaXQ+MjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICAgICAgICAgPHRpZmY6Q2' \\\n'9tcHJlc3Npb24+MTwvdGlmZjpDb21wcmVzc2lvbj4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+' \\\n'MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHRpZmY6UGhvdG9tZXRyaWNJbnRlcnByZXRhdG' \\\n'lvbj4yPC90aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0' \\\n'aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgoPRSqTAAAHDklEQVRYCcVYa2hcRRSeu7t5SU' \\\n'NKWwpBLRWLKCLaWkSq/SH6o9o/LaKIaKv+UBGRomiFKoL4QxELoj8MUqUIlaY+QGixVo21Qdoa64PE' \\\n'xBKaamvSxGx3s5ve973H78zj3rvbrKRp1AlnZ+6Z8/jumZkz50YI3YgoZ8bcUzflKaA14O+kMHxE8o' \\\n'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'\n\n\n# class holding all of the user's WaniKani information\nclass WaniKani\n  def initialize(api_token)\n    @api_token = api_token\n    @reviews = wanikani_api('https://api.wanikani.com/v2/assignments?immediately_available_for_review')\n    @lessons = wanikani_api('https://api.wanikani.com/v2/assignments?immediately_available_for_lessons')\n    @user = wanikani_api('https://api.wanikani.com/v2/user')\n    @summary = wanikani_api('https://api.wanikani.com/v2/summary')\n  end\n\n  # method for making API calls to WaniKani\n  def wanikani_api(resource)\n    uri = URI.parse(resource)\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n    request = Net::HTTP::Get.new uri.request_uri\n    request.add_field('Authorization', \"Token #{API_TOKEN}\")\n    response = http.request(request)\n\n    JSON.parse(response.body)\n  end\n\n  # calculate the next time a review is available\n  def calc_next_review_time\n    next_review_time = Time.parse(@summary['data']['next_reviews_at']).localtime\n\n    if next_review_time \u003c Time.now.localtime\n      ' Now! | href = https://www.wanikani.com/'\n    else\n      next_review_time.strftime(' %l %p')\n    end\n\n  end\n\n  # calculates the details (such as # of items per category) for assignments\n  def calc_assignment_details(type)\n    assignment_details = {\n        Radicals: 0,\n        Kanji: 0,\n        Vocabulary: 0\n    }\n\n    if type == 'reviews'\n      next_review_time = Time.parse(@summary['data']['next_reviews_at']) + 1\n      next_review_time = next_review_time.to_datetime.rfc3339.to_s.gsub(/\\+[0-9:]+/, 'Z')\n\n      now = Time.now.utc.to_datetime.rfc3339.gsub(/\\+[0-9:]+/, 'Z')\n\n      if next_review_time \u003e now\n        assignment_data = wanikani_api(\"https://api.wanikani.com/v2/assignments?available_after=#{now}\u0026available_before=#{next_review_time}\")\n      else\n        assignment_data = @reviews\n      end\n    elsif type == 'lessons'\n      assignment_data = @lessons\n    end\n\n\n\n    assignment_data['data'].each do |assignment|\n      case assignment['data']['subject_type']\n      when 'radical'\n        assignment_details[:Radicals] += 1\n      when 'kanji'\n        assignment_details[:Kanji] += 1\n      when 'vocabulary'\n        assignment_details[:Vocabulary] += 1\n      else\n        puts \"Unknown assignment type: #{assignment['data']['subject_type']}\"\n      end\n\n    end\n\n    assignment_details\n\n  end\n\n  # calculate how long the user has been on their current level\n  def calc_level_duration\n\n    level_data = wanikani_api('https://api.wanikani.com/v2/level_progressions')\n\n    if level_data['data'][level_data['data'].length - 1]['data']['started_at'].nil?\n      return 0\n    end\n\n    level_start_time = Time.parse(level_data['data'][level_data['data'].length - 1]['data']['started_at'])\n\n    now = Time.now\n\n    ((now - level_start_time) / 3600 / 24).round(2)\n\n  end\n\n  # calculate the percentages of each category for the current level\n  def calc_level_percentage\n\n    subject_items = []\n    totals = {\n      Radical: {\n        total: 0,\n        passed: 0,\n        items: []\n      },\n      Kanji: {\n        total: 0,\n        passed: 0,\n        items: []\n      },\n      Vocabulary: {\n        total: 0,\n        passed: 0,\n        items: []\n      }\n    }\n\n    level_subject_data = wanikani_api(\"https://api.wanikani.com/v2/assignments?levels=#{@user['data']['level']}\")\n\n    reset_time = Time.parse(latest_reset)\n\n    level_subject_data['data'].each do |assignment|\n\n      start_time = assignment['data']['started_at']\n\n      if start_time.nil?\n        totals[assignment['data']['subject_type'].capitalize.to_sym][:total] += 1\n        next\n      end\n\n      next if Time.parse(start_time) \u003c reset_time\n\n      totals[assignment['data']['subject_type'].capitalize.to_sym][:total] += 1\n      subject_items.push(\n        id: assignment['data']['subject_id'],\n        type: assignment['data']['subject_type'].capitalize,\n        character: '',\n        srs_stage: assignment['data']['srs_stage_name'],\n        srs_stage_id: assignment['data']['srs_stage'],\n        document_url: ''\n      )\n\n      if assignment['data']['passed']\n        totals[assignment['data']['subject_type'].capitalize.to_sym][:passed] += 1\n      end\n\n    end\n\n    totals = get_assignment_subjects(totals, subject_items)\n\n    totals\n\n  end\n\n  # get subjects data using the provided subject IDs\n  def get_assignment_subjects(subject_items, subject_items_array)\n\n    subject_data = wanikani_api(\"https://api.wanikani.com/v2/subjects?ids=#{subject_items_array.map{|item| item[:id]}.join(',')}\")\n\n\n    subject_items_array.each_with_index do |item, idx|\n\n      match = subject_data['data'].find { |subject| subject['id'] == item[:id] }\n\n      subject_items_array[idx][:character] = match['data']['characters']\n      subject_items_array[idx][:document_url] = match['data']['document_url']\n\n      subject_items[match['object'].capitalize.to_sym][:items].push(subject_items_array[idx])\n\n    end\n\n    subject_items\n\n  end\n\n  def latest_reset\n\n    reset_data = wanikani_api(\"https://api.wanikani.com/v2/resets\")\n\n    latest_reset_time = ''\n\n    unless reset_data['data'].empty?\n      latest_reset = reset_data['data'][reset_data['data'].length - 1]\n\n      latest_reset_time = Time.parse(latest_reset['data']['created_at']).to_s\n\n    end\n\n    latest_reset_time\n  end\n\n  # print all of the data to stdout for bitbar\n  def print_data\n    if API_TOKEN == ''\n      puts 'ERROR'\n      puts '---'\n      puts 'Please edit the plugin script and add your WaniKani API token to the API_TOKEN variable at the top'\n      return\n    end\n    puts \"L: #{@lessons['total_count']} R: #{@reviews['total_count']}\"\n    puts '---'\n    puts \"  WaniKani Stats | size=14 color=#BFBFBF trim=false image=#{IMG_BASE64}\"\n    puts \"---\"\n    puts 'User Profile | size=12 color=#BFBFBF'\n    puts \"#{@user['data']['username']} - Level: #{@user['data']['level']}\"\n    puts \"Level duration: #{calc_level_duration} days\"\n    puts '---'\n    puts 'Current Level Progress | size=12 color=#BFBFBF'\n    level_percentage = calc_level_percentage\n    unless level_percentage == 0\n      level_percentage.each do |key, val|\n        puts \"#{key} [#{val[:passed]}/#{val[:total]}] - #{((val[:passed].to_f / val[:total].to_f) * 100).round(0)}%\"\n\n        header = ''\n        level_percentage[key.to_sym][:items].sort_by!{|obj| obj[:srs_stage_id]}.each do |item|\n          if item[:srs_stage] != header\n            header = item[:srs_stage]\n            color = if header.include? 'Apprentice'\n                      '#FF00AA'\n                    elsif header.include? 'Guru'\n                      '#7c04b7'\n                    else\n                      '#BFBFBF'\n                    end\n            puts \"-- #{header} | size=12 color=#{color}\"\n          end\n          if !item[:character].nil?\n            puts \"--  #{item[:character]} | href=#{item[:document_url]}\"\n          else\n            puts \"--  Non UTF-8 character | href=#{item[:document_url]}\"\n          end\n        end\n\n      end\n    end\n    puts '---'\n    puts 'Lessons | size=12 color=#BFBFBF'\n    calc_assignment_details('lessons').each do |key, val|\n      puts \"#{key}: #{val} | color=#{COLORS[key]}\"\n    end\n    puts '---'\n    puts 'Reviews | size=12 color=#BFBFBF'\n    puts \"Next reviews:#{calc_next_review_time}\"\n    calc_assignment_details('reviews').each do |key, val|\n      puts \"#{key}: #{val} | color=#{COLORS[key]}\"\n    end\n\n  end\nend\n\nw = WaniKani.new(API_TOKEN)\nw.print_data\n"
				}
			],
			"path": "Web/waniKaniStats.5m.rb",
			"filename": "waniKaniStats.5m.rb",
			"dir": "Web",
			"docsPlugin": "Web/waniKaniStats.5m.rb.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "WaniKani Stats",
			"version": "v0.2.0",
			"author": "Nzebo",
			"authors": [
				{
					"name": "Nathan Zebrowski",
					"githubUsername": "Nzebo",
					"imageURL": "https://avatars.githubusercontent.com/u/8963325?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays user details \u0026 review + lesson tracking for WaniKani.",
			"imageURL": "https://i.imgur.com/orRd3Ga.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:10.475767Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/whirlpool-watched.1m.rb",
					"filename": "whirlpool-watched.1m.rb",
					"content": "#!/usr/bin/env ruby\n\n# \u003cbitbar.title\u003eWhirlpool watched threads checker\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTristan Harmer\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003egondalez\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eList unread threads from your watch list\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n\nrequire 'json'\nrequire 'time'\nrequire 'net/https'\n\nAPI_KEY = 'YOUR_KEY_HERE' # see https://whirlpool.net.au/profile/?action=account\n\nuri = URI.parse(\"https://whirlpool.net.au/api/?key=#{API_KEY}\u0026get=watched\u0026watchedmode=0\u0026output=json\")\n\nres = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true, verify_mode: OpenSSL::SSL::VERIFY_NONE) do |http|\n  req = Net::HTTP::Get.new(uri)\n  http.request(req)\nend\n\nputs 'http error' and exit unless res.is_a? Net::HTTPSuccess\n\nwatched = JSON.parse(res.body)['WATCHED']\n\nputs \":cyclone: #{watched.length}|color=##{watched.length \u003e 0 ? '000000' : 'cccccc'}\"\n\nputs '---'\nwatched.each do |thread|\n  last_post_time = Time.parse(thread['LAST_DATE']).getlocal\n  last_post_time_minutes = ((Time.now - last_post_time) / 60).round\n  href = \"https://forums.whirlpool.net.au/forum-replies.cfm?t=#{thread['ID']}\u0026p=#{thread['LASTPAGE']}\u0026#r#{thread['LASTREAD']}\"\n  puts \"#{thread['TITLE']} -- #{last_post_time_minutes} mins ago | href=#{href}\"\nend\n"
				}
			],
			"path": "Web/whirlpool-watched.1m.rb",
			"filename": "whirlpool-watched.1m.rb",
			"dir": "Web",
			"docsPlugin": "Web/whirlpool-watched.1m.rb.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Whirlpool watched threads checker",
			"version": "v1.0",
			"author": "Tristan Harmer",
			"authors": [
				{
					"name": "tris",
					"githubUsername": "gondalez",
					"imageURL": "https://avatars.githubusercontent.com/u/1468141?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "List unread threads from your watch list",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"ruby"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:10.543725Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/wikipedia_on_this_day.12h.rb",
					"filename": "wikipedia_on_this_day.12h.rb",
					"content": "#!/usr/bin/env ruby\n# \u003cbitbar.title\u003eWikipedia On This Day\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e0.1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRyan Scott Lewis\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eRyanScottLewis\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay Wikipedia On This Day information.\u003c/bitbar.desc\u003e\n# \u003cbitbar.dependencies\u003eruby (wikipedia, wikicloth, nokogiri rubygems)\u003c/bitbar.dependencies\u003e\n\nrequire \"wikipedia\" # gem install wikipedia-client\nrequire \"wikicloth\" # gem install wikicloth\nrequire \"nokogiri\"  # gem install nokogiri\n\ndef convert_wiki_to_html(data)\n  WikiCloth::Parser.new(data: data).to_html\nend\n\nday_str = Time.now.strftime(\"%B %e\")\npage = Wikipedia.find(day_str, prop: \"revisions\", rvprop: \"content\")\n\nwithin_events_section = false\nlines = page.content.lines.each_with_object([]) do |line, memo|\n\n  html = convert_wiki_to_html(line)\n  html_document = Nokogiri::HTML(html)\n\n  headline_node = html_document.xpath(\"//h2/span[@class='mw-headline']\").first\n\n  if !headline_node.nil?\n    within_events_section = headline_node.text == \"Events\"\n  else\n    next unless within_events_section\n\n    list_item_node = html_document.xpath(\"//ul/li\")\n\n    memo \u003c\u003c  list_item_node.text\n  end\nend\n\nputs \"ⓦ\"\nputs \"---\"\nlines.each { |line| puts(line) }\n\n# TODO:\n# * Links!\n# * Sort by date\n# * Date format\n# * Strip references: \"[1]\", etc\n"
				}
			],
			"path": "Web/wikipedia_on_this_day.12h.rb",
			"filename": "wikipedia_on_this_day.12h.rb",
			"dir": "Web",
			"docsPlugin": "Web/wikipedia_on_this_day.12h.rb.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "Wikipedia On This Day",
			"version": "0.1.0",
			"author": "Ryan Scott Lewis",
			"authors": [
				{
					"name": "Ryan Scott Lewis",
					"githubUsername": "RyanScottLewis",
					"imageURL": "https://avatars.githubusercontent.com/u/39534?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display Wikipedia On This Day information.",
			"imageURL": "https://xbarapp.com/public/img/xbar-2048.png",
			"dependencies": [
				"ruby (wikipedia",
				"wikicloth",
				"nokogiri rubygems)"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:10.567245Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/XKCD/xkcd.1h.sh",
					"filename": "xkcd.1h.sh",
					"content": "#!/bin/bash\n# \u003cbitbar.title\u003eXKCD\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003e0.1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eParvez\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eparvez\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplay Random XKCD Strip\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttp://i.imgur.com/OEHNotn.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ebash\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/parvez/bitbar-plugins\u003c/bitbar.abouturl\u003e\necho \"| image=AAABAAIAEBAAAAAAAABoBQAAJgAAACAgEAAAAAAA6AIAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAJycnABGRkYAenp6AIODgwAkJCQA6+vrAIyMjAAdHR0A29vbAHx8fAAvLy8Ajo6OADg4OAD///8AFhYWAEpKSgB+fn4AsrKyACgoKAAGBgYA+Pj4AKKiogDW1tYAd3d3AICAgAAqKioAiYmJAOjo6AC9vb0AXl5eAPHx8QBnZ2cA+vr6AHBwcADh4eEAgoKCAIuLiwBgYGAA8/PzAJ2dnQBHR0cAe3t7AOPj4wAlJSUAn5+fANPT0wB0dHQAsbGxAFtbWwCPj48AMDAwADk5OQChoaEAdnZ2AH9/fwApKSkAiIiIAJqamgBvb28AeHh4ANfX1wzADc7NwAzMwAEBAATNzM8DgAODg4ADg4ADg4ADg48Ig4aKg4DGg4OKTASDQ4OIiIOKggOOAMODi00NDUODiIZIA4AKAAOHgkOAAAOLh08OQ8bDgAOGwUAFQwMFQAjGBgfAA4ADgAcIQACAgAnDiIiDiQsACwkDgEQAAAQAQ4iIg4OFgAWDg4CAAAAAAIOIiIOJAAAACQOLxEODjsvDiIYKxQXDhcUKzYlDg4OJg4iGTs9Dg4OPTsyAAcOIjsOIhkYPA4ODjw2BwAAAAAKDiIYBgALMgsACQ4xAAAxDg4iPA46AAAAOg4ODg4ODg4OPDMYEQwyDBE7Ozs7Ozs7GDMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACAAAABAAAAAAQAEAAAAAAAAAgAAAAAAAAAAAAAQAAAAAAAAAAAAAADPz88A39/fACAgIAD///8AcHBwAICAgACQkJAAoKCgANfX1wAoKCgAf39/AIiIiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAAREREAARAAEREAAREQAREAERERABERABERABEREAERABEREQAREQAVEUARERABEQwNERDA0REYHRHDEREQAREQAREQAREREAEQAFEREAEREAJREAERERABmAERERABERDCkQwNERETAiAxEREQARERABEAEREREEAABREREAEAEQwAANEADREMANEQwRABAA0QwA0QwADREAERDA0QARABEQAREAEMDRABEMDREAEQwNEAEQwNEMDQAQwNERABEQwNABDA0REMAAAA0REQAREQAQAQAREREAAAAREREAEREMAAAA0RFAAAAAABURABEREMAADRERQAAAAAAVEQAREREQAREREQAAAAAAEREAEREQwAANEREADREQwBERABEQwAAAAA0RAJEREQgREQAREAAREQABEQEREREQEREAEQwRERERANEADREREBERABEAEREREQARAADREQwREQARAREREREQEQAAERCAEREAEQARERERABEAAAAAABERABEAEREREQARDAAAAADREQARDAAREQAA0RDAAAANEREAERAAAAAAARERLAAC0RERABEQwAAAAA0REREREREREQARERDAAA0REREREREREREAERERERERERERERERERERAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\necho ---\n\nJQ=$(command -v jq)\nCURL=$(curl --silent https://xkcd.com/info.0.json)\nIMG_NUM=$(echo \"${CURL}\" | $JQ -r '.num')\nIMG_RAND=$(( ( RANDOM % IMG_NUM )  + 1 ))\n\nCURL=$(curl --silent \"https://xkcd.com/$IMG_RAND/info.0.json\")\nIMG_URL=$(echo \"${CURL}\" | $JQ -r '.img')\nTITLE=$(echo \"${CURL}\" | $JQ -r '.safe_title')\nSUB_TITLE=$(echo \"${CURL}\" | $JQ -r '.alt' | fold -w 100 -s)\nIMAGE=$(base64 -w 0 \u003c(curl --silent \"$IMG_URL\"))\necho \"| image=$IMAGE\"\necho ---\necho \"$TITLE | size=14 href='https://www.xkcd.com/$IMG_RAND/'\"\necho \"${SUB_TITLE}\"\necho \"Explain XKCD wiki | href='https://www.explainxkcd.com/$IMG_RAND'\"\necho ---\necho \"Refresh... | refresh=true\"\n"
				}
			],
			"path": "Web/XKCD/xkcd.1h.sh",
			"filename": "xkcd.1h.sh",
			"dir": "Web/XKCD",
			"docsPlugin": "Web/XKCD/xkcd.1h.sh.html",
			"docsCategory": "Web/XKCD.html",
			"pathSegments": [
				"Web",
				"XKCD"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/XKCD",
					"text": "XKCD",
					"isLast": true
				}
			],
			"title": "XKCD",
			"version": "0.1.0",
			"author": "Parvez",
			"authors": [
				{
					"name": "Parvez",
					"githubUsername": "parvez",
					"imageURL": "https://avatars.githubusercontent.com/u/126749?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Display Random XKCD Strip",
			"imageURL": "http://i.imgur.com/OEHNotn.png",
			"dependencies": [
				"bash"
			],
			"aboutURL": "https://github.com/parvez/bitbar-plugins",
			"lastUpdated": "2021-03-08T15:22:09.291159Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/YouTube/YouTubeTicker.1m.js",
					"filename": "YouTubeTicker.1m.js",
					"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eYouTube Ticker\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eZachary David Saunders\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003eZacharyDavidSaunders\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eA MacOs Menu Bar (BitBar) plugin that displays your YouTube subscriber count.\u003c/bitbar.desc\u003e\n// \u003cbitbar.dependencies\u003enode.js\u003c/bitbar.dependencies\u003e\n// \u003cbitbar.image\u003ehttps://i.imgur.com/0aNslKx.png\u003c/bitbar.image\u003e\n/*jshint esversion: 6 */\n\n\n\n//👋👋👋 Change the following varaibles to best suit your needs.\nconst key = \"\u003cYOUR-KEY-HERE\u003e\";\nconst channelName = \"PewDiePie\";\nconst color = \"white\";\n\n//\u003c--- DO NOT EDIT THE CODE BELOW THIS LINE. ---\u003e\nconst https = require('https');\nconst warningIcon = '⚠️';\nconst version = \"v1.1\";\nconst setupVideoLink = \"https://www.youtube.com/watch?v=DYpf6gyd-bs\";\nconst googleCloudPlatformSite = \"http://console.developers.google.com\";\n\nconst youTubeIcon = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADdcAAA3XAUI\" +\n\"om3gAAAMESURBVFhH7VbPS1RRGP2CogkRRAqyoH8gMsW0aX75AyWREFr0CysIgiByIUKL9pEUVus2SZm7CFqUSom1iTZBUdaqWkjawtGiotQ5r/O9+Wbe9HwjL/tBwRw\" +\n\"4vDv3ft853333vntHSijhvwHaZS3apMxplApyfRFWaIzGWtrK4CSkDgk5iJSczCTlLH8PZBIyTD4iJ9j/Gkl5wzGX2ra+FxrD510+BzRXNVRLNU2+ODiDCJP6MylJO83\" +\n\"i5NnkY2MR+uMKNFhImoX1My5idkvBSnucFktOLiUFEIZBua4mtRfj0mt2P4KVrWaV9zUoSPR3ULX5dsedOlljth4Qk00Meoam4OQ8U+QOY8L6wpLaXOKJL3HZYrYenJj\" +\n\"UMGgKjQGJOaphlDy9B+jaClSz3WBjYUhtFjDDdoPZeliISTMNvrozDEpWagFqOn4TmH0PXDzFWZVl+3aRy+UqOc4CsJCSDrP1QPH2XNCSxBxzBYwOIY+nD4HeDqCe/TU\" +\n\"WE5Rr1M1Ij/1m64Gdne7rD1PA8KC5GxbmgTtXgcPVQC3HYxYfxBYyJUfN1gMPin1o9gX7mS/ghjn78PkDMNgHtHJZdK8EadBjMSnHzdYDP8NfL+DjDDB0AWgrL16AvoG\" +\n\"EHDNbD7oEepqtbAm+AbevAIf4Zeg+WG4JspM8YLYe2LnbDQhTwEjBJnwyBvS0Z88FXX+NCcpVUttJicMvrtNsPThxaeIFEu4zfHALSE8D509QNJLt01kvl6vMjs9zv7W\" +\n\"arQfEZTsLeBfqIDqzFzjCHb+N7Z02FobZg2iahdSarQcGVHHwbxzFzzmJzWbrQS8jXhT3Ql1GP2tsNO2xwMtIQeE/fh3zDQZfxwq+mnUs4hKDZgv/TLjJhfT/EcnRH1e\" +\n\"gwbc7xz12WT3Mrjh4sdTztOpaTEg3CzrHdbvG5wgFHnOGL8m3LHKSnDJOah/jXmkMOcr2de72PuZ1c6xrPhpwA4aFI7KKM4zwUyufi0olRTd8qpeNFK5Sum32cXaVGqO\" +\n\"xmmPpJZTwL0PkOxoj5CNBuCXOAAAAAElFTkSuQmCC\";\n\nrenderPlugin();\n\nfunction renderPlugin(){\n  if(key == \"\u003cYOUR-KEY-HERE\u003e\"){\n    console.log(\"CLICK ME TO CONFIGURE YOUTUBE TICKER |color:red image=\"+youTubeIcon );\n    console.log(\"---\");\n    console.log(\"Please watch the following setup video. [Click to visit site] |href=\"+setupVideoLink);\n    console.log(\"---\");\n    console.log(\"Visit Google's Cloud Platform site. [Click to visit site] |href=\"+googleCloudPlatformSite);\n    console.log(\"Refresh|refresh=true\");\n  }else{\n    getChannelId(function(id){\n      getChannelStatistics(id,function(arrayOfStats){\n        addCommas(arrayOfStats, function(formattedArrayOfStats){\n          console.log(channelName + \": \"+formattedArrayOfStats[0]+\" Subscribers| color=\"+color+\" image=\"+ youTubeIcon);\n          console.log(\"---\");\n          console.log(\"Refresh|refresh=true\");\n          console.log(\"---\");\n          console.log(\"More Channel Statistics\");\n          console.log(\"-- Total Number Of Videos: \"+formattedArrayOfStats[3]);\n          console.log(\"-- Total Number Of Views: \"+formattedArrayOfStats[1]);\n          console.log(\"-- Total Number Of Comments: \"+formattedArrayOfStats[2]);\n          console.log(\"-- Channel ID: \"+ id);\n          console.log(\"---\");\n          console.log(\"Visit \"+channelName+\"'s channel. [Click to visit YouTube channel]|href=https://www.youtube.com/user/\"+channelName);\n          console.log(\"Visit \"+channelName+\"'s Social-Blade page. [Click to visit site]|href=https://socialblade.com/youtube/user/\"+channelName);\n          console.log(\"---\");\n          console.log(\"For more information, please see the GitHub repository. [Click to visit site] |href=https://github.com/ZacharyDavidSaunders/YouTubeTicker-BitBarPlugin\");\n          console.log(\"---\");\n          console.log(\"Version: \"+version+\"\\n© Zachary David Saunders 2018 |size:10\");\n        });\n      });\n    });\n  }\n}\n\nfunction getChannelId(callback){\n  var channelId;\n  https.get('https://www.googleapis.com/youtube/v3/channels?key='+key+'\u0026forUsername='+channelName+'\u0026part=id', (resp) =\u003e {\n    var data = '';\n    resp.on('data', (chunk) =\u003e {\n      data += chunk;\n    });\n\n    resp.on('end', () =\u003e {\n        var response = JSON.parse(data);\n        channelId = response.items[0].id;\n        callback(channelId);\n      });\n\n    }).on(\"error\", (err) =\u003e {\n      console.log(youTubeIcon+warningIcon+\"Error:1\");\n    });\n}\n\nfunction getChannelStatistics(channelId,callback){\n  var arrayOfStats = [];\n  https.get('https://www.googleapis.com/youtube/v3/channels?part=statistics\u0026id='+channelId+'\u0026key='+key, (resp) =\u003e {\n    var data = '';\n    resp.on('data', (chunk) =\u003e {\n      data += chunk;\n    });\n\n    resp.on('end', () =\u003e {\n        var response = JSON.parse(data);\n        var numberOfSubs = response.items[0].statistics.subscriberCount;\n        var numberOfViews = response.items[0].statistics.viewCount;\n        var numberOfComments = response.items[0].statistics.commentCount;\n        var numberOfVideos = response.items[0].statistics.videoCount;\n        arrayOfStats.unshift(numberOfSubs,numberOfViews,numberOfComments,numberOfVideos);\n        callback(arrayOfStats);\n      });\n\n    }).on(\"error\", (err) =\u003e {\n      console.log(youTubeIcon+warningIcon+\"Error:2\");\n    });\n}\n\nfunction addCommas(statisticArray,callback){\n  for(var i =0; i \u003c statisticArray.length; i++){\n    statisticArray[i] = statisticArray[i].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n  callback(statisticArray);\n}\n"
				}
			],
			"path": "Web/YouTube/YouTubeTicker.1m.js",
			"filename": "YouTubeTicker.1m.js",
			"dir": "Web/YouTube",
			"docsPlugin": "Web/YouTube/YouTubeTicker.1m.js.html",
			"docsCategory": "Web/YouTube.html",
			"pathSegments": [
				"Web",
				"YouTube"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/YouTube",
					"text": "YouTube",
					"isLast": true
				}
			],
			"title": "YouTube Ticker",
			"version": "v1.1",
			"author": "Zachary David Saunders",
			"authors": [
				{
					"name": "Zachary David Saunders",
					"githubUsername": "ZacharyDavidSaunders",
					"imageURL": "https://avatars.githubusercontent.com/u/14244868?v=4",
					"bio": "Since most of my professional work is classified (not held in git), this profile is a graveyard of half-baked ideas and Frankenstein'd projects. ",
					"primary": true
				}
			],
			"desc": "A MacOs Menu Bar (BitBar) plugin that displays your YouTube subscriber count.",
			"imageURL": "https://i.imgur.com/0aNslKx.png",
			"dependencies": [
				"node.js"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:09.297492Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/YouTube/subgap.1s.py",
					"filename": "subgap.1s.py",
					"content": "#!/usr/bin/python\n#\n# \u003cbitbar.title\u003eYoutube Sub gap\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eTok1\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003etokfrans03\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays the sub gap between Pewdiepie and T-series. Set your youtube api key in the script. You can also change the channel ids to check on other sub gaps, just make shure the bigger one is first\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://github.com/garythung/bitbar-age-ticker/blob/master/bitbar-age-ticker.gif?raw=true\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003epython\u003c/bitbar.dependencies\u003e\n# \u003cbitbar.abouturl\u003ehttps://github.com/tokfrans03/BitBar-sub-gap\u003c/bitbar.abouturl\u003e\n\nimport requests\nimport json\n\nYTchannel1=\"UC-lHJZR3Gqxm24_Vd_AJ5Yw\" #pewdiepie\nYTchannel2=\"UCq-Fj5jknLsUf-MWSy4_brA\" #tseries\napiKey = \"YOUR_API_KEY\"\n\nYTchannel1data = requests.get('https://www.googleapis.com/youtube/v3/channels?part=statistics\u0026id=' + YTchannel1 + '\u0026key=' + apiKey)\nYTchannel2data = requests.get('https://www.googleapis.com/youtube/v3/channels?part=statistics\u0026id=' + YTchannel2 + '\u0026key=' + apiKey)\nYTchannel1subs = json.loads(YTchannel1data.text)[\"items\"][0][\"statistics\"][\"subscriberCount\"]\nYTchannel2subs = json.loads(YTchannel2data.text)[\"items\"][0][\"statistics\"][\"subscriberCount\"]\n\ndif = int(YTchannel1subs) - int(YTchannel2subs)\n\nprint(\"{:,d}\".format(int(dif)))\nprint(\"---\")\nprint(\"Channel 1 | color=blue\")\nprint(\"{:,d}\".format(int(YTchannel1subs)))\nprint(\"---\")\nprint(\"Channel 2 | color=red\")\nprint(\"{:,d}\".format(int(YTchannel2subs)))\nprint(\"---\")\nprint(\"Gap | color=green\")\nprint(\"{:,d}\".format(int(dif)))"
				}
			],
			"path": "Web/YouTube/subgap.1s.py",
			"filename": "subgap.1s.py",
			"dir": "Web/YouTube",
			"docsPlugin": "Web/YouTube/subgap.1s.py.html",
			"docsCategory": "Web/YouTube.html",
			"pathSegments": [
				"Web",
				"YouTube"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": false
				},
				{
					"path": "Web/YouTube",
					"text": "YouTube",
					"isLast": true
				}
			],
			"title": "Youtube Sub gap",
			"version": "v1.0",
			"author": "Tok1",
			"authors": [
				{
					"name": "Tok1",
					"githubUsername": "tokfrans03",
					"imageURL": "https://avatars.githubusercontent.com/u/34898241?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Displays the sub gap between Pewdiepie and T-series. Set your youtube api key in the script. You can also change the channel ids to check on other sub gaps, just make shure the bigger one is first",
			"imageURL": "https://github.com/garythung/bitbar-age-ticker/blob/master/bitbar-age-ticker.gif?raw=true",
			"dependencies": [
				"python"
			],
			"aboutURL": "https://github.com/tokfrans03/BitBar-sub-gap",
			"lastUpdated": "2021-03-08T15:22:09.371686Z",
			"vars": null
		},
		{
			"files": [
				{
					"path": "Web/putio.5m.py",
					"filename": "putio.5m.py",
					"content": "#!/usr/local/bin/python3\n\n# \u003cbitbar.title\u003eput.io transfers\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRyan Chiechi\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003erchiechi\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows put.io transfers and lists files/folders\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/L85lfpv.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ePython,Requests\u003c/bitbar.dependencies\u003e\n\nimport requests\nimport sys,json,base64\n\nOAUTH_TOKEN=\"\u003cYOUR_TOKEN_HERE\u003e\" # https://put.io/v2/docs/gettingstarted.html\nBURL=\"https://api.put.io/v2\" # v2 api base url\nPUTIO=\"https://put.io\"\n#\n# Note: there is very little exception handling. If something\n#       goes wrong the script will just crash\n#\n\n### Functions ###\n\ndef strbytes(B, per=''):\n    '''\n    Return the given bytes as a human friendly KB, MB, GB, or TB string\n    modified from: http://stackoverflow.com/a/31631711\n    '''\n    B = float(B)\n    KB = float(1024)\n    MB = float(KB ** 2) # 1,048,576\n    GB = float(KB ** 3) # 1,073,741,824\n    TB = float(KB ** 4) # 1,099,511,627,776\n\n    if B == 0:\n       return '0'\n    if B \u003c KB:\n       return '{0} {1}{2:s}'.format(B,'Byte' if 0 == B \u003e 1 else 'Bytes',per)\n    elif KB \u003c= B \u003c MB:\n       return '{0:.2f} KB{1:s}'.format(B/KB,per)\n    elif MB \u003c= B \u003c GB:\n       return '{0:.2f} MB{1:s}'.format(B/MB,per)\n    elif GB \u003c= B \u003c TB:\n       return '{0:.2f} GB{1:s}'.format(B/GB,per)\n    elif TB \u003c= B:\n       return '{0:.2f} TB{1:s}'.format(B/TB,per)\n\ndef getdir(pid):\n    '''\n    List the contents of a put.io file id\n    '''\n    files = []\n\n    # Check that we are listing a folder\n    r = requests.get(BURL+'/files/%s?oauth_token=%s' %(pid,OAUTH_TOKEN)) \n    if json.loads(str(r.content,encoding='utf-8'))['file']['file_type'] != 'FOLDER':\n        return files\n    # If we are then return a list of files\n    r = requests.get(BURL+'/files/list?parent_id=%s\u0026oauth_token=%s' %(pid,OAUTH_TOKEN))\n    for f in json.loads(str(r.content,encoding='utf-8'))['files']:\n        # Fetch thumbnail icon and convert it to a base64 encoded string\n        f['icon'] = str(base64.b64encode(requests.get(f['icon']).content),encoding='utf-8')\n        files.append(f)\n    return files\n\n###    //     ###\n\n# Print the put.io logo in the menu bar\nprint('|image='+str(b'iVBORw0KGgoAAAANSUhEUgAAABUAAAAVCAYAAACpF6WWAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAAB3RJTUUH4AgFCigacJbY1wAAA6FJREFUOMu9lF1oHFUUgL87s5PNpslmY9BUMNWmaRqSNnW1SNLSmpdKK4it+BBEUPBJEAS1LQVBRKWgBfHFl0LwqVALgg9imiL+QBJsA1WwiTWmbcwvcbPZn+zszu7ce3zY3TEhjfii8zIwZ853v3PuuRf+g0dtFTh8+Ek6Ojvjq6upY8VisUtEokDGcZyJWCw2NHVr6sbIyHf/HvrCiy/1pdKp827OPai1RgQEgcrbsizqIpHRxsbGty5fujj2j9Cenv20tXecSqXT57Tv2wIgsgla/Wbblm5sbDx75/b0R5MTvwQcez30id5Dp1Pp9IdGa0sEnJDimSPNvHLifgaeaqavp4FQyGZ6Lo8xgtbGcvP5ow+0tORv/z41ssn02ZPPH0ylUj9oY2xEiDU4nH+9ld2tlXVFKn8KP00VOfXJDNmcX26HUjoWix0ZHvpqNDB9ZGeb2rat/nPf1zuqZZ577SH2tjmAYLQwt+xRV6uwLdjebLNje5irP6YRBGOM5ft+N8JgJpPGAtjT2RUvlkq9IoKIsK+9lsf3hEGExGqJgbMTnHjjJiffvMnSigcI/fEI7a0O1RzPK/bu3NUeB8rQfD5/XIwEm/BoR22lXGHwy0XuLJRQVoilpOHi138GsXh7CDEGEcGIIee6xwOor3V3dUURob5WAeXExUQJCVqvSGZ0JQaRsOB5hSDP9/3uAKq1jlYDRirGlcQD3dENM9jXEw0WnFlwKeRzGF221VpHAUIARuusshVCGVwtD2DgaBOZnDA+maP/sQaePtQACGuu5ptrScQYvIJLTW0EY0w2gGqtJy3LLpdB1bQ8RrYlvPpcExALRkpE+ODCNOmsD0pRKhUJOTVorSeD8l03d8WI2Wi6zpagHUIqU+L0x79x+epyZcoVSimKXgGvkL8SmE7d+vX6vv3x8VDIOVDtbRVy4Ys5lpNFjDbMLXuM/ZzC9QwoVWEqUArfL43Pzty9vq583+TW1s7UR6PDCmWvh3566Q+yOf/vA7jOrsxUCGjP884YY8yGs59cSdyNRmNWyHH6M2tFHm6x+fZakuGxRAWmKnYVoFIoZYGyKHreewvzs5/d85ZSSlm7dne+E4nUvV1ws5bvl7a0QylEMF6h8P7C/Oy7ImLueUsBklxJfF8TDo+GHGevMfpBpaxNdoLC9/0bbi738tLi/OC6Hd36ki7bWKGm+5r6wuHwMcuyu5SyGoCsETPhed5QMpEYEzE+/9fzF73SG0tTzLiTAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDE2LTA4LTA1VDEwOjQyOjUxKzAyOjAwFs1KTgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAxNi0wOC0wNVQxMDo0MDoyNiswMjowMKwHFVgAAAAASUVORK5CYII=', encoding='utf-8'))\n\n# Everything else goes in menus\nprint('---')\n\ntry:\n    # Get transfers and account info as list objects \n    r = requests.get(BURL+'/transfers/list?oauth_token='+OAUTH_TOKEN)\n    transfers = json.loads(str(r.content,encoding='utf-8'))['transfers']\n    r = requests.get(BURL+'/account/info?oauth_token='+OAUTH_TOKEN)\n    info = json.loads(str(r.content,encoding='utf-8'))['info']\nexcept requests.exceptions.ConnectionError:\n    print('Error connecting to put.io | color=red')\n    sys.exit()\nexcept json.decoder.JSONDecodeError:\n    print('JSON Error: see /tmp/putio.log | color=red')\n    with open('/tmp/putio.log', 'w') as fh:\n        fh.write(str(r.content,encoding='utf-8'))\n    sys.exit()\n\nprint(':arrows_clockwise: Transfers (up/down) :arrows_clockwise: | color=gray')\nfor t in transfers:\n    # Show a lock for locked torrents\n    if t['is_private']:\n        print(':lock:',end='')\n    else:\n        print(':unlock:',end='')\n    status = t['status']\n    # List seeding torrents in green\n    if status == 'SEEDING':\n        print('%s | color=green' % t['name'])\n    # List downloading torrents in blue\n    elif status == 'DOWNLOADING':\n        print('%s | color=blue' % t['name'])\n    # List everything else in black\n    else:\n        print('%s | color=black' % t['name'])\n    # Print any error messages in red\n    if t['error_message']:\n        print('%s | color=red' % t['error_message'])\n    # Print out the up/down data, peers and speeds\n    print('--%s: %s / %s | color=black' % (t['status'].capitalize(),strbytes(t['uploaded']),strbytes(t['downloaded']) ) )\n    print('--Peers: %s / %s | color=black' % (t['peers_getting_from_us'],t['peers_sending_to_us'] ) )\n    print('--Speed: %s / %s | color=black' % (strbytes(t['up_speed'],'/s') ,strbytes(t['down_speed'],'/s') ))\n    # If we are downloading print the ETA and percent complete\n    if status == 'DOWNLOADING':\n        try:\n            print('--ETA: %0.0f min (%s%%) | color=black' % (t['estimated_time']/60,t['percent_done'] ) )\n        except TypeError:\n            print('--ETA: :x:')\n    # Otherwise print the ratio\n    else:\n        print('--Ratio: %s | color=black' % (t['current_ratio']) )\n\n# Make a divider\nprint('\\n---')\n\n# List the files/folders in the root and recurse two levels deep with submenus\nfor root in getdir(0):\n    print('%s (%s) | color=black image=%s href=%s/files/%s' % (root['name'],strbytes(root['size']),root['icon'],PUTIO,root['id']) )\n    for f in getdir(root['id']):\n        print('--%s (%s) | color=black image=%s href=%s/files/%s' % (f['name'],strbytes(f['size']),f['icon'],PUTIO,f['id']) )\n        for sf in getdir(f['id']):\n            print('----%s (%s) | color=black image=%s href=%s/files/%s' % (sf['name'],strbytes(sf['size']),sf['icon'],PUTIO,sf['id']) )\n\n# Make a divider\nprint('\\n---')\n\n# Print disk usage\nprint('Disk: %s / %s | color=black' % (strbytes(info['disk']['used']),strbytes(info['disk']['size']) ) )\n\n# Print a menu of actions\nprint('Actions')\nprint('--Refresh | refresh=true')\nprint('--Go to put.io | href=%s/transfers' % PUTIO)\n# Hit or miss if this works\nprint('--Clean Transfers | refresh=true terminal=false bash=curl param1=\"-s\" param2=\"--data oauth_token=%s\" param3=\"--url %s/transfers/clean\"' %(OAUTH_TOKEN,BURL))\n"
				}
			],
			"path": "Web/putio.5m.py",
			"filename": "putio.5m.py",
			"dir": "Web",
			"docsPlugin": "Web/putio.5m.py.html",
			"docsCategory": "Web.html",
			"pathSegments": [
				"Web"
			],
			"categoryPathSegments": [
				{
					"path": "Web",
					"text": "Web",
					"isLast": true
				}
			],
			"title": "put.io transfers",
			"version": "v1.0",
			"author": "Ryan Chiechi",
			"authors": [
				{
					"name": "Ryan Chiechi",
					"githubUsername": "rchiechi",
					"imageURL": "https://avatars.githubusercontent.com/u/18732092?v=4",
					"bio": "",
					"primary": true
				}
			],
			"desc": "Shows put.io transfers and lists files/folders",
			"imageURL": "https://i.imgur.com/L85lfpv.png",
			"dependencies": [
				"Python",
				"Requests"
			],
			"aboutURL": "",
			"lastUpdated": "2021-03-08T15:22:10.19965Z",
			"vars": null
		}
	]
}