{
	"plugin": {
		"files": [
			{
				"path": "Web/putio.5m.py",
				"filename": "putio.5m.py",
				"content": "#!/usr/local/bin/python3\n\n# \u003cbitbar.title\u003eput.io transfers\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev1.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eRyan Chiechi\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003erchiechi\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eShows put.io transfers and lists files/folders\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/L85lfpv.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003ePython,Requests\u003c/bitbar.dependencies\u003e\n\nimport requests\nimport sys,json,base64\n\nOAUTH_TOKEN=\"\u003cYOUR_TOKEN_HERE\u003e\" # https://put.io/v2/docs/gettingstarted.html\nBURL=\"https://api.put.io/v2\" # v2 api base url\nPUTIO=\"https://put.io\"\n#\n# Note: there is very little exception handling. If something\n#       goes wrong the script will just crash\n#\n\n### Functions ###\n\ndef strbytes(B, per=''):\n    '''\n    Return the given bytes as a human friendly KB, MB, GB, or TB string\n    modified from: http://stackoverflow.com/a/31631711\n    '''\n    B = float(B)\n    KB = float(1024)\n    MB = float(KB ** 2) # 1,048,576\n    GB = float(KB ** 3) # 1,073,741,824\n    TB = float(KB ** 4) # 1,099,511,627,776\n\n    if B == 0:\n       return '0'\n    if B \u003c KB:\n       return '{0} {1}{2:s}'.format(B,'Byte' if 0 == B \u003e 1 else 'Bytes',per)\n    elif KB \u003c= B \u003c MB:\n       return '{0:.2f} KB{1:s}'.format(B/KB,per)\n    elif MB \u003c= B \u003c GB:\n       return '{0:.2f} MB{1:s}'.format(B/MB,per)\n    elif GB \u003c= B \u003c TB:\n       return '{0:.2f} GB{1:s}'.format(B/GB,per)\n    elif TB \u003c= B:\n       return '{0:.2f} TB{1:s}'.format(B/TB,per)\n\ndef getdir(pid):\n    '''\n    List the contents of a put.io file id\n    '''\n    files = []\n\n    # Check that we are listing a folder\n    r = requests.get(BURL+'/files/%s?oauth_token=%s' %(pid,OAUTH_TOKEN)) \n    if json.loads(str(r.content,encoding='utf-8'))['file']['file_type'] != 'FOLDER':\n        return files\n    # If we are then return a list of files\n    r = requests.get(BURL+'/files/list?parent_id=%s\u0026oauth_token=%s' %(pid,OAUTH_TOKEN))\n    for f in json.loads(str(r.content,encoding='utf-8'))['files']:\n        # Fetch thumbnail icon and convert it to a base64 encoded string\n        f['icon'] = str(base64.b64encode(requests.get(f['icon']).content),encoding='utf-8')\n        files.append(f)\n    return files\n\n###    //     ###\n\n# Print the put.io logo in the menu bar\nprint('|image='+str(b'iVBORw0KGgoAAAANSUhEUgAAABUAAAAVCAYAAACpF6WWAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAAB3RJTUUH4AgFCigacJbY1wAAA6FJREFUOMu9lF1oHFUUgL87s5PNpslmY9BUMNWmaRqSNnW1SNLSmpdKK4it+BBEUPBJEAS1LQVBRKWgBfHFl0LwqVALgg9imiL+QBJsA1WwiTWmbcwvcbPZn+zszu7ce3zY3TEhjfii8zIwZ853v3PuuRf+g0dtFTh8+Ek6Ojvjq6upY8VisUtEokDGcZyJWCw2NHVr6sbIyHf/HvrCiy/1pdKp827OPai1RgQEgcrbsizqIpHRxsbGty5fujj2j9Cenv20tXecSqXT57Tv2wIgsgla/Wbblm5sbDx75/b0R5MTvwQcez30id5Dp1Pp9IdGa0sEnJDimSPNvHLifgaeaqavp4FQyGZ6Lo8xgtbGcvP5ow+0tORv/z41ssn02ZPPH0ylUj9oY2xEiDU4nH+9ld2tlXVFKn8KP00VOfXJDNmcX26HUjoWix0ZHvpqNDB9ZGeb2rat/nPf1zuqZZ577SH2tjmAYLQwt+xRV6uwLdjebLNje5irP6YRBGOM5ft+N8JgJpPGAtjT2RUvlkq9IoKIsK+9lsf3hEGExGqJgbMTnHjjJiffvMnSigcI/fEI7a0O1RzPK/bu3NUeB8rQfD5/XIwEm/BoR22lXGHwy0XuLJRQVoilpOHi138GsXh7CDEGEcGIIee6xwOor3V3dUURob5WAeXExUQJCVqvSGZ0JQaRsOB5hSDP9/3uAKq1jlYDRirGlcQD3dENM9jXEw0WnFlwKeRzGF221VpHAUIARuusshVCGVwtD2DgaBOZnDA+maP/sQaePtQACGuu5ptrScQYvIJLTW0EY0w2gGqtJy3LLpdB1bQ8RrYlvPpcExALRkpE+ODCNOmsD0pRKhUJOTVorSeD8l03d8WI2Wi6zpagHUIqU+L0x79x+epyZcoVSimKXgGvkL8SmE7d+vX6vv3x8VDIOVDtbRVy4Ys5lpNFjDbMLXuM/ZzC9QwoVWEqUArfL43Pzty9vq583+TW1s7UR6PDCmWvh3566Q+yOf/vA7jOrsxUCGjP884YY8yGs59cSdyNRmNWyHH6M2tFHm6x+fZakuGxRAWmKnYVoFIoZYGyKHreewvzs5/d85ZSSlm7dne+E4nUvV1ws5bvl7a0QylEMF6h8P7C/Oy7ImLueUsBklxJfF8TDo+GHGevMfpBpaxNdoLC9/0bbi738tLi/OC6Hd36ki7bWKGm+5r6wuHwMcuyu5SyGoCsETPhed5QMpEYEzE+/9fzF73SG0tTzLiTAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDE2LTA4LTA1VDEwOjQyOjUxKzAyOjAwFs1KTgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAxNi0wOC0wNVQxMDo0MDoyNiswMjowMKwHFVgAAAAASUVORK5CYII=', encoding='utf-8'))\n\n# Everything else goes in menus\nprint('---')\n\ntry:\n    # Get transfers and account info as list objects \n    r = requests.get(BURL+'/transfers/list?oauth_token='+OAUTH_TOKEN)\n    transfers = json.loads(str(r.content,encoding='utf-8'))['transfers']\n    r = requests.get(BURL+'/account/info?oauth_token='+OAUTH_TOKEN)\n    info = json.loads(str(r.content,encoding='utf-8'))['info']\nexcept requests.exceptions.ConnectionError:\n    print('Error connecting to put.io | color=red')\n    sys.exit()\nexcept json.decoder.JSONDecodeError:\n    print('JSON Error: see /tmp/putio.log | color=red')\n    with open('/tmp/putio.log', 'w') as fh:\n        fh.write(str(r.content,encoding='utf-8'))\n    sys.exit()\n\nprint(':arrows_clockwise: Transfers (up/down) :arrows_clockwise: | color=gray')\nfor t in transfers:\n    # Show a lock for locked torrents\n    if t['is_private']:\n        print(':lock:',end='')\n    else:\n        print(':unlock:',end='')\n    status = t['status']\n    # List seeding torrents in green\n    if status == 'SEEDING':\n        print('%s | color=green' % t['name'])\n    # List downloading torrents in blue\n    elif status == 'DOWNLOADING':\n        print('%s | color=blue' % t['name'])\n    # List everything else in black\n    else:\n        print('%s | color=black' % t['name'])\n    # Print any error messages in red\n    if t['error_message']:\n        print('%s | color=red' % t['error_message'])\n    # Print out the up/down data, peers and speeds\n    print('--%s: %s / %s | color=black' % (t['status'].capitalize(),strbytes(t['uploaded']),strbytes(t['downloaded']) ) )\n    print('--Peers: %s / %s | color=black' % (t['peers_getting_from_us'],t['peers_sending_to_us'] ) )\n    print('--Speed: %s / %s | color=black' % (strbytes(t['up_speed'],'/s') ,strbytes(t['down_speed'],'/s') ))\n    # If we are downloading print the ETA and percent complete\n    if status == 'DOWNLOADING':\n        try:\n            print('--ETA: %0.0f min (%s%%) | color=black' % (t['estimated_time']/60,t['percent_done'] ) )\n        except TypeError:\n            print('--ETA: :x:')\n    # Otherwise print the ratio\n    else:\n        print('--Ratio: %s | color=black' % (t['current_ratio']) )\n\n# Make a divider\nprint('\\n---')\n\n# List the files/folders in the root and recurse two levels deep with submenus\nfor root in getdir(0):\n    print('%s (%s) | color=black image=%s href=%s/files/%s' % (root['name'],strbytes(root['size']),root['icon'],PUTIO,root['id']) )\n    for f in getdir(root['id']):\n        print('--%s (%s) | color=black image=%s href=%s/files/%s' % (f['name'],strbytes(f['size']),f['icon'],PUTIO,f['id']) )\n        for sf in getdir(f['id']):\n            print('----%s (%s) | color=black image=%s href=%s/files/%s' % (sf['name'],strbytes(sf['size']),sf['icon'],PUTIO,sf['id']) )\n\n# Make a divider\nprint('\\n---')\n\n# Print disk usage\nprint('Disk: %s / %s | color=black' % (strbytes(info['disk']['used']),strbytes(info['disk']['size']) ) )\n\n# Print a menu of actions\nprint('Actions')\nprint('--Refresh | refresh=true')\nprint('--Go to put.io | href=%s/transfers' % PUTIO)\n# Hit or miss if this works\nprint('--Clean Transfers | refresh=true terminal=false bash=curl param1=\"-s\" param2=\"--data oauth_token=%s\" param3=\"--url %s/transfers/clean\"' %(OAUTH_TOKEN,BURL))\n"
			}
		],
		"path": "Web/putio.5m.py",
		"filename": "putio.5m.py",
		"dir": "Web",
		"docsPlugin": "Web/putio.5m.py.html",
		"docsCategory": "Web.html",
		"pathSegments": [
			"Web"
		],
		"categoryPathSegments": [
			{
				"path": "Web",
				"text": "Web",
				"isLast": true
			}
		],
		"title": "put.io transfers",
		"version": "v1.0",
		"author": "Ryan Chiechi",
		"authors": [
			{
				"name": "Ryan Chiechi",
				"githubUsername": "rchiechi",
				"imageURL": "https://avatars.githubusercontent.com/u/18732092?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Shows put.io transfers and lists files/folders",
		"imageURL": "https://i.imgur.com/L85lfpv.png",
		"dependencies": [
			"Python",
			"Requests"
		],
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:22:10.19965Z",
		"vars": null
	}
}