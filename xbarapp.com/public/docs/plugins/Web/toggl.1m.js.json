{
	"plugin": {
		"files": [
			{
				"path": "Web/toggl.1m.js",
				"filename": "toggl.1m.js",
				"content": "#!/usr/bin/env /usr/local/bin/node\n\n// \u003cbitbar.title\u003eToggl status\u003c/bitbar.title\u003e\n// \u003cbitbar.version\u003ev1.1\u003c/bitbar.version\u003e\n// \u003cbitbar.author\u003eStefan du Fresne\u003c/bitbar.author\u003e\n// \u003cbitbar.author.github\u003eSCdF\u003c/bitbar.author.github\u003e\n// \u003cbitbar.desc\u003eShows hours completed today, hours completed this week.\u003c/bitbar.desc\u003e\n// \u003cbitbar.image\u003ehttps://i.imgur.com/1dlNZLW.png\u003c/bitbar.image\u003e\n// \u003cbitbar.dependencies\u003enode\u003c/bitbar.dependencies\u003e\n\n/*jshint esversion: 6 */\n\nconst fs = require('fs');\n\n// TODO: Add month-long work leveling\n//   You're supposed to work N hours a week, but also N*M hours a month\n//   Take longer / shorter weeks into account all the way to the month\n\n/* jshint -W100 */\nconst AVATARS = {\n  '👶': ['👶', '👶🏻', '👶🏼', '👶🏽', '👶🏾', '👶🏿'],\n  '👦': ['👦', '👦🏻', '👦🏼', '👦🏽', '👦🏾', '👦🏿'],\n  '👧': ['👧', '👧🏻', '👧🏼', '👧🏽', '👧🏾', '👧🏿'],\n  '👨': ['👨', '👨🏻', '👨🏼', '👨🏽', '👨🏾', '👨🏿'],\n  '👩': ['👩', '👩🏻', '👩🏼', '👩🏽', '👩🏾', '👩🏿'],\n  '👱‍♀️': ['👱‍♀️', '👱🏻‍♀️', '👱🏼‍♀️', '👱🏽‍♀️', '👱🏾‍♀️', '👱🏿‍♀️'],\n  '👱': ['👱', '👱🏻', '👱🏼', '👱🏽', '👱🏾', '👱🏿'],\n  '👴': ['👴', '👴🏻', '👴🏼', '👴🏽', '👴🏾', '👴🏿'],\n  '👵': ['👵', '👵🏻', '👵🏼', '👵🏽', '👵🏾', '👵🏿'],\n  '👲': ['👲', '👲🏻', '👲🏼', '👲🏽', '👲🏾', '👲🏿'],\n  '👳‍♀️': ['👳‍♀️', '👳🏻‍♀️', '👳🏼‍♀️', '👳🏽‍♀️', '👳🏾‍♀️', '👳🏿‍♀️'],\n  '👳': ['👳', '👳🏻', '👳🏼', '👳🏽', '👳🏾', '👳🏿'],\n  '👮‍♀️': ['👮‍♀️', '👮🏻‍♀️', '👮🏼‍♀️', '👮🏽‍♀️', '👮🏾‍♀️', '👮🏿‍♀️'],\n  '👮': ['👮', '👮🏻', '👮🏼', '👮🏽', '👮🏾', '👮🏿'],\n  '👷‍♀️': ['👷‍♀️', '👷🏻‍♀️', '👷🏼‍♀️', '👷🏽‍♀️', '👷🏾‍♀️', '👷🏿‍♀️'],\n  '👷': ['👷', '👷🏻', '👷🏼', '👷🏽', '👷🏾', '👷🏿'],\n  '💂‍♀️': ['💂‍♀️', '💂🏻‍♀️', '💂🏼‍♀️', '💂🏽‍♀️', '💂🏾‍♀️', '💂🏿‍♀️'],\n  '💂': ['💂', '💂🏻', '💂🏼', '💂🏽', '💂🏾', '💂🏿'],\n  '🕵️‍♀️': ['🕵️‍♀️', '🕵🏻‍♀️', '🕵🏼‍♀️', '🕵🏽‍♀️', '🕵🏾‍♀️', '🕵🏿‍♀️'],\n  '🕵️': ['🕵️', '🕵🏻', '🕵🏼', '🕵🏽', '🕵🏾', '🕵🏿'],\n  '👩‍⚕️': ['👩‍⚕️', '👩🏻‍⚕️', '👩🏼‍⚕️', '👩🏽‍⚕️', '👩🏾‍⚕️', '👩🏿‍⚕️'],\n  '👨‍⚕️': ['👨‍⚕️', '👨🏻‍⚕️', '👨🏼‍⚕️', '👨🏽‍⚕️', '👨🏾‍⚕️', '👨🏿‍⚕️'],\n  '👩‍🌾': ['👩‍🌾', '👩🏻‍🌾', '👩🏼‍🌾', '👩🏽‍🌾', '👩🏾‍🌾', '👩🏿‍🌾'],\n  '👨‍🌾': ['👨‍🌾', '👨🏻‍🌾', '👨🏼‍🌾', '👨🏽‍🌾', '👨🏾‍🌾', '👨🏿‍🌾'],\n  '👩‍🍳': ['👩‍🍳', '👩🏻‍🍳', '👩🏼‍🍳', '👩🏽‍🍳', '👩🏾‍🍳', '👩🏿‍🍳'],\n  '👨‍🍳': ['👨‍🍳', '👨🏻‍🍳', '👨🏼‍🍳', '👨🏽‍🍳', '👨🏾‍🍳', '👨🏿‍🍳'],\n  '👩‍🎓': ['👩‍🎓', '👩🏻‍🎓', '👩🏼‍🎓', '👩🏽‍🎓', '👩🏾‍🎓', '👩🏿‍🎓'],\n  '👨‍🎓': ['👨‍🎓', '👨🏻‍🎓', '👨🏼‍🎓', '👨🏽‍🎓', '👨🏾‍🎓', '👨🏿‍🎓'],\n  '👩‍🎤': ['👩‍🎤', '👩🏻‍🎤', '👩🏼‍🎤', '👩🏽‍🎤', '👩🏾‍🎤', '👩🏿‍🎤'],\n  '👨‍🎤': ['👨‍🎤', '👨🏻‍🎤', '👨🏼‍🎤', '👨🏽‍🎤', '👨🏾‍🎤', '👨🏿‍🎤'],\n  '👩‍🏫': ['👩‍🏫', '👩🏻‍🏫', '👩🏼‍🏫', '👩🏽‍🏫', '👩🏾‍🏫', '👩🏿‍🏫'],\n  '👨‍🏫': ['👨‍🏫', '👨🏻‍🏫', '👨🏼‍🏫', '👨🏽‍🏫', '👨🏾‍🏫', '👨🏿‍🏫'],\n  '👩‍🏭': ['👩‍🏭', '👩🏻‍🏭', '👩🏼‍🏭', '👩🏽‍🏭', '👩🏾‍🏭', '👩🏿‍🏭'],\n  '👨‍🏭': ['👨‍🏭', '👨🏻‍🏭', '👨🏼‍🏭', '👨🏽‍🏭', '👨🏾‍🏭', '👨🏿‍🏭'],\n  '👩‍💻': ['👩‍💻', '👩🏻‍💻', '👩🏼‍💻', '👩🏽‍💻', '👩🏾‍💻', '👩🏿‍💻'],\n  '👨‍💻': ['👨‍💻', '👨🏻‍💻', '👨🏼‍💻', '👨🏽‍💻', '👨🏾‍💻', '👨🏿‍💻'],\n  '👩‍💼': ['👩‍💼', '👩🏻‍💼', '👩🏼‍💼', '👩🏽‍💼', '👩🏾‍💼', '👩🏿‍💼'],\n  '👨‍💼': ['👨‍💼', '👨🏻‍💼', '👨🏼‍💼', '👨🏽‍💼', '👨🏾‍💼', '👨🏿‍💼'],\n  '👩‍🔧': ['👩‍🔧', '👩🏻‍🔧', '👩🏼‍🔧', '👩🏽‍🔧', '👩🏾‍🔧', '👩🏿‍🔧'],\n  '👨‍🔧': ['👨‍🔧', '👨🏻‍🔧', '👨🏼‍🔧', '👨🏽‍🔧', '👨🏾‍🔧', '👨🏿‍🔧'],\n  '👩‍🔬': ['👩‍🔬', '👩🏻‍🔬', '👩🏼‍🔬', '👩🏽‍🔬', '👩🏾‍🔬', '👩🏿‍🔬'],\n  '👨‍🔬': ['👨‍🔬', '👨🏻‍🔬', '👨🏼‍🔬', '👨🏽‍🔬', '👨🏾‍🔬', '👨🏿‍🔬'],\n  '👩‍🎨': ['👩‍🎨', '👩🏻‍🎨', '👩🏼‍🎨', '👩🏽‍🎨', '👩🏾‍🎨', '👩🏿‍🎨'],\n  '👨‍🎨': ['👨‍🎨', '👨🏻‍🎨', '👨🏼‍🎨', '👨🏽‍🎨', '👨🏾‍🎨', '👨🏿‍🎨'],\n  '👩‍🚒': ['👩‍🚒', '👩🏻‍🚒', '👩🏼‍🚒', '👩🏽‍🚒', '👩🏾‍🚒', '👩🏿‍🚒'],\n  '👨‍🚒': ['👨‍🚒', '👨🏻‍🚒', '👨🏼‍🚒', '👨🏽‍🚒', '👨🏾‍🚒', '👨🏿‍🚒'],\n  '👩‍✈️': ['👩‍✈️', '👩🏻‍✈️', '👩🏼‍✈️', '👩🏽‍✈️', '👩🏾‍✈️', '👩🏿‍✈️'],\n  '👨‍✈️': ['👨‍✈️', '👨🏻‍✈️', '👨🏼‍✈️', '👨🏽‍✈️', '👨🏾‍✈️', '👨🏿‍✈️'],\n  '👩‍🚀': ['👩‍🚀', '👩🏻‍🚀', '👩🏼‍🚀', '👩🏽‍🚀', '👩🏾‍🚀', '👩🏿‍🚀'],\n  '👨‍🚀': ['👨‍🚀', '👨🏻‍🚀', '👨🏼‍🚀', '👨🏽‍🚀', '👨🏾‍🚀', '👨🏿‍🚀'],\n  '👩‍⚖️': ['👩‍⚖️', '👩🏻‍⚖️', '👩🏼‍⚖️', '👩🏽‍⚖️', '👩🏾‍⚖️', '👩🏿‍⚖️'],\n  '👨‍⚖️': ['👨‍⚖️', '👨🏻‍⚖️', '👨🏼‍⚖️', '👨🏽‍⚖️', '👨🏾‍⚖️', '👨🏿‍⚖️'],\n  '🤶': ['🤶', '🤶🏻', '🤶🏼', '🤶🏽', '🤶🏾', '🤶🏿'],\n  '🎅': ['🎅', '🎅🏻', '🎅🏼', '🎅🏽', '🎅🏾', '🎅🏿'],\n  '👸': ['👸', '👸🏻', '👸🏼', '👸🏽', '👸🏾', '👸🏿'],\n  '🤴': ['🤴', '🤴🏻', '🤴🏼', '🤴🏽', '🤴🏾', '🤴🏿'],\n  '👰': ['👰', '👰🏻', '👰🏼', '👰🏽', '👰🏾', '👰🏿'],\n  '🤵 ': ['🤵', '🤵🏻', '🤵🏼', '🤵🏽', '🤵🏾', '🤵🏿']\n};\n/* jshint +W100 */\nconst randomItem = array =\u003e array[Math.floor(Math.random() * array.length)];\nconst randomAvatar = () =\u003e randomItem([].concat(...Object.values(AVATARS)));\n\nconst CONFIG_FILE = `${process.env.HOME}/.toggl.json`;\n\nlet configDirty = false;\nconst config = (() =\u003e {\n  if (fs.existsSync(CONFIG_FILE)) {\n    try {\n      return JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8'));\n    } catch (_) {}\n  }\n\n  // Defaults\n  configDirty = true;\n  return {\n    avatar: randomAvatar(),\n    hoursInDay: 8,\n    daysInWeek: 5,\n    style: 'hours'\n  };\n})();\n\nconst relativeThreshold = 15 * 60; // TODO: configurable?\n\nconst endOutput = () =\u003e {\n  if (configDirty) {\n    fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2));\n  }\n\n  console.log('---');\n  console.log('Refresh | refresh=true');\n  process.exit();\n};\n\nconst badApiToken = wrong =\u003e {\n  console.log(`🚨 ${wrong ? 'provided api token is wrong' : 'token needed'} 🚨`);\n  console.log('---');\n  console.log('🖱 Click here to find your token| href=https://toggl.com/app/profile');\n  console.log('It will be at the bottom of the page|size=12');\n  console.log(`Once you've found your token, copy it (CMD+C)|size=12`);\n  console.log(`🤞 I've copied it 🤞|bash=${process.argv[1]} param1=api_token refresh=true terminal=false `);\n  endOutput();\n};\n\nconst NOW = new Date();\n\nconst unix = date =\u003e Math.round(date.getTime() / 1000);\nconst outputUnix = (unixTime, verbose) =\u003e {\n  const negative = (() =\u003e {if (unixTime \u003c 0) {\n    // TODO: turn red if it's negative\n    unixTime *= -1;\n    return true;\n  }})();\n\n  const fmt = x =\u003e x.toLocaleString(undefined, {minimumIntegerDigits: 2});\n  const hours = Math.floor(unixTime / 60 / 60);\n  const minutes = Math.floor(unixTime / 60) - (hours * 60);\n\n  if (verbose) {\n    return `${negative ? '-' : ''}${hours} hours ${minutes} minutes`;\n  } else {\n    return `${negative ? '-' : ''}${hours}:${fmt(minutes)}`;\n  }\n};\n\n// TODO: alter this so you can pass the considered start day (ie Sunday or Monday)\n//       Might as well be the offset integer, 0 or 1, but in theory could be 0-6\nconst startOfWeek = () =\u003e {\n  const thisWeek = new Date(NOW.getFullYear(), NOW.getMonth(), NOW.getDate() - NOW.getDay());\n  return unix(thisWeek);\n};\n\nconst avatar = () =\u003e config.avatar === 'avatar' ?  randomAvatar() : config.avatar;\n\nconst outputHeader = (timeDay, timeWeek) =\u003e {\n  let daySection; // Output string\n  let dayAmount; // single amount, if possible\n  if (typeof timeDay === 'object') {\n    const max = Math.max(...timeDay);\n    const min = Math.min(...timeDay);\n    if ((max - min) \u003e relativeThreshold) {\n      daySection = `${outputUnix(min)} — ${outputUnix(max)}`;\n    } else {\n      dayAmount = min + Math.round((max - min) / 2);\n      daySection = `${outputUnix(dayAmount)}`;\n    }\n  } else {\n    dayAmount = timeDay;\n    daySection = `${outputUnix(dayAmount)}`;\n  }\n\n  if (dayAmount \u0026\u0026 Math.abs(timeWeek - dayAmount) \u003e relativeThreshold) {\n    console.log(`${avatar()} ${daySection} (${outputUnix(timeWeek)})`);\n  } else {\n    console.log(`${avatar()} ${daySection}`);\n  }\n};\n\nconst displayTimes = me =\u003e {\n  // Calculate times\n  const unixToday = unix(new Date(NOW.getFullYear(), NOW.getMonth(), NOW.getDate()));\n  const completeDay = config.hoursInDay * 60 * 60;\n  const completeWeek = completeDay * config.daysInWeek;\n\n  let full = 0,\n      today = 0;\n  const days = [];\n\n  let currentlyWorking,\n      currentWid,\n      currentPid;\n\n  const timeByWidByPid = {};\n\n  (me.data.time_entries || []).forEach(({start, duration:entryDuration, wid, pid}) =\u003e {\n    // TODO: deal with partial entries that cross over midnight\n    //       (both daily and weekly)\n    // TODO: respect configured start of week in me.beginning_of_week\n    //\n    start = new Date(start);\n\n    let duration;\n    if (entryDuration \u003e 0) {\n      duration = entryDuration;\n    } else {\n      duration = unix(NOW) - unix(start);\n      currentlyWorking = true;\n      currentWid = wid;\n      currentPid = pid;\n    }\n\n    if (!timeByWidByPid[wid]) {\n      timeByWidByPid[wid] = {};\n    }\n    if (!timeByWidByPid[wid][pid]) {\n      timeByWidByPid[wid][pid] = 0;\n    }\n    timeByWidByPid[wid][pid] += duration;\n\n    if (unix(start) \u003e startOfWeek()) {\n      full += duration;\n      let day = start.getDay();\n      const end = new Date(start.getTime() + duration * 1000);\n      if (day === end.getDay()) {\n        days[day] = (days[day] || 0) + duration;\n      } else {\n        // TODO: We want to split a duration over midnights and distribute them to the correct days\n        days[day] = (days[day] || 0) + duration;\n      }\n    }\n\n    if (unix(start) \u003e unixToday) {\n      today += duration;\n    }\n  });\n\n  // Output times\n  if (!currentlyWorking) {\n    process.exit(0);\n  }\n\n  switch(config.style) {\n    case 'hours': {\n      outputHeader(today, full);\n      break;\n    }\n    case 'left': {\n      outputHeader(completeDay - today, completeWeek - full);\n      break;\n    }\n    case 'percentage': {\n      const completeDay = config.hoursInDay * 60 * 60;\n      const completeWeek = completeDay * config.daysInWeek;\n      const dayPercent = Math.round((today / completeDay) * 100);\n      const weekPercent = Math.round((full / completeWeek) * 100);\n      console.log(`${avatar()} ${dayPercent}% (${weekPercent}%)`);\n      break;\n    }\n    case 'relative': {\n      const startOfWeekday = 1; // TODO: support using configured day from /me\n      const todayWeekday = NOW.getDay();\n      const daysLeft = config.daysInWeek - (todayWeekday - startOfWeekday);\n\n      const timeInWeek = config.daysInWeek * config.hoursInDay * 60 * 60;\n\n      const allButTodaysTime = full - today;\n      const allButTodaysTimeLeft = timeInWeek - allButTodaysTime;\n      const timePerDayLeft = Math.round(allButTodaysTimeLeft / daysLeft);\n      const amortisedTimeLeft = timePerDayLeft - today;\n\n      const onTrackTime = (daysLeft - 1) * config.hoursInDay * 60 * 60;\n      const timeOffTrack = allButTodaysTimeLeft - onTrackTime - today;\n      const fullDay = Math.min(completeDay - today, timeInWeek - full);\n\n      outputHeader([amortisedTimeLeft, timeOffTrack, fullDay], timeInWeek - full);\n      break;\n    }\n  }\n\n  // TODO: add end day time, either as its own option, or as a custom estimate\n  //       in the menu.\n  //       I think having it as an option might be a bit more chill, you don't\n  //       see it counting down, just an idea of when knocking off time is\n\n  // Have to filter first before showing length because Monday is idx 1 / length 2\n  if (days.filter(d =\u003e !!d).length \u003e 1) {\n    console.log('---');\n    const dayNames = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];\n    days.forEach((val, day) =\u003e {\n      console.log(`${dayNames[day]}:\\t${outputUnix(val, true)}`);\n    });\n    console.log(`Σ:\\t${outputUnix(full, true)}`);\n    console.log(`T-:\\t${outputUnix(completeWeek - full, true)}`);\n  }\n\n  // TODO: figure out how we want to pull in wids and pid labels, and if it's worth the extra api calls\n  // console.log('---');\n  // console.log(`${currentWid} :: ${currentPid}`);\n  // console.log(outputUnix(timeByWidByPid[currentWid][currentPid], true));\n\n  // TODO: display project summary for the week\n  // TODO: allow muting of a project as it relates to time\n  //       (if you're on a muted project just show emoji but not time)\n  //       (it would still show in this project summary)\n};\n\nconst avatarChoice = () =\u003e {\n  console.log(`Change ${config.avatar}`);\n  console.log(`--((surprise me))|bash=${process.argv[1]} param1=avatar param2=avatar refresh=true terminal=false size=10`);\n  Object.keys(AVATARS).forEach(k =\u003e {\n    console.log(`--${k}|size=32`);\n    AVATARS[k].forEach(v =\u003e {\n      console.log(`----${v}|bash=${process.argv[1]} param1=avatar param2=${v} refresh=true terminal=false size=32`);\n    });\n  });\n};\n\nconst styleChoice = () =\u003e {\n  const current = style =\u003e style === config.style ? '✓ ' : '';\n  const link = style =\u003e `|bash=${process.argv[1]} param1=style param2=${style} refresh=true terminal=false`;\n  console.log('Change reporting style');\n  console.log(`--${current('hours')}Hours complete${link('hours')}`);\n  console.log(`--${current('left')}Hours left${link('left')}`);\n  console.log(`--${current('percentage')}Percentage complete${link('percentage')}`);\n  console.log(`--${current('relative')}Relative weekly goals${link('relative')}`);\n};\n\nconst input = () =\u003e {\n  switch (process.argv[2]) {\n    case 'avatar': {\n      config.avatar = process.argv[3];\n      configDirty = true;\n      break;\n    }\n    case 'api_token': {\n      config.apiToken = require('child_process').execSync('pbpaste').toString();\n      configDirty = true;\n      break;\n    }\n    case 'style': {\n      config.style = process.argv[3];\n      configDirty = true;\n      break;\n    }\n  }\n};\n\nconst output = () =\u003e {\n  require('https').get({\n    hostname: 'toggl.com',\n    // NB: since is \"edited since\", and so isn't really reliable\n    path: `/api/v8/me?with_related_data=true\u0026since=${startOfWeek()}`,\n    auth: `${config.apiToken}:api_token`\n  }, res =\u003e {\n    if (res.statusCode === 403) {\n      badApiToken(true);\n      endOutput();\n    }\n\n    let body = '';\n    res.on('data', data =\u003e body += data);\n    res.on('end', () =\u003e {\n      try {\n        displayTimes(JSON.parse(body));\n        console.log('---');\n        avatarChoice();\n        styleChoice();\n        endOutput();\n      } catch (error) {\n        console.log(':-(');\n        console.log('---');\n        console.log(error);\n        console.log('---');\n        console.log(body);\n        endOutput();\n      }\n    });\n    res.on('error', err =\u003e {\n      console.log(':-(');\n      console.log('---');\n      console.log(err);\n      endOutput();\n    });\n  });\n};\n\ninput();\nif (!config.apiToken) {\n  badApiToken();\n}\noutput();\n"
			}
		],
		"path": "Web/toggl.1m.js",
		"filename": "toggl.1m.js",
		"dir": "Web",
		"docsPlugin": "Web/toggl.1m.js.html",
		"docsCategory": "Web.html",
		"pathSegments": [
			"Web"
		],
		"categoryPathSegments": [
			{
				"path": "Web",
				"text": "Web",
				"isLast": true
			}
		],
		"title": "Toggl status",
		"version": "v1.1",
		"author": "Stefan du Fresne",
		"authors": [
			{
				"name": "Stefan du Fresne",
				"githubUsername": "SCdF",
				"imageURL": "https://avatars.githubusercontent.com/u/583851?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Shows hours completed today, hours completed this week.",
		"imageURL": "https://i.imgur.com/1dlNZLW.png",
		"dependencies": [
			"node"
		],
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:22:10.40311Z",
		"vars": null
	}
}