{
	"plugin": {
		"files": [
			{
				"path": "Web/waniKaniStats.5m.rb",
				"filename": "waniKaniStats.5m.rb",
				"content": "#!/usr/bin/env ruby\n# frozen_string_literal: true\n\n# \u003cbitbar.title\u003eWaniKani Stats\u003c/bitbar.title\u003e\n# \u003cbitbar.version\u003ev0.2.0\u003c/bitbar.version\u003e\n# \u003cbitbar.author\u003eNzebo\u003c/bitbar.author\u003e\n# \u003cbitbar.author.github\u003eNzebo\u003c/bitbar.author.github\u003e\n# \u003cbitbar.desc\u003eDisplays user details \u0026 review + lesson tracking for WaniKani.\u003c/bitbar.desc\u003e\n# \u003cbitbar.image\u003ehttps://i.imgur.com/orRd3Ga.png\u003c/bitbar.image\u003e\n# \u003cbitbar.dependencies\u003eruby\u003c/bitbar.dependencies\u003e\n\nrequire 'net/http'\nrequire 'json'\nrequire 'time'\nrequire 'date'\n\n\n# WaniKani API Token v2 - Retrieved from https://www.wanikani.com/settings/personal_access_tokens\nAPI_TOKEN = ''\n\nCOLORS = {\n  Radicals: '#00AAFF',\n  Kanji: '#FF00AA',\n  Vocabulary: '#7c04b7'\n}.freeze\n\n\n##\n# Base64 encoded icon for the menu\nIMG_BASE64 = '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' \\\n'3z4SPvL0Q+aHsdH8j5ofD31y+dT5Oe7zi7HlX3BfSr+afW39FvLt8Xjm+LiYI+FMtgIoROGUFADeHg' \\\n'SAkgAA7SYAxAVTPfWkQFP/AyYJ/Cee6rsnxQmAmjYAYtcDEOkNwD5EmQhTkTEc0WhvANvbK/SfIk2x' \\\n't5uKRWpGWpOS8fF3SP+IMwPga8/4+Fjz+PjXGqTYhwC0fZjq5SeEehgA7z1Odq5RN4aSh8G/yD8AZG' \\\n'YR7evMlgYAAAAJcEhZcwAAFiUAABYlAUlSJPAAAAILaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8' \\\n'eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA1LjQuMC' \\\n'I+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYt' \\\n'c3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgIC' \\\n'AgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIj4KICAgICAgICAgPHRp' \\\n'ZmY6UmVzb2x1dGlvblVuaXQ+MjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICAgICAgICAgPHRpZmY6Q2' \\\n'9tcHJlc3Npb24+MTwvdGlmZjpDb21wcmVzc2lvbj4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+' \\\n'MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHRpZmY6UGhvdG9tZXRyaWNJbnRlcnByZXRhdG' \\\n'lvbj4yPC90aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0' \\\n'aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgoPRSqTAAAHDklEQVRYCcVYa2hcRRSeu7t5SU' \\\n'NKWwpBLRWLKCLaWkSq/SH6o9o/LaKIaKv+UBGRomiFKoL4QxELoj8MUqUIlaY+QGixVo21Qdoa64PE' \\\n'xBKaamvSxGx3s5ve973H78zj3rvbrKRp1AlnZ+6Z8/jumZkz50YI3YgoZ8bcUzflKaA14O+kMHxE8o' \\\n'jyWZn/fJwFifE1FNFW9EdBRK73qQFE3d3/H1BAkc7Jpsspjj9jaIxPttLUARnJIHqJ+k52yjFRwQD/' \\\n'N3r4zdMANTe0TWH0oYYXoZ+W44NH11AQvCjHxemnNdCWhkYucgJ+LGMC4xZQ7QpiD66XYDiacaxAOu' \\\n'4Q/Tn2hOYT+ENUqSyWYPuoyRic7548bD2XrjR2GbAc8wA0qAH56GM5dvw/yPMnNZ+7gGz/JlbCuNUY' \\\n'mo8e9iyQPMwU0sNAUCTXf9zYxlxB4OC8jAG3ZG/GaIolfxk8ZoOPWRGjxKgxNB897MrIoV8NUi2Mv6' \\\n'Kyv1raB8cAzIKTgsAb6kGZhidWsAKeG2/0OSCGvXRfOs4ybMN7ENHfpF/zE0WP5hDqE9p+XO/HQpO8' \\\n's1NvWSuWDkOvBSyfeewAVGhAeZ6vt6d1eI71cvyMRtKeF24UzS0/CrKWwfqw1i3LPpe7PWcVrP2aGU' \\\n'kFknoSCZ5zYsoriyUfdEmZPSLUMjl2AAobENtiIE0aEAPjlYC4FWmdJDAURFtFc/4TkbMWid9HT0Dq' \\\n'lPQnhDr1tnucc+J3oC2gmpsJwuysIKr2N5Z46jQcteHZQ59nZxhzVBeiy0aO35KpomU41WFoyRcEXz' \\\n'bwOjAIwLfJDzeLQu5VnsA5FlbsV0XZHhcLL2GWwhRGEugPYDigNhiIoVwLuL1wmDXAZxmzRyM0frkt' \\\n'QGUDKYNjwBwlfokzsLVXVKu7oMeZYwHW4gaRi9cKK8eHY5WI4l4obRJN+c14ls2KKRK2f41ozd+iWS' \\\n'oNnp0+zh4s5MgjMMaNI2aaOkijkxtZCTfXpZiQB4lsm2uAwAg27OO4H1nlXcz3gVT20MKxbf8Vnh59' \\\n'EI9lzSKKwpAq1aJ+5tWAVniG9g8vlcApit7Qk47u0wxwZPAqzD8GfglJ62ty/PfJ909qORs9Z416Yj' \\\n'vKkRbUHb/8WTn2vD3kODvMdF1K5AtGZSPX79HRlcu5QStwlGIIKSfT9hgNnHwSvEZOjZ+ZetbxYSwA' \\\n'cTSZ+MUYRD9A3ppJQ2r15CTykGoqaBX3tRSoQ1dAaUoLpEsahg4SvcmzvC3YCNNMwLX6eR2vjtHD5g' \\\n'qOk+huw5JuykjW2EN0VcBYwA3Xp0BRvuEte7Xi+ctfCyzdFhlPMwxZjh2aCGEUfku9ve3sGNvpmNbJ' \\\n'7l2WTQPlhTupe6D2goHidq1ogAK7xDRbYFo96Wr1InrdRIaK5XtTKbnNWDY9yFE0SlPOA4k81wEQUM' \\\n'WAF96nlS90aROfZoAXVEsZxw7Kx12AcG3iNAjuwPL/kviKZQRTkL6/k35Nal++NFS6xEBmfzozfR2M' \\\n'ntMGssuhWbPulFPP66exseUJQKL7cQ72ZqyEWDKz/3HUokEqV+/OyLcS7lPzLKinR1bs1NfXgbTTrw' \\\n'2lBjKWZzmUWyd23R4aHFmOY/ccAA3V6bKMeiHeXra7nXpKfMvJFcZc7b7UEyqiAkWCR59rg8k+rXMw' \\\n'm0ezNwMAVOlIaTGfn82qIYrhYRTja03UMMe1ce3NmJlUFz+/TUxfQJDbxQCFui4PpSn5U5N+8AIOTQ' \\\n'fPk+iSVyQkuBL7568GCKild907k0OQTSnSz6x/TDSNAgPkJeYoFhGISfK8fVQspodLl3wmcI16uVlx' \\\n'Z1yPCvEQCgjOcVxvnr9HGllI+SgbZHGSE374kchb74l8vgQekwcKQC58FNEn2QbPSbnH/IYNb9oJGg' \\\n'FxUxtcjeujo7iNfmN5TSJ2dpHe7ELx27jBxMz7sLGKrPe2YX65iKI+4flfSlncROg5shwF0zhiMWJm' \\\n'5jhKhjgqKpUUmtrEunUSKABx6cgVPVOSE2cdReOZexg4hKsNtVFpA9LE2zReGon5jk8bpyomzq21hy' \\\n'KViRB+XgGTco7RaGWJtn/B0cviM2M2Mi6qzilxYOCYaG2+TDTnBvAVsw+x60L0qpjnr0MmPpW4yviP' \\\n'eJ/9JFx/t/DCg8xHOC0RI/9NlvlTYqXobH8BfC64+QVUtJkxx8Zp4Ubhx+vg/GdhRdtQebvC8d6xFi' \\\n'/cjRiuAry7RBi2i0plTHR0jAqHxkVTdFq0tEwABL+IQNnxEMrvZ7nItWx/BBV6p2huHbKarGfkfOYj' \\\n'bo44UzUAvhn/cNhB03YPTUwkSTiVaDyiEWqlc84rVPI3AfT35FRvo4GJBY015jBTvyzYr1zZXM2m0D' \\\n'ebee5B5mDwVyUTPzO/g6amFmEbr0QVlv0Px7zsT8byN4VTem4z9eg6AAAAAElFTkSuQmCC'\n\n\n# class holding all of the user's WaniKani information\nclass WaniKani\n  def initialize(api_token)\n    @api_token = api_token\n    @reviews = wanikani_api('https://api.wanikani.com/v2/assignments?immediately_available_for_review')\n    @lessons = wanikani_api('https://api.wanikani.com/v2/assignments?immediately_available_for_lessons')\n    @user = wanikani_api('https://api.wanikani.com/v2/user')\n    @summary = wanikani_api('https://api.wanikani.com/v2/summary')\n  end\n\n  # method for making API calls to WaniKani\n  def wanikani_api(resource)\n    uri = URI.parse(resource)\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n    request = Net::HTTP::Get.new uri.request_uri\n    request.add_field('Authorization', \"Token #{API_TOKEN}\")\n    response = http.request(request)\n\n    JSON.parse(response.body)\n  end\n\n  # calculate the next time a review is available\n  def calc_next_review_time\n    next_review_time = Time.parse(@summary['data']['next_reviews_at']).localtime\n\n    if next_review_time \u003c Time.now.localtime\n      ' Now! | href = https://www.wanikani.com/'\n    else\n      next_review_time.strftime(' %l %p')\n    end\n\n  end\n\n  # calculates the details (such as # of items per category) for assignments\n  def calc_assignment_details(type)\n    assignment_details = {\n        Radicals: 0,\n        Kanji: 0,\n        Vocabulary: 0\n    }\n\n    if type == 'reviews'\n      next_review_time = Time.parse(@summary['data']['next_reviews_at']) + 1\n      next_review_time = next_review_time.to_datetime.rfc3339.to_s.gsub(/\\+[0-9:]+/, 'Z')\n\n      now = Time.now.utc.to_datetime.rfc3339.gsub(/\\+[0-9:]+/, 'Z')\n\n      if next_review_time \u003e now\n        assignment_data = wanikani_api(\"https://api.wanikani.com/v2/assignments?available_after=#{now}\u0026available_before=#{next_review_time}\")\n      else\n        assignment_data = @reviews\n      end\n    elsif type == 'lessons'\n      assignment_data = @lessons\n    end\n\n\n\n    assignment_data['data'].each do |assignment|\n      case assignment['data']['subject_type']\n      when 'radical'\n        assignment_details[:Radicals] += 1\n      when 'kanji'\n        assignment_details[:Kanji] += 1\n      when 'vocabulary'\n        assignment_details[:Vocabulary] += 1\n      else\n        puts \"Unknown assignment type: #{assignment['data']['subject_type']}\"\n      end\n\n    end\n\n    assignment_details\n\n  end\n\n  # calculate how long the user has been on their current level\n  def calc_level_duration\n\n    level_data = wanikani_api('https://api.wanikani.com/v2/level_progressions')\n\n    if level_data['data'][level_data['data'].length - 1]['data']['started_at'].nil?\n      return 0\n    end\n\n    level_start_time = Time.parse(level_data['data'][level_data['data'].length - 1]['data']['started_at'])\n\n    now = Time.now\n\n    ((now - level_start_time) / 3600 / 24).round(2)\n\n  end\n\n  # calculate the percentages of each category for the current level\n  def calc_level_percentage\n\n    subject_items = []\n    totals = {\n      Radical: {\n        total: 0,\n        passed: 0,\n        items: []\n      },\n      Kanji: {\n        total: 0,\n        passed: 0,\n        items: []\n      },\n      Vocabulary: {\n        total: 0,\n        passed: 0,\n        items: []\n      }\n    }\n\n    level_subject_data = wanikani_api(\"https://api.wanikani.com/v2/assignments?levels=#{@user['data']['level']}\")\n\n    reset_time = Time.parse(latest_reset)\n\n    level_subject_data['data'].each do |assignment|\n\n      start_time = assignment['data']['started_at']\n\n      if start_time.nil?\n        totals[assignment['data']['subject_type'].capitalize.to_sym][:total] += 1\n        next\n      end\n\n      next if Time.parse(start_time) \u003c reset_time\n\n      totals[assignment['data']['subject_type'].capitalize.to_sym][:total] += 1\n      subject_items.push(\n        id: assignment['data']['subject_id'],\n        type: assignment['data']['subject_type'].capitalize,\n        character: '',\n        srs_stage: assignment['data']['srs_stage_name'],\n        srs_stage_id: assignment['data']['srs_stage'],\n        document_url: ''\n      )\n\n      if assignment['data']['passed']\n        totals[assignment['data']['subject_type'].capitalize.to_sym][:passed] += 1\n      end\n\n    end\n\n    totals = get_assignment_subjects(totals, subject_items)\n\n    totals\n\n  end\n\n  # get subjects data using the provided subject IDs\n  def get_assignment_subjects(subject_items, subject_items_array)\n\n    subject_data = wanikani_api(\"https://api.wanikani.com/v2/subjects?ids=#{subject_items_array.map{|item| item[:id]}.join(',')}\")\n\n\n    subject_items_array.each_with_index do |item, idx|\n\n      match = subject_data['data'].find { |subject| subject['id'] == item[:id] }\n\n      subject_items_array[idx][:character] = match['data']['characters']\n      subject_items_array[idx][:document_url] = match['data']['document_url']\n\n      subject_items[match['object'].capitalize.to_sym][:items].push(subject_items_array[idx])\n\n    end\n\n    subject_items\n\n  end\n\n  def latest_reset\n\n    reset_data = wanikani_api(\"https://api.wanikani.com/v2/resets\")\n\n    latest_reset_time = ''\n\n    unless reset_data['data'].empty?\n      latest_reset = reset_data['data'][reset_data['data'].length - 1]\n\n      latest_reset_time = Time.parse(latest_reset['data']['created_at']).to_s\n\n    end\n\n    latest_reset_time\n  end\n\n  # print all of the data to stdout for bitbar\n  def print_data\n    if API_TOKEN == ''\n      puts 'ERROR'\n      puts '---'\n      puts 'Please edit the plugin script and add your WaniKani API token to the API_TOKEN variable at the top'\n      return\n    end\n    puts \"L: #{@lessons['total_count']} R: #{@reviews['total_count']}\"\n    puts '---'\n    puts \"  WaniKani Stats | size=14 color=#BFBFBF trim=false image=#{IMG_BASE64}\"\n    puts \"---\"\n    puts 'User Profile | size=12 color=#BFBFBF'\n    puts \"#{@user['data']['username']} - Level: #{@user['data']['level']}\"\n    puts \"Level duration: #{calc_level_duration} days\"\n    puts '---'\n    puts 'Current Level Progress | size=12 color=#BFBFBF'\n    level_percentage = calc_level_percentage\n    unless level_percentage == 0\n      level_percentage.each do |key, val|\n        puts \"#{key} [#{val[:passed]}/#{val[:total]}] - #{((val[:passed].to_f / val[:total].to_f) * 100).round(0)}%\"\n\n        header = ''\n        level_percentage[key.to_sym][:items].sort_by!{|obj| obj[:srs_stage_id]}.each do |item|\n          if item[:srs_stage] != header\n            header = item[:srs_stage]\n            color = if header.include? 'Apprentice'\n                      '#FF00AA'\n                    elsif header.include? 'Guru'\n                      '#7c04b7'\n                    else\n                      '#BFBFBF'\n                    end\n            puts \"-- #{header} | size=12 color=#{color}\"\n          end\n          if !item[:character].nil?\n            puts \"--  #{item[:character]} | href=#{item[:document_url]}\"\n          else\n            puts \"--  Non UTF-8 character | href=#{item[:document_url]}\"\n          end\n        end\n\n      end\n    end\n    puts '---'\n    puts 'Lessons | size=12 color=#BFBFBF'\n    calc_assignment_details('lessons').each do |key, val|\n      puts \"#{key}: #{val} | color=#{COLORS[key]}\"\n    end\n    puts '---'\n    puts 'Reviews | size=12 color=#BFBFBF'\n    puts \"Next reviews:#{calc_next_review_time}\"\n    calc_assignment_details('reviews').each do |key, val|\n      puts \"#{key}: #{val} | color=#{COLORS[key]}\"\n    end\n\n  end\nend\n\nw = WaniKani.new(API_TOKEN)\nw.print_data\n"
			}
		],
		"path": "Web/waniKaniStats.5m.rb",
		"filename": "waniKaniStats.5m.rb",
		"dir": "Web",
		"docsPlugin": "Web/waniKaniStats.5m.rb.html",
		"docsCategory": "Web.html",
		"pathSegments": [
			"Web"
		],
		"categoryPathSegments": [
			{
				"path": "Web",
				"text": "Web",
				"isLast": true
			}
		],
		"title": "WaniKani Stats",
		"version": "v0.2.0",
		"author": "Nzebo",
		"authors": [
			{
				"name": "Nathan Zebrowski",
				"githubUsername": "Nzebo",
				"imageURL": "https://avatars.githubusercontent.com/u/8963325?v=4",
				"bio": "",
				"primary": true
			}
		],
		"desc": "Displays user details \u0026 review + lesson tracking for WaniKani.",
		"imageURL": "https://i.imgur.com/orRd3Ga.png",
		"dependencies": [
			"ruby"
		],
		"aboutURL": "",
		"lastUpdated": "2021-03-08T15:22:10.475767Z",
		"vars": null
	}
}